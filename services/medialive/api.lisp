;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/medialive/api (:use)
                             (:nicknames #:aws/medialive)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/medialive/api)
(common-lisp:progn
 (common-lisp:define-condition medialive-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'medialive-error))
(common-lisp:progn
 (common-lisp:defclass medialive-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "medialive" :api-version
                        "2017-10-14" :host-prefix "medialive" :signing-name
                        "medialive" :global-host common-lisp:nil))
 (common-lisp:export 'medialive-request))
(common-lisp:defvar *error-map*
  '(("BadGatewayException" . bad-gateway-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("GatewayTimeoutException" . gateway-timeout-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)))
(common-lisp:deftype aac-coding-mode () 'common-lisp:string)
(common-lisp:deftype aac-input-type () 'common-lisp:string)
(common-lisp:deftype aac-profile () 'common-lisp:string)
(common-lisp:deftype aac-rate-control-mode () 'common-lisp:string)
(common-lisp:deftype aac-raw-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aac-settings common-lisp:nil
                       ((bitrate :initarg :bitrate :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-aac-settings-bitrate :shape
                         "__double" :location common-lisp:nil :location-name
                         "bitrate")
                        (coding-mode :initarg :coding-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or aac-coding-mode common-lisp:null)
                         :accessor struct-shape-aac-settings-coding-mode :shape
                         "AacCodingMode" :location common-lisp:nil
                         :location-name "codingMode")
                        (input-type :initarg :input-type :initform
                         common-lisp:nil :type
                         (common-lisp:or aac-input-type common-lisp:null)
                         :accessor struct-shape-aac-settings-input-type :shape
                         "AacInputType" :location common-lisp:nil
                         :location-name "inputType")
                        (profile :initarg :profile :initform common-lisp:nil
                         :type (common-lisp:or aac-profile common-lisp:null)
                         :accessor struct-shape-aac-settings-profile :shape
                         "AacProfile" :location common-lisp:nil :location-name
                         "profile")
                        (rate-control-mode :initarg :rate-control-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or aac-rate-control-mode
                                         common-lisp:null)
                         :accessor struct-shape-aac-settings-rate-control-mode
                         :shape "AacRateControlMode" :location common-lisp:nil
                         :location-name "rateControlMode")
                        (raw-format :initarg :raw-format :initform
                         common-lisp:nil :type
                         (common-lisp:or aac-raw-format common-lisp:null)
                         :accessor struct-shape-aac-settings-raw-format :shape
                         "AacRawFormat" :location common-lisp:nil
                         :location-name "rawFormat")
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-aac-settings-sample-rate :shape
                         "__double" :location common-lisp:nil :location-name
                         "sampleRate")
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or aac-spec common-lisp:null) :accessor
                         struct-shape-aac-settings-spec :shape "AacSpec"
                         :location common-lisp:nil :location-name "spec")
                        (vbr-quality :initarg :vbr-quality :initform
                         common-lisp:nil :type
                         (common-lisp:or aac-vbr-quality common-lisp:null)
                         :accessor struct-shape-aac-settings-vbr-quality :shape
                         "AacVbrQuality" :location common-lisp:nil
                         :location-name "vbrQuality"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aac-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aac-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'aac-settings 'make-aac-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-format))
      (common-lisp:list
       (common-lisp:cons "RawFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "Spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vbr-quality))
      (common-lisp:list
       (common-lisp:cons "VbrQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aac-settings))
   common-lisp:nil))
(common-lisp:deftype aac-spec () 'common-lisp:string)
(common-lisp:deftype aac-vbr-quality () 'common-lisp:string)
(common-lisp:deftype ac3attenuation-control () 'common-lisp:string)
(common-lisp:deftype ac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype ac3coding-mode () 'common-lisp:string)
(common-lisp:deftype ac3drc-profile () 'common-lisp:string)
(common-lisp:deftype ac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype ac3metadata-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ac3settings common-lisp:nil
                       ((bitrate :initarg :bitrate :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-ac3settings-bitrate :shape
                         "__double" :location common-lisp:nil :location-name
                         "bitrate")
                        (bitstream-mode :initarg :bitstream-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or ac3bitstream-mode common-lisp:null)
                         :accessor struct-shape-ac3settings-bitstream-mode
                         :shape "Ac3BitstreamMode" :location common-lisp:nil
                         :location-name "bitstreamMode")
                        (coding-mode :initarg :coding-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or ac3coding-mode common-lisp:null)
                         :accessor struct-shape-ac3settings-coding-mode :shape
                         "Ac3CodingMode" :location common-lisp:nil
                         :location-name "codingMode")
                        (dialnorm :initarg :dialnorm :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor struct-shape-ac3settings-dialnorm :shape
                         "__integerMin1Max31" :location common-lisp:nil
                         :location-name "dialnorm")
                        (drc-profile :initarg :drc-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or ac3drc-profile common-lisp:null)
                         :accessor struct-shape-ac3settings-drc-profile :shape
                         "Ac3DrcProfile" :location common-lisp:nil
                         :location-name "drcProfile")
                        (lfe-filter :initarg :lfe-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or ac3lfe-filter common-lisp:null)
                         :accessor struct-shape-ac3settings-lfe-filter :shape
                         "Ac3LfeFilter" :location common-lisp:nil
                         :location-name "lfeFilter")
                        (metadata-control :initarg :metadata-control :initform
                         common-lisp:nil :type
                         (common-lisp:or ac3metadata-control common-lisp:null)
                         :accessor struct-shape-ac3settings-metadata-control
                         :shape "Ac3MetadataControl" :location common-lisp:nil
                         :location-name "metadataControl")
                        (attenuation-control :initarg :attenuation-control
                         :initform common-lisp:nil :type
                         (common-lisp:or ac3attenuation-control
                                         common-lisp:null)
                         :accessor struct-shape-ac3settings-attenuation-control
                         :shape "Ac3AttenuationControl" :location
                         common-lisp:nil :location-name "attenuationControl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ac3settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ac3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ac3settings 'make-ac3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-profile))
      (common-lisp:list
       (common-lisp:cons "DrcProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attenuation-control))
      (common-lisp:list
       (common-lisp:cons "AttenuationControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ac3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-input-device-transfer-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-accept-input-device-transfer-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-input-device-transfer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-input-device-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-input-device-transfer-request
                    'make-accept-input-device-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-input-device-transfer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-input-device-transfer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-input-device-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-input-device-transfer-response
                    'make-accept-input-device-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-denied common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-access-denied-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-denied
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-denied
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-denied 'make-access-denied))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-denied))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-denied))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-denied))
   common-lisp:nil))
(common-lisp:deftype accessibility-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-account-configuration-kms-key-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "kmsKeyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-configuration 'make-account-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-configuration))
   common-lisp:nil))
(common-lisp:deftype afd-signaling () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ancillary-source-settings common-lisp:nil
                       ((source-ancillary-channel-number :initarg
                         :source-ancillary-channel-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         struct-shape-ancillary-source-settings-source-ancillary-channel-number
                         :shape "__integerMin1Max4" :location common-lisp:nil
                         :location-name "sourceAncillaryChannelNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ancillary-source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ancillary-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ancillary-source-settings
                    'make-ancillary-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-ancillary-channel-number))
      (common-lisp:list
       (common-lisp:cons "SourceAncillaryChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-cdn-settings common-lisp:nil
                       ((archive-s3settings :initarg :archive-s3settings
                         :initform common-lisp:nil :type
                         (common-lisp:or archive-s3settings common-lisp:null)
                         :accessor
                         struct-shape-archive-cdn-settings-archive-s3settings
                         :shape "ArchiveS3Settings" :location common-lisp:nil
                         :location-name "archiveS3Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-cdn-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-cdn-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-cdn-settings 'make-archive-cdn-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-s3settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-container-settings common-lisp:nil
                       ((m2ts-settings :initarg :m2ts-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-settings common-lisp:null)
                         :accessor
                         struct-shape-archive-container-settings-m2ts-settings
                         :shape "M2tsSettings" :location common-lisp:nil
                         :location-name "m2tsSettings")
                        (raw-settings :initarg :raw-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or raw-settings common-lisp:null)
                         :accessor
                         struct-shape-archive-container-settings-raw-settings
                         :shape "RawSettings" :location common-lisp:nil
                         :location-name "rawSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-container-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-container-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-container-settings
                    'make-archive-container-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-settings))
      (common-lisp:list
       (common-lisp:cons "RawSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-group-settings common-lisp:nil
                       ((archive-cdn-settings :initarg :archive-cdn-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or archive-cdn-settings common-lisp:null)
                         :accessor
                         struct-shape-archive-group-settings-archive-cdn-settings
                         :shape "ArchiveCdnSettings" :location common-lisp:nil
                         :location-name "archiveCdnSettings")
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor
                         struct-shape-archive-group-settings-destination :shape
                         "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination")
                        (rollover-interval :initarg :rollover-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-archive-group-settings-rollover-interval
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "rolloverInterval"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-group-settings 'make-archive-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollover-interval))
      (common-lisp:list
       (common-lisp:cons "RolloverInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-output-settings common-lisp:nil
                       ((container-settings :initarg :container-settings
                         :initform
                         (common-lisp:error ":container-settings is required")
                         :type
                         (common-lisp:or archive-container-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-archive-output-settings-container-settings
                         :shape "ArchiveContainerSettings" :location
                         common-lisp:nil :location-name "containerSettings")
                        (extension :initarg :extension :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-archive-output-settings-extension :shape
                         "__string" :location common-lisp:nil :location-name
                         "extension")
                        (name-modifier :initarg :name-modifier :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-archive-output-settings-name-modifier
                         :shape "__string" :location common-lisp:nil
                         :location-name "nameModifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-output-settings 'make-archive-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "Extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   common-lisp:nil))
(common-lisp:deftype archive-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass archive-s3settings common-lisp:nil
                       ((canned-acl :initarg :canned-acl :initform
                         common-lisp:nil :type
                         (common-lisp:or s3canned-acl common-lisp:null)
                         :accessor struct-shape-archive-s3settings-canned-acl
                         :shape "S3CannedAcl" :location common-lisp:nil
                         :location-name "cannedAcl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-s3settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-s3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-s3settings 'make-archive-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arib-destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-arib-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'arib-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'arib-destination-settings
                    'make-arib-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arib-source-settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-arib-source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'arib-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'arib-source-settings 'make-arib-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arib-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arib-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arib-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-channel-mapping common-lisp:nil
                       ((input-channel-levels :initarg :input-channel-levels
                         :initform
                         (common-lisp:error
                          ":input-channel-levels is required")
                         :type
                         (common-lisp:or |__listOfInputChannelLevel|
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-channel-mapping-input-channel-levels
                         :shape "__listOfInputChannelLevel" :location
                         common-lisp:nil :location-name "inputChannelLevels")
                        (output-channel :initarg :output-channel :initform
                         (common-lisp:error ":output-channel is required")
                         :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         struct-shape-audio-channel-mapping-output-channel
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "outputChannel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-channel-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-channel-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-channel-mapping 'make-audio-channel-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-channel-levels))
      (common-lisp:list
       (common-lisp:cons "InputChannelLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-channel))
      (common-lisp:list
       (common-lisp:cons "OutputChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-codec-settings common-lisp:nil
                       ((aac-settings :initarg :aac-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or aac-settings common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-aac-settings :shape
                         "AacSettings" :location common-lisp:nil :location-name
                         "aacSettings")
                        (ac3settings :initarg :ac3settings :initform
                         common-lisp:nil :type
                         (common-lisp:or ac3settings common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-ac3settings :shape
                         "Ac3Settings" :location common-lisp:nil :location-name
                         "ac3Settings")
                        (eac3atmos-settings :initarg :eac3atmos-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or eac3atmos-settings common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-eac3atmos-settings
                         :shape "Eac3AtmosSettings" :location common-lisp:nil
                         :location-name "eac3AtmosSettings")
                        (eac3settings :initarg :eac3settings :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3settings common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-eac3settings :shape
                         "Eac3Settings" :location common-lisp:nil
                         :location-name "eac3Settings")
                        (mp2settings :initarg :mp2settings :initform
                         common-lisp:nil :type
                         (common-lisp:or mp2settings common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-mp2settings :shape
                         "Mp2Settings" :location common-lisp:nil :location-name
                         "mp2Settings")
                        (pass-through-settings :initarg :pass-through-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or pass-through-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-pass-through-settings
                         :shape "PassThroughSettings" :location common-lisp:nil
                         :location-name "passThroughSettings")
                        (wav-settings :initarg :wav-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or wav-settings common-lisp:null)
                         :accessor
                         struct-shape-audio-codec-settings-wav-settings :shape
                         "WavSettings" :location common-lisp:nil :location-name
                         "wavSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-codec-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-codec-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-codec-settings 'make-audio-codec-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aac-settings))
      (common-lisp:list
       (common-lisp:cons "AacSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ac3settings))
      (common-lisp:list
       (common-lisp:cons "Ac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3atmos-settings))
      (common-lisp:list
       (common-lisp:cons "Eac3AtmosSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3settings))
      (common-lisp:list
       (common-lisp:cons "Eac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp2settings))
      (common-lisp:list
       (common-lisp:cons "Mp2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pass-through-settings))
      (common-lisp:list
       (common-lisp:cons "PassThroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wav-settings))
      (common-lisp:list
       (common-lisp:cons "WavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-description common-lisp:nil
                       ((audio-normalization-settings :initarg
                         :audio-normalization-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-normalization-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-description-audio-normalization-settings
                         :shape "AudioNormalizationSettings" :location
                         common-lisp:nil :location-name
                         "audioNormalizationSettings")
                        (audio-selector-name :initarg :audio-selector-name
                         :initform
                         (common-lisp:error ":audio-selector-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-audio-description-audio-selector-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "audioSelectorName")
                        (audio-type :initarg :audio-type :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-type common-lisp:null) :accessor
                         struct-shape-audio-description-audio-type :shape
                         "AudioType" :location common-lisp:nil :location-name
                         "audioType")
                        (audio-type-control :initarg :audio-type-control
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-description-audio-type-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-description-audio-type-control
                         :shape "AudioDescriptionAudioTypeControl" :location
                         common-lisp:nil :location-name "audioTypeControl")
                        (audio-watermarking-settings :initarg
                         :audio-watermarking-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or audio-watermark-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-description-audio-watermarking-settings
                         :shape "AudioWatermarkSettings" :location
                         common-lisp:nil :location-name
                         "audioWatermarkingSettings")
                        (codec-settings :initarg :codec-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-codec-settings common-lisp:null)
                         :accessor
                         struct-shape-audio-description-codec-settings :shape
                         "AudioCodecSettings" :location common-lisp:nil
                         :location-name "codecSettings")
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1Max35| common-lisp:null)
                         :accessor struct-shape-audio-description-language-code
                         :shape "__stringMin1Max35" :location common-lisp:nil
                         :location-name "languageCode")
                        (language-code-control :initarg :language-code-control
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          audio-description-language-code-control
                          common-lisp:null)
                         :accessor
                         struct-shape-audio-description-language-code-control
                         :shape "AudioDescriptionLanguageCodeControl" :location
                         common-lisp:nil :location-name "languageCodeControl")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__stringMax255| common-lisp:null)
                         :accessor struct-shape-audio-description-name :shape
                         "__stringMax255" :location common-lisp:nil
                         :location-name "name")
                        (remix-settings :initarg :remix-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or remix-settings common-lisp:null)
                         :accessor
                         struct-shape-audio-description-remix-settings :shape
                         "RemixSettings" :location common-lisp:nil
                         :location-name "remixSettings")
                        (stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-audio-description-stream-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "streamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-description 'make-audio-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-normalization-settings))
      (common-lisp:list
       (common-lisp:cons "AudioNormalizationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selector-name))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type))
      (common-lisp:list
       (common-lisp:cons "AudioType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type-control))
      (common-lisp:list
       (common-lisp:cons "AudioTypeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-watermarking-settings))
      (common-lisp:list
       (common-lisp:cons "AudioWatermarkingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-code-control))
      (common-lisp:list
       (common-lisp:cons "LanguageCodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remix-settings))
      (common-lisp:list
       (common-lisp:cons "RemixSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-description))
   common-lisp:nil))
(common-lisp:deftype audio-description-audio-type-control ()
  'common-lisp:string)
(common-lisp:deftype audio-description-language-code-control ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-dolby-edecode common-lisp:nil
                       ((program-selection :initarg :program-selection
                         :initform
                         (common-lisp:error ":program-selection is required")
                         :type
                         (common-lisp:or dolby-eprogram-selection
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-dolby-edecode-program-selection
                         :shape "DolbyEProgramSelection" :location
                         common-lisp:nil :location-name "programSelection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-dolby-edecode
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-dolby-edecode
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-dolby-edecode 'make-audio-dolby-edecode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-selection))
      (common-lisp:list
       (common-lisp:cons "ProgramSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-hls-rendition-selection common-lisp:nil
                       ((group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-audio-hls-rendition-selection-group-id
                         :shape "__stringMin1" :location common-lisp:nil
                         :location-name "groupId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-audio-hls-rendition-selection-name :shape
                         "__stringMin1" :location common-lisp:nil
                         :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-hls-rendition-selection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-hls-rendition-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-hls-rendition-selection
                    'make-audio-hls-rendition-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-language-selection common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-audio-language-selection-language-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "languageCode")
                        (language-selection-policy :initarg
                         :language-selection-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or audio-language-selection-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-language-selection-language-selection-policy
                         :shape "AudioLanguageSelectionPolicy" :location
                         common-lisp:nil :location-name
                         "languageSelectionPolicy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-language-selection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-language-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-language-selection 'make-audio-language-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-selection-policy))
      (common-lisp:list
       (common-lisp:cons "LanguageSelectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   common-lisp:nil))
(common-lisp:deftype audio-language-selection-policy () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm-control ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-normalization-settings common-lisp:nil
                       ((algorithm :initarg :algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-normalization-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-normalization-settings-algorithm
                         :shape "AudioNormalizationAlgorithm" :location
                         common-lisp:nil :location-name "algorithm")
                        (algorithm-control :initarg :algorithm-control
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-normalization-algorithm-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-normalization-settings-algorithm-control
                         :shape "AudioNormalizationAlgorithmControl" :location
                         common-lisp:nil :location-name "algorithmControl")
                        (target-lkfs :initarg :target-lkfs :initform
                         common-lisp:nil :type
                         (common-lisp:or |__doubleMinNegative59Max0|
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-normalization-settings-target-lkfs
                         :shape "__doubleMinNegative59Max0" :location
                         common-lisp:nil :location-name "targetLkfs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-normalization-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-normalization-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-normalization-settings
                    'make-audio-normalization-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-control))
      (common-lisp:list
       (common-lisp:cons "AlgorithmControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-lkfs))
      (common-lisp:list
       (common-lisp:cons "TargetLkfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   common-lisp:nil))
(common-lisp:deftype audio-only-hls-segment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-only-hls-settings common-lisp:nil
                       ((audio-group-id :initarg :audio-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-audio-only-hls-settings-audio-group-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "audioGroupId")
                        (audio-only-image :initarg :audio-only-image :initform
                         common-lisp:nil :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-audio-only-hls-settings-audio-only-image
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "audioOnlyImage")
                        (audio-track-type :initarg :audio-track-type :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-only-hls-track-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-only-hls-settings-audio-track-type
                         :shape "AudioOnlyHlsTrackType" :location
                         common-lisp:nil :location-name "audioTrackType")
                        (segment-type :initarg :segment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-only-hls-segment-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-only-hls-settings-segment-type
                         :shape "AudioOnlyHlsSegmentType" :location
                         common-lisp:nil :location-name "segmentType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-only-hls-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-only-hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-only-hls-settings 'make-audio-only-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-group-id))
      (common-lisp:list
       (common-lisp:cons "AudioGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-only-image))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-track-type))
      (common-lisp:list
       (common-lisp:cons "AudioTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-type))
      (common-lisp:list
       (common-lisp:cons "SegmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   common-lisp:nil))
(common-lisp:deftype audio-only-hls-track-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-pid-selection common-lisp:nil
                       ((pid :initarg :pid :initform
                         (common-lisp:error ":pid is required") :type
                         (common-lisp:or |__integerMin0Max8191|
                                         common-lisp:null)
                         :accessor struct-shape-audio-pid-selection-pid :shape
                         "__integerMin0Max8191" :location common-lisp:nil
                         :location-name "pid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-pid-selection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-pid-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-pid-selection 'make-audio-pid-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-selector common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor struct-shape-audio-selector-name :shape
                         "__stringMin1" :location common-lisp:nil
                         :location-name "name")
                        (selector-settings :initarg :selector-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-selector-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-selector-selector-settings :shape
                         "AudioSelectorSettings" :location common-lisp:nil
                         :location-name "selectorSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio-selector 'make-audio-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-selector-settings common-lisp:nil
                       ((audio-hls-rendition-selection :initarg
                         :audio-hls-rendition-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-hls-rendition-selection
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-selector-settings-audio-hls-rendition-selection
                         :shape "AudioHlsRenditionSelection" :location
                         common-lisp:nil :location-name
                         "audioHlsRenditionSelection")
                        (audio-language-selection :initarg
                         :audio-language-selection :initform common-lisp:nil
                         :type
                         (common-lisp:or audio-language-selection
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-selector-settings-audio-language-selection
                         :shape "AudioLanguageSelection" :location
                         common-lisp:nil :location-name
                         "audioLanguageSelection")
                        (audio-pid-selection :initarg :audio-pid-selection
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-pid-selection common-lisp:null)
                         :accessor
                         struct-shape-audio-selector-settings-audio-pid-selection
                         :shape "AudioPidSelection" :location common-lisp:nil
                         :location-name "audioPidSelection")
                        (audio-track-selection :initarg :audio-track-selection
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-track-selection
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-selector-settings-audio-track-selection
                         :shape "AudioTrackSelection" :location common-lisp:nil
                         :location-name "audioTrackSelection"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-selector-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-selector-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-selector-settings 'make-audio-selector-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-hls-rendition-selection))
      (common-lisp:list
       (common-lisp:cons "AudioHlsRenditionSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-language-selection))
      (common-lisp:list
       (common-lisp:cons "AudioLanguageSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pid-selection))
      (common-lisp:list
       (common-lisp:cons "AudioPidSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-track-selection))
      (common-lisp:list
       (common-lisp:cons "AudioTrackSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-silence-failover-settings common-lisp:nil
                       ((audio-selector-name :initarg :audio-selector-name
                         :initform
                         (common-lisp:error ":audio-selector-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-audio-silence-failover-settings-audio-selector-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "audioSelectorName")
                        (audio-silence-threshold-msec :initarg
                         :audio-silence-threshold-msec :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor
                         struct-shape-audio-silence-failover-settings-audio-silence-threshold-msec
                         :shape "__integerMin1000" :location common-lisp:nil
                         :location-name "audioSilenceThresholdMsec"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-silence-failover-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-silence-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-silence-failover-settings
                    'make-audio-silence-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selector-name))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-silence-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "AudioSilenceThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-track common-lisp:nil
                       ((track :initarg :track :initform
                         (common-lisp:error ":track is required") :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-audio-track-track :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "track"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-track
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-track
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio-track 'make-audio-track))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-track))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-track))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'track))
      (common-lisp:list
       (common-lisp:cons "Track"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-track))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-track-selection common-lisp:nil
                       ((tracks :initarg :tracks :initform
                         (common-lisp:error ":tracks is required") :type
                         (common-lisp:or |__listOfAudioTrack| common-lisp:null)
                         :accessor struct-shape-audio-track-selection-tracks
                         :shape "__listOfAudioTrack" :location common-lisp:nil
                         :location-name "tracks")
                        (dolby-edecode :initarg :dolby-edecode :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-dolby-edecode common-lisp:null)
                         :accessor
                         struct-shape-audio-track-selection-dolby-edecode
                         :shape "AudioDolbyEDecode" :location common-lisp:nil
                         :location-name "dolbyEDecode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-track-selection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-track-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-track-selection 'make-audio-track-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracks))
      (common-lisp:list
       (common-lisp:cons "Tracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dolby-edecode))
      (common-lisp:list
       (common-lisp:cons "DolbyEDecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   common-lisp:nil))
(common-lisp:deftype audio-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-watermark-settings common-lisp:nil
                       ((nielsen-watermarks-settings :initarg
                         :nielsen-watermarks-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or nielsen-watermarks-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-watermark-settings-nielsen-watermarks-settings
                         :shape "NielsenWatermarksSettings" :location
                         common-lisp:nil :location-name
                         "nielsenWatermarksSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-watermark-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-watermark-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-watermark-settings 'make-audio-watermark-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-watermarks-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenWatermarksSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   common-lisp:nil))
(common-lisp:deftype authentication-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass automatic-input-failover-settings common-lisp:nil
                       ((error-clear-time-msec :initarg :error-clear-time-msec
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-automatic-input-failover-settings-error-clear-time-msec
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "errorClearTimeMsec")
                        (failover-conditions :initarg :failover-conditions
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfFailoverCondition|
                                         common-lisp:null)
                         :accessor
                         struct-shape-automatic-input-failover-settings-failover-conditions
                         :shape "__listOfFailoverCondition" :location
                         common-lisp:nil :location-name "failoverConditions")
                        (input-preference :initarg :input-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or input-preference common-lisp:null)
                         :accessor
                         struct-shape-automatic-input-failover-settings-input-preference
                         :shape "InputPreference" :location common-lisp:nil
                         :location-name "inputPreference")
                        (secondary-input-id :initarg :secondary-input-id
                         :initform
                         (common-lisp:error ":secondary-input-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-automatic-input-failover-settings-secondary-input-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "secondaryInputId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-automatic-input-failover-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'automatic-input-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'automatic-input-failover-settings
                    'make-automatic-input-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-clear-time-msec))
      (common-lisp:list
       (common-lisp:cons "ErrorClearTimeMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-conditions))
      (common-lisp:list
       (common-lisp:cons "FailoverConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-preference))
      (common-lisp:list
       (common-lisp:cons "InputPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-input-id))
      (common-lisp:list
       (common-lisp:cons "SecondaryInputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass avail-blanking common-lisp:nil
                       ((avail-blanking-image :initarg :avail-blanking-image
                         :initform common-lisp:nil :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-avail-blanking-avail-blanking-image
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "availBlankingImage")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or avail-blanking-state common-lisp:null)
                         :accessor struct-shape-avail-blanking-state :shape
                         "AvailBlankingState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-avail-blanking
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'avail-blanking
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'avail-blanking 'make-avail-blanking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avail-blanking-image))
      (common-lisp:list
       (common-lisp:cons "AvailBlankingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-blanking))
   common-lisp:nil))
(common-lisp:deftype avail-blanking-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass avail-configuration common-lisp:nil
                       ((avail-settings :initarg :avail-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or avail-settings common-lisp:null)
                         :accessor
                         struct-shape-avail-configuration-avail-settings :shape
                         "AvailSettings" :location common-lisp:nil
                         :location-name "availSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-avail-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'avail-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'avail-configuration 'make-avail-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-settings))
      (common-lisp:list
       (common-lisp:cons "AvailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass avail-settings common-lisp:nil
                       ((esam :initarg :esam :initform common-lisp:nil :type
                         (common-lisp:or esam common-lisp:null) :accessor
                         struct-shape-avail-settings-esam :shape "Esam"
                         :location common-lisp:nil :location-name "esam")
                        (scte35splice-insert :initarg :scte35splice-insert
                         :initform common-lisp:nil :type
                         (common-lisp:or scte35splice-insert common-lisp:null)
                         :accessor
                         struct-shape-avail-settings-scte35splice-insert :shape
                         "Scte35SpliceInsert" :location common-lisp:nil
                         :location-name "scte35SpliceInsert")
                        (scte35time-signal-apos :initarg
                         :scte35time-signal-apos :initform common-lisp:nil
                         :type
                         (common-lisp:or scte35time-signal-apos
                                         common-lisp:null)
                         :accessor
                         struct-shape-avail-settings-scte35time-signal-apos
                         :shape "Scte35TimeSignalApos" :location
                         common-lisp:nil :location-name
                         "scte35TimeSignalApos"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-avail-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'avail-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'avail-settings 'make-avail-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esam))
      (common-lisp:list
       (common-lisp:cons "Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35splice-insert))
      (common-lisp:list
       (common-lisp:cons "Scte35SpliceInsert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35time-signal-apos))
      (common-lisp:list
       (common-lisp:cons "Scte35TimeSignalApos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-gateway-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-gateway-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-gateway-exception 'bad-gateway-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-delete common-lisp:nil
                       ((channel-ids :initarg :channel-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-delete-channel-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "channelIds")
                        (input-ids :initarg :input-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-delete-input-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "inputIds")
                        (input-security-group-ids :initarg
                         :input-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-input-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputSecurityGroupIds")
                        (multiplex-ids :initarg :multiplex-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-delete-multiplex-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "multiplexIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'batch-delete 'make-batch-delete))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ids))
      (common-lisp:list
       (common-lisp:cons "InputIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-request common-lisp:nil
                       ((channel-ids :initarg :channel-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-request-channel-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "channelIds")
                        (input-ids :initarg :input-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-delete-request-input-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputIds")
                        (input-security-group-ids :initarg
                         :input-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-request-input-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputSecurityGroupIds")
                        (multiplex-ids :initarg :multiplex-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-request-multiplex-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "multiplexIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-request 'make-batch-delete-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ids))
      (common-lisp:list
       (common-lisp:cons "InputIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-response common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-delete-response-failed
                         :shape "__listOfBatchFailedResultModel" :location
                         common-lisp:nil :location-name "failed")
                        (successful :initarg :successful :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-response-successful :shape
                         "__listOfBatchSuccessfulResultModel" :location
                         common-lisp:nil :location-name "successful"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-response 'make-batch-delete-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-result-model common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-result-model-failed :shape
                         "__listOfBatchFailedResultModel" :location
                         common-lisp:nil :location-name "failed")
                        (successful :initarg :successful :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-result-model-successful
                         :shape "__listOfBatchSuccessfulResultModel" :location
                         common-lisp:nil :location-name "successful"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-result-model
                    'make-batch-delete-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-failed-result-model common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-failed-result-model-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-failed-result-model-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "code")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-failed-result-model-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-failed-result-model-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-failed-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-failed-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-failed-result-model
                    'make-batch-failed-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-create-request common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :initform
                         (common-lisp:error ":schedule-actions is required")
                         :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-schedule-action-create-request-schedule-actions
                         :shape "__listOfScheduleAction" :location
                         common-lisp:nil :location-name "scheduleActions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-schedule-action-create-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-create-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-create-request
                    'make-batch-schedule-action-create-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-create-result common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :initform
                         (common-lisp:error ":schedule-actions is required")
                         :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-schedule-action-create-result-schedule-actions
                         :shape "__listOfScheduleAction" :location
                         common-lisp:nil :location-name "scheduleActions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-schedule-action-create-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-create-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-create-result
                    'make-batch-schedule-action-create-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-delete-request common-lisp:nil
                       ((action-names :initarg :action-names :initform
                         (common-lisp:error ":action-names is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-schedule-action-delete-request-action-names
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "actionNames"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-schedule-action-delete-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-delete-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-delete-request
                    'make-batch-schedule-action-delete-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-delete-result common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :initform
                         (common-lisp:error ":schedule-actions is required")
                         :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-schedule-action-delete-result-schedule-actions
                         :shape "__listOfScheduleAction" :location
                         common-lisp:nil :location-name "scheduleActions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-schedule-action-delete-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-delete-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-delete-result
                    'make-batch-schedule-action-delete-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start common-lisp:nil
                       ((channel-ids :initarg :channel-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-start-channel-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "channelIds")
                        (multiplex-ids :initarg :multiplex-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-start-multiplex-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "multiplexIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'batch-start 'make-batch-start))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-request common-lisp:nil
                       ((channel-ids :initarg :channel-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-start-request-channel-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "channelIds")
                        (multiplex-ids :initarg :multiplex-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-start-request-multiplex-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "multiplexIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-start-request 'make-batch-start-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-response common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-start-response-failed
                         :shape "__listOfBatchFailedResultModel" :location
                         common-lisp:nil :location-name "failed")
                        (successful :initarg :successful :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-start-response-successful
                         :shape "__listOfBatchSuccessfulResultModel" :location
                         common-lisp:nil :location-name "successful"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-start-response 'make-batch-start-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-result-model common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-start-result-model-failed
                         :shape "__listOfBatchFailedResultModel" :location
                         common-lisp:nil :location-name "failed")
                        (successful :initarg :successful :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-start-result-model-successful
                         :shape "__listOfBatchSuccessfulResultModel" :location
                         common-lisp:nil :location-name "successful"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-start-result-model 'make-batch-start-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop common-lisp:nil
                       ((channel-ids :initarg :channel-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-stop-channel-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "channelIds")
                        (multiplex-ids :initarg :multiplex-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-stop-multiplex-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "multiplexIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'batch-stop 'make-batch-stop))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-request common-lisp:nil
                       ((channel-ids :initarg :channel-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-batch-stop-request-channel-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "channelIds")
                        (multiplex-ids :initarg :multiplex-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-request-multiplex-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "multiplexIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-request 'make-batch-stop-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-response common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-stop-response-failed
                         :shape "__listOfBatchFailedResultModel" :location
                         common-lisp:nil :location-name "failed")
                        (successful :initarg :successful :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-stop-response-successful
                         :shape "__listOfBatchSuccessfulResultModel" :location
                         common-lisp:nil :location-name "successful"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-response 'make-batch-stop-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-result-model common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor struct-shape-batch-stop-result-model-failed
                         :shape "__listOfBatchFailedResultModel" :location
                         common-lisp:nil :location-name "failed")
                        (successful :initarg :successful :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-result-model-successful :shape
                         "__listOfBatchSuccessfulResultModel" :location
                         common-lisp:nil :location-name "successful"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-result-model 'make-batch-stop-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-successful-result-model common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-successful-result-model-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-successful-result-model-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-successful-result-model-state
                         :shape "__string" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-successful-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-successful-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-successful-result-model
                    'make-batch-successful-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-schedule-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-batch-update-schedule-request-channel-id
                         :shape "__string" :location "uri" :location-name
                         "channelId")
                        (creates :initarg :creates :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-schedule-action-create-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-schedule-request-creates
                         :shape "BatchScheduleActionCreateRequest" :location
                         common-lisp:nil :location-name "creates")
                        (deletes :initarg :deletes :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-schedule-action-delete-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-schedule-request-deletes
                         :shape "BatchScheduleActionDeleteRequest" :location
                         common-lisp:nil :location-name "deletes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-request
                    'make-batch-update-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-schedule-response common-lisp:nil
                       ((creates :initarg :creates :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-schedule-action-create-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-schedule-response-creates
                         :shape "BatchScheduleActionCreateResult" :location
                         common-lisp:nil :location-name "creates")
                        (deletes :initarg :deletes :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-schedule-action-delete-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-schedule-response-deletes
                         :shape "BatchScheduleActionDeleteResult" :location
                         common-lisp:nil :location-name "deletes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-response
                    'make-batch-update-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-schedule-result common-lisp:nil
                       ((creates :initarg :creates :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-schedule-action-create-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-schedule-result-creates
                         :shape "BatchScheduleActionCreateResult" :location
                         common-lisp:nil :location-name "creates")
                        (deletes :initarg :deletes :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-schedule-action-delete-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-schedule-result-deletes
                         :shape "BatchScheduleActionDeleteResult" :location
                         common-lisp:nil :location-name "deletes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-schedule-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-update-schedule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-result
                    'make-batch-update-schedule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass blackout-slate common-lisp:nil
                       ((blackout-slate-image :initarg :blackout-slate-image
                         :initform common-lisp:nil :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-blackout-slate-blackout-slate-image
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "blackoutSlateImage")
                        (network-end-blackout :initarg :network-end-blackout
                         :initform common-lisp:nil :type
                         (common-lisp:or blackout-slate-network-end-blackout
                                         common-lisp:null)
                         :accessor
                         struct-shape-blackout-slate-network-end-blackout
                         :shape "BlackoutSlateNetworkEndBlackout" :location
                         common-lisp:nil :location-name "networkEndBlackout")
                        (network-end-blackout-image :initarg
                         :network-end-blackout-image :initform common-lisp:nil
                         :type (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-blackout-slate-network-end-blackout-image
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "networkEndBlackoutImage")
                        (network-id :initarg :network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin34Max34| common-lisp:null)
                         :accessor struct-shape-blackout-slate-network-id
                         :shape "__stringMin34Max34" :location common-lisp:nil
                         :location-name "networkId")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or blackout-slate-state common-lisp:null)
                         :accessor struct-shape-blackout-slate-state :shape
                         "BlackoutSlateState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blackout-slate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blackout-slate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'blackout-slate 'make-blackout-slate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blackout-slate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blackout-slate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blackout-slate-image))
      (common-lisp:list
       (common-lisp:cons "BlackoutSlateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-end-blackout))
      (common-lisp:list
       (common-lisp:cons "NetworkEndBlackout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-end-blackout-image))
      (common-lisp:list
       (common-lisp:cons "NetworkEndBlackoutImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blackout-slate))
   common-lisp:nil))
(common-lisp:deftype blackout-slate-network-end-blackout () 'common-lisp:string)
(common-lisp:deftype blackout-slate-state () 'common-lisp:string)
(common-lisp:deftype burn-in-alignment () 'common-lisp:string)
(common-lisp:deftype burn-in-background-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass burn-in-destination-settings common-lisp:nil
                       ((alignment :initarg :alignment :initform
                         common-lisp:nil :type
                         (common-lisp:or burn-in-alignment common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-alignment
                         :shape "BurnInAlignment" :location common-lisp:nil
                         :location-name "alignment")
                        (background-color :initarg :background-color :initform
                         common-lisp:nil :type
                         (common-lisp:or burn-in-background-color
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-background-color
                         :shape "BurnInBackgroundColor" :location
                         common-lisp:nil :location-name "backgroundColor")
                        (background-opacity :initarg :background-opacity
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-background-opacity
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "backgroundOpacity")
                        (font :initarg :font :initform common-lisp:nil :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-font :shape
                         "InputLocation" :location common-lisp:nil
                         :location-name "font")
                        (font-color :initarg :font-color :initform
                         common-lisp:nil :type
                         (common-lisp:or burn-in-font-color common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-font-color
                         :shape "BurnInFontColor" :location common-lisp:nil
                         :location-name "fontColor")
                        (font-opacity :initarg :font-opacity :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-font-opacity
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "fontOpacity")
                        (font-resolution :initarg :font-resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin96Max600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-font-resolution
                         :shape "__integerMin96Max600" :location
                         common-lisp:nil :location-name "fontResolution")
                        (font-size :initarg :font-size :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-burn-in-destination-settings-font-size
                         :shape "__string" :location common-lisp:nil
                         :location-name "fontSize")
                        (outline-color :initarg :outline-color :initform
                         common-lisp:nil :type
                         (common-lisp:or burn-in-outline-color
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-outline-color
                         :shape "BurnInOutlineColor" :location common-lisp:nil
                         :location-name "outlineColor")
                        (outline-size :initarg :outline-size :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max10| common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-outline-size
                         :shape "__integerMin0Max10" :location common-lisp:nil
                         :location-name "outlineSize")
                        (shadow-color :initarg :shadow-color :initform
                         common-lisp:nil :type
                         (common-lisp:or burn-in-shadow-color common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-shadow-color
                         :shape "BurnInShadowColor" :location common-lisp:nil
                         :location-name "shadowColor")
                        (shadow-opacity :initarg :shadow-opacity :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-shadow-opacity
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "shadowOpacity")
                        (shadow-xoffset :initarg :shadow-xoffset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-shadow-xoffset
                         :shape "__integer" :location common-lisp:nil
                         :location-name "shadowXOffset")
                        (shadow-yoffset :initarg :shadow-yoffset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-shadow-yoffset
                         :shape "__integer" :location common-lisp:nil
                         :location-name "shadowYOffset")
                        (teletext-grid-control :initarg :teletext-grid-control
                         :initform common-lisp:nil :type
                         (common-lisp:or burn-in-teletext-grid-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-teletext-grid-control
                         :shape "BurnInTeletextGridControl" :location
                         common-lisp:nil :location-name "teletextGridControl")
                        (xposition :initarg :xposition :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-xposition
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "xPosition")
                        (yposition :initarg :yposition :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-burn-in-destination-settings-yposition
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "yPosition"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-burn-in-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'burn-in-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'burn-in-destination-settings
                    'make-burn-in-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font))
      (common-lisp:list
       (common-lisp:cons "Font"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-grid-control))
      (common-lisp:list
       (common-lisp:cons "TeletextGridControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   common-lisp:nil))
(common-lisp:deftype burn-in-font-color () 'common-lisp:string)
(common-lisp:deftype burn-in-outline-color () 'common-lisp:string)
(common-lisp:deftype burn-in-shadow-color () 'common-lisp:string)
(common-lisp:deftype burn-in-teletext-grid-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-input-device-transfer-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-cancel-input-device-transfer-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-input-device-transfer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-input-device-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-input-device-transfer-request
                    'make-cancel-input-device-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-input-device-transfer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-input-device-transfer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-input-device-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-input-device-transfer-response
                    'make-cancel-input-device-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-description common-lisp:nil
                       ((accessibility :initarg :accessibility :initform
                         common-lisp:nil :type
                         (common-lisp:or accessibility-type common-lisp:null)
                         :accessor
                         struct-shape-caption-description-accessibility :shape
                         "AccessibilityType" :location common-lisp:nil
                         :location-name "accessibility")
                        (caption-selector-name :initarg :caption-selector-name
                         :initform
                         (common-lisp:error
                          ":caption-selector-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-caption-description-caption-selector-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "captionSelectorName")
                        (destination-settings :initarg :destination-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or caption-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-description-destination-settings
                         :shape "CaptionDestinationSettings" :location
                         common-lisp:nil :location-name "destinationSettings")
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-caption-description-language-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "languageCode")
                        (language-description :initarg :language-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-caption-description-language-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "languageDescription")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-caption-description-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caption-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caption-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'caption-description 'make-caption-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessibility))
      (common-lisp:list
       (common-lisp:cons "Accessibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-selector-name))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-destination-settings common-lisp:nil
                       ((arib-destination-settings :initarg
                         :arib-destination-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or arib-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-arib-destination-settings
                         :shape "AribDestinationSettings" :location
                         common-lisp:nil :location-name
                         "aribDestinationSettings")
                        (burn-in-destination-settings :initarg
                         :burn-in-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or burn-in-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-burn-in-destination-settings
                         :shape "BurnInDestinationSettings" :location
                         common-lisp:nil :location-name
                         "burnInDestinationSettings")
                        (dvb-sub-destination-settings :initarg
                         :dvb-sub-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-dvb-sub-destination-settings
                         :shape "DvbSubDestinationSettings" :location
                         common-lisp:nil :location-name
                         "dvbSubDestinationSettings")
                        (ebu-tt-ddestination-settings :initarg
                         :ebu-tt-ddestination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or ebu-tt-ddestination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-ebu-tt-ddestination-settings
                         :shape "EbuTtDDestinationSettings" :location
                         common-lisp:nil :location-name
                         "ebuTtDDestinationSettings")
                        (embedded-destination-settings :initarg
                         :embedded-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or embedded-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-embedded-destination-settings
                         :shape "EmbeddedDestinationSettings" :location
                         common-lisp:nil :location-name
                         "embeddedDestinationSettings")
                        (embedded-plus-scte20destination-settings :initarg
                         :embedded-plus-scte20destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          embedded-plus-scte20destination-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-embedded-plus-scte20destination-settings
                         :shape "EmbeddedPlusScte20DestinationSettings"
                         :location common-lisp:nil :location-name
                         "embeddedPlusScte20DestinationSettings")
                        (rtmp-caption-info-destination-settings :initarg
                         :rtmp-caption-info-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or rtmp-caption-info-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-rtmp-caption-info-destination-settings
                         :shape "RtmpCaptionInfoDestinationSettings" :location
                         common-lisp:nil :location-name
                         "rtmpCaptionInfoDestinationSettings")
                        (scte20plus-embedded-destination-settings :initarg
                         :scte20plus-embedded-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          scte20plus-embedded-destination-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-scte20plus-embedded-destination-settings
                         :shape "Scte20PlusEmbeddedDestinationSettings"
                         :location common-lisp:nil :location-name
                         "scte20PlusEmbeddedDestinationSettings")
                        (scte27destination-settings :initarg
                         :scte27destination-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or scte27destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-scte27destination-settings
                         :shape "Scte27DestinationSettings" :location
                         common-lisp:nil :location-name
                         "scte27DestinationSettings")
                        (smpte-tt-destination-settings :initarg
                         :smpte-tt-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or smpte-tt-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-smpte-tt-destination-settings
                         :shape "SmpteTtDestinationSettings" :location
                         common-lisp:nil :location-name
                         "smpteTtDestinationSettings")
                        (teletext-destination-settings :initarg
                         :teletext-destination-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or teletext-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-teletext-destination-settings
                         :shape "TeletextDestinationSettings" :location
                         common-lisp:nil :location-name
                         "teletextDestinationSettings")
                        (ttml-destination-settings :initarg
                         :ttml-destination-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or ttml-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-ttml-destination-settings
                         :shape "TtmlDestinationSettings" :location
                         common-lisp:nil :location-name
                         "ttmlDestinationSettings")
                        (webvtt-destination-settings :initarg
                         :webvtt-destination-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or webvtt-destination-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-destination-settings-webvtt-destination-settings
                         :shape "WebvttDestinationSettings" :location
                         common-lisp:nil :location-name
                         "webvttDestinationSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caption-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caption-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'caption-destination-settings
                    'make-caption-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-destination-settings))
      (common-lisp:list
       (common-lisp:cons "AribDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burn-in-destination-settings))
      (common-lisp:list
       (common-lisp:cons "BurnInDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-destination-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebu-tt-ddestination-settings))
      (common-lisp:list
       (common-lisp:cons "EbuTtDDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-plus-scte20destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedPlusScte20DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rtmp-caption-info-destination-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpCaptionInfoDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte20plus-embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "Scte20PlusEmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte27destination-settings))
      (common-lisp:list
       (common-lisp:cons "Scte27DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smpte-tt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "SmpteTtDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ttml-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TtmlDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webvtt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "WebvttDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-language-mapping common-lisp:nil
                       ((caption-channel :initarg :caption-channel :initform
                         (common-lisp:error ":caption-channel is required")
                         :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         struct-shape-caption-language-mapping-caption-channel
                         :shape "__integerMin1Max4" :location common-lisp:nil
                         :location-name "captionChannel")
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or |__stringMin3Max3| common-lisp:null)
                         :accessor
                         struct-shape-caption-language-mapping-language-code
                         :shape "__stringMin3Max3" :location common-lisp:nil
                         :location-name "languageCode")
                        (language-description :initarg :language-description
                         :initform
                         (common-lisp:error
                          ":language-description is required")
                         :type (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-caption-language-mapping-language-description
                         :shape "__stringMin1" :location common-lisp:nil
                         :location-name "languageDescription"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caption-language-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caption-language-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'caption-language-mapping 'make-caption-language-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-channel))
      (common-lisp:list
       (common-lisp:cons "CaptionChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-rectangle common-lisp:nil
                       ((height :initarg :height :initform
                         (common-lisp:error ":height is required") :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor struct-shape-caption-rectangle-height :shape
                         "__doubleMin0Max100" :location common-lisp:nil
                         :location-name "height")
                        (left-offset :initarg :left-offset :initform
                         (common-lisp:error ":left-offset is required") :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor struct-shape-caption-rectangle-left-offset
                         :shape "__doubleMin0Max100" :location common-lisp:nil
                         :location-name "leftOffset")
                        (top-offset :initarg :top-offset :initform
                         (common-lisp:error ":top-offset is required") :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor struct-shape-caption-rectangle-top-offset
                         :shape "__doubleMin0Max100" :location common-lisp:nil
                         :location-name "topOffset")
                        (width :initarg :width :initform
                         (common-lisp:error ":width is required") :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor struct-shape-caption-rectangle-width :shape
                         "__doubleMin0Max100" :location common-lisp:nil
                         :location-name "width"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caption-rectangle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caption-rectangle
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'caption-rectangle 'make-caption-rectangle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-rectangle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-rectangle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left-offset))
      (common-lisp:list
       (common-lisp:cons "LeftOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-offset))
      (common-lisp:list
       (common-lisp:cons "TopOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-rectangle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-selector common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-caption-selector-language-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "languageCode")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor struct-shape-caption-selector-name :shape
                         "__stringMin1" :location common-lisp:nil
                         :location-name "name")
                        (selector-settings :initarg :selector-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or caption-selector-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-selector-settings :shape
                         "CaptionSelectorSettings" :location common-lisp:nil
                         :location-name "selectorSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caption-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caption-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'caption-selector 'make-caption-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-selector-settings common-lisp:nil
                       ((ancillary-source-settings :initarg
                         :ancillary-source-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or ancillary-source-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-ancillary-source-settings
                         :shape "AncillarySourceSettings" :location
                         common-lisp:nil :location-name
                         "ancillarySourceSettings")
                        (arib-source-settings :initarg :arib-source-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or arib-source-settings common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-arib-source-settings
                         :shape "AribSourceSettings" :location common-lisp:nil
                         :location-name "aribSourceSettings")
                        (dvb-sub-source-settings :initarg
                         :dvb-sub-source-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or dvb-sub-source-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-dvb-sub-source-settings
                         :shape "DvbSubSourceSettings" :location
                         common-lisp:nil :location-name "dvbSubSourceSettings")
                        (embedded-source-settings :initarg
                         :embedded-source-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or embedded-source-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-embedded-source-settings
                         :shape "EmbeddedSourceSettings" :location
                         common-lisp:nil :location-name
                         "embeddedSourceSettings")
                        (scte20source-settings :initarg :scte20source-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or scte20source-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-scte20source-settings
                         :shape "Scte20SourceSettings" :location
                         common-lisp:nil :location-name "scte20SourceSettings")
                        (scte27source-settings :initarg :scte27source-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or scte27source-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-scte27source-settings
                         :shape "Scte27SourceSettings" :location
                         common-lisp:nil :location-name "scte27SourceSettings")
                        (teletext-source-settings :initarg
                         :teletext-source-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or teletext-source-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-caption-selector-settings-teletext-source-settings
                         :shape "TeletextSourceSettings" :location
                         common-lisp:nil :location-name
                         "teletextSourceSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-caption-selector-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'caption-selector-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'caption-selector-settings
                    'make-caption-selector-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ancillary-source-settings))
      (common-lisp:list
       (common-lisp:cons "AncillarySourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-source-settings))
      (common-lisp:list
       (common-lisp:cons "AribSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-source-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-source-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte20source-settings))
      (common-lisp:list
       (common-lisp:cons "Scte20SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte27source-settings))
      (common-lisp:list
       (common-lisp:cons "Scte27SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-source-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   common-lisp:nil))
(common-lisp:deftype cdi-input-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cdi-input-specification common-lisp:nil
                       ((resolution :initarg :resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or cdi-input-resolution common-lisp:null)
                         :accessor
                         struct-shape-cdi-input-specification-resolution :shape
                         "CdiInputResolution" :location common-lisp:nil
                         :location-name "resolution"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cdi-input-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cdi-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cdi-input-specification 'make-cdi-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-arn :shape "__string" :location
                         common-lisp:nil :location-name "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor struct-shape-channel-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor struct-shape-channel-channel-class :shape
                         "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor struct-shape-channel-destinations :shape
                         "__listOfOutputDestination" :location common-lisp:nil
                         :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor struct-shape-channel-egress-endpoints :shape
                         "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor struct-shape-channel-encoder-settings :shape
                         "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-id :shape "__string" :location
                         common-lisp:nil :location-name "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor struct-shape-channel-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor struct-shape-channel-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-channel-log-level :shape "LogLevel"
                         :location common-lisp:nil :location-name "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor struct-shape-channel-maintenance :shape
                         "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor struct-shape-channel-pipeline-details :shape
                         "__listOfPipelineDetail" :location common-lisp:nil
                         :location-name "pipelineDetails")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-channel-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-channel-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor struct-shape-channel-state :shape
                         "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-channel-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor struct-shape-channel-vpc :shape
                         "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:deftype channel-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-configuration-validation-error common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-channel-configuration-validation-error-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message")
                        (validation-errors :initarg :validation-errors
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfValidationError|
                                         common-lisp:null)
                         :accessor
                         struct-shape-channel-configuration-validation-error-validation-errors
                         :shape "__listOfValidationError" :location
                         common-lisp:nil :location-name "validationErrors"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-configuration-validation-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'channel-configuration-validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-configuration-validation-error
                    'make-channel-configuration-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel-egress-endpoint common-lisp:nil
                       ((source-ip :initarg :source-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-egress-endpoint-source-ip :shape
                         "__string" :location common-lisp:nil :location-name
                         "sourceIp"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-egress-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-egress-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-egress-endpoint 'make-channel-egress-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip))
      (common-lisp:list
       (common-lisp:cons "SourceIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   common-lisp:nil))
(common-lisp:deftype channel-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-summary-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-channel-summary-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor struct-shape-channel-summary-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor struct-shape-channel-summary-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor
                         struct-shape-channel-summary-egress-endpoints :shape
                         "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-summary-id :shape "__string"
                         :location common-lisp:nil :location-name "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-channel-summary-input-attachments :shape
                         "__listOfInputAttachment" :location common-lisp:nil
                         :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-channel-summary-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-channel-summary-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor struct-shape-channel-summary-maintenance
                         :shape "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-channel-summary-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-channel-summary-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-channel-summary-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor struct-shape-channel-summary-state :shape
                         "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-channel-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor struct-shape-channel-summary-vpc :shape
                         "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'channel-summary 'make-channel-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass claim-device-request common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-claim-device-request-id :shape "__string"
                         :location common-lisp:nil :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-claim-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'claim-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'claim-device-request 'make-claim-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input claim-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input claim-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input claim-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass claim-device-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-claim-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'claim-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'claim-device-response 'make-claim-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass color-correction common-lisp:nil
                       ((input-color-space :initarg :input-color-space
                         :initform
                         (common-lisp:error ":input-color-space is required")
                         :type (common-lisp:or color-space common-lisp:null)
                         :accessor
                         struct-shape-color-correction-input-color-space :shape
                         "ColorSpace" :location common-lisp:nil :location-name
                         "inputColorSpace")
                        (output-color-space :initarg :output-color-space
                         :initform
                         (common-lisp:error ":output-color-space is required")
                         :type (common-lisp:or color-space common-lisp:null)
                         :accessor
                         struct-shape-color-correction-output-color-space
                         :shape "ColorSpace" :location common-lisp:nil
                         :location-name "outputColorSpace")
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-color-correction-uri :shape "__string"
                         :location common-lisp:nil :location-name "uri"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-color-correction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'color-correction
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'color-correction 'make-color-correction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input color-correction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input color-correction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-color-space))
      (common-lisp:list
       (common-lisp:cons "InputColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-color-space))
      (common-lisp:list
       (common-lisp:cons "OutputColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input color-correction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass color-correction-settings common-lisp:nil
                       ((global-color-corrections :initarg
                         :global-color-corrections :initform
                         (common-lisp:error
                          ":global-color-corrections is required")
                         :type
                         (common-lisp:or |__listOfColorCorrection|
                                         common-lisp:null)
                         :accessor
                         struct-shape-color-correction-settings-global-color-corrections
                         :shape "__listOfColorCorrection" :location
                         common-lisp:nil :location-name
                         "globalColorCorrections"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-color-correction-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'color-correction-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'color-correction-settings
                    'make-color-correction-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          color-correction-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          color-correction-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-color-corrections))
      (common-lisp:list
       (common-lisp:cons "GlobalColorCorrections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          color-correction-settings))
   common-lisp:nil))
(common-lisp:deftype color-space () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass color-space-passthrough-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-color-space-passthrough-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'color-space-passthrough-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'color-space-passthrough-settings
                    'make-color-space-passthrough-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-channel common-lisp:nil
                       ((cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-channel-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor struct-shape-create-channel-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor struct-shape-create-channel-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor struct-shape-create-channel-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-channel-input-attachments :shape
                         "__listOfInputAttachment" :location common-lisp:nil
                         :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-create-channel-input-specification :shape
                         "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-create-channel-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-create-settings
                                         common-lisp:null)
                         :accessor struct-shape-create-channel-maintenance
                         :shape "MaintenanceCreateSettings" :location
                         common-lisp:nil :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-channel-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-channel-request-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "requestId")
                        (reserved :initarg :reserved :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-channel-reserved :shape
                         "__string" :location common-lisp:nil :location-name
                         "reserved")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-channel-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-channel-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings common-lisp:null)
                         :accessor struct-shape-create-channel-vpc :shape
                         "VpcOutputSettings" :location common-lisp:nil
                         :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'create-channel 'make-create-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved))
      (common-lisp:list
       (common-lisp:cons "Reserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-request common-lisp:nil
                       ((cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-create-channel-request-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-create-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-maintenance :shape
                         "MaintenanceCreateSettings" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-channel-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-channel-request-request-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "requestId")
                        (reserved :initarg :reserved :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-channel-request-reserved
                         :shape "__string" :location common-lisp:nil
                         :location-name "reserved")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-channel-request-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-channel-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings common-lisp:null)
                         :accessor struct-shape-create-channel-request-vpc
                         :shape "VpcOutputSettings" :location common-lisp:nil
                         :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-channel-request 'make-create-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved))
      (common-lisp:list
       (common-lisp:cons "Reserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-response common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type (common-lisp:or channel common-lisp:null)
                         :accessor struct-shape-create-channel-response-channel
                         :shape "Channel" :location common-lisp:nil
                         :location-name "channel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-channel-response 'make-create-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-result-model common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type (common-lisp:or channel common-lisp:null)
                         :accessor
                         struct-shape-create-channel-result-model-channel
                         :shape "Channel" :location common-lisp:nil
                         :location-name "channel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-channel-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-channel-result-model
                    'make-create-channel-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-input-destinations
                         :shape "__listOfInputDestinationRequest" :location
                         common-lisp:nil :location-name "destinations")
                        (input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor struct-shape-create-input-input-devices
                         :shape "__listOfInputDeviceSettings" :location
                         common-lisp:nil :location-name "inputDevices")
                        (input-security-groups :initarg :input-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-input-input-security-groups :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "inputSecurityGroups")
                        (media-connect-flows :initarg :media-connect-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-input-media-connect-flows :shape
                         "__listOfMediaConnectFlowRequest" :location
                         common-lisp:nil :location-name "mediaConnectFlows")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-input-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-input-request-id :shape "__string"
                         :location common-lisp:nil :location-name "requestId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-input-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-input-sources :shape
                         "__listOfInputSourceRequest" :location common-lisp:nil
                         :location-name "sources")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-input-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-create-input-type :shape "InputType"
                         :location common-lisp:nil :location-name "type")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or input-vpc-request common-lisp:null)
                         :accessor struct-shape-create-input-vpc :shape
                         "InputVpcRequest" :location common-lisp:nil
                         :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'create-input 'make-create-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-request common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-input-request-destinations :shape
                         "__listOfInputDestinationRequest" :location
                         common-lisp:nil :location-name "destinations")
                        (input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-input-request-input-devices :shape
                         "__listOfInputDeviceSettings" :location
                         common-lisp:nil :location-name "inputDevices")
                        (input-security-groups :initarg :input-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-input-request-input-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputSecurityGroups")
                        (media-connect-flows :initarg :media-connect-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-input-request-media-connect-flows
                         :shape "__listOfMediaConnectFlowRequest" :location
                         common-lisp:nil :location-name "mediaConnectFlows")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-input-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-input-request-request-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "requestId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-input-request-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-input-request-sources
                         :shape "__listOfInputSourceRequest" :location
                         common-lisp:nil :location-name "sources")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-input-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-create-input-request-type :shape
                         "InputType" :location common-lisp:nil :location-name
                         "type")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or input-vpc-request common-lisp:null)
                         :accessor struct-shape-create-input-request-vpc :shape
                         "InputVpcRequest" :location common-lisp:nil
                         :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-input-request 'make-create-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-response common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or input common-lisp:null) :accessor
                         struct-shape-create-input-response-input :shape
                         "Input" :location common-lisp:nil :location-name
                         "input"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-input-response 'make-create-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-result-model common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or input common-lisp:null) :accessor
                         struct-shape-create-input-result-model-input :shape
                         "Input" :location common-lisp:nil :location-name
                         "input"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-input-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-input-result-model
                    'make-create-input-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-security-group-request common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-input-security-group-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (whitelist-rules :initarg :whitelist-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputWhitelistRuleCidr|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-input-security-group-request-whitelist-rules
                         :shape "__listOfInputWhitelistRuleCidr" :location
                         common-lisp:nil :location-name "whitelistRules"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input-security-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-request
                    'make-create-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-security-group-response common-lisp:nil
                       ((security-group :initarg :security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         struct-shape-create-input-security-group-response-security-group
                         :shape "InputSecurityGroup" :location common-lisp:nil
                         :location-name "securityGroup"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input-security-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-response
                    'make-create-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-security-group-result-model common-lisp:nil
                       ((security-group :initarg :security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         struct-shape-create-input-security-group-result-model-security-group
                         :shape "InputSecurityGroup" :location common-lisp:nil
                         :location-name "securityGroup"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-input-security-group-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-input-security-group-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-result-model
                    'make-create-input-security-group-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform
                         (common-lisp:error ":multiplex-settings is required")
                         :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (request-id :initarg :request-id :initform
                         (common-lisp:error ":request-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-request-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "requestId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-multiplex-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex 'make-create-multiplex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program common-lisp:nil
                       ((multiplex-program-settings :initarg
                         :multiplex-program-settings :initform
                         (common-lisp:error
                          ":multiplex-program-settings is required")
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-program-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings")
                        (program-name :initarg :program-name :initform
                         (common-lisp:error ":program-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-program-program-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "programName")
                        (request-id :initarg :request-id :initform
                         (common-lisp:error ":request-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-program-request-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "requestId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-program
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex-program
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program 'make-create-multiplex-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-program-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId")
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :initform
                         (common-lisp:error
                          ":multiplex-program-settings is required")
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-program-request-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings")
                        (program-name :initarg :program-name :initform
                         (common-lisp:error ":program-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-program-request-program-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "programName")
                        (request-id :initarg :request-id :initform
                         (common-lisp:error ":request-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-program-request-request-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "requestId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-program-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-request
                    'make-create-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program-response common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-program-response-multiplex-program
                         :shape "MultiplexProgram" :location common-lisp:nil
                         :location-name "multiplexProgram"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-program-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-response
                    'make-create-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program-result-model common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-program-result-model-multiplex-program
                         :shape "MultiplexProgram" :location common-lisp:nil
                         :location-name "multiplexProgram"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-program-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-program-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-result-model
                    'make-create-multiplex-program-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-request common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-request-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform
                         (common-lisp:error ":multiplex-settings is required")
                         :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-create-multiplex-request-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (request-id :initarg :request-id :initform
                         (common-lisp:error ":request-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-multiplex-request-request-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "requestId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-multiplex-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-request 'make-create-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-response common-lisp:nil
                       ((multiplex :initarg :multiplex :initform
                         common-lisp:nil :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         struct-shape-create-multiplex-response-multiplex
                         :shape "Multiplex" :location common-lisp:nil
                         :location-name "multiplex"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-response
                    'make-create-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-result-model common-lisp:nil
                       ((multiplex :initarg :multiplex :initform
                         common-lisp:nil :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         struct-shape-create-multiplex-result-model-multiplex
                         :shape "Multiplex" :location common-lisp:nil
                         :location-name "multiplex"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multiplex-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-result-model
                    'make-create-multiplex-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input common-lisp:nil
                       ((request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-partner-input-request-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "requestId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-partner-input-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partner-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-partner-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partner-input 'make-create-partner-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-partner-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-partner-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-partner-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input-request common-lisp:nil
                       ((input-id :initarg :input-id :initform
                         (common-lisp:error ":input-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-partner-input-request-input-id
                         :shape "__string" :location "uri" :location-name
                         "inputId")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-partner-input-request-request-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "requestId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-partner-input-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partner-input-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-partner-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-request
                    'make-create-partner-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input-response common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or input common-lisp:null) :accessor
                         struct-shape-create-partner-input-response-input
                         :shape "Input" :location common-lisp:nil
                         :location-name "input"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partner-input-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partner-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-response
                    'make-create-partner-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input-result-model common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or input common-lisp:null) :accessor
                         struct-shape-create-partner-input-result-model-input
                         :shape "Input" :location common-lisp:nil
                         :location-name "input"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partner-input-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partner-input-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-result-model
                    'make-create-partner-input-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-tags-request-resource-arn :shape
                         "__string" :location "uri" :location-name
                         "resource-arn")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-tags-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-channel-request-channel-id :shape
                         "__string" :location "uri" :location-name
                         "channelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-channel-request 'make-delete-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-channel-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-channel-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-egress-endpoints
                         :shape "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-channel-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-delete-channel-response-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-maintenance
                         :shape "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-channel-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-pipeline-details
                         :shape "__listOfPipelineDetail" :location
                         common-lisp:nil :location-name "pipelineDetails")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-response-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor struct-shape-delete-channel-response-state
                         :shape "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-delete-channel-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor struct-shape-delete-channel-response-vpc
                         :shape "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-channel-response 'make-delete-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-request common-lisp:nil
                       ((input-id :initarg :input-id :initform
                         (common-lisp:error ":input-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-input-request-input-id :shape
                         "__string" :location "uri" :location-name "inputId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-input-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-input-request 'make-delete-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-input-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-input-response 'make-delete-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-security-group-request common-lisp:nil
                       ((input-security-group-id :initarg
                         :input-security-group-id :initform
                         (common-lisp:error
                          ":input-security-group-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-input-security-group-request-input-security-group-id
                         :shape "__string" :location "uri" :location-name
                         "inputSecurityGroupId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-input-security-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-input-security-group-request
                    'make-delete-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-security-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-input-security-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-input-security-group-response
                    'make-delete-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-program-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-program-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId")
                        (program-name :initarg :program-name :initform
                         (common-lisp:error ":program-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-program-request-program-name
                         :shape "__string" :location "uri" :location-name
                         "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-multiplex-program-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-program-request
                    'make-delete-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-program-response common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-program-response-channel-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "channelId")
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-program-response-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings")
                        (packet-identifiers-map :initarg
                         :packet-identifiers-map :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          multiplex-program-packet-identifiers-map
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-program-response-packet-identifiers-map
                         :shape "MultiplexProgramPacketIdentifiersMap"
                         :location common-lisp:nil :location-name
                         "packetIdentifiersMap")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMultiplexProgramPipelineDetail|
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-program-response-pipeline-details
                         :shape "__listOfMultiplexProgramPipelineDetail"
                         :location common-lisp:nil :location-name
                         "pipelineDetails")
                        (program-name :initarg :program-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-program-response-program-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-multiplex-program-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-program-response
                    'make-delete-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-multiplex-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-request 'make-delete-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-response-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-response-destinations
                         :shape "__listOfMultiplexOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-response-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-multiplex-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (program-count :initarg :program-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-delete-multiplex-response-program-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programCount")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor struct-shape-delete-multiplex-response-state
                         :shape "MultiplexState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-delete-multiplex-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-multiplex-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-response
                    'make-delete-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reservation-request common-lisp:nil
                       ((reservation-id :initarg :reservation-id :initform
                         (common-lisp:error ":reservation-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-request-reservation-id
                         :shape "__string" :location "uri" :location-name
                         "reservationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-reservation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-reservation-request
                    'make-delete-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reservation-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-count :shape
                         "__integer" :location common-lisp:nil :location-name
                         "count")
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-currency-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "currencyCode")
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-duration
                         :shape "__integer" :location common-lisp:nil
                         :location-name "duration")
                        (duration-units :initarg :duration-units :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-duration-units
                         :shape "OfferingDurationUnits" :location
                         common-lisp:nil :location-name "durationUnits")
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-end :shape
                         "__string" :location common-lisp:nil :location-name
                         "end")
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-fixed-price
                         :shape "__double" :location common-lisp:nil
                         :location-name "fixedPrice")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (offering-description :initarg :offering-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-offering-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringDescription")
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-offering-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringId")
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-offering-type
                         :shape "OfferingType" :location common-lisp:nil
                         :location-name "offeringType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-region :shape
                         "__string" :location common-lisp:nil :location-name
                         "region")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-renewal-settings
                         :shape "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings")
                        (reservation-id :initarg :reservation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-reservation-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "reservationId")
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-resource-specification
                         :shape "ReservationResourceSpecification" :location
                         common-lisp:nil :location-name
                         "resourceSpecification")
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-start :shape
                         "__string" :location common-lisp:nil :location-name
                         "start")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor
                         struct-shape-delete-reservation-response-state :shape
                         "ReservationState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-delete-reservation-response-usage-price
                         :shape "__double" :location common-lisp:nil
                         :location-name "usagePrice"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-reservation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-reservation-response
                    'make-delete-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-schedule-request-channel-id :shape
                         "__string" :location "uri" :location-name
                         "channelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-request 'make-delete-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-response 'make-delete-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-tags-request-resource-arn :shape
                         "__string" :location "uri" :location-name
                         "resource-arn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-delete-tags-request-tag-keys
                         :shape "__listOf__string" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-configuration-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-configuration-request
                    'make-describe-account-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-configuration-response common-lisp:nil
                       ((account-configuration :initarg :account-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or account-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-account-configuration-response-account-configuration
                         :shape "AccountConfiguration" :location
                         common-lisp:nil :location-name
                         "accountConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-configuration-response
                    'make-describe-account-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-configuration-result-model
                       common-lisp:nil
                       ((account-configuration :initarg :account-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or account-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-account-configuration-result-model-account-configuration
                         :shape "AccountConfiguration" :location
                         common-lisp:nil :location-name
                         "accountConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-configuration-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-configuration-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-configuration-result-model
                    'make-describe-account-configuration-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-configuration-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-channel-request-channel-id
                         :shape "__string" :location "uri" :location-name
                         "channelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-channel-request 'make-describe-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-channel-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-channel-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-egress-endpoints
                         :shape "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-channel-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-describe-channel-response-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-maintenance
                         :shape "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-channel-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-pipeline-details
                         :shape "__listOfPipelineDetail" :location
                         common-lisp:nil :location-name "pipelineDetails")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor struct-shape-describe-channel-response-state
                         :shape "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-channel-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor struct-shape-describe-channel-response-vpc
                         :shape "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-channel-response
                    'make-describe-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-request
                    'make-describe-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-connection-state
                         :shape "InputDeviceConnectionState" :location
                         common-lisp:nil :location-name "connectionState")
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :initform common-lisp:nil
                         :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-device-settings-sync-state
                         :shape "DeviceSettingsSyncState" :location
                         common-lisp:nil :location-name
                         "deviceSettingsSyncState")
                        (device-update-status :initarg :device-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-device-update-status
                         :shape "DeviceUpdateStatus" :location common-lisp:nil
                         :location-name "deviceUpdateStatus")
                        (hd-device-settings :initarg :hd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-hd-device-settings
                         :shape "InputDeviceHdSettings" :location
                         common-lisp:nil :location-name "hdDeviceSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-mac-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "macAddress")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "name")
                        (network-settings :initarg :network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-network-settings
                         :shape "InputDeviceNetworkSettings" :location
                         common-lisp:nil :location-name "networkSettings")
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-serial-number
                         :shape "__string" :location common-lisp:nil
                         :location-name "serialNumber")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-type
                         :shape "InputDeviceType" :location common-lisp:nil
                         :location-name "type")
                        (uhd-device-settings :initarg :uhd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-uhd-device-settings
                         :shape "InputDeviceUhdSettings" :location
                         common-lisp:nil :location-name "uhdDeviceSettings")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-response-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone")
                        (medialive-input-arns :initarg :medialive-input-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-medialive-input-arns
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "medialiveInputArns")
                        (output-type :initarg :output-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-output-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-response-output-type
                         :shape "InputDeviceOutputType" :location
                         common-lisp:nil :location-name "outputType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-response
                    'make-describe-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medialive-input-arns))
      (common-lisp:list
       (common-lisp:cons "MedialiveInputArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "OutputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-thumbnail-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-thumbnail-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId")
                        (accept :initarg :accept :initform
                         (common-lisp:error ":accept is required") :type
                         (common-lisp:or accept-header common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-thumbnail-request-accept
                         :shape "AcceptHeader" :location "header"
                         :location-name "accept"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-device-thumbnail-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-thumbnail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-thumbnail-request
                    'make-describe-input-device-thumbnail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-thumbnail-response common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or input-device-thumbnail
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-thumbnail-response-body
                         :shape "InputDeviceThumbnail" :location
                         common-lisp:nil :location-name "body")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-thumbnail-response-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type")
                        (content-length :initarg :content-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         struct-shape-describe-input-device-thumbnail-response-content-length
                         :shape "__long" :location "header" :location-name
                         "Content-Length")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-device-thumbnail-response-etag
                         :shape "__string" :location "header" :location-name
                         "ETag")
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestamp| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-device-thumbnail-response-last-modified
                         :shape "__timestamp" :location "header" :location-name
                         "Last-Modified"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-device-thumbnail-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-thumbnail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-thumbnail-response
                    'make-describe-input-device-thumbnail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "body")))
(common-lisp:progn
 (common-lisp:defclass describe-input-request common-lisp:nil
                       ((input-id :initarg :input-id :initform
                         (common-lisp:error ":input-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-request-input-id :shape
                         "__string" :location "uri" :location-name "inputId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-request 'make-describe-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (attached-channels :initarg :attached-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-attached-channels
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "attachedChannels")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-destinations
                         :shape "__listOfInputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (input-class :initarg :input-class :initform
                         common-lisp:nil :type
                         (common-lisp:or input-class common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-input-class
                         :shape "InputClass" :location common-lisp:nil
                         :location-name "inputClass")
                        (input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-input-devices
                         :shape "__listOfInputDeviceSettings" :location
                         common-lisp:nil :location-name "inputDevices")
                        (input-partner-ids :initarg :input-partner-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-input-partner-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputPartnerIds")
                        (input-source-type :initarg :input-source-type
                         :initform common-lisp:nil :type
                         (common-lisp:or input-source-type common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-input-source-type
                         :shape "InputSourceType" :location common-lisp:nil
                         :location-name "inputSourceType")
                        (media-connect-flows :initarg :media-connect-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMediaConnectFlow|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-media-connect-flows
                         :shape "__listOfMediaConnectFlow" :location
                         common-lisp:nil :location-name "mediaConnectFlows")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-response-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroups")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInputSource|
                                         common-lisp:null)
                         :accessor struct-shape-describe-input-response-sources
                         :shape "__listOfInputSource" :location common-lisp:nil
                         :location-name "sources")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or input-state common-lisp:null)
                         :accessor struct-shape-describe-input-response-state
                         :shape "InputState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-input-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-describe-input-response-type :shape
                         "InputType" :location common-lisp:nil :location-name
                         "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-response 'make-describe-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-channels))
      (common-lisp:list
       (common-lisp:cons "AttachedChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-class))
      (common-lisp:list
       (common-lisp:cons "InputClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-partner-ids))
      (common-lisp:list
       (common-lisp:cons "InputPartnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-type))
      (common-lisp:list
       (common-lisp:cons "InputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-security-group-request common-lisp:nil
                       ((input-security-group-id :initarg
                         :input-security-group-id :initform
                         (common-lisp:error
                          ":input-security-group-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-security-group-request-input-security-group-id
                         :shape "__string" :location "uri" :location-name
                         "inputSecurityGroupId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-security-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-security-group-request
                    'make-describe-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-security-group-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-security-group-response-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "arn")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-input-security-group-response-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "id")
                        (inputs :initarg :inputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-input-security-group-response-inputs
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputs")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or input-security-group-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-security-group-response-state
                         :shape "InputSecurityGroupState" :location
                         common-lisp:nil :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-input-security-group-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (whitelist-rules :initarg :whitelist-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputWhitelistRule|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-input-security-group-response-whitelist-rules
                         :shape "__listOfInputWhitelistRule" :location
                         common-lisp:nil :location-name "whitelistRules"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-input-security-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-input-security-group-response
                    'make-describe-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-program-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-program-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId")
                        (program-name :initarg :program-name :initform
                         (common-lisp:error ":program-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-program-request-program-name
                         :shape "__string" :location "uri" :location-name
                         "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-multiplex-program-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-program-request
                    'make-describe-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-program-response common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-program-response-channel-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "channelId")
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-program-response-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings")
                        (packet-identifiers-map :initarg
                         :packet-identifiers-map :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          multiplex-program-packet-identifiers-map
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-program-response-packet-identifiers-map
                         :shape "MultiplexProgramPacketIdentifiersMap"
                         :location common-lisp:nil :location-name
                         "packetIdentifiersMap")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMultiplexProgramPipelineDetail|
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-program-response-pipeline-details
                         :shape "__listOfMultiplexProgramPipelineDetail"
                         :location common-lisp:nil :location-name
                         "pipelineDetails")
                        (program-name :initarg :program-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-program-response-program-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-multiplex-program-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-program-response
                    'make-describe-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-multiplex-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-request
                    'make-describe-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-response-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-response-destinations
                         :shape "__listOfMultiplexOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-response-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-multiplex-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (program-count :initarg :program-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-response-program-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programCount")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor
                         struct-shape-describe-multiplex-response-state :shape
                         "MultiplexState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-multiplex-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-multiplex-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-response
                    'make-describe-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-request common-lisp:nil
                       ((offering-id :initarg :offering-id :initform
                         (common-lisp:error ":offering-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-offering-request-offering-id
                         :shape "__string" :location "uri" :location-name
                         "offeringId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-offering-request
                    'make-describe-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-offering-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-offering-response-currency-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "currencyCode")
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-describe-offering-response-duration
                         :shape "__integer" :location common-lisp:nil
                         :location-name "duration")
                        (duration-units :initarg :duration-units :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-offering-response-duration-units
                         :shape "OfferingDurationUnits" :location
                         common-lisp:nil :location-name "durationUnits")
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-describe-offering-response-fixed-price
                         :shape "__double" :location common-lisp:nil
                         :location-name "fixedPrice")
                        (offering-description :initarg :offering-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-offering-response-offering-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringDescription")
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-offering-response-offering-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringId")
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor
                         struct-shape-describe-offering-response-offering-type
                         :shape "OfferingType" :location common-lisp:nil
                         :location-name "offeringType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-offering-response-region :shape
                         "__string" :location common-lisp:nil :location-name
                         "region")
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-offering-response-resource-specification
                         :shape "ReservationResourceSpecification" :location
                         common-lisp:nil :location-name
                         "resourceSpecification")
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-describe-offering-response-usage-price
                         :shape "__double" :location common-lisp:nil
                         :location-name "usagePrice"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-offering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-offering-response
                    'make-describe-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-request common-lisp:nil
                       ((reservation-id :initarg :reservation-id :initform
                         (common-lisp:error ":reservation-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-request-reservation-id
                         :shape "__string" :location "uri" :location-name
                         "reservationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reservation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-request
                    'make-describe-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "count")
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-currency-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "currencyCode")
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-duration
                         :shape "__integer" :location common-lisp:nil
                         :location-name "duration")
                        (duration-units :initarg :duration-units :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-duration-units
                         :shape "OfferingDurationUnits" :location
                         common-lisp:nil :location-name "durationUnits")
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-end :shape
                         "__string" :location common-lisp:nil :location-name
                         "end")
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-fixed-price
                         :shape "__double" :location common-lisp:nil
                         :location-name "fixedPrice")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (offering-description :initarg :offering-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-offering-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringDescription")
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-offering-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringId")
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-offering-type
                         :shape "OfferingType" :location common-lisp:nil
                         :location-name "offeringType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-region
                         :shape "__string" :location common-lisp:nil
                         :location-name "region")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-renewal-settings
                         :shape "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings")
                        (reservation-id :initarg :reservation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-reservation-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "reservationId")
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-resource-specification
                         :shape "ReservationResourceSpecification" :location
                         common-lisp:nil :location-name
                         "resourceSpecification")
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-start
                         :shape "__string" :location common-lisp:nil
                         :location-name "start")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-state
                         :shape "ReservationState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-describe-reservation-response-usage-price
                         :shape "__double" :location common-lisp:nil
                         :location-name "usagePrice"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reservation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-response
                    'make-describe-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-schedule-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-schedule-request-channel-id
                         :shape "__string" :location "uri" :location-name
                         "channelId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-schedule-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-schedule-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-schedule-request
                    'make-describe-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-schedule-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-schedule-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (schedule-actions :initarg :schedule-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-schedule-response-schedule-actions
                         :shape "__listOfScheduleAction" :location
                         common-lisp:nil :location-name "scheduleActions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-schedule-response
                    'make-describe-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thumbnails-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-thumbnails-request-channel-id
                         :shape "__string" :location "uri" :location-name
                         "channelId")
                        (pipeline-id :initarg :pipeline-id :initform
                         (common-lisp:error ":pipeline-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-thumbnails-request-pipeline-id
                         :shape "__string" :location "querystring"
                         :location-name "pipelineId")
                        (thumbnail-type :initarg :thumbnail-type :initform
                         (common-lisp:error ":thumbnail-type is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-thumbnails-request-thumbnail-type
                         :shape "__string" :location "querystring"
                         :location-name "thumbnailType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thumbnails-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thumbnails-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thumbnails-request
                    'make-describe-thumbnails-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thumbnails-response common-lisp:nil
                       ((thumbnail-details :initarg :thumbnail-details
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfThumbnailDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-thumbnails-response-thumbnail-details
                         :shape "__listOfThumbnailDetail" :location
                         common-lisp:nil :location-name "thumbnailDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thumbnails-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thumbnails-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thumbnails-response
                    'make-describe-thumbnails-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-details))
      (common-lisp:list
       (common-lisp:cons "ThumbnailDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thumbnails-result-model common-lisp:nil
                       ((thumbnail-details :initarg :thumbnail-details
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfThumbnailDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-thumbnails-result-model-thumbnail-details
                         :shape "__listOfThumbnailDetail" :location
                         common-lisp:nil :location-name "thumbnailDetails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thumbnails-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-thumbnails-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thumbnails-result-model
                    'make-describe-thumbnails-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-details))
      (common-lisp:list
       (common-lisp:cons "ThumbnailDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thumbnails-result-model))
   common-lisp:nil))
(common-lisp:deftype device-settings-sync-state () 'common-lisp:string)
(common-lisp:deftype device-update-status () 'common-lisp:string)
(common-lisp:deftype dolby-eprogram-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dolby-vision81settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dolby-vision81settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dolby-vision81settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dolby-vision81settings 'make-dolby-vision81settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-nit-settings common-lisp:nil
                       ((network-id :initarg :network-id :initform
                         (common-lisp:error ":network-id is required") :type
                         (common-lisp:or |__integerMin0Max65536|
                                         common-lisp:null)
                         :accessor struct-shape-dvb-nit-settings-network-id
                         :shape "__integerMin0Max65536" :location
                         common-lisp:nil :location-name "networkId")
                        (network-name :initarg :network-name :initform
                         (common-lisp:error ":network-name is required") :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor struct-shape-dvb-nit-settings-network-name
                         :shape "__stringMin1Max256" :location common-lisp:nil
                         :location-name "networkName")
                        (rep-interval :initarg :rep-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin25Max10000|
                                         common-lisp:null)
                         :accessor struct-shape-dvb-nit-settings-rep-interval
                         :shape "__integerMin25Max10000" :location
                         common-lisp:nil :location-name "repInterval"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dvb-nit-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-nit-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dvb-nit-settings 'make-dvb-nit-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sdt-output-sdt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-sdt-settings common-lisp:nil
                       ((output-sdt :initarg :output-sdt :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sdt-output-sdt common-lisp:null)
                         :accessor struct-shape-dvb-sdt-settings-output-sdt
                         :shape "DvbSdtOutputSdt" :location common-lisp:nil
                         :location-name "outputSdt")
                        (rep-interval :initarg :rep-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin25Max2000|
                                         common-lisp:null)
                         :accessor struct-shape-dvb-sdt-settings-rep-interval
                         :shape "__integerMin25Max2000" :location
                         common-lisp:nil :location-name "repInterval")
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor struct-shape-dvb-sdt-settings-service-name
                         :shape "__stringMin1Max256" :location common-lisp:nil
                         :location-name "serviceName")
                        (service-provider-name :initarg :service-provider-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor
                         struct-shape-dvb-sdt-settings-service-provider-name
                         :shape "__stringMin1Max256" :location common-lisp:nil
                         :location-name "serviceProviderName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dvb-sdt-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sdt-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dvb-sdt-settings 'make-dvb-sdt-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-sdt))
      (common-lisp:list
       (common-lisp:cons "OutputSdt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-provider-name))
      (common-lisp:list
       (common-lisp:cons "ServiceProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-destination-alignment () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-background-color ()
  'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-font-color () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-outline-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-sub-destination-settings common-lisp:nil
                       ((alignment :initarg :alignment :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-destination-alignment
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-alignment
                         :shape "DvbSubDestinationAlignment" :location
                         common-lisp:nil :location-name "alignment")
                        (background-color :initarg :background-color :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-destination-background-color
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-background-color
                         :shape "DvbSubDestinationBackgroundColor" :location
                         common-lisp:nil :location-name "backgroundColor")
                        (background-opacity :initarg :background-opacity
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-background-opacity
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "backgroundOpacity")
                        (font :initarg :font :initform common-lisp:nil :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-font :shape
                         "InputLocation" :location common-lisp:nil
                         :location-name "font")
                        (font-color :initarg :font-color :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-destination-font-color
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-font-color
                         :shape "DvbSubDestinationFontColor" :location
                         common-lisp:nil :location-name "fontColor")
                        (font-opacity :initarg :font-opacity :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-font-opacity
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "fontOpacity")
                        (font-resolution :initarg :font-resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin96Max600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-font-resolution
                         :shape "__integerMin96Max600" :location
                         common-lisp:nil :location-name "fontResolution")
                        (font-size :initarg :font-size :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-dvb-sub-destination-settings-font-size
                         :shape "__string" :location common-lisp:nil
                         :location-name "fontSize")
                        (outline-color :initarg :outline-color :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-destination-outline-color
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-outline-color
                         :shape "DvbSubDestinationOutlineColor" :location
                         common-lisp:nil :location-name "outlineColor")
                        (outline-size :initarg :outline-size :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max10| common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-outline-size
                         :shape "__integerMin0Max10" :location common-lisp:nil
                         :location-name "outlineSize")
                        (shadow-color :initarg :shadow-color :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-destination-shadow-color
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-shadow-color
                         :shape "DvbSubDestinationShadowColor" :location
                         common-lisp:nil :location-name "shadowColor")
                        (shadow-opacity :initarg :shadow-opacity :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-shadow-opacity
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "shadowOpacity")
                        (shadow-xoffset :initarg :shadow-xoffset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-shadow-xoffset
                         :shape "__integer" :location common-lisp:nil
                         :location-name "shadowXOffset")
                        (shadow-yoffset :initarg :shadow-yoffset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-shadow-yoffset
                         :shape "__integer" :location common-lisp:nil
                         :location-name "shadowYOffset")
                        (teletext-grid-control :initarg :teletext-grid-control
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          dvb-sub-destination-teletext-grid-control
                          common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-teletext-grid-control
                         :shape "DvbSubDestinationTeletextGridControl"
                         :location common-lisp:nil :location-name
                         "teletextGridControl")
                        (xposition :initarg :xposition :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-xposition
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "xPosition")
                        (yposition :initarg :yposition :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-destination-settings-yposition
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "yPosition"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dvb-sub-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sub-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-destination-settings
                    'make-dvb-sub-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font))
      (common-lisp:list
       (common-lisp:cons "Font"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-grid-control))
      (common-lisp:list
       (common-lisp:cons "TeletextGridControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-destination-shadow-color () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-teletext-grid-control ()
  'common-lisp:string)
(common-lisp:deftype dvb-sub-ocr-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-sub-source-settings common-lisp:nil
                       ((ocr-language :initarg :ocr-language :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sub-ocr-language common-lisp:null)
                         :accessor
                         struct-shape-dvb-sub-source-settings-ocr-language
                         :shape "DvbSubOcrLanguage" :location common-lisp:nil
                         :location-name "ocrLanguage")
                        (pid :initarg :pid :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-dvb-sub-source-settings-pid
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "pid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dvb-sub-source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sub-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-source-settings 'make-dvb-sub-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocr-language))
      (common-lisp:list
       (common-lisp:cons "OcrLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-tdt-settings common-lisp:nil
                       ((rep-interval :initarg :rep-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1000Max30000|
                                         common-lisp:null)
                         :accessor struct-shape-dvb-tdt-settings-rep-interval
                         :shape "__integerMin1000Max30000" :location
                         common-lisp:nil :location-name "repInterval"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dvb-tdt-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-tdt-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dvb-tdt-settings 'make-dvb-tdt-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   common-lisp:nil))
(common-lisp:deftype eac3atmos-coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3atmos-drc-line () 'common-lisp:string)
(common-lisp:deftype eac3atmos-drc-rf () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eac3atmos-settings common-lisp:nil
                       ((bitrate :initarg :bitrate :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-eac3atmos-settings-bitrate
                         :shape "__double" :location common-lisp:nil
                         :location-name "bitrate")
                        (coding-mode :initarg :coding-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3atmos-coding-mode
                                         common-lisp:null)
                         :accessor struct-shape-eac3atmos-settings-coding-mode
                         :shape "Eac3AtmosCodingMode" :location common-lisp:nil
                         :location-name "codingMode")
                        (dialnorm :initarg :dialnorm :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor struct-shape-eac3atmos-settings-dialnorm
                         :shape "__integerMin1Max31" :location common-lisp:nil
                         :location-name "dialnorm")
                        (drc-line :initarg :drc-line :initform common-lisp:nil
                         :type
                         (common-lisp:or eac3atmos-drc-line common-lisp:null)
                         :accessor struct-shape-eac3atmos-settings-drc-line
                         :shape "Eac3AtmosDrcLine" :location common-lisp:nil
                         :location-name "drcLine")
                        (drc-rf :initarg :drc-rf :initform common-lisp:nil
                         :type
                         (common-lisp:or eac3atmos-drc-rf common-lisp:null)
                         :accessor struct-shape-eac3atmos-settings-drc-rf
                         :shape "Eac3AtmosDrcRf" :location common-lisp:nil
                         :location-name "drcRf")
                        (height-trim :initarg :height-trim :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-eac3atmos-settings-height-trim :shape
                         "__double" :location common-lisp:nil :location-name
                         "heightTrim")
                        (surround-trim :initarg :surround-trim :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-eac3atmos-settings-surround-trim :shape
                         "__double" :location common-lisp:nil :location-name
                         "surroundTrim"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eac3atmos-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eac3atmos-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eac3atmos-settings 'make-eac3atmos-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-line))
      (common-lisp:list
       (common-lisp:cons "DrcLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-rf))
      (common-lisp:list
       (common-lisp:cons "DrcRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height-trim))
      (common-lisp:list
       (common-lisp:cons "HeightTrim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-trim))
      (common-lisp:list
       (common-lisp:cons "SurroundTrim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   common-lisp:nil))
(common-lisp:deftype eac3attenuation-control () 'common-lisp:string)
(common-lisp:deftype eac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype eac3coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3dc-filter () 'common-lisp:string)
(common-lisp:deftype eac3drc-line () 'common-lisp:string)
(common-lisp:deftype eac3drc-rf () 'common-lisp:string)
(common-lisp:deftype eac3lfe-control () 'common-lisp:string)
(common-lisp:deftype eac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype eac3metadata-control () 'common-lisp:string)
(common-lisp:deftype eac3passthrough-control () 'common-lisp:string)
(common-lisp:deftype eac3phase-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eac3settings common-lisp:nil
                       ((attenuation-control :initarg :attenuation-control
                         :initform common-lisp:nil :type
                         (common-lisp:or eac3attenuation-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-eac3settings-attenuation-control :shape
                         "Eac3AttenuationControl" :location common-lisp:nil
                         :location-name "attenuationControl")
                        (bitrate :initarg :bitrate :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-eac3settings-bitrate :shape
                         "__double" :location common-lisp:nil :location-name
                         "bitrate")
                        (bitstream-mode :initarg :bitstream-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3bitstream-mode common-lisp:null)
                         :accessor struct-shape-eac3settings-bitstream-mode
                         :shape "Eac3BitstreamMode" :location common-lisp:nil
                         :location-name "bitstreamMode")
                        (coding-mode :initarg :coding-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3coding-mode common-lisp:null)
                         :accessor struct-shape-eac3settings-coding-mode :shape
                         "Eac3CodingMode" :location common-lisp:nil
                         :location-name "codingMode")
                        (dc-filter :initarg :dc-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3dc-filter common-lisp:null)
                         :accessor struct-shape-eac3settings-dc-filter :shape
                         "Eac3DcFilter" :location common-lisp:nil
                         :location-name "dcFilter")
                        (dialnorm :initarg :dialnorm :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor struct-shape-eac3settings-dialnorm :shape
                         "__integerMin1Max31" :location common-lisp:nil
                         :location-name "dialnorm")
                        (drc-line :initarg :drc-line :initform common-lisp:nil
                         :type (common-lisp:or eac3drc-line common-lisp:null)
                         :accessor struct-shape-eac3settings-drc-line :shape
                         "Eac3DrcLine" :location common-lisp:nil :location-name
                         "drcLine")
                        (drc-rf :initarg :drc-rf :initform common-lisp:nil
                         :type (common-lisp:or eac3drc-rf common-lisp:null)
                         :accessor struct-shape-eac3settings-drc-rf :shape
                         "Eac3DrcRf" :location common-lisp:nil :location-name
                         "drcRf")
                        (lfe-control :initarg :lfe-control :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3lfe-control common-lisp:null)
                         :accessor struct-shape-eac3settings-lfe-control :shape
                         "Eac3LfeControl" :location common-lisp:nil
                         :location-name "lfeControl")
                        (lfe-filter :initarg :lfe-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3lfe-filter common-lisp:null)
                         :accessor struct-shape-eac3settings-lfe-filter :shape
                         "Eac3LfeFilter" :location common-lisp:nil
                         :location-name "lfeFilter")
                        (lo-ro-center-mix-level :initarg
                         :lo-ro-center-mix-level :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-eac3settings-lo-ro-center-mix-level
                         :shape "__double" :location common-lisp:nil
                         :location-name "loRoCenterMixLevel")
                        (lo-ro-surround-mix-level :initarg
                         :lo-ro-surround-mix-level :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-eac3settings-lo-ro-surround-mix-level
                         :shape "__double" :location common-lisp:nil
                         :location-name "loRoSurroundMixLevel")
                        (lt-rt-center-mix-level :initarg
                         :lt-rt-center-mix-level :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-eac3settings-lt-rt-center-mix-level
                         :shape "__double" :location common-lisp:nil
                         :location-name "ltRtCenterMixLevel")
                        (lt-rt-surround-mix-level :initarg
                         :lt-rt-surround-mix-level :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-eac3settings-lt-rt-surround-mix-level
                         :shape "__double" :location common-lisp:nil
                         :location-name "ltRtSurroundMixLevel")
                        (metadata-control :initarg :metadata-control :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3metadata-control common-lisp:null)
                         :accessor struct-shape-eac3settings-metadata-control
                         :shape "Eac3MetadataControl" :location common-lisp:nil
                         :location-name "metadataControl")
                        (passthrough-control :initarg :passthrough-control
                         :initform common-lisp:nil :type
                         (common-lisp:or eac3passthrough-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-eac3settings-passthrough-control :shape
                         "Eac3PassthroughControl" :location common-lisp:nil
                         :location-name "passthroughControl")
                        (phase-control :initarg :phase-control :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3phase-control common-lisp:null)
                         :accessor struct-shape-eac3settings-phase-control
                         :shape "Eac3PhaseControl" :location common-lisp:nil
                         :location-name "phaseControl")
                        (stereo-downmix :initarg :stereo-downmix :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3stereo-downmix common-lisp:null)
                         :accessor struct-shape-eac3settings-stereo-downmix
                         :shape "Eac3StereoDownmix" :location common-lisp:nil
                         :location-name "stereoDownmix")
                        (surround-ex-mode :initarg :surround-ex-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3surround-ex-mode common-lisp:null)
                         :accessor struct-shape-eac3settings-surround-ex-mode
                         :shape "Eac3SurroundExMode" :location common-lisp:nil
                         :location-name "surroundExMode")
                        (surround-mode :initarg :surround-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or eac3surround-mode common-lisp:null)
                         :accessor struct-shape-eac3settings-surround-mode
                         :shape "Eac3SurroundMode" :location common-lisp:nil
                         :location-name "surroundMode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eac3settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eac3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'eac3settings 'make-eac3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attenuation-control))
      (common-lisp:list
       (common-lisp:cons "AttenuationControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dc-filter))
      (common-lisp:list
       (common-lisp:cons "DcFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-line))
      (common-lisp:list
       (common-lisp:cons "DrcLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-rf))
      (common-lisp:list
       (common-lisp:cons "DrcRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-control))
      (common-lisp:list
       (common-lisp:cons "LfeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passthrough-control))
      (common-lisp:list
       (common-lisp:cons "PassthroughControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phase-control))
      (common-lisp:list
       (common-lisp:cons "PhaseControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stereo-downmix))
      (common-lisp:list
       (common-lisp:cons "StereoDownmix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-ex-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundExMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3settings))
   common-lisp:nil))
(common-lisp:deftype eac3stereo-downmix () 'common-lisp:string)
(common-lisp:deftype eac3surround-ex-mode () 'common-lisp:string)
(common-lisp:deftype eac3surround-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ebu-tt-ddestination-settings common-lisp:nil
                       ((copyright-holder :initarg :copyright-holder :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMax1000| common-lisp:null)
                         :accessor
                         struct-shape-ebu-tt-ddestination-settings-copyright-holder
                         :shape "__stringMax1000" :location common-lisp:nil
                         :location-name "copyrightHolder")
                        (fill-line-gap :initarg :fill-line-gap :initform
                         common-lisp:nil :type
                         (common-lisp:or ebu-tt-dfill-line-gap-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-ebu-tt-ddestination-settings-fill-line-gap
                         :shape "EbuTtDFillLineGapControl" :location
                         common-lisp:nil :location-name "fillLineGap")
                        (font-family :initarg :font-family :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-ebu-tt-ddestination-settings-font-family
                         :shape "__string" :location common-lisp:nil
                         :location-name "fontFamily")
                        (style-control :initarg :style-control :initform
                         common-lisp:nil :type
                         (common-lisp:or ebu-tt-ddestination-style-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-ebu-tt-ddestination-settings-style-control
                         :shape "EbuTtDDestinationStyleControl" :location
                         common-lisp:nil :location-name "styleControl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebu-tt-ddestination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebu-tt-ddestination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebu-tt-ddestination-settings
                    'make-ebu-tt-ddestination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copyright-holder))
      (common-lisp:list
       (common-lisp:cons "CopyrightHolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-line-gap))
      (common-lisp:list
       (common-lisp:cons "FillLineGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-family))
      (common-lisp:list
       (common-lisp:cons "FontFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   common-lisp:nil))
(common-lisp:deftype ebu-tt-ddestination-style-control () 'common-lisp:string)
(common-lisp:deftype ebu-tt-dfill-line-gap-control () 'common-lisp:string)
(common-lisp:deftype embedded-convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass embedded-destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-embedded-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'embedded-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'embedded-destination-settings
                    'make-embedded-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass embedded-plus-scte20destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-embedded-plus-scte20destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'embedded-plus-scte20destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'embedded-plus-scte20destination-settings
                    'make-embedded-plus-scte20destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   common-lisp:nil))
(common-lisp:deftype embedded-scte20detection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass embedded-source-settings common-lisp:nil
                       ((convert608to708 :initarg :convert608to708 :initform
                         common-lisp:nil :type
                         (common-lisp:or embedded-convert608to708
                                         common-lisp:null)
                         :accessor
                         struct-shape-embedded-source-settings-convert608to708
                         :shape "EmbeddedConvert608To708" :location
                         common-lisp:nil :location-name "convert608To708")
                        (scte20detection :initarg :scte20detection :initform
                         common-lisp:nil :type
                         (common-lisp:or embedded-scte20detection
                                         common-lisp:null)
                         :accessor
                         struct-shape-embedded-source-settings-scte20detection
                         :shape "EmbeddedScte20Detection" :location
                         common-lisp:nil :location-name "scte20Detection")
                        (source608channel-number :initarg
                         :source608channel-number :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         struct-shape-embedded-source-settings-source608channel-number
                         :shape "__integerMin1Max4" :location common-lisp:nil
                         :location-name "source608ChannelNumber")
                        (source608track-number :initarg :source608track-number
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max5| common-lisp:null)
                         :accessor
                         struct-shape-embedded-source-settings-source608track-number
                         :shape "__integerMin1Max5" :location common-lisp:nil
                         :location-name "source608TrackNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-embedded-source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'embedded-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'embedded-source-settings 'make-embedded-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte20detection))
      (common-lisp:list
       (common-lisp:cons "Scte20Detection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608track-number))
      (common-lisp:list
       (common-lisp:cons "Source608TrackNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass empty common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-empty
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'empty
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'empty 'make-empty))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encoder-settings common-lisp:nil
                       ((audio-descriptions :initarg :audio-descriptions
                         :initform
                         (common-lisp:error ":audio-descriptions is required")
                         :type
                         (common-lisp:or |__listOfAudioDescription|
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-audio-descriptions
                         :shape "__listOfAudioDescription" :location
                         common-lisp:nil :location-name "audioDescriptions")
                        (avail-blanking :initarg :avail-blanking :initform
                         common-lisp:nil :type
                         (common-lisp:or avail-blanking common-lisp:null)
                         :accessor struct-shape-encoder-settings-avail-blanking
                         :shape "AvailBlanking" :location common-lisp:nil
                         :location-name "availBlanking")
                        (avail-configuration :initarg :avail-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or avail-configuration common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-avail-configuration
                         :shape "AvailConfiguration" :location common-lisp:nil
                         :location-name "availConfiguration")
                        (blackout-slate :initarg :blackout-slate :initform
                         common-lisp:nil :type
                         (common-lisp:or blackout-slate common-lisp:null)
                         :accessor struct-shape-encoder-settings-blackout-slate
                         :shape "BlackoutSlate" :location common-lisp:nil
                         :location-name "blackoutSlate")
                        (caption-descriptions :initarg :caption-descriptions
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfCaptionDescription|
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-caption-descriptions
                         :shape "__listOfCaptionDescription" :location
                         common-lisp:nil :location-name "captionDescriptions")
                        (feature-activations :initarg :feature-activations
                         :initform common-lisp:nil :type
                         (common-lisp:or feature-activations common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-feature-activations
                         :shape "FeatureActivations" :location common-lisp:nil
                         :location-name "featureActivations")
                        (global-configuration :initarg :global-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or global-configuration common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-global-configuration
                         :shape "GlobalConfiguration" :location common-lisp:nil
                         :location-name "globalConfiguration")
                        (motion-graphics-configuration :initarg
                         :motion-graphics-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or motion-graphics-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-motion-graphics-configuration
                         :shape "MotionGraphicsConfiguration" :location
                         common-lisp:nil :location-name
                         "motionGraphicsConfiguration")
                        (nielsen-configuration :initarg :nielsen-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or nielsen-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-nielsen-configuration
                         :shape "NielsenConfiguration" :location
                         common-lisp:nil :location-name "nielsenConfiguration")
                        (output-groups :initarg :output-groups :initform
                         (common-lisp:error ":output-groups is required") :type
                         (common-lisp:or |__listOfOutputGroup|
                                         common-lisp:null)
                         :accessor struct-shape-encoder-settings-output-groups
                         :shape "__listOfOutputGroup" :location common-lisp:nil
                         :location-name "outputGroups")
                        (timecode-config :initarg :timecode-config :initform
                         (common-lisp:error ":timecode-config is required")
                         :type
                         (common-lisp:or timecode-config common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-timecode-config :shape
                         "TimecodeConfig" :location common-lisp:nil
                         :location-name "timecodeConfig")
                        (video-descriptions :initarg :video-descriptions
                         :initform
                         (common-lisp:error ":video-descriptions is required")
                         :type
                         (common-lisp:or |__listOfVideoDescription|
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-video-descriptions
                         :shape "__listOfVideoDescription" :location
                         common-lisp:nil :location-name "videoDescriptions")
                        (thumbnail-configuration :initarg
                         :thumbnail-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or thumbnail-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-thumbnail-configuration
                         :shape "ThumbnailConfiguration" :location
                         common-lisp:nil :location-name
                         "thumbnailConfiguration")
                        (color-correction-settings :initarg
                         :color-correction-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or color-correction-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-encoder-settings-color-correction-settings
                         :shape "ColorCorrectionSettings" :location
                         common-lisp:nil :location-name
                         "colorCorrectionSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encoder-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encoder-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encoder-settings 'make-encoder-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encoder-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encoder-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-descriptions))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-blanking))
      (common-lisp:list
       (common-lisp:cons "AvailBlanking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-configuration))
      (common-lisp:list
       (common-lisp:cons "AvailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blackout-slate))
      (common-lisp:list
       (common-lisp:cons "BlackoutSlate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-descriptions))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-activations))
      (common-lisp:list
       (common-lisp:cons "FeatureActivations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-configuration))
      (common-lisp:list
       (common-lisp:cons "GlobalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-configuration))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-configuration))
      (common-lisp:list
       (common-lisp:cons "NielsenConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-groups))
      (common-lisp:list
       (common-lisp:cons "OutputGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-config))
      (common-lisp:list
       (common-lisp:cons "TimecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-descriptions))
      (common-lisp:list
       (common-lisp:cons "VideoDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thumbnail-configuration))
      (common-lisp:list
       (common-lisp:cons "ThumbnailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-correction-settings))
      (common-lisp:list
       (common-lisp:cons "ColorCorrectionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encoder-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass epoch-locking-settings common-lisp:nil
                       ((custom-epoch :initarg :custom-epoch :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-epoch-locking-settings-custom-epoch
                         :shape "__string" :location common-lisp:nil
                         :location-name "customEpoch")
                        (jam-sync-time :initarg :jam-sync-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-epoch-locking-settings-jam-sync-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "jamSyncTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-epoch-locking-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'epoch-locking-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'epoch-locking-settings 'make-epoch-locking-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          epoch-locking-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          epoch-locking-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-epoch))
      (common-lisp:list
       (common-lisp:cons "CustomEpoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jam-sync-time))
      (common-lisp:list
       (common-lisp:cons "JamSyncTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          epoch-locking-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass esam common-lisp:nil
                       ((acquisition-point-id :initarg :acquisition-point-id
                         :initform
                         (common-lisp:error
                          ":acquisition-point-id is required")
                         :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor struct-shape-esam-acquisition-point-id
                         :shape "__stringMax256" :location common-lisp:nil
                         :location-name "acquisitionPointId")
                        (ad-avail-offset :initarg :ad-avail-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor struct-shape-esam-ad-avail-offset :shape
                         "__integerMinNegative1000Max1000" :location
                         common-lisp:nil :location-name "adAvailOffset")
                        (password-param :initarg :password-param :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-esam-password-param :shape "__string"
                         :location common-lisp:nil :location-name
                         "passwordParam")
                        (pois-endpoint :initarg :pois-endpoint :initform
                         (common-lisp:error ":pois-endpoint is required") :type
                         (common-lisp:or |__stringMax2048| common-lisp:null)
                         :accessor struct-shape-esam-pois-endpoint :shape
                         "__stringMax2048" :location common-lisp:nil
                         :location-name "poisEndpoint")
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-esam-username :shape "__string"
                         :location common-lisp:nil :location-name "username")
                        (zone-identity :initarg :zone-identity :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor struct-shape-esam-zone-identity :shape
                         "__stringMax256" :location common-lisp:nil
                         :location-name "zoneIdentity"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-esam (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'esam
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'esam 'make-esam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input esam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input esam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acquisition-point-id))
      (common-lisp:list
       (common-lisp:cons "AcquisitionPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pois-endpoint))
      (common-lisp:list
       (common-lisp:cons "PoisEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-identity))
      (common-lisp:list
       (common-lisp:cons "ZoneIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input esam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-condition common-lisp:nil
                       ((failover-condition-settings :initarg
                         :failover-condition-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or failover-condition-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-failover-condition-failover-condition-settings
                         :shape "FailoverConditionSettings" :location
                         common-lisp:nil :location-name
                         "failoverConditionSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failover-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-condition 'make-failover-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failover-condition-settings))
      (common-lisp:list
       (common-lisp:cons "FailoverConditionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-condition-settings common-lisp:nil
                       ((audio-silence-settings :initarg
                         :audio-silence-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or audio-silence-failover-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-failover-condition-settings-audio-silence-settings
                         :shape "AudioSilenceFailoverSettings" :location
                         common-lisp:nil :location-name "audioSilenceSettings")
                        (input-loss-settings :initarg :input-loss-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-failover-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-failover-condition-settings-input-loss-settings
                         :shape "InputLossFailoverSettings" :location
                         common-lisp:nil :location-name "inputLossSettings")
                        (video-black-settings :initarg :video-black-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or video-black-failover-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-failover-condition-settings-video-black-settings
                         :shape "VideoBlackFailoverSettings" :location
                         common-lisp:nil :location-name "videoBlackSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-condition-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failover-condition-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-condition-settings
                    'make-failover-condition-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-silence-settings))
      (common-lisp:list
       (common-lisp:cons "AudioSilenceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-settings))
      (common-lisp:list
       (common-lisp:cons "InputLossSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-black-settings))
      (common-lisp:list
       (common-lisp:cons "VideoBlackSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass feature-activations common-lisp:nil
                       ((input-prepare-schedule-actions :initarg
                         :input-prepare-schedule-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          feature-activations-input-prepare-schedule-actions
                          common-lisp:null)
                         :accessor
                         struct-shape-feature-activations-input-prepare-schedule-actions
                         :shape "FeatureActivationsInputPrepareScheduleActions"
                         :location common-lisp:nil :location-name
                         "inputPrepareScheduleActions")
                        (output-static-image-overlay-schedule-actions :initarg
                         :output-static-image-overlay-schedule-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          feature-activations-output-static-image-overlay-schedule-actions
                          common-lisp:null)
                         :accessor
                         struct-shape-feature-activations-output-static-image-overlay-schedule-actions
                         :shape
                         "FeatureActivationsOutputStaticImageOverlayScheduleActions"
                         :location common-lisp:nil :location-name
                         "outputStaticImageOverlayScheduleActions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-feature-activations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'feature-activations
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'feature-activations 'make-feature-activations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-activations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-activations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-prepare-schedule-actions))
      (common-lisp:list
       (common-lisp:cons "InputPrepareScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-static-image-overlay-schedule-actions))
      (common-lisp:list
       (common-lisp:cons "OutputStaticImageOverlayScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-activations))
   common-lisp:nil))
(common-lisp:deftype feature-activations-input-prepare-schedule-actions ()
  'common-lisp:string)
(common-lisp:deftype feature-activations-output-static-image-overlay-schedule-actions
                     ()
  'common-lisp:string)
(common-lisp:deftype fec-output-include-fec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fec-output-settings common-lisp:nil
                       ((column-depth :initarg :column-depth :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin4Max20| common-lisp:null)
                         :accessor
                         struct-shape-fec-output-settings-column-depth :shape
                         "__integerMin4Max20" :location common-lisp:nil
                         :location-name "columnDepth")
                        (include-fec :initarg :include-fec :initform
                         common-lisp:nil :type
                         (common-lisp:or fec-output-include-fec
                                         common-lisp:null)
                         :accessor struct-shape-fec-output-settings-include-fec
                         :shape "FecOutputIncludeFec" :location common-lisp:nil
                         :location-name "includeFec")
                        (row-length :initarg :row-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max20| common-lisp:null)
                         :accessor struct-shape-fec-output-settings-row-length
                         :shape "__integerMin1Max20" :location common-lisp:nil
                         :location-name "rowLength"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fec-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fec-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fec-output-settings 'make-fec-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fec-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fec-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-depth))
      (common-lisp:list
       (common-lisp:cons "ColumnDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-fec))
      (common-lisp:list
       (common-lisp:cons "IncludeFec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-length))
      (common-lisp:list
       (common-lisp:cons "RowLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fec-output-settings))
   common-lisp:nil))
(common-lisp:deftype fixed-afd () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fixed-mode-schedule-action-start-settings
                       common-lisp:nil
                       ((time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fixed-mode-schedule-action-start-settings-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "time"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fixed-mode-schedule-action-start-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fixed-mode-schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fixed-mode-schedule-action-start-settings
                    'make-fixed-mode-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fmp4hls-settings common-lisp:nil
                       ((audio-rendition-sets :initarg :audio-rendition-sets
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmp4hls-settings-audio-rendition-sets
                         :shape "__string" :location common-lisp:nil
                         :location-name "audioRenditionSets")
                        (nielsen-id3behavior :initarg :nielsen-id3behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or fmp4nielsen-id3behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-fmp4hls-settings-nielsen-id3behavior
                         :shape "Fmp4NielsenId3Behavior" :location
                         common-lisp:nil :location-name "nielsenId3Behavior")
                        (timed-metadata-behavior :initarg
                         :timed-metadata-behavior :initform common-lisp:nil
                         :type
                         (common-lisp:or fmp4timed-metadata-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-fmp4hls-settings-timed-metadata-behavior
                         :shape "Fmp4TimedMetadataBehavior" :location
                         common-lisp:nil :location-name
                         "timedMetadataBehavior"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fmp4hls-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fmp4hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fmp4hls-settings 'make-fmp4hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   common-lisp:nil))
(common-lisp:deftype fmp4nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype fmp4timed-metadata-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass follow-mode-schedule-action-start-settings
                       common-lisp:nil
                       ((follow-point :initarg :follow-point :initform
                         (common-lisp:error ":follow-point is required") :type
                         (common-lisp:or follow-point common-lisp:null)
                         :accessor
                         struct-shape-follow-mode-schedule-action-start-settings-follow-point
                         :shape "FollowPoint" :location common-lisp:nil
                         :location-name "followPoint")
                        (reference-action-name :initarg :reference-action-name
                         :initform
                         (common-lisp:error
                          ":reference-action-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-follow-mode-schedule-action-start-settings-reference-action-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "referenceActionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-follow-mode-schedule-action-start-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'follow-mode-schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'follow-mode-schedule-action-start-settings
                    'make-follow-mode-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-point))
      (common-lisp:list
       (common-lisp:cons "FollowPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-action-name))
      (common-lisp:list
       (common-lisp:cons "ReferenceActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:deftype follow-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass frame-capture-cdn-settings common-lisp:nil
                       ((frame-capture-s3settings :initarg
                         :frame-capture-s3settings :initform common-lisp:nil
                         :type
                         (common-lisp:or frame-capture-s3settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-cdn-settings-frame-capture-s3settings
                         :shape "FrameCaptureS3Settings" :location
                         common-lisp:nil :location-name
                         "frameCaptureS3Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-capture-cdn-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-cdn-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-capture-cdn-settings
                    'make-frame-capture-cdn-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-s3settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-group-settings common-lisp:nil
                       ((destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-group-settings-destination
                         :shape "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination")
                        (frame-capture-cdn-settings :initarg
                         :frame-capture-cdn-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or frame-capture-cdn-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-group-settings-frame-capture-cdn-settings
                         :shape "FrameCaptureCdnSettings" :location
                         common-lisp:nil :location-name
                         "frameCaptureCdnSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-capture-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-capture-group-settings
                    'make-frame-capture-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-hls-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-capture-hls-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-capture-hls-settings
                    'make-frame-capture-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   common-lisp:nil))
(common-lisp:deftype frame-capture-interval-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass frame-capture-output-settings common-lisp:nil
                       ((name-modifier :initarg :name-modifier :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-frame-capture-output-settings-name-modifier
                         :shape "__string" :location common-lisp:nil
                         :location-name "nameModifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-capture-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'frame-capture-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-capture-output-settings
                    'make-frame-capture-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   common-lisp:nil))
(common-lisp:deftype frame-capture-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass frame-capture-s3settings common-lisp:nil
                       ((canned-acl :initarg :canned-acl :initform
                         common-lisp:nil :type
                         (common-lisp:or s3canned-acl common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-s3settings-canned-acl
                         :shape "S3CannedAcl" :location common-lisp:nil
                         :location-name "cannedAcl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-capture-s3settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-s3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-capture-s3settings 'make-frame-capture-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-settings common-lisp:nil
                       ((capture-interval :initarg :capture-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max3600000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-settings-capture-interval
                         :shape "__integerMin1Max3600000" :location
                         common-lisp:nil :location-name "captureInterval")
                        (capture-interval-units :initarg
                         :capture-interval-units :initform common-lisp:nil
                         :type
                         (common-lisp:or frame-capture-interval-unit
                                         common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-settings-capture-interval-units
                         :shape "FrameCaptureIntervalUnit" :location
                         common-lisp:nil :location-name "captureIntervalUnits")
                        (timecode-burnin-settings :initarg
                         :timecode-burnin-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-frame-capture-settings-timecode-burnin-settings
                         :shape "TimecodeBurninSettings" :location
                         common-lisp:nil :location-name
                         "timecodeBurninSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-capture-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-capture-settings 'make-frame-capture-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-interval))
      (common-lisp:list
       (common-lisp:cons "CaptureInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capture-interval-units))
      (common-lisp:list
       (common-lisp:cons "CaptureIntervalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition gateway-timeout-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       gateway-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'gateway-timeout-exception
                    'gateway-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass global-configuration common-lisp:nil
                       ((initial-audio-gain :initarg :initial-audio-gain
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMinNegative60Max60|
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-initial-audio-gain
                         :shape "__integerMinNegative60Max60" :location
                         common-lisp:nil :location-name "initialAudioGain")
                        (input-end-action :initarg :input-end-action :initform
                         common-lisp:nil :type
                         (common-lisp:or global-configuration-input-end-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-input-end-action
                         :shape "GlobalConfigurationInputEndAction" :location
                         common-lisp:nil :location-name "inputEndAction")
                        (input-loss-behavior :initarg :input-loss-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-behavior common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-input-loss-behavior
                         :shape "InputLossBehavior" :location common-lisp:nil
                         :location-name "inputLossBehavior")
                        (output-locking-mode :initarg :output-locking-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          global-configuration-output-locking-mode
                          common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-output-locking-mode
                         :shape "GlobalConfigurationOutputLockingMode"
                         :location common-lisp:nil :location-name
                         "outputLockingMode")
                        (output-timing-source :initarg :output-timing-source
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          global-configuration-output-timing-source
                          common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-output-timing-source
                         :shape "GlobalConfigurationOutputTimingSource"
                         :location common-lisp:nil :location-name
                         "outputTimingSource")
                        (support-low-framerate-inputs :initarg
                         :support-low-framerate-inputs :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          global-configuration-low-framerate-inputs
                          common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-support-low-framerate-inputs
                         :shape "GlobalConfigurationLowFramerateInputs"
                         :location common-lisp:nil :location-name
                         "supportLowFramerateInputs")
                        (output-locking-settings :initarg
                         :output-locking-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or output-locking-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-global-configuration-output-locking-settings
                         :shape "OutputLockingSettings" :location
                         common-lisp:nil :location-name
                         "outputLockingSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'global-configuration 'make-global-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-audio-gain))
      (common-lisp:list
       (common-lisp:cons "InitialAudioGain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-end-action))
      (common-lisp:list
       (common-lisp:cons "InputEndAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-behavior))
      (common-lisp:list
       (common-lisp:cons "InputLossBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-locking-mode))
      (common-lisp:list
       (common-lisp:cons "OutputLockingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-timing-source))
      (common-lisp:list
       (common-lisp:cons "OutputTimingSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'support-low-framerate-inputs))
      (common-lisp:list
       (common-lisp:cons "SupportLowFramerateInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-locking-settings))
      (common-lisp:list
       (common-lisp:cons "OutputLockingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-configuration))
   common-lisp:nil))
(common-lisp:deftype global-configuration-input-end-action ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-low-framerate-inputs ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-output-locking-mode ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-output-timing-source ()
  'common-lisp:string)
(common-lisp:deftype h264adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264color-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264color-space-settings common-lisp:nil
                       ((color-space-passthrough-settings :initarg
                         :color-space-passthrough-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or color-space-passthrough-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264color-space-settings-color-space-passthrough-settings
                         :shape "ColorSpacePassthroughSettings" :location
                         common-lisp:nil :location-name
                         "colorSpacePassthroughSettings")
                        (rec601settings :initarg :rec601settings :initform
                         common-lisp:nil :type
                         (common-lisp:or rec601settings common-lisp:null)
                         :accessor
                         struct-shape-h264color-space-settings-rec601settings
                         :shape "Rec601Settings" :location common-lisp:nil
                         :location-name "rec601Settings")
                        (rec709settings :initarg :rec709settings :initform
                         common-lisp:nil :type
                         (common-lisp:or rec709settings common-lisp:null)
                         :accessor
                         struct-shape-h264color-space-settings-rec709settings
                         :shape "Rec709Settings" :location common-lisp:nil
                         :location-name "rec709Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-h264color-space-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'h264color-space-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'h264color-space-settings 'make-h264color-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-passthrough-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpacePassthroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec601settings))
      (common-lisp:list
       (common-lisp:cons "Rec601Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec709settings))
      (common-lisp:list
       (common-lisp:cons "Rec709Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   common-lisp:nil))
(common-lisp:deftype h264entropy-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264filter-settings common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or temporal-filter-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264filter-settings-temporal-filter-settings
                         :shape "TemporalFilterSettings" :location
                         common-lisp:nil :location-name
                         "temporalFilterSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-h264filter-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'h264filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'h264filter-settings 'make-h264filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264filter-settings))
   common-lisp:nil))
(common-lisp:deftype h264flicker-aq () 'common-lisp:string)
(common-lisp:deftype h264force-field-pictures () 'common-lisp:string)
(common-lisp:deftype h264framerate-control () 'common-lisp:string)
(common-lisp:deftype h264gop-breference () 'common-lisp:string)
(common-lisp:deftype h264gop-size-units () 'common-lisp:string)
(common-lisp:deftype h264level () 'common-lisp:string)
(common-lisp:deftype h264look-ahead-rate-control () 'common-lisp:string)
(common-lisp:deftype h264par-control () 'common-lisp:string)
(common-lisp:deftype h264profile () 'common-lisp:string)
(common-lisp:deftype h264quality-level () 'common-lisp:string)
(common-lisp:deftype h264rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h264scan-type () 'common-lisp:string)
(common-lisp:deftype h264scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264settings common-lisp:nil
                       ((adaptive-quantization :initarg :adaptive-quantization
                         :initform common-lisp:nil :type
                         (common-lisp:or h264adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264settings-adaptive-quantization :shape
                         "H264AdaptiveQuantization" :location common-lisp:nil
                         :location-name "adaptiveQuantization")
                        (afd-signaling :initarg :afd-signaling :initform
                         common-lisp:nil :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor struct-shape-h264settings-afd-signaling
                         :shape "AfdSignaling" :location common-lisp:nil
                         :location-name "afdSignaling")
                        (bitrate :initarg :bitrate :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor struct-shape-h264settings-bitrate :shape
                         "__integerMin1000" :location common-lisp:nil
                         :location-name "bitrate")
                        (buf-fill-pct :initarg :buf-fill-pct :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor struct-shape-h264settings-buf-fill-pct
                         :shape "__integerMin0Max100" :location common-lisp:nil
                         :location-name "bufFillPct")
                        (buf-size :initarg :buf-size :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-h264settings-buf-size :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "bufSize")
                        (color-metadata :initarg :color-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or h264color-metadata common-lisp:null)
                         :accessor struct-shape-h264settings-color-metadata
                         :shape "H264ColorMetadata" :location common-lisp:nil
                         :location-name "colorMetadata")
                        (color-space-settings :initarg :color-space-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or h264color-space-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264settings-color-space-settings :shape
                         "H264ColorSpaceSettings" :location common-lisp:nil
                         :location-name "colorSpaceSettings")
                        (entropy-encoding :initarg :entropy-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or h264entropy-encoding common-lisp:null)
                         :accessor struct-shape-h264settings-entropy-encoding
                         :shape "H264EntropyEncoding" :location common-lisp:nil
                         :location-name "entropyEncoding")
                        (filter-settings :initarg :filter-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or h264filter-settings common-lisp:null)
                         :accessor struct-shape-h264settings-filter-settings
                         :shape "H264FilterSettings" :location common-lisp:nil
                         :location-name "filterSettings")
                        (fixed-afd :initarg :fixed-afd :initform
                         common-lisp:nil :type
                         (common-lisp:or fixed-afd common-lisp:null) :accessor
                         struct-shape-h264settings-fixed-afd :shape "FixedAfd"
                         :location common-lisp:nil :location-name "fixedAfd")
                        (flicker-aq :initarg :flicker-aq :initform
                         common-lisp:nil :type
                         (common-lisp:or h264flicker-aq common-lisp:null)
                         :accessor struct-shape-h264settings-flicker-aq :shape
                         "H264FlickerAq" :location common-lisp:nil
                         :location-name "flickerAq")
                        (force-field-pictures :initarg :force-field-pictures
                         :initform common-lisp:nil :type
                         (common-lisp:or h264force-field-pictures
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264settings-force-field-pictures :shape
                         "H264ForceFieldPictures" :location common-lisp:nil
                         :location-name "forceFieldPictures")
                        (framerate-control :initarg :framerate-control
                         :initform common-lisp:nil :type
                         (common-lisp:or h264framerate-control
                                         common-lisp:null)
                         :accessor struct-shape-h264settings-framerate-control
                         :shape "H264FramerateControl" :location
                         common-lisp:nil :location-name "framerateControl")
                        (framerate-denominator :initarg :framerate-denominator
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-h264settings-framerate-denominator :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "framerateDenominator")
                        (framerate-numerator :initarg :framerate-numerator
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-h264settings-framerate-numerator :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "framerateNumerator")
                        (gop-breference :initarg :gop-breference :initform
                         common-lisp:nil :type
                         (common-lisp:or h264gop-breference common-lisp:null)
                         :accessor struct-shape-h264settings-gop-breference
                         :shape "H264GopBReference" :location common-lisp:nil
                         :location-name "gopBReference")
                        (gop-closed-cadence :initarg :gop-closed-cadence
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-h264settings-gop-closed-cadence
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "gopClosedCadence")
                        (gop-num-bframes :initarg :gop-num-bframes :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor struct-shape-h264settings-gop-num-bframes
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "gopNumBFrames")
                        (gop-size :initarg :gop-size :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-h264settings-gop-size :shape
                         "__double" :location common-lisp:nil :location-name
                         "gopSize")
                        (gop-size-units :initarg :gop-size-units :initform
                         common-lisp:nil :type
                         (common-lisp:or h264gop-size-units common-lisp:null)
                         :accessor struct-shape-h264settings-gop-size-units
                         :shape "H264GopSizeUnits" :location common-lisp:nil
                         :location-name "gopSizeUnits")
                        (level :initarg :level :initform common-lisp:nil :type
                         (common-lisp:or h264level common-lisp:null) :accessor
                         struct-shape-h264settings-level :shape "H264Level"
                         :location common-lisp:nil :location-name "level")
                        (look-ahead-rate-control :initarg
                         :look-ahead-rate-control :initform common-lisp:nil
                         :type
                         (common-lisp:or h264look-ahead-rate-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264settings-look-ahead-rate-control
                         :shape "H264LookAheadRateControl" :location
                         common-lisp:nil :location-name "lookAheadRateControl")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor struct-shape-h264settings-max-bitrate :shape
                         "__integerMin1000" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (min-iinterval :initarg :min-iinterval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor struct-shape-h264settings-min-iinterval
                         :shape "__integerMin0Max30" :location common-lisp:nil
                         :location-name "minIInterval")
                        (num-ref-frames :initarg :num-ref-frames :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max6| common-lisp:null)
                         :accessor struct-shape-h264settings-num-ref-frames
                         :shape "__integerMin1Max6" :location common-lisp:nil
                         :location-name "numRefFrames")
                        (par-control :initarg :par-control :initform
                         common-lisp:nil :type
                         (common-lisp:or h264par-control common-lisp:null)
                         :accessor struct-shape-h264settings-par-control :shape
                         "H264ParControl" :location common-lisp:nil
                         :location-name "parControl")
                        (par-denominator :initarg :par-denominator :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-h264settings-par-denominator
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "parDenominator")
                        (par-numerator :initarg :par-numerator :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-h264settings-par-numerator
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "parNumerator")
                        (profile :initarg :profile :initform common-lisp:nil
                         :type (common-lisp:or h264profile common-lisp:null)
                         :accessor struct-shape-h264settings-profile :shape
                         "H264Profile" :location common-lisp:nil :location-name
                         "profile")
                        (quality-level :initarg :quality-level :initform
                         common-lisp:nil :type
                         (common-lisp:or h264quality-level common-lisp:null)
                         :accessor struct-shape-h264settings-quality-level
                         :shape "H264QualityLevel" :location common-lisp:nil
                         :location-name "qualityLevel")
                        (qvbr-quality-level :initarg :qvbr-quality-level
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor struct-shape-h264settings-qvbr-quality-level
                         :shape "__integerMin1Max10" :location common-lisp:nil
                         :location-name "qvbrQualityLevel")
                        (rate-control-mode :initarg :rate-control-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or h264rate-control-mode
                                         common-lisp:null)
                         :accessor struct-shape-h264settings-rate-control-mode
                         :shape "H264RateControlMode" :location common-lisp:nil
                         :location-name "rateControlMode")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or h264scan-type common-lisp:null)
                         :accessor struct-shape-h264settings-scan-type :shape
                         "H264ScanType" :location common-lisp:nil
                         :location-name "scanType")
                        (scene-change-detect :initarg :scene-change-detect
                         :initform common-lisp:nil :type
                         (common-lisp:or h264scene-change-detect
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264settings-scene-change-detect :shape
                         "H264SceneChangeDetect" :location common-lisp:nil
                         :location-name "sceneChangeDetect")
                        (slices :initarg :slices :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max32| common-lisp:null)
                         :accessor struct-shape-h264settings-slices :shape
                         "__integerMin1Max32" :location common-lisp:nil
                         :location-name "slices")
                        (softness :initarg :softness :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max128|
                                         common-lisp:null)
                         :accessor struct-shape-h264settings-softness :shape
                         "__integerMin0Max128" :location common-lisp:nil
                         :location-name "softness")
                        (spatial-aq :initarg :spatial-aq :initform
                         common-lisp:nil :type
                         (common-lisp:or h264spatial-aq common-lisp:null)
                         :accessor struct-shape-h264settings-spatial-aq :shape
                         "H264SpatialAq" :location common-lisp:nil
                         :location-name "spatialAq")
                        (subgop-length :initarg :subgop-length :initform
                         common-lisp:nil :type
                         (common-lisp:or h264sub-gop-length common-lisp:null)
                         :accessor struct-shape-h264settings-subgop-length
                         :shape "H264SubGopLength" :location common-lisp:nil
                         :location-name "subgopLength")
                        (syntax :initarg :syntax :initform common-lisp:nil
                         :type (common-lisp:or h264syntax common-lisp:null)
                         :accessor struct-shape-h264settings-syntax :shape
                         "H264Syntax" :location common-lisp:nil :location-name
                         "syntax")
                        (temporal-aq :initarg :temporal-aq :initform
                         common-lisp:nil :type
                         (common-lisp:or h264temporal-aq common-lisp:null)
                         :accessor struct-shape-h264settings-temporal-aq :shape
                         "H264TemporalAq" :location common-lisp:nil
                         :location-name "temporalAq")
                        (timecode-insertion :initarg :timecode-insertion
                         :initform common-lisp:nil :type
                         (common-lisp:or h264timecode-insertion-behavior
                                         common-lisp:null)
                         :accessor struct-shape-h264settings-timecode-insertion
                         :shape "H264TimecodeInsertionBehavior" :location
                         common-lisp:nil :location-name "timecodeInsertion")
                        (timecode-burnin-settings :initarg
                         :timecode-burnin-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h264settings-timecode-burnin-settings
                         :shape "TimecodeBurninSettings" :location
                         common-lisp:nil :location-name
                         "timecodeBurninSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-h264settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'h264settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'h264settings 'make-h264settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-fill-pct))
      (common-lisp:list
       (common-lisp:cons "BufFillPct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-size))
      (common-lisp:list
       (common-lisp:cons "BufSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entropy-encoding))
      (common-lisp:list
       (common-lisp:cons "EntropyEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flicker-aq))
      (common-lisp:list
       (common-lisp:cons "FlickerAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-field-pictures))
      (common-lisp:list
       (common-lisp:cons "ForceFieldPictures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-num-bframes))
      (common-lisp:list
       (common-lisp:cons "GopNumBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'look-ahead-rate-control))
      (common-lisp:list
       (common-lisp:cons "LookAheadRateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-ref-frames))
      (common-lisp:list
       (common-lisp:cons "NumRefFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-level))
      (common-lisp:list
       (common-lisp:cons "QualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'softness))
      (common-lisp:list
       (common-lisp:cons "Softness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spatial-aq))
      (common-lisp:list
       (common-lisp:cons "SpatialAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subgop-length))
      (common-lisp:list
       (common-lisp:cons "SubgopLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'syntax))
      (common-lisp:list
       (common-lisp:cons "Syntax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporal-aq))
      (common-lisp:list
       (common-lisp:cons "TemporalAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264settings))
   common-lisp:nil))
(common-lisp:deftype h264spatial-aq () 'common-lisp:string)
(common-lisp:deftype h264sub-gop-length () 'common-lisp:string)
(common-lisp:deftype h264syntax () 'common-lisp:string)
(common-lisp:deftype h264temporal-aq () 'common-lisp:string)
(common-lisp:deftype h264timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:deftype h265adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265alternative-transfer-function () 'common-lisp:string)
(common-lisp:deftype h265color-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h265color-space-settings common-lisp:nil
                       ((color-space-passthrough-settings :initarg
                         :color-space-passthrough-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or color-space-passthrough-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265color-space-settings-color-space-passthrough-settings
                         :shape "ColorSpacePassthroughSettings" :location
                         common-lisp:nil :location-name
                         "colorSpacePassthroughSettings")
                        (dolby-vision81settings :initarg
                         :dolby-vision81settings :initform common-lisp:nil
                         :type
                         (common-lisp:or dolby-vision81settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265color-space-settings-dolby-vision81settings
                         :shape "DolbyVision81Settings" :location
                         common-lisp:nil :location-name
                         "dolbyVision81Settings")
                        (hdr10settings :initarg :hdr10settings :initform
                         common-lisp:nil :type
                         (common-lisp:or hdr10settings common-lisp:null)
                         :accessor
                         struct-shape-h265color-space-settings-hdr10settings
                         :shape "Hdr10Settings" :location common-lisp:nil
                         :location-name "hdr10Settings")
                        (rec601settings :initarg :rec601settings :initform
                         common-lisp:nil :type
                         (common-lisp:or rec601settings common-lisp:null)
                         :accessor
                         struct-shape-h265color-space-settings-rec601settings
                         :shape "Rec601Settings" :location common-lisp:nil
                         :location-name "rec601Settings")
                        (rec709settings :initarg :rec709settings :initform
                         common-lisp:nil :type
                         (common-lisp:or rec709settings common-lisp:null)
                         :accessor
                         struct-shape-h265color-space-settings-rec709settings
                         :shape "Rec709Settings" :location common-lisp:nil
                         :location-name "rec709Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-h265color-space-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'h265color-space-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'h265color-space-settings 'make-h265color-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-passthrough-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpacePassthroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dolby-vision81settings))
      (common-lisp:list
       (common-lisp:cons "DolbyVision81Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10settings))
      (common-lisp:list
       (common-lisp:cons "Hdr10Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec601settings))
      (common-lisp:list
       (common-lisp:cons "Rec601Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec709settings))
      (common-lisp:list
       (common-lisp:cons "Rec709Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass h265filter-settings common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or temporal-filter-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265filter-settings-temporal-filter-settings
                         :shape "TemporalFilterSettings" :location
                         common-lisp:nil :location-name
                         "temporalFilterSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-h265filter-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'h265filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'h265filter-settings 'make-h265filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265filter-settings))
   common-lisp:nil))
(common-lisp:deftype h265flicker-aq () 'common-lisp:string)
(common-lisp:deftype h265gop-size-units () 'common-lisp:string)
(common-lisp:deftype h265level () 'common-lisp:string)
(common-lisp:deftype h265look-ahead-rate-control () 'common-lisp:string)
(common-lisp:deftype h265profile () 'common-lisp:string)
(common-lisp:deftype h265rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h265scan-type () 'common-lisp:string)
(common-lisp:deftype h265scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h265settings common-lisp:nil
                       ((adaptive-quantization :initarg :adaptive-quantization
                         :initform common-lisp:nil :type
                         (common-lisp:or h265adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-adaptive-quantization :shape
                         "H265AdaptiveQuantization" :location common-lisp:nil
                         :location-name "adaptiveQuantization")
                        (afd-signaling :initarg :afd-signaling :initform
                         common-lisp:nil :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor struct-shape-h265settings-afd-signaling
                         :shape "AfdSignaling" :location common-lisp:nil
                         :location-name "afdSignaling")
                        (alternative-transfer-function :initarg
                         :alternative-transfer-function :initform
                         common-lisp:nil :type
                         (common-lisp:or h265alternative-transfer-function
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-alternative-transfer-function
                         :shape "H265AlternativeTransferFunction" :location
                         common-lisp:nil :location-name
                         "alternativeTransferFunction")
                        (bitrate :initarg :bitrate :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin100000Max40000000|
                                         common-lisp:null)
                         :accessor struct-shape-h265settings-bitrate :shape
                         "__integerMin100000Max40000000" :location
                         common-lisp:nil :location-name "bitrate")
                        (buf-size :initarg :buf-size :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin100000Max80000000|
                                         common-lisp:null)
                         :accessor struct-shape-h265settings-buf-size :shape
                         "__integerMin100000Max80000000" :location
                         common-lisp:nil :location-name "bufSize")
                        (color-metadata :initarg :color-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or h265color-metadata common-lisp:null)
                         :accessor struct-shape-h265settings-color-metadata
                         :shape "H265ColorMetadata" :location common-lisp:nil
                         :location-name "colorMetadata")
                        (color-space-settings :initarg :color-space-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or h265color-space-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-color-space-settings :shape
                         "H265ColorSpaceSettings" :location common-lisp:nil
                         :location-name "colorSpaceSettings")
                        (filter-settings :initarg :filter-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or h265filter-settings common-lisp:null)
                         :accessor struct-shape-h265settings-filter-settings
                         :shape "H265FilterSettings" :location common-lisp:nil
                         :location-name "filterSettings")
                        (fixed-afd :initarg :fixed-afd :initform
                         common-lisp:nil :type
                         (common-lisp:or fixed-afd common-lisp:null) :accessor
                         struct-shape-h265settings-fixed-afd :shape "FixedAfd"
                         :location common-lisp:nil :location-name "fixedAfd")
                        (flicker-aq :initarg :flicker-aq :initform
                         common-lisp:nil :type
                         (common-lisp:or h265flicker-aq common-lisp:null)
                         :accessor struct-shape-h265settings-flicker-aq :shape
                         "H265FlickerAq" :location common-lisp:nil
                         :location-name "flickerAq")
                        (framerate-denominator :initarg :framerate-denominator
                         :initform
                         (common-lisp:error
                          ":framerate-denominator is required")
                         :type
                         (common-lisp:or |__integerMin1Max3003|
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-framerate-denominator :shape
                         "__integerMin1Max3003" :location common-lisp:nil
                         :location-name "framerateDenominator")
                        (framerate-numerator :initarg :framerate-numerator
                         :initform
                         (common-lisp:error ":framerate-numerator is required")
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-h265settings-framerate-numerator :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "framerateNumerator")
                        (gop-closed-cadence :initarg :gop-closed-cadence
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-h265settings-gop-closed-cadence
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "gopClosedCadence")
                        (gop-size :initarg :gop-size :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-h265settings-gop-size :shape
                         "__double" :location common-lisp:nil :location-name
                         "gopSize")
                        (gop-size-units :initarg :gop-size-units :initform
                         common-lisp:nil :type
                         (common-lisp:or h265gop-size-units common-lisp:null)
                         :accessor struct-shape-h265settings-gop-size-units
                         :shape "H265GopSizeUnits" :location common-lisp:nil
                         :location-name "gopSizeUnits")
                        (level :initarg :level :initform common-lisp:nil :type
                         (common-lisp:or h265level common-lisp:null) :accessor
                         struct-shape-h265settings-level :shape "H265Level"
                         :location common-lisp:nil :location-name "level")
                        (look-ahead-rate-control :initarg
                         :look-ahead-rate-control :initform common-lisp:nil
                         :type
                         (common-lisp:or h265look-ahead-rate-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-look-ahead-rate-control
                         :shape "H265LookAheadRateControl" :location
                         common-lisp:nil :location-name "lookAheadRateControl")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin100000Max40000000|
                                         common-lisp:null)
                         :accessor struct-shape-h265settings-max-bitrate :shape
                         "__integerMin100000Max40000000" :location
                         common-lisp:nil :location-name "maxBitrate")
                        (min-iinterval :initarg :min-iinterval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor struct-shape-h265settings-min-iinterval
                         :shape "__integerMin0Max30" :location common-lisp:nil
                         :location-name "minIInterval")
                        (par-denominator :initarg :par-denominator :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-h265settings-par-denominator
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "parDenominator")
                        (par-numerator :initarg :par-numerator :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-h265settings-par-numerator
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "parNumerator")
                        (profile :initarg :profile :initform common-lisp:nil
                         :type (common-lisp:or h265profile common-lisp:null)
                         :accessor struct-shape-h265settings-profile :shape
                         "H265Profile" :location common-lisp:nil :location-name
                         "profile")
                        (qvbr-quality-level :initarg :qvbr-quality-level
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor struct-shape-h265settings-qvbr-quality-level
                         :shape "__integerMin1Max10" :location common-lisp:nil
                         :location-name "qvbrQualityLevel")
                        (rate-control-mode :initarg :rate-control-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or h265rate-control-mode
                                         common-lisp:null)
                         :accessor struct-shape-h265settings-rate-control-mode
                         :shape "H265RateControlMode" :location common-lisp:nil
                         :location-name "rateControlMode")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or h265scan-type common-lisp:null)
                         :accessor struct-shape-h265settings-scan-type :shape
                         "H265ScanType" :location common-lisp:nil
                         :location-name "scanType")
                        (scene-change-detect :initarg :scene-change-detect
                         :initform common-lisp:nil :type
                         (common-lisp:or h265scene-change-detect
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-scene-change-detect :shape
                         "H265SceneChangeDetect" :location common-lisp:nil
                         :location-name "sceneChangeDetect")
                        (slices :initarg :slices :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max16| common-lisp:null)
                         :accessor struct-shape-h265settings-slices :shape
                         "__integerMin1Max16" :location common-lisp:nil
                         :location-name "slices")
                        (tier :initarg :tier :initform common-lisp:nil :type
                         (common-lisp:or h265tier common-lisp:null) :accessor
                         struct-shape-h265settings-tier :shape "H265Tier"
                         :location common-lisp:nil :location-name "tier")
                        (timecode-insertion :initarg :timecode-insertion
                         :initform common-lisp:nil :type
                         (common-lisp:or h265timecode-insertion-behavior
                                         common-lisp:null)
                         :accessor struct-shape-h265settings-timecode-insertion
                         :shape "H265TimecodeInsertionBehavior" :location
                         common-lisp:nil :location-name "timecodeInsertion")
                        (timecode-burnin-settings :initarg
                         :timecode-burnin-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-h265settings-timecode-burnin-settings
                         :shape "TimecodeBurninSettings" :location
                         common-lisp:nil :location-name
                         "timecodeBurninSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-h265settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'h265settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'h265settings 'make-h265settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternative-transfer-function))
      (common-lisp:list
       (common-lisp:cons "AlternativeTransferFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-size))
      (common-lisp:list
       (common-lisp:cons "BufSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flicker-aq))
      (common-lisp:list
       (common-lisp:cons "FlickerAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'look-ahead-rate-control))
      (common-lisp:list
       (common-lisp:cons "LookAheadRateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265settings))
   common-lisp:nil))
(common-lisp:deftype h265tier () 'common-lisp:string)
(common-lisp:deftype h265timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hdr10settings common-lisp:nil
                       ((max-cll :initarg :max-cll :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max32768|
                                         common-lisp:null)
                         :accessor struct-shape-hdr10settings-max-cll :shape
                         "__integerMin0Max32768" :location common-lisp:nil
                         :location-name "maxCll")
                        (max-fall :initarg :max-fall :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max32768|
                                         common-lisp:null)
                         :accessor struct-shape-hdr10settings-max-fall :shape
                         "__integerMin0Max32768" :location common-lisp:nil
                         :location-name "maxFall"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hdr10settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hdr10settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hdr10settings 'make-hdr10settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hdr10settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hdr10settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cll))
      (common-lisp:list
       (common-lisp:cons "MaxCll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-fall))
      (common-lisp:list
       (common-lisp:cons "MaxFall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hdr10settings))
   common-lisp:nil))
(common-lisp:deftype hls-ad-markers () 'common-lisp:string)
(common-lisp:deftype hls-akamai-http-transfer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-akamai-settings common-lisp:nil
                       ((connection-retry-interval :initarg
                         :connection-retry-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-akamai-settings-connection-retry-interval
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "connectionRetryInterval")
                        (filecache-duration :initarg :filecache-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-akamai-settings-filecache-duration
                         :shape "__integerMin0Max600" :location common-lisp:nil
                         :location-name "filecacheDuration")
                        (http-transfer-mode :initarg :http-transfer-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-akamai-http-transfer-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-akamai-settings-http-transfer-mode
                         :shape "HlsAkamaiHttpTransferMode" :location
                         common-lisp:nil :location-name "httpTransferMode")
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-hls-akamai-settings-num-retries
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "numRetries")
                        (restart-delay :initarg :restart-delay :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor
                         struct-shape-hls-akamai-settings-restart-delay :shape
                         "__integerMin0Max15" :location common-lisp:nil
                         :location-name "restartDelay")
                        (salt :initarg :salt :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-akamai-settings-salt :shape
                         "__string" :location common-lisp:nil :location-name
                         "salt")
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-akamai-settings-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-akamai-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-akamai-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-akamai-settings 'make-hls-akamai-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-transfer-mode))
      (common-lisp:list
       (common-lisp:cons "HttpTransferMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salt))
      (common-lisp:list
       (common-lisp:cons "Salt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hls-basic-put-settings common-lisp:nil
                       ((connection-retry-interval :initarg
                         :connection-retry-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-basic-put-settings-connection-retry-interval
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "connectionRetryInterval")
                        (filecache-duration :initarg :filecache-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-basic-put-settings-filecache-duration
                         :shape "__integerMin0Max600" :location common-lisp:nil
                         :location-name "filecacheDuration")
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-basic-put-settings-num-retries :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "numRetries")
                        (restart-delay :initarg :restart-delay :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor
                         struct-shape-hls-basic-put-settings-restart-delay
                         :shape "__integerMin0Max15" :location common-lisp:nil
                         :location-name "restartDelay"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-basic-put-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-basic-put-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-basic-put-settings 'make-hls-basic-put-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   common-lisp:nil))
(common-lisp:deftype hls-caption-language-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-cdn-settings common-lisp:nil
                       ((hls-akamai-settings :initarg :hls-akamai-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-akamai-settings common-lisp:null)
                         :accessor
                         struct-shape-hls-cdn-settings-hls-akamai-settings
                         :shape "HlsAkamaiSettings" :location common-lisp:nil
                         :location-name "hlsAkamaiSettings")
                        (hls-basic-put-settings :initarg
                         :hls-basic-put-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-basic-put-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-cdn-settings-hls-basic-put-settings
                         :shape "HlsBasicPutSettings" :location common-lisp:nil
                         :location-name "hlsBasicPutSettings")
                        (hls-media-store-settings :initarg
                         :hls-media-store-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-media-store-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-cdn-settings-hls-media-store-settings
                         :shape "HlsMediaStoreSettings" :location
                         common-lisp:nil :location-name
                         "hlsMediaStoreSettings")
                        (hls-s3settings :initarg :hls-s3settings :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-s3settings common-lisp:null)
                         :accessor struct-shape-hls-cdn-settings-hls-s3settings
                         :shape "HlsS3Settings" :location common-lisp:nil
                         :location-name "hlsS3Settings")
                        (hls-webdav-settings :initarg :hls-webdav-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-webdav-settings common-lisp:null)
                         :accessor
                         struct-shape-hls-cdn-settings-hls-webdav-settings
                         :shape "HlsWebdavSettings" :location common-lisp:nil
                         :location-name "hlsWebdavSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-cdn-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-cdn-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-cdn-settings 'make-hls-cdn-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-akamai-settings))
      (common-lisp:list
       (common-lisp:cons "HlsAkamaiSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-basic-put-settings))
      (common-lisp:list
       (common-lisp:cons "HlsBasicPutSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-media-store-settings))
      (common-lisp:list
       (common-lisp:cons "HlsMediaStoreSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-s3settings))
      (common-lisp:list
       (common-lisp:cons "HlsS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-webdav-settings))
      (common-lisp:list
       (common-lisp:cons "HlsWebdavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   common-lisp:nil))
(common-lisp:deftype hls-client-cache () 'common-lisp:string)
(common-lisp:deftype hls-codec-specification () 'common-lisp:string)
(common-lisp:deftype hls-directory-structure () 'common-lisp:string)
(common-lisp:deftype hls-discontinuity-tags () 'common-lisp:string)
(common-lisp:deftype hls-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-group-settings common-lisp:nil
                       ((ad-markers :initarg :ad-markers :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfHlsAdMarkers|
                                         common-lisp:null)
                         :accessor struct-shape-hls-group-settings-ad-markers
                         :shape "__listOfHlsAdMarkers" :location
                         common-lisp:nil :location-name "adMarkers")
                        (base-url-content :initarg :base-url-content :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-group-settings-base-url-content
                         :shape "__string" :location common-lisp:nil
                         :location-name "baseUrlContent")
                        (base-url-content1 :initarg :base-url-content1
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-group-settings-base-url-content1
                         :shape "__string" :location common-lisp:nil
                         :location-name "baseUrlContent1")
                        (base-url-manifest :initarg :base-url-manifest
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-group-settings-base-url-manifest
                         :shape "__string" :location common-lisp:nil
                         :location-name "baseUrlManifest")
                        (base-url-manifest1 :initarg :base-url-manifest1
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-group-settings-base-url-manifest1
                         :shape "__string" :location common-lisp:nil
                         :location-name "baseUrlManifest1")
                        (caption-language-mappings :initarg
                         :caption-language-mappings :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfCaptionLanguageMapping|
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-caption-language-mappings
                         :shape "__listOfCaptionLanguageMapping" :location
                         common-lisp:nil :location-name
                         "captionLanguageMappings")
                        (caption-language-setting :initarg
                         :caption-language-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-caption-language-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-caption-language-setting
                         :shape "HlsCaptionLanguageSetting" :location
                         common-lisp:nil :location-name
                         "captionLanguageSetting")
                        (client-cache :initarg :client-cache :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-client-cache common-lisp:null)
                         :accessor struct-shape-hls-group-settings-client-cache
                         :shape "HlsClientCache" :location common-lisp:nil
                         :location-name "clientCache")
                        (codec-specification :initarg :codec-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-codec-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-codec-specification
                         :shape "HlsCodecSpecification" :location
                         common-lisp:nil :location-name "codecSpecification")
                        (constant-iv :initarg :constant-iv :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin32Max32| common-lisp:null)
                         :accessor struct-shape-hls-group-settings-constant-iv
                         :shape "__stringMin32Max32" :location common-lisp:nil
                         :location-name "constantIv")
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor struct-shape-hls-group-settings-destination
                         :shape "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination")
                        (directory-structure :initarg :directory-structure
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-directory-structure
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-directory-structure
                         :shape "HlsDirectoryStructure" :location
                         common-lisp:nil :location-name "directoryStructure")
                        (discontinuity-tags :initarg :discontinuity-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-discontinuity-tags
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-discontinuity-tags
                         :shape "HlsDiscontinuityTags" :location
                         common-lisp:nil :location-name "discontinuityTags")
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-encryption-type common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-encryption-type :shape
                         "HlsEncryptionType" :location common-lisp:nil
                         :location-name "encryptionType")
                        (hls-cdn-settings :initarg :hls-cdn-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-cdn-settings common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-hls-cdn-settings
                         :shape "HlsCdnSettings" :location common-lisp:nil
                         :location-name "hlsCdnSettings")
                        (hls-id3segment-tagging :initarg
                         :hls-id3segment-tagging :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-id3segment-tagging-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-hls-id3segment-tagging
                         :shape "HlsId3SegmentTaggingState" :location
                         common-lisp:nil :location-name "hlsId3SegmentTagging")
                        (iframe-only-playlists :initarg :iframe-only-playlists
                         :initform common-lisp:nil :type
                         (common-lisp:or iframe-only-playlist-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-iframe-only-playlists
                         :shape "IFrameOnlyPlaylistType" :location
                         common-lisp:nil :location-name "iFrameOnlyPlaylists")
                        (incomplete-segment-behavior :initarg
                         :incomplete-segment-behavior :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-incomplete-segment-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-incomplete-segment-behavior
                         :shape "HlsIncompleteSegmentBehavior" :location
                         common-lisp:nil :location-name
                         "incompleteSegmentBehavior")
                        (index-nsegments :initarg :index-nsegments :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin3| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-index-nsegments :shape
                         "__integerMin3" :location common-lisp:nil
                         :location-name "indexNSegments")
                        (input-loss-action :initarg :input-loss-action
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-action-for-hls-out
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-input-loss-action
                         :shape "InputLossActionForHlsOut" :location
                         common-lisp:nil :location-name "inputLossAction")
                        (iv-in-manifest :initarg :iv-in-manifest :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-iv-in-manifest common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-iv-in-manifest :shape
                         "HlsIvInManifest" :location common-lisp:nil
                         :location-name "ivInManifest")
                        (iv-source :initarg :iv-source :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-iv-source common-lisp:null)
                         :accessor struct-shape-hls-group-settings-iv-source
                         :shape "HlsIvSource" :location common-lisp:nil
                         :location-name "ivSource")
                        (keep-segments :initarg :keep-segments :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-keep-segments :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "keepSegments")
                        (key-format :initarg :key-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-group-settings-key-format :shape
                         "__string" :location common-lisp:nil :location-name
                         "keyFormat")
                        (key-format-versions :initarg :key-format-versions
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-group-settings-key-format-versions
                         :shape "__string" :location common-lisp:nil
                         :location-name "keyFormatVersions")
                        (key-provider-settings :initarg :key-provider-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or key-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-key-provider-settings
                         :shape "KeyProviderSettings" :location common-lisp:nil
                         :location-name "keyProviderSettings")
                        (manifest-compression :initarg :manifest-compression
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-manifest-compression
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-manifest-compression
                         :shape "HlsManifestCompression" :location
                         common-lisp:nil :location-name "manifestCompression")
                        (manifest-duration-format :initarg
                         :manifest-duration-format :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-manifest-duration-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-manifest-duration-format
                         :shape "HlsManifestDurationFormat" :location
                         common-lisp:nil :location-name
                         "manifestDurationFormat")
                        (min-segment-length :initarg :min-segment-length
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-min-segment-length
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "minSegmentLength")
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or hls-mode common-lisp:null) :accessor
                         struct-shape-hls-group-settings-mode :shape "HlsMode"
                         :location common-lisp:nil :location-name "mode")
                        (output-selection :initarg :output-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-output-selection common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-output-selection
                         :shape "HlsOutputSelection" :location common-lisp:nil
                         :location-name "outputSelection")
                        (program-date-time :initarg :program-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-program-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-program-date-time
                         :shape "HlsProgramDateTime" :location common-lisp:nil
                         :location-name "programDateTime")
                        (program-date-time-clock :initarg
                         :program-date-time-clock :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-program-date-time-clock
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-program-date-time-clock
                         :shape "HlsProgramDateTimeClock" :location
                         common-lisp:nil :location-name "programDateTimeClock")
                        (program-date-time-period :initarg
                         :program-date-time-period :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max3600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-program-date-time-period
                         :shape "__integerMin0Max3600" :location
                         common-lisp:nil :location-name
                         "programDateTimePeriod")
                        (redundant-manifest :initarg :redundant-manifest
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-redundant-manifest
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-redundant-manifest
                         :shape "HlsRedundantManifest" :location
                         common-lisp:nil :location-name "redundantManifest")
                        (segment-length :initarg :segment-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-segment-length :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "segmentLength")
                        (segmentation-mode :initarg :segmentation-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-segmentation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-segmentation-mode
                         :shape "HlsSegmentationMode" :location common-lisp:nil
                         :location-name "segmentationMode")
                        (segments-per-subdirectory :initarg
                         :segments-per-subdirectory :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-segments-per-subdirectory
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "segmentsPerSubdirectory")
                        (stream-inf-resolution :initarg :stream-inf-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-stream-inf-resolution
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-stream-inf-resolution
                         :shape "HlsStreamInfResolution" :location
                         common-lisp:nil :location-name "streamInfResolution")
                        (timed-metadata-id3frame :initarg
                         :timed-metadata-id3frame :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-timed-metadata-id3frame
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-timed-metadata-id3frame
                         :shape "HlsTimedMetadataId3Frame" :location
                         common-lisp:nil :location-name
                         "timedMetadataId3Frame")
                        (timed-metadata-id3period :initarg
                         :timed-metadata-id3period :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-timed-metadata-id3period
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "timedMetadataId3Period")
                        (timestamp-delta-milliseconds :initarg
                         :timestamp-delta-milliseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-group-settings-timestamp-delta-milliseconds
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "timestampDeltaMilliseconds")
                        (ts-file-mode :initarg :ts-file-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-ts-file-mode common-lisp:null)
                         :accessor struct-shape-hls-group-settings-ts-file-mode
                         :shape "HlsTsFileMode" :location common-lisp:nil
                         :location-name "tsFileMode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-group-settings 'make-hls-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-content))
      (common-lisp:list
       (common-lisp:cons "BaseUrlContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-content1))
      (common-lisp:list
       (common-lisp:cons "BaseUrlContent1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-manifest))
      (common-lisp:list
       (common-lisp:cons "BaseUrlManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-manifest1))
      (common-lisp:list
       (common-lisp:cons "BaseUrlManifest1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-mappings))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-setting))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-cache))
      (common-lisp:list
       (common-lisp:cons "ClientCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-specification))
      (common-lisp:list
       (common-lisp:cons "CodecSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constant-iv))
      (common-lisp:list
       (common-lisp:cons "ConstantIv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-structure))
      (common-lisp:list
       (common-lisp:cons "DirectoryStructure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discontinuity-tags))
      (common-lisp:list
       (common-lisp:cons "DiscontinuityTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "HlsCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-id3segment-tagging))
      (common-lisp:list
       (common-lisp:cons "HlsId3SegmentTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iframe-only-playlists))
      (common-lisp:list
       (common-lisp:cons "IFrameOnlyPlaylists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incomplete-segment-behavior))
      (common-lisp:list
       (common-lisp:cons "IncompleteSegmentBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-nsegments))
      (common-lisp:list
       (common-lisp:cons "IndexNSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iv-in-manifest))
      (common-lisp:list
       (common-lisp:cons "IvInManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iv-source))
      (common-lisp:list
       (common-lisp:cons "IvSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keep-segments))
      (common-lisp:list
       (common-lisp:cons "KeepSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format))
      (common-lisp:list
       (common-lisp:cons "KeyFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format-versions))
      (common-lisp:list
       (common-lisp:cons "KeyFormatVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-provider-settings))
      (common-lisp:list
       (common-lisp:cons "KeyProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-compression))
      (common-lisp:list
       (common-lisp:cons "ManifestCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-duration-format))
      (common-lisp:list
       (common-lisp:cons "ManifestDurationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-selection))
      (common-lisp:list
       (common-lisp:cons "OutputSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-date-time))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-clock))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimeClock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-period))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redundant-manifest))
      (common-lisp:list
       (common-lisp:cons "RedundantManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-length))
      (common-lisp:list
       (common-lisp:cons "SegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-mode))
      (common-lisp:list
       (common-lisp:cons "SegmentationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-per-subdirectory))
      (common-lisp:list
       (common-lisp:cons "SegmentsPerSubdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-inf-resolution))
      (common-lisp:list
       (common-lisp:cons "StreamInfResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-delta-milliseconds))
      (common-lisp:list
       (common-lisp:cons "TimestampDeltaMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ts-file-mode))
      (common-lisp:list
       (common-lisp:cons "TsFileMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-group-settings))
   common-lisp:nil))
(common-lisp:deftype hls-h265packaging-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-id3segment-tagging-schedule-action-settings
                       common-lisp:nil
                       ((tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-id3segment-tagging-schedule-action-settings-tag
                         :shape "__string" :location common-lisp:nil
                         :location-name "tag")
                        (id3 :initarg :id3 :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-id3segment-tagging-schedule-action-settings-id3
                         :shape "__string" :location common-lisp:nil
                         :location-name "id3"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-id3segment-tagging-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'hls-id3segment-tagging-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-id3segment-tagging-schedule-action-settings
                    'make-hls-id3segment-tagging-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3))
      (common-lisp:list
       (common-lisp:cons "Id3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype hls-id3segment-tagging-state () 'common-lisp:string)
(common-lisp:deftype hls-incomplete-segment-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-input-settings common-lisp:nil
                       ((bandwidth :initarg :bandwidth :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-hls-input-settings-bandwidth
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "bandwidth")
                        (buffer-segments :initarg :buffer-segments :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-input-settings-buffer-segments :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "bufferSegments")
                        (retries :initarg :retries :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-hls-input-settings-retries
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "retries")
                        (retry-interval :initarg :retry-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-input-settings-retry-interval :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "retryInterval")
                        (scte35source :initarg :scte35source :initform
                         common-lisp:nil :type
                         (common-lisp:or hls-scte35source-type
                                         common-lisp:null)
                         :accessor struct-shape-hls-input-settings-scte35source
                         :shape "HlsScte35SourceType" :location common-lisp:nil
                         :location-name "scte35Source"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-input-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-input-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-input-settings 'make-hls-input-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "Bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-segments))
      (common-lisp:list
       (common-lisp:cons "BufferSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "Retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval))
      (common-lisp:list
       (common-lisp:cons "RetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-input-settings))
   common-lisp:nil))
(common-lisp:deftype hls-iv-in-manifest () 'common-lisp:string)
(common-lisp:deftype hls-iv-source () 'common-lisp:string)
(common-lisp:deftype hls-manifest-compression () 'common-lisp:string)
(common-lisp:deftype hls-manifest-duration-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-media-store-settings common-lisp:nil
                       ((connection-retry-interval :initarg
                         :connection-retry-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-media-store-settings-connection-retry-interval
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "connectionRetryInterval")
                        (filecache-duration :initarg :filecache-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-media-store-settings-filecache-duration
                         :shape "__integerMin0Max600" :location common-lisp:nil
                         :location-name "filecacheDuration")
                        (media-store-storage-class :initarg
                         :media-store-storage-class :initform common-lisp:nil
                         :type
                         (common-lisp:or hls-media-store-storage-class
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-media-store-settings-media-store-storage-class
                         :shape "HlsMediaStoreStorageClass" :location
                         common-lisp:nil :location-name
                         "mediaStoreStorageClass")
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-media-store-settings-num-retries
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "numRetries")
                        (restart-delay :initarg :restart-delay :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor
                         struct-shape-hls-media-store-settings-restart-delay
                         :shape "__integerMin0Max15" :location common-lisp:nil
                         :location-name "restartDelay"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-media-store-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-media-store-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-media-store-settings 'make-hls-media-store-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-store-storage-class))
      (common-lisp:list
       (common-lisp:cons "MediaStoreStorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   common-lisp:nil))
(common-lisp:deftype hls-media-store-storage-class () 'common-lisp:string)
(common-lisp:deftype hls-mode () 'common-lisp:string)
(common-lisp:deftype hls-output-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-output-settings common-lisp:nil
                       ((h265packaging-type :initarg :h265packaging-type
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-h265packaging-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-output-settings-h265packaging-type
                         :shape "HlsH265PackagingType" :location
                         common-lisp:nil :location-name "h265PackagingType")
                        (hls-settings :initarg :hls-settings :initform
                         (common-lisp:error ":hls-settings is required") :type
                         (common-lisp:or hls-settings common-lisp:null)
                         :accessor
                         struct-shape-hls-output-settings-hls-settings :shape
                         "HlsSettings" :location common-lisp:nil :location-name
                         "hlsSettings")
                        (name-modifier :initarg :name-modifier :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-hls-output-settings-name-modifier :shape
                         "__stringMin1" :location common-lisp:nil
                         :location-name "nameModifier")
                        (segment-modifier :initarg :segment-modifier :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-output-settings-segment-modifier
                         :shape "__string" :location common-lisp:nil
                         :location-name "segmentModifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-output-settings 'make-hls-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265packaging-type))
      (common-lisp:list
       (common-lisp:cons "H265PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-settings))
      (common-lisp:list
       (common-lisp:cons "HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-modifier))
      (common-lisp:list
       (common-lisp:cons "SegmentModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-output-settings))
   common-lisp:nil))
(common-lisp:deftype hls-program-date-time () 'common-lisp:string)
(common-lisp:deftype hls-program-date-time-clock () 'common-lisp:string)
(common-lisp:deftype hls-redundant-manifest () 'common-lisp:string)
(common-lisp:deftype hls-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-s3settings common-lisp:nil
                       ((canned-acl :initarg :canned-acl :initform
                         common-lisp:nil :type
                         (common-lisp:or s3canned-acl common-lisp:null)
                         :accessor struct-shape-hls-s3settings-canned-acl
                         :shape "S3CannedAcl" :location common-lisp:nil
                         :location-name "cannedAcl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-s3settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-s3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hls-s3settings 'make-hls-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-s3settings))
   common-lisp:nil))
(common-lisp:deftype hls-scte35source-type () 'common-lisp:string)
(common-lisp:deftype hls-segmentation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-settings common-lisp:nil
                       ((audio-only-hls-settings :initarg
                         :audio-only-hls-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or audio-only-hls-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-settings-audio-only-hls-settings
                         :shape "AudioOnlyHlsSettings" :location
                         common-lisp:nil :location-name "audioOnlyHlsSettings")
                        (fmp4hls-settings :initarg :fmp4hls-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or fmp4hls-settings common-lisp:null)
                         :accessor struct-shape-hls-settings-fmp4hls-settings
                         :shape "Fmp4HlsSettings" :location common-lisp:nil
                         :location-name "fmp4HlsSettings")
                        (frame-capture-hls-settings :initarg
                         :frame-capture-hls-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or frame-capture-hls-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-settings-frame-capture-hls-settings
                         :shape "FrameCaptureHlsSettings" :location
                         common-lisp:nil :location-name
                         "frameCaptureHlsSettings")
                        (standard-hls-settings :initarg :standard-hls-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or standard-hls-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-settings-standard-hls-settings :shape
                         "StandardHlsSettings" :location common-lisp:nil
                         :location-name "standardHlsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hls-settings 'make-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-hls-settings))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmp4hls-settings))
      (common-lisp:list
       (common-lisp:cons "Fmp4HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-hls-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-hls-settings))
      (common-lisp:list
       (common-lisp:cons "StandardHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-settings))
   common-lisp:nil))
(common-lisp:deftype hls-stream-inf-resolution () 'common-lisp:string)
(common-lisp:deftype hls-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-timed-metadata-schedule-action-settings
                       common-lisp:nil
                       ((id3 :initarg :id3 :initform
                         (common-lisp:error ":id3 is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-hls-timed-metadata-schedule-action-settings-id3
                         :shape "__string" :location common-lisp:nil
                         :location-name "id3"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-timed-metadata-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'hls-timed-metadata-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-timed-metadata-schedule-action-settings
                    'make-hls-timed-metadata-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3))
      (common-lisp:list
       (common-lisp:cons "Id3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype hls-ts-file-mode () 'common-lisp:string)
(common-lisp:deftype hls-webdav-http-transfer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-webdav-settings common-lisp:nil
                       ((connection-retry-interval :initarg
                         :connection-retry-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-hls-webdav-settings-connection-retry-interval
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "connectionRetryInterval")
                        (filecache-duration :initarg :filecache-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-webdav-settings-filecache-duration
                         :shape "__integerMin0Max600" :location common-lisp:nil
                         :location-name "filecacheDuration")
                        (http-transfer-mode :initarg :http-transfer-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-webdav-http-transfer-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-hls-webdav-settings-http-transfer-mode
                         :shape "HlsWebdavHttpTransferMode" :location
                         common-lisp:nil :location-name "httpTransferMode")
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-hls-webdav-settings-num-retries
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "numRetries")
                        (restart-delay :initarg :restart-delay :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor
                         struct-shape-hls-webdav-settings-restart-delay :shape
                         "__integerMin0Max15" :location common-lisp:nil
                         :location-name "restartDelay"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hls-webdav-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hls-webdav-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hls-webdav-settings 'make-hls-webdav-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-transfer-mode))
      (common-lisp:list
       (common-lisp:cons "HttpTransferMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass html-motion-graphics-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-html-motion-graphics-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'html-motion-graphics-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'html-motion-graphics-settings
                    'make-html-motion-graphics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   common-lisp:nil))
(common-lisp:deftype iframe-only-playlist-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass immediate-mode-schedule-action-start-settings
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-immediate-mode-schedule-action-start-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'immediate-mode-schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'immediate-mode-schedule-action-start-settings
                    'make-immediate-mode-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:deftype include-filler-nal-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-arn :shape "__string" :location
                         common-lisp:nil :location-name "arn")
                        (attached-channels :initarg :attached-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-input-attached-channels :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "attachedChannels")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDestination|
                                         common-lisp:null)
                         :accessor struct-shape-input-destinations :shape
                         "__listOfInputDestination" :location common-lisp:nil
                         :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-id :shape "__string" :location
                         common-lisp:nil :location-name "id")
                        (input-class :initarg :input-class :initform
                         common-lisp:nil :type
                         (common-lisp:or input-class common-lisp:null)
                         :accessor struct-shape-input-input-class :shape
                         "InputClass" :location common-lisp:nil :location-name
                         "inputClass")
                        (input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor struct-shape-input-input-devices :shape
                         "__listOfInputDeviceSettings" :location
                         common-lisp:nil :location-name "inputDevices")
                        (input-partner-ids :initarg :input-partner-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-input-input-partner-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "inputPartnerIds")
                        (input-source-type :initarg :input-source-type
                         :initform common-lisp:nil :type
                         (common-lisp:or input-source-type common-lisp:null)
                         :accessor struct-shape-input-input-source-type :shape
                         "InputSourceType" :location common-lisp:nil
                         :location-name "inputSourceType")
                        (media-connect-flows :initarg :media-connect-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMediaConnectFlow|
                                         common-lisp:null)
                         :accessor struct-shape-input-media-connect-flows
                         :shape "__listOfMediaConnectFlow" :location
                         common-lisp:nil :location-name "mediaConnectFlows")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-input-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-input-security-groups :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroups")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInputSource|
                                         common-lisp:null)
                         :accessor struct-shape-input-sources :shape
                         "__listOfInputSource" :location common-lisp:nil
                         :location-name "sources")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or input-state common-lisp:null)
                         :accessor struct-shape-input-state :shape "InputState"
                         :location common-lisp:nil :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-input-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         struct-shape-input-type :shape "InputType" :location
                         common-lisp:nil :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-channels))
      (common-lisp:list
       (common-lisp:cons "AttachedChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-class))
      (common-lisp:list
       (common-lisp:cons "InputClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-partner-ids))
      (common-lisp:list
       (common-lisp:cons "InputPartnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-type))
      (common-lisp:list
       (common-lisp:cons "InputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-attachment common-lisp:nil
                       ((automatic-input-failover-settings :initarg
                         :automatic-input-failover-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or automatic-input-failover-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-attachment-automatic-input-failover-settings
                         :shape "AutomaticInputFailoverSettings" :location
                         common-lisp:nil :location-name
                         "automaticInputFailoverSettings")
                        (input-attachment-name :initarg :input-attachment-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-attachment-input-attachment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "inputAttachmentName")
                        (input-id :initarg :input-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-input-attachment-input-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "inputId")
                        (input-settings :initarg :input-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or input-settings common-lisp:null)
                         :accessor struct-shape-input-attachment-input-settings
                         :shape "InputSettings" :location common-lisp:nil
                         :location-name "inputSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-attachment 'make-input-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-input-failover-settings))
      (common-lisp:list
       (common-lisp:cons "AutomaticInputFailoverSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-settings))
      (common-lisp:list
       (common-lisp:cons "InputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-channel-level common-lisp:nil
                       ((gain :initarg :gain :initform
                         (common-lisp:error ":gain is required") :type
                         (common-lisp:or |__integerMinNegative60Max6|
                                         common-lisp:null)
                         :accessor struct-shape-input-channel-level-gain :shape
                         "__integerMinNegative60Max6" :location common-lisp:nil
                         :location-name "gain")
                        (input-channel :initarg :input-channel :initform
                         (common-lisp:error ":input-channel is required") :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor
                         struct-shape-input-channel-level-input-channel :shape
                         "__integerMin0Max15" :location common-lisp:nil
                         :location-name "inputChannel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-channel-level
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-channel-level
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-channel-level 'make-input-channel-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-channel-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-channel-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gain))
      (common-lisp:list
       (common-lisp:cons "Gain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-channel))
      (common-lisp:list
       (common-lisp:cons "InputChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-channel-level))
   common-lisp:nil))
(common-lisp:deftype input-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-clipping-settings common-lisp:nil
                       ((input-timecode-source :initarg :input-timecode-source
                         :initform
                         (common-lisp:error
                          ":input-timecode-source is required")
                         :type
                         (common-lisp:or input-timecode-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-clipping-settings-input-timecode-source
                         :shape "InputTimecodeSource" :location common-lisp:nil
                         :location-name "inputTimecodeSource")
                        (start-timecode :initarg :start-timecode :initform
                         common-lisp:nil :type
                         (common-lisp:or start-timecode common-lisp:null)
                         :accessor
                         struct-shape-input-clipping-settings-start-timecode
                         :shape "StartTimecode" :location common-lisp:nil
                         :location-name "startTimecode")
                        (stop-timecode :initarg :stop-timecode :initform
                         common-lisp:nil :type
                         (common-lisp:or stop-timecode common-lisp:null)
                         :accessor
                         struct-shape-input-clipping-settings-stop-timecode
                         :shape "StopTimecode" :location common-lisp:nil
                         :location-name "stopTimecode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-clipping-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-clipping-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-clipping-settings 'make-input-clipping-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-timecode-source))
      (common-lisp:list
       (common-lisp:cons "InputTimecodeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timecode))
      (common-lisp:list
       (common-lisp:cons "StartTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timecode))
      (common-lisp:list
       (common-lisp:cons "StopTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   common-lisp:nil))
(common-lisp:deftype input-codec () 'common-lisp:string)
(common-lisp:deftype input-deblock-filter () 'common-lisp:string)
(common-lisp:deftype input-denoise-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-destination common-lisp:nil
                       ((ip :initarg :ip :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-destination-ip :shape "__string"
                         :location common-lisp:nil :location-name "ip")
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-destination-port :shape "__string"
                         :location common-lisp:nil :location-name "port")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-destination-url :shape "__string"
                         :location common-lisp:nil :location-name "url")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or input-destination-vpc
                                         common-lisp:null)
                         :accessor struct-shape-input-destination-vpc :shape
                         "InputDestinationVpc" :location common-lisp:nil
                         :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-destination 'make-input-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-destination-request common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-destination-request-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "streamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-destination-request
                    'make-input-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-destination-vpc common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-destination-vpc-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone")
                        (network-interface-id :initarg :network-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-destination-vpc-network-interface-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "networkInterfaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-destination-vpc
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-destination-vpc
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-destination-vpc 'make-input-destination-vpc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor struct-shape-input-device-connection-state
                         :shape "InputDeviceConnectionState" :location
                         common-lisp:nil :location-name "connectionState")
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :initform common-lisp:nil
                         :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-device-settings-sync-state
                         :shape "DeviceSettingsSyncState" :location
                         common-lisp:nil :location-name
                         "deviceSettingsSyncState")
                        (device-update-status :initarg :device-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor
                         struct-shape-input-device-device-update-status :shape
                         "DeviceUpdateStatus" :location common-lisp:nil
                         :location-name "deviceUpdateStatus")
                        (hd-device-settings :initarg :hd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor struct-shape-input-device-hd-device-settings
                         :shape "InputDeviceHdSettings" :location
                         common-lisp:nil :location-name "hdDeviceSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-id :shape "__string"
                         :location common-lisp:nil :location-name "id")
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-mac-address :shape
                         "__string" :location common-lisp:nil :location-name
                         "macAddress")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (network-settings :initarg :network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor struct-shape-input-device-network-settings
                         :shape "InputDeviceNetworkSettings" :location
                         common-lisp:nil :location-name "networkSettings")
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-serial-number :shape
                         "__string" :location common-lisp:nil :location-name
                         "serialNumber")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor struct-shape-input-device-type :shape
                         "InputDeviceType" :location common-lisp:nil
                         :location-name "type")
                        (uhd-device-settings :initarg :uhd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-device-settings :shape
                         "InputDeviceUhdSettings" :location common-lisp:nil
                         :location-name "uhdDeviceSettings")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-input-device-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags")
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-availability-zone :shape
                         "__string" :location common-lisp:nil :location-name
                         "availabilityZone")
                        (medialive-input-arns :initarg :medialive-input-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-medialive-input-arns :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "medialiveInputArns")
                        (output-type :initarg :output-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-output-type
                                         common-lisp:null)
                         :accessor struct-shape-input-device-output-type :shape
                         "InputDeviceOutputType" :location common-lisp:nil
                         :location-name "outputType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-device 'make-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medialive-input-arns))
      (common-lisp:list
       (common-lisp:cons "MedialiveInputArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "OutputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device))
   common-lisp:nil))
(common-lisp:deftype input-device-active-input () 'common-lisp:string)
(common-lisp:deftype input-device-codec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-configurable-settings common-lisp:nil
                       ((configured-input :initarg :configured-input :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-configured-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-settings-configured-input
                         :shape "InputDeviceConfiguredInput" :location
                         common-lisp:nil :location-name "configuredInput")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-settings-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (latency-ms :initarg :latency-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-settings-latency-ms
                         :shape "__integer" :location common-lisp:nil
                         :location-name "latencyMs")
                        (codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or input-device-codec common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-settings-codec
                         :shape "InputDeviceCodec" :location common-lisp:nil
                         :location-name "codec")
                        (mediaconnect-settings :initarg :mediaconnect-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          input-device-media-connect-configurable-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-settings-mediaconnect-settings
                         :shape "InputDeviceMediaConnectConfigurableSettings"
                         :location common-lisp:nil :location-name
                         "mediaconnectSettings")
                        (audio-channel-pairs :initarg :audio-channel-pairs
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          |__listOfInputDeviceConfigurableAudioChannelPairConfig|
                          common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-settings-audio-channel-pairs
                         :shape
                         "__listOfInputDeviceConfigurableAudioChannelPairConfig"
                         :location common-lisp:nil :location-name
                         "audioChannelPairs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-configurable-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-configurable-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-configurable-settings
                    'make-input-device-configurable-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mediaconnect-settings))
      (common-lisp:list
       (common-lisp:cons "MediaconnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-channel-pairs))
      (common-lisp:list
       (common-lisp:cons "AudioChannelPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device-configuration-validation-error
                       common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-configuration-validation-error-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message")
                        (validation-errors :initarg :validation-errors
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfValidationError|
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-configuration-validation-error-validation-errors
                         :shape "__listOfValidationError" :location
                         common-lisp:nil :location-name "validationErrors"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-configuration-validation-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-configuration-validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-configuration-validation-error
                    'make-input-device-configuration-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   common-lisp:nil))
(common-lisp:deftype input-device-configured-input () 'common-lisp:string)
(common-lisp:deftype input-device-connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-hd-settings common-lisp:nil
                       ((active-input :initarg :active-input :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-active-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-hd-settings-active-input
                         :shape "InputDeviceActiveInput" :location
                         common-lisp:nil :location-name "activeInput")
                        (configured-input :initarg :configured-input :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-configured-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-hd-settings-configured-input
                         :shape "InputDeviceConfiguredInput" :location
                         common-lisp:nil :location-name "configuredInput")
                        (device-state :initarg :device-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-state common-lisp:null)
                         :accessor
                         struct-shape-input-device-hd-settings-device-state
                         :shape "InputDeviceState" :location common-lisp:nil
                         :location-name "deviceState")
                        (framerate :initarg :framerate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-input-device-hd-settings-framerate :shape
                         "__double" :location common-lisp:nil :location-name
                         "framerate")
                        (height :initarg :height :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-input-device-hd-settings-height
                         :shape "__integer" :location common-lisp:nil
                         :location-name "height")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-hd-settings-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-scan-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-hd-settings-scan-type :shape
                         "InputDeviceScanType" :location common-lisp:nil
                         :location-name "scanType")
                        (width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-input-device-hd-settings-width
                         :shape "__integer" :location common-lisp:nil
                         :location-name "width")
                        (latency-ms :initarg :latency-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-hd-settings-latency-ms
                         :shape "__integer" :location common-lisp:nil
                         :location-name "latencyMs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-hd-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-hd-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-hd-settings 'make-input-device-hd-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-input))
      (common-lisp:list
       (common-lisp:cons "ActiveInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-ip-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-media-connect-configurable-settings
                       common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-media-connect-configurable-settings-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-media-connect-configurable-settings-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-media-connect-configurable-settings-secret-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "secretArn")
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-media-connect-configurable-settings-source-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-media-connect-configurable-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-media-connect-configurable-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-media-connect-configurable-settings
                    'make-input-device-media-connect-configurable-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-media-connect-configurable-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-media-connect-configurable-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-media-connect-configurable-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device-media-connect-settings common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-media-connect-settings-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-media-connect-settings-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-media-connect-settings-secret-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "secretArn")
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-media-connect-settings-source-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-media-connect-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-media-connect-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-media-connect-settings
                    'make-input-device-media-connect-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-media-connect-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-media-connect-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-media-connect-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device-network-settings common-lisp:nil
                       ((dns-addresses :initarg :dns-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-network-settings-dns-addresses
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "dnsAddresses")
                        (gateway :initarg :gateway :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-network-settings-gateway
                         :shape "__string" :location common-lisp:nil
                         :location-name "gateway")
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-network-settings-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "ipAddress")
                        (ip-scheme :initarg :ip-scheme :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-ip-scheme
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-network-settings-ip-scheme
                         :shape "InputDeviceIpScheme" :location common-lisp:nil
                         :location-name "ipScheme")
                        (subnet-mask :initarg :subnet-mask :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-network-settings-subnet-mask
                         :shape "__string" :location common-lisp:nil
                         :location-name "subnetMask"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-network-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-network-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-network-settings
                    'make-input-device-network-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-addresses))
      (common-lisp:list
       (common-lisp:cons "DnsAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-scheme))
      (common-lisp:list
       (common-lisp:cons "IpScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mask))
      (common-lisp:list
       (common-lisp:cons "SubnetMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-output-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-request common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-request-id :shape "__string"
                         :location common-lisp:nil :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-request 'make-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device-request))
   common-lisp:nil))
(common-lisp:deftype input-device-scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-settings common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-settings-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-settings 'make-input-device-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-summary-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-connection-state
                         :shape "InputDeviceConnectionState" :location
                         common-lisp:nil :location-name "connectionState")
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :initform common-lisp:nil
                         :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-device-settings-sync-state
                         :shape "DeviceSettingsSyncState" :location
                         common-lisp:nil :location-name
                         "deviceSettingsSyncState")
                        (device-update-status :initarg :device-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-device-update-status
                         :shape "DeviceUpdateStatus" :location common-lisp:nil
                         :location-name "deviceUpdateStatus")
                        (hd-device-settings :initarg :hd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-hd-device-settings
                         :shape "InputDeviceHdSettings" :location
                         common-lisp:nil :location-name "hdDeviceSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-summary-id :shape "__string"
                         :location common-lisp:nil :location-name "id")
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-summary-mac-address :shape
                         "__string" :location common-lisp:nil :location-name
                         "macAddress")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-summary-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (network-settings :initarg :network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-network-settings
                         :shape "InputDeviceNetworkSettings" :location
                         common-lisp:nil :location-name "networkSettings")
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-summary-serial-number :shape
                         "__string" :location common-lisp:nil :location-name
                         "serialNumber")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor struct-shape-input-device-summary-type
                         :shape "InputDeviceType" :location common-lisp:nil
                         :location-name "type")
                        (uhd-device-settings :initarg :uhd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-uhd-device-settings
                         :shape "InputDeviceUhdSettings" :location
                         common-lisp:nil :location-name "uhdDeviceSettings")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-input-device-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-device-summary-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone")
                        (medialive-input-arns :initarg :medialive-input-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-medialive-input-arns
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "medialiveInputArns")
                        (output-type :initarg :output-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-output-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-summary-output-type :shape
                         "InputDeviceOutputType" :location common-lisp:nil
                         :location-name "outputType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-summary 'make-input-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medialive-input-arns))
      (common-lisp:list
       (common-lisp:cons "MedialiveInputArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "OutputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device-summary))
   common-lisp:nil))
(common-lisp:deftype input-device-transfer-type () 'common-lisp:string)
(common-lisp:deftype input-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-uhd-settings common-lisp:nil
                       ((active-input :initarg :active-input :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-active-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-active-input
                         :shape "InputDeviceActiveInput" :location
                         common-lisp:nil :location-name "activeInput")
                        (configured-input :initarg :configured-input :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-configured-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-configured-input
                         :shape "InputDeviceConfiguredInput" :location
                         common-lisp:nil :location-name "configuredInput")
                        (device-state :initarg :device-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-state common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-device-state
                         :shape "InputDeviceState" :location common-lisp:nil
                         :location-name "deviceState")
                        (framerate :initarg :framerate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-input-device-uhd-settings-framerate
                         :shape "__double" :location common-lisp:nil
                         :location-name "framerate")
                        (height :initarg :height :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-height :shape
                         "__integer" :location common-lisp:nil :location-name
                         "height")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-scan-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-scan-type
                         :shape "InputDeviceScanType" :location common-lisp:nil
                         :location-name "scanType")
                        (width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-input-device-uhd-settings-width
                         :shape "__integer" :location common-lisp:nil
                         :location-name "width")
                        (latency-ms :initarg :latency-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-latency-ms
                         :shape "__integer" :location common-lisp:nil
                         :location-name "latencyMs")
                        (codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or input-device-codec common-lisp:null)
                         :accessor struct-shape-input-device-uhd-settings-codec
                         :shape "InputDeviceCodec" :location common-lisp:nil
                         :location-name "codec")
                        (mediaconnect-settings :initarg :mediaconnect-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-media-connect-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-mediaconnect-settings
                         :shape "InputDeviceMediaConnectSettings" :location
                         common-lisp:nil :location-name "mediaconnectSettings")
                        (audio-channel-pairs :initarg :audio-channel-pairs
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          |__listOfInputDeviceUhdAudioChannelPairConfig|
                          common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-settings-audio-channel-pairs
                         :shape "__listOfInputDeviceUhdAudioChannelPairConfig"
                         :location common-lisp:nil :location-name
                         "audioChannelPairs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-uhd-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-uhd-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-uhd-settings
                    'make-input-device-uhd-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-input))
      (common-lisp:list
       (common-lisp:cons "ActiveInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mediaconnect-settings))
      (common-lisp:list
       (common-lisp:cons "MediaconnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-channel-pairs))
      (common-lisp:list
       (common-lisp:cons "AudioChannelPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   common-lisp:nil))
(common-lisp:deftype input-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-location common-lisp:nil
                       ((password-param :initarg :password-param :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-location-password-param :shape
                         "__string" :location common-lisp:nil :location-name
                         "passwordParam")
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or |__stringMax2048| common-lisp:null)
                         :accessor struct-shape-input-location-uri :shape
                         "__stringMax2048" :location common-lisp:nil
                         :location-name "uri")
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-input-location-username :shape
                         "__string" :location common-lisp:nil :location-name
                         "username"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-location 'make-input-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-location))
   common-lisp:nil))
(common-lisp:deftype input-loss-action-for-hls-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-ms-smooth-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-rtmp-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-udp-out () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-loss-behavior common-lisp:nil
                       ((black-frame-msec :initarg :black-frame-msec :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max1000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-loss-behavior-black-frame-msec
                         :shape "__integerMin0Max1000000" :location
                         common-lisp:nil :location-name "blackFrameMsec")
                        (input-loss-image-color :initarg
                         :input-loss-image-color :initform common-lisp:nil
                         :type
                         (common-lisp:or |__stringMin6Max6| common-lisp:null)
                         :accessor
                         struct-shape-input-loss-behavior-input-loss-image-color
                         :shape "__stringMin6Max6" :location common-lisp:nil
                         :location-name "inputLossImageColor")
                        (input-loss-image-slate :initarg
                         :input-loss-image-slate :initform common-lisp:nil
                         :type (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-input-loss-behavior-input-loss-image-slate
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "inputLossImageSlate")
                        (input-loss-image-type :initarg :input-loss-image-type
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-image-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-loss-behavior-input-loss-image-type
                         :shape "InputLossImageType" :location common-lisp:nil
                         :location-name "inputLossImageType")
                        (repeat-frame-msec :initarg :repeat-frame-msec
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max1000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-loss-behavior-repeat-frame-msec
                         :shape "__integerMin0Max1000000" :location
                         common-lisp:nil :location-name "repeatFrameMsec"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-loss-behavior
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-loss-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-loss-behavior 'make-input-loss-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'black-frame-msec))
      (common-lisp:list
       (common-lisp:cons "BlackFrameMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-color))
      (common-lisp:list
       (common-lisp:cons "InputLossImageColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-slate))
      (common-lisp:list
       (common-lisp:cons "InputLossImageSlate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-type))
      (common-lisp:list
       (common-lisp:cons "InputLossImageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repeat-frame-msec))
      (common-lisp:list
       (common-lisp:cons "RepeatFrameMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-loss-failover-settings common-lisp:nil
                       ((input-loss-threshold-msec :initarg
                         :input-loss-threshold-msec :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin100| common-lisp:null)
                         :accessor
                         struct-shape-input-loss-failover-settings-input-loss-threshold-msec
                         :shape "__integerMin100" :location common-lisp:nil
                         :location-name "inputLossThresholdMsec"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-loss-failover-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-loss-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-loss-failover-settings
                    'make-input-loss-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "InputLossThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   common-lisp:nil))
(common-lisp:deftype input-loss-image-type () 'common-lisp:string)
(common-lisp:deftype input-maximum-bitrate () 'common-lisp:string)
(common-lisp:deftype input-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-prepare-schedule-action-settings common-lisp:nil
                       ((input-attachment-name-reference :initarg
                         :input-attachment-name-reference :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-prepare-schedule-action-settings-input-attachment-name-reference
                         :shape "__string" :location common-lisp:nil
                         :location-name "inputAttachmentNameReference")
                        (input-clipping-settings :initarg
                         :input-clipping-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or input-clipping-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-prepare-schedule-action-settings-input-clipping-settings
                         :shape "InputClippingSettings" :location
                         common-lisp:nil :location-name
                         "inputClippingSettings")
                        (url-path :initarg :url-path :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-input-prepare-schedule-action-settings-url-path
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "urlPath"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-prepare-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-prepare-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-prepare-schedule-action-settings
                    'make-input-prepare-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-clipping-settings))
      (common-lisp:list
       (common-lisp:cons "InputClippingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-path))
      (common-lisp:list
       (common-lisp:cons "UrlPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype input-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-security-group common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-security-group-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-security-group-id :shape "__string"
                         :location common-lisp:nil :location-name "id")
                        (inputs :initarg :inputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-input-security-group-inputs
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputs")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or input-security-group-state
                                         common-lisp:null)
                         :accessor struct-shape-input-security-group-state
                         :shape "InputSecurityGroupState" :location
                         common-lisp:nil :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-input-security-group-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (whitelist-rules :initarg :whitelist-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputWhitelistRule|
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-security-group-whitelist-rules
                         :shape "__listOfInputWhitelistRule" :location
                         common-lisp:nil :location-name "whitelistRules"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-security-group 'make-input-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-security-group))
   common-lisp:nil))
(common-lisp:deftype input-security-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-security-group-whitelist-request common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-input-security-group-whitelist-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (whitelist-rules :initarg :whitelist-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputWhitelistRuleCidr|
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-security-group-whitelist-request-whitelist-rules
                         :shape "__listOfInputWhitelistRuleCidr" :location
                         common-lisp:nil :location-name "whitelistRules"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-security-group-whitelist-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-security-group-whitelist-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-security-group-whitelist-request
                    'make-input-security-group-whitelist-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-settings common-lisp:nil
                       ((audio-selectors :initarg :audio-selectors :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfAudioSelector|
                                         common-lisp:null)
                         :accessor struct-shape-input-settings-audio-selectors
                         :shape "__listOfAudioSelector" :location
                         common-lisp:nil :location-name "audioSelectors")
                        (caption-selectors :initarg :caption-selectors
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfCaptionSelector|
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-settings-caption-selectors :shape
                         "__listOfCaptionSelector" :location common-lisp:nil
                         :location-name "captionSelectors")
                        (deblock-filter :initarg :deblock-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or input-deblock-filter common-lisp:null)
                         :accessor struct-shape-input-settings-deblock-filter
                         :shape "InputDeblockFilter" :location common-lisp:nil
                         :location-name "deblockFilter")
                        (denoise-filter :initarg :denoise-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or input-denoise-filter common-lisp:null)
                         :accessor struct-shape-input-settings-denoise-filter
                         :shape "InputDenoiseFilter" :location common-lisp:nil
                         :location-name "denoiseFilter")
                        (filter-strength :initarg :filter-strength :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max5| common-lisp:null)
                         :accessor struct-shape-input-settings-filter-strength
                         :shape "__integerMin1Max5" :location common-lisp:nil
                         :location-name "filterStrength")
                        (input-filter :initarg :input-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or input-filter common-lisp:null)
                         :accessor struct-shape-input-settings-input-filter
                         :shape "InputFilter" :location common-lisp:nil
                         :location-name "inputFilter")
                        (network-input-settings :initarg
                         :network-input-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or network-input-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-settings-network-input-settings
                         :shape "NetworkInputSettings" :location
                         common-lisp:nil :location-name "networkInputSettings")
                        (scte35pid :initarg :scte35pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin32Max8191|
                                         common-lisp:null)
                         :accessor struct-shape-input-settings-scte35pid :shape
                         "__integerMin32Max8191" :location common-lisp:nil
                         :location-name "scte35Pid")
                        (smpte2038data-preference :initarg
                         :smpte2038data-preference :initform common-lisp:nil
                         :type
                         (common-lisp:or smpte2038data-preference
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-settings-smpte2038data-preference
                         :shape "Smpte2038DataPreference" :location
                         common-lisp:nil :location-name
                         "smpte2038DataPreference")
                        (source-end-behavior :initarg :source-end-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or input-source-end-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-settings-source-end-behavior :shape
                         "InputSourceEndBehavior" :location common-lisp:nil
                         :location-name "sourceEndBehavior")
                        (video-selector :initarg :video-selector :initform
                         common-lisp:nil :type
                         (common-lisp:or video-selector common-lisp:null)
                         :accessor struct-shape-input-settings-video-selector
                         :shape "VideoSelector" :location common-lisp:nil
                         :location-name "videoSelector"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-settings 'make-input-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selectors))
      (common-lisp:list
       (common-lisp:cons "AudioSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-selectors))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deblock-filter))
      (common-lisp:list
       (common-lisp:cons "DeblockFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denoise-filter))
      (common-lisp:list
       (common-lisp:cons "DenoiseFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-strength))
      (common-lisp:list
       (common-lisp:cons "FilterStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-filter))
      (common-lisp:list
       (common-lisp:cons "InputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-input-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkInputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smpte2038data-preference))
      (common-lisp:list
       (common-lisp:cons "Smpte2038DataPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-end-behavior))
      (common-lisp:list
       (common-lisp:cons "SourceEndBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector))
      (common-lisp:list
       (common-lisp:cons "VideoSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-source common-lisp:nil
                       ((password-param :initarg :password-param :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-source-password-param :shape
                         "__string" :location common-lisp:nil :location-name
                         "passwordParam")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-source-url :shape "__string"
                         :location common-lisp:nil :location-name "url")
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-input-source-username :shape
                         "__string" :location common-lisp:nil :location-name
                         "username"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-source 'make-input-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source))
   common-lisp:nil))
(common-lisp:deftype input-source-end-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-source-request common-lisp:nil
                       ((password-param :initarg :password-param :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-source-request-password-param
                         :shape "__string" :location common-lisp:nil
                         :location-name "passwordParam")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-source-request-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "url")
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-input-source-request-username
                         :shape "__string" :location common-lisp:nil
                         :location-name "username"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-source-request 'make-input-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source-request))
   common-lisp:nil))
(common-lisp:deftype input-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-specification common-lisp:nil
                       ((codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or input-codec common-lisp:null)
                         :accessor struct-shape-input-specification-codec
                         :shape "InputCodec" :location common-lisp:nil
                         :location-name "codec")
                        (maximum-bitrate :initarg :maximum-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or input-maximum-bitrate
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-specification-maximum-bitrate
                         :shape "InputMaximumBitrate" :location common-lisp:nil
                         :location-name "maximumBitrate")
                        (resolution :initarg :resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or input-resolution common-lisp:null)
                         :accessor struct-shape-input-specification-resolution
                         :shape "InputResolution" :location common-lisp:nil
                         :location-name "resolution"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-specification 'make-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-specification))
   common-lisp:nil))
(common-lisp:deftype input-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-switch-schedule-action-settings common-lisp:nil
                       ((input-attachment-name-reference :initarg
                         :input-attachment-name-reference :initform
                         (common-lisp:error
                          ":input-attachment-name-reference is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-input-switch-schedule-action-settings-input-attachment-name-reference
                         :shape "__string" :location common-lisp:nil
                         :location-name "inputAttachmentNameReference")
                        (input-clipping-settings :initarg
                         :input-clipping-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or input-clipping-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-switch-schedule-action-settings-input-clipping-settings
                         :shape "InputClippingSettings" :location
                         common-lisp:nil :location-name
                         "inputClippingSettings")
                        (url-path :initarg :url-path :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-input-switch-schedule-action-settings-url-path
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "urlPath"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-switch-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-switch-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-switch-schedule-action-settings
                    'make-input-switch-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-clipping-settings))
      (common-lisp:list
       (common-lisp:cons "InputClippingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-path))
      (common-lisp:list
       (common-lisp:cons "UrlPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype input-timecode-source () 'common-lisp:string)
(common-lisp:deftype input-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-vpc-request common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-input-vpc-request-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds")
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-input-vpc-request-subnet-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subnetIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-vpc-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-vpc-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-vpc-request 'make-input-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-whitelist-rule common-lisp:nil
                       ((cidr :initarg :cidr :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-whitelist-rule-cidr :shape
                         "__string" :location common-lisp:nil :location-name
                         "cidr"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-whitelist-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-whitelist-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-whitelist-rule 'make-input-whitelist-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-whitelist-rule-cidr common-lisp:nil
                       ((cidr :initarg :cidr :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-whitelist-rule-cidr-cidr :shape
                         "__string" :location common-lisp:nil :location-name
                         "cidr"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-whitelist-rule-cidr
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-whitelist-rule-cidr
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-whitelist-rule-cidr
                    'make-input-whitelist-rule-cidr))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass internal-service-error common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-internal-service-error-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-internal-service-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'internal-service-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'make-internal-service-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalid-request common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-invalid-request-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invalid-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'invalid-request 'make-invalid-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalid-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalid-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalid-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-provider-settings common-lisp:nil
                       ((static-key-settings :initarg :static-key-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or static-key-settings common-lisp:null)
                         :accessor
                         struct-shape-key-provider-settings-static-key-settings
                         :shape "StaticKeySettings" :location common-lisp:nil
                         :location-name "staticKeySettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'key-provider-settings 'make-key-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-settings))
      (common-lisp:list
       (common-lisp:cons "StaticKeySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   common-lisp:nil))
(common-lisp:deftype last-frame-clipping-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass limit-exceeded common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-limit-exceeded-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limit-exceeded
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limit-exceeded
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'limit-exceeded 'make-limit-exceeded))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit-exceeded))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit-exceeded))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit-exceeded))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-channels-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-channels-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-channels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-channels-request 'make-list-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-response common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfChannelSummary|
                                         common-lisp:null)
                         :accessor struct-shape-list-channels-response-channels
                         :shape "__listOfChannelSummary" :location
                         common-lisp:nil :location-name "channels")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-channels-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-channels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-channels-response 'make-list-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-result-model common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfChannelSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-channels-result-model-channels
                         :shape "__listOfChannelSummary" :location
                         common-lisp:nil :location-name "channels")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-channels-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-channels-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-channels-result-model
                    'make-list-channels-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-device-transfers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-input-device-transfers-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-device-transfers-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken")
                        (transfer-type :initarg :transfer-type :initform
                         (common-lisp:error ":transfer-type is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-device-transfers-request-transfer-type
                         :shape "__string" :location "querystring"
                         :location-name "transferType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-device-transfers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-device-transfers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-request
                    'make-list-input-device-transfers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-device-transfers-response common-lisp:nil
                       ((input-device-transfers :initarg
                         :input-device-transfers :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          |__listOfTransferringInputDeviceSummary|
                          common-lisp:null)
                         :accessor
                         struct-shape-list-input-device-transfers-response-input-device-transfers
                         :shape "__listOfTransferringInputDeviceSummary"
                         :location common-lisp:nil :location-name
                         "inputDeviceTransfers")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-device-transfers-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-device-transfers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-device-transfers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-response
                    'make-list-input-device-transfers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-device-transfers))
      (common-lisp:list
       (common-lisp:cons "InputDeviceTransfers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-device-transfers-result-model common-lisp:nil
                       ((input-device-transfers :initarg
                         :input-device-transfers :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          |__listOfTransferringInputDeviceSummary|
                          common-lisp:null)
                         :accessor
                         struct-shape-list-input-device-transfers-result-model-input-device-transfers
                         :shape "__listOfTransferringInputDeviceSummary"
                         :location common-lisp:nil :location-name
                         "inputDeviceTransfers")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-device-transfers-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-device-transfers-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-device-transfers-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-result-model
                    'make-list-input-device-transfers-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-device-transfers))
      (common-lisp:list
       (common-lisp:cons "InputDeviceTransfers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-devices-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-input-devices-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-devices-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-input-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-request
                    'make-list-input-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-devices-response common-lisp:nil
                       ((input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-input-devices-response-input-devices
                         :shape "__listOfInputDeviceSummary" :location
                         common-lisp:nil :location-name "inputDevices")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-devices-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-devices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-input-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-response
                    'make-list-input-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-devices-result-model common-lisp:nil
                       ((input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-input-devices-result-model-input-devices
                         :shape "__listOfInputDeviceSummary" :location
                         common-lisp:nil :location-name "inputDevices")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-devices-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-devices-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-devices-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-result-model
                    'make-list-input-devices-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-security-groups-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-input-security-groups-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-security-groups-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-security-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-security-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-request
                    'make-list-input-security-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-security-groups-response common-lisp:nil
                       ((input-security-groups :initarg :input-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputSecurityGroup|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-input-security-groups-response-input-security-groups
                         :shape "__listOfInputSecurityGroup" :location
                         common-lisp:nil :location-name "inputSecurityGroups")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-security-groups-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-security-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-security-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-response
                    'make-list-input-security-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-security-groups-result-model common-lisp:nil
                       ((input-security-groups :initarg :input-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputSecurityGroup|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-input-security-groups-result-model-input-security-groups
                         :shape "__listOfInputSecurityGroup" :location
                         common-lisp:nil :location-name "inputSecurityGroups")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-input-security-groups-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-input-security-groups-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-security-groups-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-result-model
                    'make-list-input-security-groups-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inputs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-inputs-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-inputs-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-inputs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-inputs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-inputs-request 'make-list-inputs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-inputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-inputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-inputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inputs-response common-lisp:nil
                       ((inputs :initarg :inputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInput| common-lisp:null)
                         :accessor struct-shape-list-inputs-response-inputs
                         :shape "__listOfInput" :location common-lisp:nil
                         :location-name "inputs")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-inputs-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-inputs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-inputs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-inputs-response 'make-list-inputs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-inputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-inputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-inputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inputs-result-model common-lisp:nil
                       ((inputs :initarg :inputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInput| common-lisp:null)
                         :accessor struct-shape-list-inputs-result-model-inputs
                         :shape "__listOfInput" :location common-lisp:nil
                         :location-name "inputs")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-inputs-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-inputs-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-inputs-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-inputs-result-model 'make-list-inputs-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplex-programs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-multiplex-programs-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplex-programs-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplex-programs-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multiplex-programs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplex-programs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-request
                    'make-list-multiplex-programs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplex-programs-response common-lisp:nil
                       ((multiplex-programs :initarg :multiplex-programs
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexProgramSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-multiplex-programs-response-multiplex-programs
                         :shape "__listOfMultiplexProgramSummary" :location
                         common-lisp:nil :location-name "multiplexPrograms")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplex-programs-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multiplex-programs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplex-programs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-response
                    'make-list-multiplex-programs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-programs))
      (common-lisp:list
       (common-lisp:cons "MultiplexPrograms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplex-programs-result-model common-lisp:nil
                       ((multiplex-programs :initarg :multiplex-programs
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexProgramSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-multiplex-programs-result-model-multiplex-programs
                         :shape "__listOfMultiplexProgramSummary" :location
                         common-lisp:nil :location-name "multiplexPrograms")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplex-programs-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multiplex-programs-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplex-programs-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-result-model
                    'make-list-multiplex-programs-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-programs))
      (common-lisp:list
       (common-lisp:cons "MultiplexPrograms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplexes-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-multiplexes-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplexes-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multiplexes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-multiplexes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-request 'make-list-multiplexes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplexes-response common-lisp:nil
                       ((multiplexes :initarg :multiplexes :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-multiplexes-response-multiplexes
                         :shape "__listOfMultiplexSummary" :location
                         common-lisp:nil :location-name "multiplexes")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplexes-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multiplexes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-multiplexes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-response
                    'make-list-multiplexes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplexes))
      (common-lisp:list
       (common-lisp:cons "Multiplexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplexes-result-model common-lisp:nil
                       ((multiplexes :initarg :multiplexes :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-multiplexes-result-model-multiplexes
                         :shape "__listOfMultiplexSummary" :location
                         common-lisp:nil :location-name "multiplexes")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-multiplexes-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multiplexes-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplexes-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-result-model
                    'make-list-multiplexes-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplexes))
      (common-lisp:list
       (common-lisp:cons "Multiplexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-request common-lisp:nil
                       ((channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-channel-class
                         :shape "__string" :location "querystring"
                         :location-name "channelClass")
                        (channel-configuration :initarg :channel-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-channel-configuration
                         :shape "__string" :location "querystring"
                         :location-name "channelConfiguration")
                        (codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-codec :shape
                         "__string" :location "querystring" :location-name
                         "codec")
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-list-offerings-request-duration
                         :shape "__string" :location "querystring"
                         :location-name "duration")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (maximum-bitrate :initarg :maximum-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-maximum-bitrate
                         :shape "__string" :location "querystring"
                         :location-name "maximumBitrate")
                        (maximum-framerate :initarg :maximum-framerate
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-maximum-framerate
                         :shape "__string" :location "querystring"
                         :location-name "maximumFramerate")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken")
                        (resolution :initarg :resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-resolution :shape
                         "__string" :location "querystring" :location-name
                         "resolution")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-resource-type
                         :shape "__string" :location "querystring"
                         :location-name "resourceType")
                        (special-feature :initarg :special-feature :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-special-feature
                         :shape "__string" :location "querystring"
                         :location-name "specialFeature")
                        (video-quality :initarg :video-quality :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-video-quality
                         :shape "__string" :location "querystring"
                         :location-name "videoQuality"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-request 'make-list-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken")
                        (offerings :initarg :offerings :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOffering| common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-response-offerings :shape
                         "__listOfOffering" :location common-lisp:nil
                         :location-name "offerings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-response 'make-list-offerings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-result-model common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (offerings :initarg :offerings :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOffering| common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-result-model-offerings
                         :shape "__listOfOffering" :location common-lisp:nil
                         :location-name "offerings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-result-model
                    'make-list-offerings-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-request common-lisp:nil
                       ((channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-channel-class
                         :shape "__string" :location "querystring"
                         :location-name "channelClass")
                        (codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-codec :shape
                         "__string" :location "querystring" :location-name
                         "codec")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-reservations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (maximum-bitrate :initarg :maximum-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-maximum-bitrate
                         :shape "__string" :location "querystring"
                         :location-name "maximumBitrate")
                        (maximum-framerate :initarg :maximum-framerate
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-maximum-framerate
                         :shape "__string" :location "querystring"
                         :location-name "maximumFramerate")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken")
                        (resolution :initarg :resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-resolution
                         :shape "__string" :location "querystring"
                         :location-name "resolution")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-resource-type
                         :shape "__string" :location "querystring"
                         :location-name "resourceType")
                        (special-feature :initarg :special-feature :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-special-feature
                         :shape "__string" :location "querystring"
                         :location-name "specialFeature")
                        (video-quality :initarg :video-quality :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-video-quality
                         :shape "__string" :location "querystring"
                         :location-name "videoQuality"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reservations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reservations-request
                    'make-list-reservations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (reservations :initarg :reservations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfReservation|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-reservations-response-reservations
                         :shape "__listOfReservation" :location common-lisp:nil
                         :location-name "reservations"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reservations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reservations-response
                    'make-list-reservations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-result-model common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (reservations :initarg :reservations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfReservation|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-reservations-result-model-reservations
                         :shape "__listOfReservation" :location common-lisp:nil
                         :location-name "reservations"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reservations-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reservations-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reservations-result-model
                    'make-list-reservations-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "__string" :location "uri" :location-name
                         "resource-arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:deftype m2ts-absent-input-audio-behavior () 'common-lisp:string)
(common-lisp:deftype m2ts-arib () 'common-lisp:string)
(common-lisp:deftype m2ts-arib-captions-pid-control () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-interval () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-stream-type () 'common-lisp:string)
(common-lisp:deftype m2ts-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-cc-descriptor () 'common-lisp:string)
(common-lisp:deftype m2ts-ebif-control () 'common-lisp:string)
(common-lisp:deftype m2ts-ebp-placement () 'common-lisp:string)
(common-lisp:deftype m2ts-es-rate-in-pes () 'common-lisp:string)
(common-lisp:deftype m2ts-klv () 'common-lisp:string)
(common-lisp:deftype m2ts-nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype m2ts-pcr-control () 'common-lisp:string)
(common-lisp:deftype m2ts-rate-mode () 'common-lisp:string)
(common-lisp:deftype m2ts-scte35control () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-markers () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m2ts-settings common-lisp:nil
                       ((absent-input-audio-behavior :initarg
                         :absent-input-audio-behavior :initform common-lisp:nil
                         :type
                         (common-lisp:or m2ts-absent-input-audio-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-absent-input-audio-behavior
                         :shape "M2tsAbsentInputAudioBehavior" :location
                         common-lisp:nil :location-name
                         "absentInputAudioBehavior")
                        (arib :initarg :arib :initform common-lisp:nil :type
                         (common-lisp:or m2ts-arib common-lisp:null) :accessor
                         struct-shape-m2ts-settings-arib :shape "M2tsArib"
                         :location common-lisp:nil :location-name "arib")
                        (arib-captions-pid :initarg :arib-captions-pid
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-arib-captions-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "aribCaptionsPid")
                        (arib-captions-pid-control :initarg
                         :arib-captions-pid-control :initform common-lisp:nil
                         :type
                         (common-lisp:or m2ts-arib-captions-pid-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-arib-captions-pid-control
                         :shape "M2tsAribCaptionsPidControl" :location
                         common-lisp:nil :location-name
                         "aribCaptionsPidControl")
                        (audio-buffer-model :initarg :audio-buffer-model
                         :initform common-lisp:nil :type
                         (common-lisp:or m2ts-audio-buffer-model
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-audio-buffer-model :shape
                         "M2tsAudioBufferModel" :location common-lisp:nil
                         :location-name "audioBufferModel")
                        (audio-frames-per-pes :initarg :audio-frames-per-pes
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-audio-frames-per-pes :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "audioFramesPerPes")
                        (audio-pids :initarg :audio-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-audio-pids :shape
                         "__string" :location common-lisp:nil :location-name
                         "audioPids")
                        (audio-stream-type :initarg :audio-stream-type
                         :initform common-lisp:nil :type
                         (common-lisp:or m2ts-audio-stream-type
                                         common-lisp:null)
                         :accessor struct-shape-m2ts-settings-audio-stream-type
                         :shape "M2tsAudioStreamType" :location common-lisp:nil
                         :location-name "audioStreamType")
                        (bitrate :initarg :bitrate :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor struct-shape-m2ts-settings-bitrate :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "bitrate")
                        (buffer-model :initarg :buffer-model :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-buffer-model common-lisp:null)
                         :accessor struct-shape-m2ts-settings-buffer-model
                         :shape "M2tsBufferModel" :location common-lisp:nil
                         :location-name "bufferModel")
                        (cc-descriptor :initarg :cc-descriptor :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-cc-descriptor common-lisp:null)
                         :accessor struct-shape-m2ts-settings-cc-descriptor
                         :shape "M2tsCcDescriptor" :location common-lisp:nil
                         :location-name "ccDescriptor")
                        (dvb-nit-settings :initarg :dvb-nit-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-nit-settings common-lisp:null)
                         :accessor struct-shape-m2ts-settings-dvb-nit-settings
                         :shape "DvbNitSettings" :location common-lisp:nil
                         :location-name "dvbNitSettings")
                        (dvb-sdt-settings :initarg :dvb-sdt-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-sdt-settings common-lisp:null)
                         :accessor struct-shape-m2ts-settings-dvb-sdt-settings
                         :shape "DvbSdtSettings" :location common-lisp:nil
                         :location-name "dvbSdtSettings")
                        (dvb-sub-pids :initarg :dvb-sub-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-dvb-sub-pids :shape
                         "__string" :location common-lisp:nil :location-name
                         "dvbSubPids")
                        (dvb-tdt-settings :initarg :dvb-tdt-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or dvb-tdt-settings common-lisp:null)
                         :accessor struct-shape-m2ts-settings-dvb-tdt-settings
                         :shape "DvbTdtSettings" :location common-lisp:nil
                         :location-name "dvbTdtSettings")
                        (dvb-teletext-pid :initarg :dvb-teletext-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-dvb-teletext-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "dvbTeletextPid")
                        (ebif :initarg :ebif :initform common-lisp:nil :type
                         (common-lisp:or m2ts-ebif-control common-lisp:null)
                         :accessor struct-shape-m2ts-settings-ebif :shape
                         "M2tsEbifControl" :location common-lisp:nil
                         :location-name "ebif")
                        (ebp-audio-interval :initarg :ebp-audio-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or m2ts-audio-interval common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-ebp-audio-interval :shape
                         "M2tsAudioInterval" :location common-lisp:nil
                         :location-name "ebpAudioInterval")
                        (ebp-lookahead-ms :initarg :ebp-lookahead-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor struct-shape-m2ts-settings-ebp-lookahead-ms
                         :shape "__integerMin0Max10000" :location
                         common-lisp:nil :location-name "ebpLookaheadMs")
                        (ebp-placement :initarg :ebp-placement :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-ebp-placement common-lisp:null)
                         :accessor struct-shape-m2ts-settings-ebp-placement
                         :shape "M2tsEbpPlacement" :location common-lisp:nil
                         :location-name "ebpPlacement")
                        (ecm-pid :initarg :ecm-pid :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-m2ts-settings-ecm-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "ecmPid")
                        (es-rate-in-pes :initarg :es-rate-in-pes :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-es-rate-in-pes common-lisp:null)
                         :accessor struct-shape-m2ts-settings-es-rate-in-pes
                         :shape "M2tsEsRateInPes" :location common-lisp:nil
                         :location-name "esRateInPes")
                        (etv-platform-pid :initarg :etv-platform-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-etv-platform-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "etvPlatformPid")
                        (etv-signal-pid :initarg :etv-signal-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-etv-signal-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "etvSignalPid")
                        (fragment-time :initarg :fragment-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor struct-shape-m2ts-settings-fragment-time
                         :shape "__doubleMin0" :location common-lisp:nil
                         :location-name "fragmentTime")
                        (klv :initarg :klv :initform common-lisp:nil :type
                         (common-lisp:or m2ts-klv common-lisp:null) :accessor
                         struct-shape-m2ts-settings-klv :shape "M2tsKlv"
                         :location common-lisp:nil :location-name "klv")
                        (klv-data-pids :initarg :klv-data-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-klv-data-pids :shape
                         "__string" :location common-lisp:nil :location-name
                         "klvDataPids")
                        (nielsen-id3behavior :initarg :nielsen-id3behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or m2ts-nielsen-id3behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-nielsen-id3behavior :shape
                         "M2tsNielsenId3Behavior" :location common-lisp:nil
                         :location-name "nielsenId3Behavior")
                        (null-packet-bitrate :initarg :null-packet-bitrate
                         :initform common-lisp:nil :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-null-packet-bitrate :shape
                         "__doubleMin0" :location common-lisp:nil
                         :location-name "nullPacketBitrate")
                        (pat-interval :initarg :pat-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor struct-shape-m2ts-settings-pat-interval
                         :shape "__integerMin0Max1000" :location
                         common-lisp:nil :location-name "patInterval")
                        (pcr-control :initarg :pcr-control :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-pcr-control common-lisp:null)
                         :accessor struct-shape-m2ts-settings-pcr-control
                         :shape "M2tsPcrControl" :location common-lisp:nil
                         :location-name "pcrControl")
                        (pcr-period :initarg :pcr-period :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max500|
                                         common-lisp:null)
                         :accessor struct-shape-m2ts-settings-pcr-period :shape
                         "__integerMin0Max500" :location common-lisp:nil
                         :location-name "pcrPeriod")
                        (pcr-pid :initarg :pcr-pid :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-m2ts-settings-pcr-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "pcrPid")
                        (pmt-interval :initarg :pmt-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor struct-shape-m2ts-settings-pmt-interval
                         :shape "__integerMin0Max1000" :location
                         common-lisp:nil :location-name "pmtInterval")
                        (pmt-pid :initarg :pmt-pid :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-m2ts-settings-pmt-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "pmtPid")
                        (program-num :initarg :program-num :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor struct-shape-m2ts-settings-program-num
                         :shape "__integerMin0Max65535" :location
                         common-lisp:nil :location-name "programNum")
                        (rate-mode :initarg :rate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-rate-mode common-lisp:null)
                         :accessor struct-shape-m2ts-settings-rate-mode :shape
                         "M2tsRateMode" :location common-lisp:nil
                         :location-name "rateMode")
                        (scte27pids :initarg :scte27pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-scte27pids :shape
                         "__string" :location common-lisp:nil :location-name
                         "scte27Pids")
                        (scte35control :initarg :scte35control :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-scte35control common-lisp:null)
                         :accessor struct-shape-m2ts-settings-scte35control
                         :shape "M2tsScte35Control" :location common-lisp:nil
                         :location-name "scte35Control")
                        (scte35pid :initarg :scte35pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-scte35pid :shape "__string"
                         :location common-lisp:nil :location-name "scte35Pid")
                        (scte35preroll-pullup-milliseconds :initarg
                         :scte35preroll-pullup-milliseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or |__doubleMin0Max5000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-scte35preroll-pullup-milliseconds
                         :shape "__doubleMin0Max5000" :location common-lisp:nil
                         :location-name "scte35PrerollPullupMilliseconds")
                        (segmentation-markers :initarg :segmentation-markers
                         :initform common-lisp:nil :type
                         (common-lisp:or m2ts-segmentation-markers
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-segmentation-markers :shape
                         "M2tsSegmentationMarkers" :location common-lisp:nil
                         :location-name "segmentationMarkers")
                        (segmentation-style :initarg :segmentation-style
                         :initform common-lisp:nil :type
                         (common-lisp:or m2ts-segmentation-style
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-segmentation-style :shape
                         "M2tsSegmentationStyle" :location common-lisp:nil
                         :location-name "segmentationStyle")
                        (segmentation-time :initarg :segmentation-time
                         :initform common-lisp:nil :type
                         (common-lisp:or |__doubleMin1| common-lisp:null)
                         :accessor struct-shape-m2ts-settings-segmentation-time
                         :shape "__doubleMin1" :location common-lisp:nil
                         :location-name "segmentationTime")
                        (timed-metadata-behavior :initarg
                         :timed-metadata-behavior :initform common-lisp:nil
                         :type
                         (common-lisp:or m2ts-timed-metadata-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-timed-metadata-behavior
                         :shape "M2tsTimedMetadataBehavior" :location
                         common-lisp:nil :location-name
                         "timedMetadataBehavior")
                        (timed-metadata-pid :initarg :timed-metadata-pid
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-timed-metadata-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "timedMetadataPid")
                        (transport-stream-id :initarg :transport-stream-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor
                         struct-shape-m2ts-settings-transport-stream-id :shape
                         "__integerMin0Max65535" :location common-lisp:nil
                         :location-name "transportStreamId")
                        (video-pid :initarg :video-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m2ts-settings-video-pid :shape "__string"
                         :location common-lisp:nil :location-name "videoPid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-m2ts-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'm2ts-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'm2ts-settings 'make-m2ts-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'absent-input-audio-behavior))
      (common-lisp:list
       (common-lisp:cons "AbsentInputAudioBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arib))
      (common-lisp:list
       (common-lisp:cons "Arib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arib-captions-pid))
      (common-lisp:list
       (common-lisp:cons "AribCaptionsPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-captions-pid-control))
      (common-lisp:list
       (common-lisp:cons "AribCaptionsPidControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-buffer-model))
      (common-lisp:list
       (common-lisp:cons "AudioBufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream-type))
      (common-lisp:list
       (common-lisp:cons "AudioStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-model))
      (common-lisp:list
       (common-lisp:cons "BufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-descriptor))
      (common-lisp:list
       (common-lisp:cons "CcDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-nit-settings))
      (common-lisp:list
       (common-lisp:cons "DvbNitSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-tdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbTdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebif))
      (common-lisp:list
       (common-lisp:cons "Ebif"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-audio-interval))
      (common-lisp:list
       (common-lisp:cons "EbpAudioInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-lookahead-ms))
      (common-lisp:list
       (common-lisp:cons "EbpLookaheadMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-placement))
      (common-lisp:list
       (common-lisp:cons "EbpPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecm-pid))
      (common-lisp:list
       (common-lisp:cons "EcmPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'es-rate-in-pes))
      (common-lisp:list
       (common-lisp:cons "EsRateInPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-platform-pid))
      (common-lisp:list
       (common-lisp:cons "EtvPlatformPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-signal-pid))
      (common-lisp:list
       (common-lisp:cons "EtvSignalPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-time))
      (common-lisp:list
       (common-lisp:cons "FragmentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv))
      (common-lisp:list
       (common-lisp:cons "Klv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-packet-bitrate))
      (common-lisp:list
       (common-lisp:cons "NullPacketBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-period))
      (common-lisp:list
       (common-lisp:cons "PcrPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-num))
      (common-lisp:list
       (common-lisp:cons "ProgramNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-mode))
      (common-lisp:list
       (common-lisp:cons "RateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte27pids))
      (common-lisp:list
       (common-lisp:cons "Scte27Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35control))
      (common-lisp:list
       (common-lisp:cons "Scte35Control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35preroll-pullup-milliseconds))
      (common-lisp:list
       (common-lisp:cons "Scte35PrerollPullupMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-markers))
      (common-lisp:list
       (common-lisp:cons "SegmentationMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-style))
      (common-lisp:list
       (common-lisp:cons "SegmentationStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-time))
      (common-lisp:list
       (common-lisp:cons "SegmentationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m2ts-settings))
   common-lisp:nil))
(common-lisp:deftype m2ts-timed-metadata-behavior () 'common-lisp:string)
(common-lisp:deftype m3u8klv-behavior () 'common-lisp:string)
(common-lisp:deftype m3u8nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype m3u8pcr-control () 'common-lisp:string)
(common-lisp:deftype m3u8scte35behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m3u8settings common-lisp:nil
                       ((audio-frames-per-pes :initarg :audio-frames-per-pes
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-m3u8settings-audio-frames-per-pes :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "audioFramesPerPes")
                        (audio-pids :initarg :audio-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m3u8settings-audio-pids :shape "__string"
                         :location common-lisp:nil :location-name "audioPids")
                        (ecm-pid :initarg :ecm-pid :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-m3u8settings-ecm-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "ecmPid")
                        (nielsen-id3behavior :initarg :nielsen-id3behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or m3u8nielsen-id3behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-m3u8settings-nielsen-id3behavior :shape
                         "M3u8NielsenId3Behavior" :location common-lisp:nil
                         :location-name "nielsenId3Behavior")
                        (pat-interval :initarg :pat-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor struct-shape-m3u8settings-pat-interval
                         :shape "__integerMin0Max1000" :location
                         common-lisp:nil :location-name "patInterval")
                        (pcr-control :initarg :pcr-control :initform
                         common-lisp:nil :type
                         (common-lisp:or m3u8pcr-control common-lisp:null)
                         :accessor struct-shape-m3u8settings-pcr-control :shape
                         "M3u8PcrControl" :location common-lisp:nil
                         :location-name "pcrControl")
                        (pcr-period :initarg :pcr-period :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max500|
                                         common-lisp:null)
                         :accessor struct-shape-m3u8settings-pcr-period :shape
                         "__integerMin0Max500" :location common-lisp:nil
                         :location-name "pcrPeriod")
                        (pcr-pid :initarg :pcr-pid :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-m3u8settings-pcr-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "pcrPid")
                        (pmt-interval :initarg :pmt-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor struct-shape-m3u8settings-pmt-interval
                         :shape "__integerMin0Max1000" :location
                         common-lisp:nil :location-name "pmtInterval")
                        (pmt-pid :initarg :pmt-pid :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-m3u8settings-pmt-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "pmtPid")
                        (program-num :initarg :program-num :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor struct-shape-m3u8settings-program-num :shape
                         "__integerMin0Max65535" :location common-lisp:nil
                         :location-name "programNum")
                        (scte35behavior :initarg :scte35behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or m3u8scte35behavior common-lisp:null)
                         :accessor struct-shape-m3u8settings-scte35behavior
                         :shape "M3u8Scte35Behavior" :location common-lisp:nil
                         :location-name "scte35Behavior")
                        (scte35pid :initarg :scte35pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m3u8settings-scte35pid :shape "__string"
                         :location common-lisp:nil :location-name "scte35Pid")
                        (timed-metadata-behavior :initarg
                         :timed-metadata-behavior :initform common-lisp:nil
                         :type
                         (common-lisp:or m3u8timed-metadata-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-m3u8settings-timed-metadata-behavior
                         :shape "M3u8TimedMetadataBehavior" :location
                         common-lisp:nil :location-name
                         "timedMetadataBehavior")
                        (timed-metadata-pid :initarg :timed-metadata-pid
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m3u8settings-timed-metadata-pid :shape
                         "__string" :location common-lisp:nil :location-name
                         "timedMetadataPid")
                        (transport-stream-id :initarg :transport-stream-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor
                         struct-shape-m3u8settings-transport-stream-id :shape
                         "__integerMin0Max65535" :location common-lisp:nil
                         :location-name "transportStreamId")
                        (video-pid :initarg :video-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m3u8settings-video-pid :shape "__string"
                         :location common-lisp:nil :location-name "videoPid")
                        (klv-behavior :initarg :klv-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or m3u8klv-behavior common-lisp:null)
                         :accessor struct-shape-m3u8settings-klv-behavior
                         :shape "M3u8KlvBehavior" :location common-lisp:nil
                         :location-name "klvBehavior")
                        (klv-data-pids :initarg :klv-data-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-m3u8settings-klv-data-pids :shape
                         "__string" :location common-lisp:nil :location-name
                         "klvDataPids"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-m3u8settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'm3u8settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'm3u8settings 'make-m3u8settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecm-pid))
      (common-lisp:list
       (common-lisp:cons "EcmPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-period))
      (common-lisp:list
       (common-lisp:cons "PcrPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-num))
      (common-lisp:list
       (common-lisp:cons "ProgramNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35behavior))
      (common-lisp:list
       (common-lisp:cons "Scte35Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-behavior))
      (common-lisp:list
       (common-lisp:cons "KlvBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m3u8settings))
   common-lisp:nil))
(common-lisp:deftype m3u8timed-metadata-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-create-settings common-lisp:nil
                       ((maintenance-day :initarg :maintenance-day :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor
                         struct-shape-maintenance-create-settings-maintenance-day
                         :shape "MaintenanceDay" :location common-lisp:nil
                         :location-name "maintenanceDay")
                        (maintenance-start-time :initarg
                         :maintenance-start-time :initform common-lisp:nil
                         :type
                         (common-lisp:or |__stringPattern010920300|
                                         common-lisp:null)
                         :accessor
                         struct-shape-maintenance-create-settings-maintenance-start-time
                         :shape "__stringPattern010920300" :location
                         common-lisp:nil :location-name
                         "maintenanceStartTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maintenance-create-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-create-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'maintenance-create-settings
                    'make-maintenance-create-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   common-lisp:nil))
(common-lisp:deftype maintenance-day () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-status common-lisp:nil
                       ((maintenance-day :initarg :maintenance-day :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor
                         struct-shape-maintenance-status-maintenance-day :shape
                         "MaintenanceDay" :location common-lisp:nil
                         :location-name "maintenanceDay")
                        (maintenance-deadline :initarg :maintenance-deadline
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-maintenance-status-maintenance-deadline
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceDeadline")
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-maintenance-status-maintenance-scheduled-date
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceScheduledDate")
                        (maintenance-start-time :initarg
                         :maintenance-start-time :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-maintenance-status-maintenance-start-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceStartTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maintenance-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'maintenance-status 'make-maintenance-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-deadline))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDeadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maintenance-update-settings common-lisp:nil
                       ((maintenance-day :initarg :maintenance-day :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor
                         struct-shape-maintenance-update-settings-maintenance-day
                         :shape "MaintenanceDay" :location common-lisp:nil
                         :location-name "maintenanceDay")
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-maintenance-update-settings-maintenance-scheduled-date
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceScheduledDate")
                        (maintenance-start-time :initarg
                         :maintenance-start-time :initform common-lisp:nil
                         :type
                         (common-lisp:or |__stringPattern010920300|
                                         common-lisp:null)
                         :accessor
                         struct-shape-maintenance-update-settings-maintenance-start-time
                         :shape "__stringPattern010920300" :location
                         common-lisp:nil :location-name
                         "maintenanceStartTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maintenance-update-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-update-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'maintenance-update-settings
                    'make-maintenance-update-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass media-connect-flow common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-media-connect-flow-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-connect-flow
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-connect-flow
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-connect-flow 'make-media-connect-flow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-connect-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-connect-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-connect-flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-connect-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-media-connect-flow-request-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-connect-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-connect-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-connect-flow-request
                    'make-media-connect-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-package-group-settings common-lisp:nil
                       ((destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor
                         struct-shape-media-package-group-settings-destination
                         :shape "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-package-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-package-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-package-group-settings
                    'make-media-package-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-package-output-destination-settings
                       common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-media-package-output-destination-settings-channel-id
                         :shape "__stringMin1" :location common-lisp:nil
                         :location-name "channelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-package-output-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-package-output-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-package-output-destination-settings
                    'make-media-package-output-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-package-output-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-package-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-package-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-package-output-settings
                    'make-media-package-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-graphics-activate-schedule-action-settings
                       common-lisp:nil
                       ((duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or |__longMin0Max86400000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-motion-graphics-activate-schedule-action-settings-duration
                         :shape "__longMin0Max86400000" :location
                         common-lisp:nil :location-name "duration")
                        (password-param :initarg :password-param :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-motion-graphics-activate-schedule-action-settings-password-param
                         :shape "__string" :location common-lisp:nil
                         :location-name "passwordParam")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-motion-graphics-activate-schedule-action-settings-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "url")
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-motion-graphics-activate-schedule-action-settings-username
                         :shape "__string" :location common-lisp:nil
                         :location-name "username"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-motion-graphics-activate-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-graphics-activate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-activate-schedule-action-settings
                    'make-motion-graphics-activate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-graphics-configuration common-lisp:nil
                       ((motion-graphics-insertion :initarg
                         :motion-graphics-insertion :initform common-lisp:nil
                         :type
                         (common-lisp:or motion-graphics-insertion
                                         common-lisp:null)
                         :accessor
                         struct-shape-motion-graphics-configuration-motion-graphics-insertion
                         :shape "MotionGraphicsInsertion" :location
                         common-lisp:nil :location-name
                         "motionGraphicsInsertion")
                        (motion-graphics-settings :initarg
                         :motion-graphics-settings :initform
                         (common-lisp:error
                          ":motion-graphics-settings is required")
                         :type
                         (common-lisp:or motion-graphics-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-motion-graphics-configuration-motion-graphics-settings
                         :shape "MotionGraphicsSettings" :location
                         common-lisp:nil :location-name
                         "motionGraphicsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-motion-graphics-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-graphics-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-configuration
                    'make-motion-graphics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-insertion))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-graphics-deactivate-schedule-action-settings
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-motion-graphics-deactivate-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-graphics-deactivate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-deactivate-schedule-action-settings
                    'make-motion-graphics-deactivate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype motion-graphics-insertion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass motion-graphics-settings common-lisp:nil
                       ((html-motion-graphics-settings :initarg
                         :html-motion-graphics-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or html-motion-graphics-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-motion-graphics-settings-html-motion-graphics-settings
                         :shape "HtmlMotionGraphicsSettings" :location
                         common-lisp:nil :location-name
                         "htmlMotionGraphicsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-motion-graphics-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'motion-graphics-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-settings 'make-motion-graphics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'html-motion-graphics-settings))
      (common-lisp:list
       (common-lisp:cons "HtmlMotionGraphicsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   common-lisp:nil))
(common-lisp:deftype mp2coding-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mp2settings common-lisp:nil
                       ((bitrate :initarg :bitrate :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-mp2settings-bitrate :shape
                         "__double" :location common-lisp:nil :location-name
                         "bitrate")
                        (coding-mode :initarg :coding-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or mp2coding-mode common-lisp:null)
                         :accessor struct-shape-mp2settings-coding-mode :shape
                         "Mp2CodingMode" :location common-lisp:nil
                         :location-name "codingMode")
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-mp2settings-sample-rate :shape "__double"
                         :location common-lisp:nil :location-name
                         "sampleRate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mp2settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mp2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mp2settings 'make-mp2settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mp2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype mpeg2color-metadata () 'common-lisp:string)
(common-lisp:deftype mpeg2color-space () 'common-lisp:string)
(common-lisp:deftype mpeg2display-ratio () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mpeg2filter-settings common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or temporal-filter-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-mpeg2filter-settings-temporal-filter-settings
                         :shape "TemporalFilterSettings" :location
                         common-lisp:nil :location-name
                         "temporalFilterSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mpeg2filter-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mpeg2filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mpeg2filter-settings 'make-mpeg2filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2gop-size-units () 'common-lisp:string)
(common-lisp:deftype mpeg2scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mpeg2settings common-lisp:nil
                       ((adaptive-quantization :initarg :adaptive-quantization
                         :initform common-lisp:nil :type
                         (common-lisp:or mpeg2adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-adaptive-quantization
                         :shape "Mpeg2AdaptiveQuantization" :location
                         common-lisp:nil :location-name "adaptiveQuantization")
                        (afd-signaling :initarg :afd-signaling :initform
                         common-lisp:nil :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor struct-shape-mpeg2settings-afd-signaling
                         :shape "AfdSignaling" :location common-lisp:nil
                         :location-name "afdSignaling")
                        (color-metadata :initarg :color-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2color-metadata common-lisp:null)
                         :accessor struct-shape-mpeg2settings-color-metadata
                         :shape "Mpeg2ColorMetadata" :location common-lisp:nil
                         :location-name "colorMetadata")
                        (color-space :initarg :color-space :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2color-space common-lisp:null)
                         :accessor struct-shape-mpeg2settings-color-space
                         :shape "Mpeg2ColorSpace" :location common-lisp:nil
                         :location-name "colorSpace")
                        (display-aspect-ratio :initarg :display-aspect-ratio
                         :initform common-lisp:nil :type
                         (common-lisp:or mpeg2display-ratio common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-display-aspect-ratio :shape
                         "Mpeg2DisplayRatio" :location common-lisp:nil
                         :location-name "displayAspectRatio")
                        (filter-settings :initarg :filter-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2filter-settings common-lisp:null)
                         :accessor struct-shape-mpeg2settings-filter-settings
                         :shape "Mpeg2FilterSettings" :location common-lisp:nil
                         :location-name "filterSettings")
                        (fixed-afd :initarg :fixed-afd :initform
                         common-lisp:nil :type
                         (common-lisp:or fixed-afd common-lisp:null) :accessor
                         struct-shape-mpeg2settings-fixed-afd :shape "FixedAfd"
                         :location common-lisp:nil :location-name "fixedAfd")
                        (framerate-denominator :initarg :framerate-denominator
                         :initform
                         (common-lisp:error
                          ":framerate-denominator is required")
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-framerate-denominator
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "framerateDenominator")
                        (framerate-numerator :initarg :framerate-numerator
                         :initform
                         (common-lisp:error ":framerate-numerator is required")
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-framerate-numerator :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "framerateNumerator")
                        (gop-closed-cadence :initarg :gop-closed-cadence
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-gop-closed-cadence :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "gopClosedCadence")
                        (gop-num-bframes :initarg :gop-num-bframes :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor struct-shape-mpeg2settings-gop-num-bframes
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "gopNumBFrames")
                        (gop-size :initarg :gop-size :initform common-lisp:nil
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor struct-shape-mpeg2settings-gop-size :shape
                         "__double" :location common-lisp:nil :location-name
                         "gopSize")
                        (gop-size-units :initarg :gop-size-units :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2gop-size-units common-lisp:null)
                         :accessor struct-shape-mpeg2settings-gop-size-units
                         :shape "Mpeg2GopSizeUnits" :location common-lisp:nil
                         :location-name "gopSizeUnits")
                        (scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2scan-type common-lisp:null)
                         :accessor struct-shape-mpeg2settings-scan-type :shape
                         "Mpeg2ScanType" :location common-lisp:nil
                         :location-name "scanType")
                        (subgop-length :initarg :subgop-length :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2sub-gop-length common-lisp:null)
                         :accessor struct-shape-mpeg2settings-subgop-length
                         :shape "Mpeg2SubGopLength" :location common-lisp:nil
                         :location-name "subgopLength")
                        (timecode-insertion :initarg :timecode-insertion
                         :initform common-lisp:nil :type
                         (common-lisp:or mpeg2timecode-insertion-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-timecode-insertion :shape
                         "Mpeg2TimecodeInsertionBehavior" :location
                         common-lisp:nil :location-name "timecodeInsertion")
                        (timecode-burnin-settings :initarg
                         :timecode-burnin-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-mpeg2settings-timecode-burnin-settings
                         :shape "TimecodeBurninSettings" :location
                         common-lisp:nil :location-name
                         "timecodeBurninSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mpeg2settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mpeg2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mpeg2settings 'make-mpeg2settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "DisplayAspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-num-bframes))
      (common-lisp:list
       (common-lisp:cons "GopNumBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subgop-length))
      (common-lisp:list
       (common-lisp:cons "SubgopLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2sub-gop-length () 'common-lisp:string)
(common-lisp:deftype mpeg2timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-group-settings common-lisp:nil
                       ((acquisition-point-id :initarg :acquisition-point-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-ms-smooth-group-settings-acquisition-point-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "acquisitionPointId")
                        (audio-only-timecode-control :initarg
                         :audio-only-timecode-control :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          smooth-group-audio-only-timecode-control
                          common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-audio-only-timecode-control
                         :shape "SmoothGroupAudioOnlyTimecodeControl" :location
                         common-lisp:nil :location-name
                         "audioOnlyTimecodeControl")
                        (certificate-mode :initarg :certificate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or smooth-group-certificate-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-certificate-mode
                         :shape "SmoothGroupCertificateMode" :location
                         common-lisp:nil :location-name "certificateMode")
                        (connection-retry-interval :initarg
                         :connection-retry-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-connection-retry-interval
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "connectionRetryInterval")
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-destination
                         :shape "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination")
                        (event-id :initarg :event-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-event-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "eventId")
                        (event-id-mode :initarg :event-id-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or smooth-group-event-id-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-event-id-mode
                         :shape "SmoothGroupEventIdMode" :location
                         common-lisp:nil :location-name "eventIdMode")
                        (event-stop-behavior :initarg :event-stop-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or smooth-group-event-stop-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-event-stop-behavior
                         :shape "SmoothGroupEventStopBehavior" :location
                         common-lisp:nil :location-name "eventStopBehavior")
                        (filecache-duration :initarg :filecache-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-filecache-duration
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "filecacheDuration")
                        (fragment-length :initarg :fragment-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-fragment-length
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "fragmentLength")
                        (input-loss-action :initarg :input-loss-action
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-action-for-ms-smooth-out
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-input-loss-action
                         :shape "InputLossActionForMsSmoothOut" :location
                         common-lisp:nil :location-name "inputLossAction")
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-num-retries
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "numRetries")
                        (restart-delay :initarg :restart-delay :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-restart-delay
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "restartDelay")
                        (segmentation-mode :initarg :segmentation-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or smooth-group-segmentation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-segmentation-mode
                         :shape "SmoothGroupSegmentationMode" :location
                         common-lisp:nil :location-name "segmentationMode")
                        (send-delay-ms :initarg :send-delay-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-send-delay-ms
                         :shape "__integerMin0Max10000" :location
                         common-lisp:nil :location-name "sendDelayMs")
                        (sparse-track-type :initarg :sparse-track-type
                         :initform common-lisp:nil :type
                         (common-lisp:or smooth-group-sparse-track-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-sparse-track-type
                         :shape "SmoothGroupSparseTrackType" :location
                         common-lisp:nil :location-name "sparseTrackType")
                        (stream-manifest-behavior :initarg
                         :stream-manifest-behavior :initform common-lisp:nil
                         :type
                         (common-lisp:or smooth-group-stream-manifest-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-stream-manifest-behavior
                         :shape "SmoothGroupStreamManifestBehavior" :location
                         common-lisp:nil :location-name
                         "streamManifestBehavior")
                        (timestamp-offset :initarg :timestamp-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-ms-smooth-group-settings-timestamp-offset
                         :shape "__string" :location common-lisp:nil
                         :location-name "timestampOffset")
                        (timestamp-offset-mode :initarg :timestamp-offset-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or smooth-group-timestamp-offset-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-group-settings-timestamp-offset-mode
                         :shape "SmoothGroupTimestampOffsetMode" :location
                         common-lisp:nil :location-name "timestampOffsetMode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ms-smooth-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ms-smooth-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-group-settings 'make-ms-smooth-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acquisition-point-id))
      (common-lisp:list
       (common-lisp:cons "AcquisitionPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-timecode-control))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyTimecodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "CertificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id-mode))
      (common-lisp:list
       (common-lisp:cons "EventIdMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stop-behavior))
      (common-lisp:list
       (common-lisp:cons "EventStopBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-length))
      (common-lisp:list
       (common-lisp:cons "FragmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-mode))
      (common-lisp:list
       (common-lisp:cons "SegmentationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-delay-ms))
      (common-lisp:list
       (common-lisp:cons "SendDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sparse-track-type))
      (common-lisp:list
       (common-lisp:cons "SparseTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-manifest-behavior))
      (common-lisp:list
       (common-lisp:cons "StreamManifestBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-offset))
      (common-lisp:list
       (common-lisp:cons "TimestampOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-offset-mode))
      (common-lisp:list
       (common-lisp:cons "TimestampOffsetMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   common-lisp:nil))
(common-lisp:deftype ms-smooth-h265packaging-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-output-settings common-lisp:nil
                       ((h265packaging-type :initarg :h265packaging-type
                         :initform common-lisp:nil :type
                         (common-lisp:or ms-smooth-h265packaging-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-ms-smooth-output-settings-h265packaging-type
                         :shape "MsSmoothH265PackagingType" :location
                         common-lisp:nil :location-name "h265PackagingType")
                        (name-modifier :initarg :name-modifier :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-ms-smooth-output-settings-name-modifier
                         :shape "__string" :location common-lisp:nil
                         :location-name "nameModifier"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ms-smooth-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ms-smooth-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-output-settings
                    'make-ms-smooth-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265packaging-type))
      (common-lisp:list
       (common-lisp:cons "H265PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-arn :shape "__string" :location
                         common-lisp:nil :location-name "arn")
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-multiplex-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor struct-shape-multiplex-destinations :shape
                         "__listOfMultiplexOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-id :shape "__string" :location
                         common-lisp:nil :location-name "id")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor struct-shape-multiplex-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-pipelines-running-count :shape
                         "__integer" :location common-lisp:nil :location-name
                         "pipelinesRunningCount")
                        (program-count :initarg :program-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-multiplex-program-count :shape
                         "__integer" :location common-lisp:nil :location-name
                         "programCount")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor struct-shape-multiplex-state :shape
                         "MultiplexState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-multiplex-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'multiplex 'make-multiplex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-configuration-validation-error common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-configuration-validation-error-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message")
                        (validation-errors :initarg :validation-errors
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfValidationError|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-configuration-validation-error-validation-errors
                         :shape "__listOfValidationError" :location
                         common-lisp:nil :location-name "validationErrors"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-configuration-validation-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-configuration-validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-configuration-validation-error
                    'make-multiplex-configuration-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-group-settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-group-settings 'make-multiplex-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-media-connect-output-destination-settings
                       common-lisp:nil
                       ((entitlement-arn :initarg :entitlement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-media-connect-output-destination-settings-entitlement-arn
                         :shape "__stringMin1" :location common-lisp:nil
                         :location-name "entitlementArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-media-connect-output-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-media-connect-output-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-media-connect-output-destination-settings
                    'make-multiplex-media-connect-output-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-output-destination common-lisp:nil
                       ((media-connect-settings :initarg
                         :media-connect-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          multiplex-media-connect-output-destination-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-multiplex-output-destination-media-connect-settings
                         :shape
                         "MultiplexMediaConnectOutputDestinationSettings"
                         :location common-lisp:nil :location-name
                         "mediaConnectSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-output-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-output-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-output-destination
                    'make-multiplex-output-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-connect-settings))
      (common-lisp:list
       (common-lisp:cons "MediaConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-output-settings common-lisp:nil
                       ((destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor
                         struct-shape-multiplex-output-settings-destination
                         :shape "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-output-settings
                    'make-multiplex-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-program-channel-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "channelId")
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings")
                        (packet-identifiers-map :initarg
                         :packet-identifiers-map :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          multiplex-program-packet-identifiers-map
                          common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map
                         :shape "MultiplexProgramPacketIdentifiersMap"
                         :location common-lisp:nil :location-name
                         "packetIdentifiersMap")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMultiplexProgramPipelineDetail|
                          common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-pipeline-details :shape
                         "__listOfMultiplexProgramPipelineDetail" :location
                         common-lisp:nil :location-name "pipelineDetails")
                        (program-name :initarg :program-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-program-program-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-program
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program 'make-multiplex-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-channel-destination-settings
                       common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-channel-destination-settings-multiplex-id
                         :shape "__stringMin1" :location common-lisp:nil
                         :location-name "multiplexId")
                        (program-name :initarg :program-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-channel-destination-settings-program-name
                         :shape "__stringMin1" :location common-lisp:nil
                         :location-name "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program-channel-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-channel-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-channel-destination-settings
                    'make-multiplex-program-channel-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-id))
      (common-lisp:list
       (common-lisp:cons "MultiplexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-packet-identifiers-map common-lisp:nil
                       ((audio-pids :initarg :audio-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-audio-pids
                         :shape "__listOf__integer" :location common-lisp:nil
                         :location-name "audioPids")
                        (dvb-sub-pids :initarg :dvb-sub-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-dvb-sub-pids
                         :shape "__listOf__integer" :location common-lisp:nil
                         :location-name "dvbSubPids")
                        (dvb-teletext-pid :initarg :dvb-teletext-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-dvb-teletext-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "dvbTeletextPid")
                        (etv-platform-pid :initarg :etv-platform-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-etv-platform-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "etvPlatformPid")
                        (etv-signal-pid :initarg :etv-signal-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-etv-signal-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "etvSignalPid")
                        (klv-data-pids :initarg :klv-data-pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-klv-data-pids
                         :shape "__listOf__integer" :location common-lisp:nil
                         :location-name "klvDataPids")
                        (pcr-pid :initarg :pcr-pid :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-pcr-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pcrPid")
                        (pmt-pid :initarg :pmt-pid :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-pmt-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pmtPid")
                        (private-metadata-pid :initarg :private-metadata-pid
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-private-metadata-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "privateMetadataPid")
                        (scte27pids :initarg :scte27pids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-scte27pids
                         :shape "__listOf__integer" :location common-lisp:nil
                         :location-name "scte27Pids")
                        (scte35pid :initarg :scte35pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-scte35pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "scte35Pid")
                        (timed-metadata-pid :initarg :timed-metadata-pid
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-timed-metadata-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "timedMetadataPid")
                        (video-pid :initarg :video-pid :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-packet-identifiers-map-video-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "videoPid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program-packet-identifiers-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-packet-identifiers-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-packet-identifiers-map
                    'make-multiplex-program-packet-identifiers-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-platform-pid))
      (common-lisp:list
       (common-lisp:cons "EtvPlatformPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-signal-pid))
      (common-lisp:list
       (common-lisp:cons "EtvSignalPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "PrivateMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte27pids))
      (common-lisp:list
       (common-lisp:cons "Scte27Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-pipeline-detail common-lisp:nil
                       ((active-channel-pipeline :initarg
                         :active-channel-pipeline :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-pipeline-detail-active-channel-pipeline
                         :shape "__string" :location common-lisp:nil
                         :location-name "activeChannelPipeline")
                        (pipeline-id :initarg :pipeline-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-program-pipeline-detail-pipeline-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "pipelineId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program-pipeline-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-pipeline-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-pipeline-detail
                    'make-multiplex-program-pipeline-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-channel-pipeline))
      (common-lisp:list
       (common-lisp:cons "ActiveChannelPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-service-descriptor common-lisp:nil
                       ((provider-name :initarg :provider-name :initform
                         (common-lisp:error ":provider-name is required") :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-service-descriptor-provider-name
                         :shape "__stringMax256" :location common-lisp:nil
                         :location-name "providerName")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-service-descriptor-service-name
                         :shape "__stringMax256" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program-service-descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-service-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-service-descriptor
                    'make-multiplex-program-service-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-settings common-lisp:nil
                       ((preferred-channel-pipeline :initarg
                         :preferred-channel-pipeline :initform common-lisp:nil
                         :type
                         (common-lisp:or preferred-channel-pipeline
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-settings-preferred-channel-pipeline
                         :shape "PreferredChannelPipeline" :location
                         common-lisp:nil :location-name
                         "preferredChannelPipeline")
                        (program-number :initarg :program-number :initform
                         (common-lisp:error ":program-number is required")
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-settings-program-number
                         :shape "__integerMin0Max65535" :location
                         common-lisp:nil :location-name "programNumber")
                        (service-descriptor :initarg :service-descriptor
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-program-service-descriptor
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-settings-service-descriptor
                         :shape "MultiplexProgramServiceDescriptor" :location
                         common-lisp:nil :location-name "serviceDescriptor")
                        (video-settings :initarg :video-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or multiplex-video-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-program-settings-video-settings
                         :shape "MultiplexVideoSettings" :location
                         common-lisp:nil :location-name "videoSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-program-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-settings
                    'make-multiplex-program-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-channel-pipeline))
      (common-lisp:list
       (common-lisp:cons "PreferredChannelPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-descriptor))
      (common-lisp:list
       (common-lisp:cons "ServiceDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-settings))
      (common-lisp:list
       (common-lisp:cons "VideoSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-summary common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-program-summary-channel-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "channelId")
                        (program-name :initarg :program-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-program-summary-program-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-program-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-program-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-summary
                    'make-multiplex-program-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-settings common-lisp:nil
                       ((maximum-video-buffer-delay-milliseconds :initarg
                         :maximum-video-buffer-delay-milliseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin800Max3000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-settings-maximum-video-buffer-delay-milliseconds
                         :shape "__integerMin800Max3000" :location
                         common-lisp:nil :location-name
                         "maximumVideoBufferDelayMilliseconds")
                        (transport-stream-bitrate :initarg
                         :transport-stream-bitrate :initform
                         (common-lisp:error
                          ":transport-stream-bitrate is required")
                         :type
                         (common-lisp:or |__integerMin1000000Max100000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-settings-transport-stream-bitrate
                         :shape "__integerMin1000000Max100000000" :location
                         common-lisp:nil :location-name
                         "transportStreamBitrate")
                        (transport-stream-id :initarg :transport-stream-id
                         :initform
                         (common-lisp:error ":transport-stream-id is required")
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-settings-transport-stream-id
                         :shape "__integerMin0Max65535" :location
                         common-lisp:nil :location-name "transportStreamId")
                        (transport-stream-reserved-bitrate :initarg
                         :transport-stream-reserved-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max100000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-settings-transport-stream-reserved-bitrate
                         :shape "__integerMin0Max100000000" :location
                         common-lisp:nil :location-name
                         "transportStreamReservedBitrate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-settings 'make-multiplex-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-video-buffer-delay-milliseconds))
      (common-lisp:list
       (common-lisp:cons "MaximumVideoBufferDelayMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-reserved-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamReservedBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-settings-summary common-lisp:nil
                       ((transport-stream-bitrate :initarg
                         :transport-stream-bitrate :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1000000Max100000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-settings-summary-transport-stream-bitrate
                         :shape "__integerMin1000000Max100000000" :location
                         common-lisp:nil :location-name
                         "transportStreamBitrate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-settings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-settings-summary
                    'make-multiplex-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   common-lisp:nil))
(common-lisp:deftype multiplex-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multiplex-statmux-video-settings common-lisp:nil
                       ((maximum-bitrate :initarg :maximum-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-statmux-video-settings-maximum-bitrate
                         :shape "__integerMin100000Max100000000" :location
                         common-lisp:nil :location-name "maximumBitrate")
                        (minimum-bitrate :initarg :minimum-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-statmux-video-settings-minimum-bitrate
                         :shape "__integerMin100000Max100000000" :location
                         common-lisp:nil :location-name "minimumBitrate")
                        (priority :initarg :priority :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMinNegative5Max5|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-statmux-video-settings-priority
                         :shape "__integerMinNegative5Max5" :location
                         common-lisp:nil :location-name "priority"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-statmux-video-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-statmux-video-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-statmux-video-settings
                    'make-multiplex-statmux-video-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MinimumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-summary-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-summary-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-summary-id :shape "__string"
                         :location common-lisp:nil :location-name "id")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-summary-multiplex-settings
                         :shape "MultiplexSettingsSummary" :location
                         common-lisp:nil :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-multiplex-summary-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-multiplex-summary-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (program-count :initarg :program-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-multiplex-summary-program-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programCount")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor struct-shape-multiplex-summary-state :shape
                         "MultiplexState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-multiplex-summary-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-summary 'make-multiplex-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-video-settings common-lisp:nil
                       ((constant-bitrate :initarg :constant-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-video-settings-constant-bitrate
                         :shape "__integerMin100000Max100000000" :location
                         common-lisp:nil :location-name "constantBitrate")
                        (statmux-settings :initarg :statmux-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or multiplex-statmux-video-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-multiplex-video-settings-statmux-settings
                         :shape "MultiplexStatmuxVideoSettings" :location
                         common-lisp:nil :location-name "statmuxSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiplex-video-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-video-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiplex-video-settings 'make-multiplex-video-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constant-bitrate))
      (common-lisp:list
       (common-lisp:cons "ConstantBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statmux-settings))
      (common-lisp:list
       (common-lisp:cons "StatmuxSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   common-lisp:nil))
(common-lisp:deftype network-input-server-validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-input-settings common-lisp:nil
                       ((hls-input-settings :initarg :hls-input-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-input-settings common-lisp:null)
                         :accessor
                         struct-shape-network-input-settings-hls-input-settings
                         :shape "HlsInputSettings" :location common-lisp:nil
                         :location-name "hlsInputSettings")
                        (server-validation :initarg :server-validation
                         :initform common-lisp:nil :type
                         (common-lisp:or network-input-server-validation
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-input-settings-server-validation
                         :shape "NetworkInputServerValidation" :location
                         common-lisp:nil :location-name "serverValidation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-input-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-input-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-input-settings 'make-network-input-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-input-settings))
      (common-lisp:list
       (common-lisp:cons "HlsInputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-validation))
      (common-lisp:list
       (common-lisp:cons "ServerValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-cbet common-lisp:nil
                       ((cbet-check-digit-string :initarg
                         :cbet-check-digit-string :initform
                         (common-lisp:error
                          ":cbet-check-digit-string is required")
                         :type
                         (common-lisp:or |__stringMin2Max2| common-lisp:null)
                         :accessor
                         struct-shape-nielsen-cbet-cbet-check-digit-string
                         :shape "__stringMin2Max2" :location common-lisp:nil
                         :location-name "cbetCheckDigitString")
                        (cbet-stepaside :initarg :cbet-stepaside :initform
                         (common-lisp:error ":cbet-stepaside is required")
                         :type
                         (common-lisp:or nielsen-watermarks-cbet-stepaside
                                         common-lisp:null)
                         :accessor struct-shape-nielsen-cbet-cbet-stepaside
                         :shape "NielsenWatermarksCbetStepaside" :location
                         common-lisp:nil :location-name "cbetStepaside")
                        (csid :initarg :csid :initform
                         (common-lisp:error ":csid is required") :type
                         (common-lisp:or |__stringMin1Max7| common-lisp:null)
                         :accessor struct-shape-nielsen-cbet-csid :shape
                         "__stringMin1Max7" :location common-lisp:nil
                         :location-name "csid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nielsen-cbet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-cbet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'nielsen-cbet 'make-nielsen-cbet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cbet-check-digit-string))
      (common-lisp:list
       (common-lisp:cons "CbetCheckDigitString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cbet-stepaside))
      (common-lisp:list
       (common-lisp:cons "CbetStepaside"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csid))
      (common-lisp:list
       (common-lisp:cons "Csid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-configuration common-lisp:nil
                       ((distributor-id :initarg :distributor-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-nielsen-configuration-distributor-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "distributorId")
                        (nielsen-pcm-to-id3tagging :initarg
                         :nielsen-pcm-to-id3tagging :initform common-lisp:nil
                         :type
                         (common-lisp:or nielsen-pcm-to-id3tagging-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-nielsen-configuration-nielsen-pcm-to-id3tagging
                         :shape "NielsenPcmToId3TaggingState" :location
                         common-lisp:nil :location-name
                         "nielsenPcmToId3Tagging"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nielsen-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nielsen-configuration 'make-nielsen-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor-id))
      (common-lisp:list
       (common-lisp:cons "DistributorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-pcm-to-id3tagging))
      (common-lisp:list
       (common-lisp:cons "NielsenPcmToId3Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-naes-ii-nw common-lisp:nil
                       ((check-digit-string :initarg :check-digit-string
                         :initform
                         (common-lisp:error ":check-digit-string is required")
                         :type
                         (common-lisp:or |__stringMin2Max2| common-lisp:null)
                         :accessor
                         struct-shape-nielsen-naes-ii-nw-check-digit-string
                         :shape "__stringMin2Max2" :location common-lisp:nil
                         :location-name "checkDigitString")
                        (sid :initarg :sid :initform
                         (common-lisp:error ":sid is required") :type
                         (common-lisp:or |__doubleMin1Max65535|
                                         common-lisp:null)
                         :accessor struct-shape-nielsen-naes-ii-nw-sid :shape
                         "__doubleMin1Max65535" :location common-lisp:nil
                         :location-name "sid")
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type
                         (common-lisp:or nielsen-watermark-timezones
                                         common-lisp:null)
                         :accessor struct-shape-nielsen-naes-ii-nw-timezone
                         :shape "NielsenWatermarkTimezones" :location
                         common-lisp:nil :location-name "timezone"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nielsen-naes-ii-nw
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-naes-ii-nw
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nielsen-naes-ii-nw 'make-nielsen-naes-ii-nw))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-digit-string))
      (common-lisp:list
       (common-lisp:cons "CheckDigitString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "Sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   common-lisp:nil))
(common-lisp:deftype nielsen-pcm-to-id3tagging-state () 'common-lisp:string)
(common-lisp:deftype nielsen-watermark-timezones () 'common-lisp:string)
(common-lisp:deftype nielsen-watermarks-cbet-stepaside () 'common-lisp:string)
(common-lisp:deftype nielsen-watermarks-distribution-types ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nielsen-watermarks-settings common-lisp:nil
                       ((nielsen-cbet-settings :initarg :nielsen-cbet-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or nielsen-cbet common-lisp:null)
                         :accessor
                         struct-shape-nielsen-watermarks-settings-nielsen-cbet-settings
                         :shape "NielsenCBET" :location common-lisp:nil
                         :location-name "nielsenCbetSettings")
                        (nielsen-distribution-type :initarg
                         :nielsen-distribution-type :initform common-lisp:nil
                         :type
                         (common-lisp:or nielsen-watermarks-distribution-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-nielsen-watermarks-settings-nielsen-distribution-type
                         :shape "NielsenWatermarksDistributionTypes" :location
                         common-lisp:nil :location-name
                         "nielsenDistributionType")
                        (nielsen-naes-ii-nw-settings :initarg
                         :nielsen-naes-ii-nw-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or nielsen-naes-ii-nw common-lisp:null)
                         :accessor
                         struct-shape-nielsen-watermarks-settings-nielsen-naes-ii-nw-settings
                         :shape "NielsenNaesIiNw" :location common-lisp:nil
                         :location-name "nielsenNaesIiNwSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-nielsen-watermarks-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-watermarks-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'nielsen-watermarks-settings
                    'make-nielsen-watermarks-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-cbet-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenCbetSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-distribution-type))
      (common-lisp:list
       (common-lisp:cons "NielsenDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-naes-ii-nw-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenNaesIiNwSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass offering common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-offering-arn :shape "__string" :location
                         common-lisp:nil :location-name "arn")
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-offering-currency-code :shape "__string"
                         :location common-lisp:nil :location-name
                         "currencyCode")
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-offering-duration :shape
                         "__integer" :location common-lisp:nil :location-name
                         "duration")
                        (duration-units :initarg :duration-units :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor struct-shape-offering-duration-units :shape
                         "OfferingDurationUnits" :location common-lisp:nil
                         :location-name "durationUnits")
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-offering-fixed-price :shape "__double"
                         :location common-lisp:nil :location-name "fixedPrice")
                        (offering-description :initarg :offering-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-offering-offering-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "offeringDescription")
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-offering-offering-id :shape "__string"
                         :location common-lisp:nil :location-name "offeringId")
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor struct-shape-offering-offering-type :shape
                         "OfferingType" :location common-lisp:nil
                         :location-name "offeringType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-offering-region :shape
                         "__string" :location common-lisp:nil :location-name
                         "region")
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor struct-shape-offering-resource-specification
                         :shape "ReservationResourceSpecification" :location
                         common-lisp:nil :location-name
                         "resourceSpecification")
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-offering-usage-price :shape "__double"
                         :location common-lisp:nil :location-name
                         "usagePrice"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offering 'make-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering))
   common-lisp:nil))
(common-lisp:deftype offering-duration-units () 'common-lisp:string)
(common-lisp:deftype offering-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((audio-description-names :initarg
                         :audio-description-names :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-output-audio-description-names
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "audioDescriptionNames")
                        (caption-description-names :initarg
                         :caption-description-names :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-output-caption-description-names :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "captionDescriptionNames")
                        (output-name :initarg :output-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__stringMin1Max255| common-lisp:null)
                         :accessor struct-shape-output-output-name :shape
                         "__stringMin1Max255" :location common-lisp:nil
                         :location-name "outputName")
                        (output-settings :initarg :output-settings :initform
                         (common-lisp:error ":output-settings is required")
                         :type
                         (common-lisp:or output-settings common-lisp:null)
                         :accessor struct-shape-output-output-settings :shape
                         "OutputSettings" :location common-lisp:nil
                         :location-name "outputSettings")
                        (video-description-name :initarg
                         :video-description-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-output-video-description-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "videoDescriptionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-description-names))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-description-names))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-name))
      (common-lisp:list
       (common-lisp:cons "OutputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-settings))
      (common-lisp:list
       (common-lisp:cons "OutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-description-name))
      (common-lisp:list
       (common-lisp:cons "VideoDescriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-destination common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-destination-id :shape "__string"
                         :location common-lisp:nil :location-name "id")
                        (media-package-settings :initarg
                         :media-package-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          |__listOfMediaPackageOutputDestinationSettings|
                          common-lisp:null)
                         :accessor
                         struct-shape-output-destination-media-package-settings
                         :shape "__listOfMediaPackageOutputDestinationSettings"
                         :location common-lisp:nil :location-name
                         "mediaPackageSettings")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          multiplex-program-channel-destination-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-output-destination-multiplex-settings
                         :shape "MultiplexProgramChannelDestinationSettings"
                         :location common-lisp:nil :location-name
                         "multiplexSettings")
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfOutputDestinationSettings|
                                         common-lisp:null)
                         :accessor struct-shape-output-destination-settings
                         :shape "__listOfOutputDestinationSettings" :location
                         common-lisp:nil :location-name "settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-destination 'make-output-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-destination-settings common-lisp:nil
                       ((password-param :initarg :password-param :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-destination-settings-password-param
                         :shape "__string" :location common-lisp:nil
                         :location-name "passwordParam")
                        (stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-destination-settings-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "streamName")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-destination-settings-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "url")
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-output-destination-settings-username
                         :shape "__string" :location common-lisp:nil
                         :location-name "username"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-destination-settings
                    'make-output-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__stringMax32| common-lisp:null)
                         :accessor struct-shape-output-group-name :shape
                         "__stringMax32" :location common-lisp:nil
                         :location-name "name")
                        (output-group-settings :initarg :output-group-settings
                         :initform
                         (common-lisp:error
                          ":output-group-settings is required")
                         :type
                         (common-lisp:or output-group-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-group-output-group-settings :shape
                         "OutputGroupSettings" :location common-lisp:nil
                         :location-name "outputGroupSettings")
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor struct-shape-output-group-outputs :shape
                         "__listOfOutput" :location common-lisp:nil
                         :location-name "outputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-group 'make-output-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-group-settings))
      (common-lisp:list
       (common-lisp:cons "OutputGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group-settings common-lisp:nil
                       ((archive-group-settings :initarg
                         :archive-group-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or archive-group-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-archive-group-settings
                         :shape "ArchiveGroupSettings" :location
                         common-lisp:nil :location-name "archiveGroupSettings")
                        (frame-capture-group-settings :initarg
                         :frame-capture-group-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or frame-capture-group-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-frame-capture-group-settings
                         :shape "FrameCaptureGroupSettings" :location
                         common-lisp:nil :location-name
                         "frameCaptureGroupSettings")
                        (hls-group-settings :initarg :hls-group-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-group-settings common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-hls-group-settings
                         :shape "HlsGroupSettings" :location common-lisp:nil
                         :location-name "hlsGroupSettings")
                        (media-package-group-settings :initarg
                         :media-package-group-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or media-package-group-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-media-package-group-settings
                         :shape "MediaPackageGroupSettings" :location
                         common-lisp:nil :location-name
                         "mediaPackageGroupSettings")
                        (ms-smooth-group-settings :initarg
                         :ms-smooth-group-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or ms-smooth-group-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-ms-smooth-group-settings
                         :shape "MsSmoothGroupSettings" :location
                         common-lisp:nil :location-name
                         "msSmoothGroupSettings")
                        (multiplex-group-settings :initarg
                         :multiplex-group-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-group-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-multiplex-group-settings
                         :shape "MultiplexGroupSettings" :location
                         common-lisp:nil :location-name
                         "multiplexGroupSettings")
                        (rtmp-group-settings :initarg :rtmp-group-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or rtmp-group-settings common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-rtmp-group-settings
                         :shape "RtmpGroupSettings" :location common-lisp:nil
                         :location-name "rtmpGroupSettings")
                        (udp-group-settings :initarg :udp-group-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or udp-group-settings common-lisp:null)
                         :accessor
                         struct-shape-output-group-settings-udp-group-settings
                         :shape "UdpGroupSettings" :location common-lisp:nil
                         :location-name "udpGroupSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-group-settings 'make-output-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-group-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-group-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-group-settings))
      (common-lisp:list
       (common-lisp:cons "HlsGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-group-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-group-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-group-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rtmp-group-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udp-group-settings))
      (common-lisp:list
       (common-lisp:cons "UdpGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-location-ref common-lisp:nil
                       ((destination-ref-id :initarg :destination-ref-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-location-ref-destination-ref-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "destinationRefId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-location-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-location-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-location-ref 'make-output-location-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ref-id))
      (common-lisp:list
       (common-lisp:cons "DestinationRefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-locking-settings common-lisp:nil
                       ((epoch-locking-settings :initarg
                         :epoch-locking-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or epoch-locking-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-locking-settings-epoch-locking-settings
                         :shape "EpochLockingSettings" :location
                         common-lisp:nil :location-name "epochLockingSettings")
                        (pipeline-locking-settings :initarg
                         :pipeline-locking-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or pipeline-locking-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-locking-settings-pipeline-locking-settings
                         :shape "PipelineLockingSettings" :location
                         common-lisp:nil :location-name
                         "pipelineLockingSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-locking-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-locking-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-locking-settings 'make-output-locking-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-locking-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-locking-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'epoch-locking-settings))
      (common-lisp:list
       (common-lisp:cons "EpochLockingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-locking-settings))
      (common-lisp:list
       (common-lisp:cons "PipelineLockingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-locking-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-settings common-lisp:nil
                       ((archive-output-settings :initarg
                         :archive-output-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or archive-output-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-settings-archive-output-settings
                         :shape "ArchiveOutputSettings" :location
                         common-lisp:nil :location-name
                         "archiveOutputSettings")
                        (frame-capture-output-settings :initarg
                         :frame-capture-output-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or frame-capture-output-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-settings-frame-capture-output-settings
                         :shape "FrameCaptureOutputSettings" :location
                         common-lisp:nil :location-name
                         "frameCaptureOutputSettings")
                        (hls-output-settings :initarg :hls-output-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or hls-output-settings common-lisp:null)
                         :accessor
                         struct-shape-output-settings-hls-output-settings
                         :shape "HlsOutputSettings" :location common-lisp:nil
                         :location-name "hlsOutputSettings")
                        (media-package-output-settings :initarg
                         :media-package-output-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or media-package-output-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-settings-media-package-output-settings
                         :shape "MediaPackageOutputSettings" :location
                         common-lisp:nil :location-name
                         "mediaPackageOutputSettings")
                        (ms-smooth-output-settings :initarg
                         :ms-smooth-output-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or ms-smooth-output-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-settings-ms-smooth-output-settings
                         :shape "MsSmoothOutputSettings" :location
                         common-lisp:nil :location-name
                         "msSmoothOutputSettings")
                        (multiplex-output-settings :initarg
                         :multiplex-output-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-output-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-settings-multiplex-output-settings
                         :shape "MultiplexOutputSettings" :location
                         common-lisp:nil :location-name
                         "multiplexOutputSettings")
                        (rtmp-output-settings :initarg :rtmp-output-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or rtmp-output-settings common-lisp:null)
                         :accessor
                         struct-shape-output-settings-rtmp-output-settings
                         :shape "RtmpOutputSettings" :location common-lisp:nil
                         :location-name "rtmpOutputSettings")
                        (udp-output-settings :initarg :udp-output-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or udp-output-settings common-lisp:null)
                         :accessor
                         struct-shape-output-settings-udp-output-settings
                         :shape "UdpOutputSettings" :location common-lisp:nil
                         :location-name "udpOutputSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-settings 'make-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-output-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-output-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-output-settings))
      (common-lisp:list
       (common-lisp:cons "HlsOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-output-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-output-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-output-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rtmp-output-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udp-output-settings))
      (common-lisp:list
       (common-lisp:cons "UdpOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pass-through-settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pass-through-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pass-through-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pass-through-settings 'make-pass-through-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pause-state-schedule-action-settings common-lisp:nil
                       ((pipelines :initarg :pipelines :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelinePauseStateSettings|
                                         common-lisp:null)
                         :accessor
                         struct-shape-pause-state-schedule-action-settings-pipelines
                         :shape "__listOfPipelinePauseStateSettings" :location
                         common-lisp:nil :location-name "pipelines"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pause-state-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pause-state-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pause-state-schedule-action-settings
                    'make-pause-state-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "Pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-detail common-lisp:nil
                       ((active-input-attachment-name :initarg
                         :active-input-attachment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-pipeline-detail-active-input-attachment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "activeInputAttachmentName")
                        (active-input-switch-action-name :initarg
                         :active-input-switch-action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-pipeline-detail-active-input-switch-action-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "activeInputSwitchActionName")
                        (active-motion-graphics-action-name :initarg
                         :active-motion-graphics-action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-pipeline-detail-active-motion-graphics-action-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "activeMotionGraphicsActionName")
                        (active-motion-graphics-uri :initarg
                         :active-motion-graphics-uri :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-pipeline-detail-active-motion-graphics-uri
                         :shape "__string" :location common-lisp:nil
                         :location-name "activeMotionGraphicsUri")
                        (pipeline-id :initarg :pipeline-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-pipeline-detail-pipeline-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "pipelineId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pipeline-detail 'make-pipeline-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-input-attachment-name))
      (common-lisp:list
       (common-lisp:cons "ActiveInputAttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-input-switch-action-name))
      (common-lisp:list
       (common-lisp:cons "ActiveInputSwitchActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-motion-graphics-action-name))
      (common-lisp:list
       (common-lisp:cons "ActiveMotionGraphicsActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-motion-graphics-uri))
      (common-lisp:list
       (common-lisp:cons "ActiveMotionGraphicsUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-detail))
   common-lisp:nil))
(common-lisp:deftype pipeline-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-locking-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-locking-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-locking-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-locking-settings
                    'make-pipeline-locking-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-locking-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-locking-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-locking-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-pause-state-settings common-lisp:nil
                       ((pipeline-id :initarg :pipeline-id :initform
                         (common-lisp:error ":pipeline-id is required") :type
                         (common-lisp:or pipeline-id common-lisp:null)
                         :accessor
                         struct-shape-pipeline-pause-state-settings-pipeline-id
                         :shape "PipelineId" :location common-lisp:nil
                         :location-name "pipelineId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-pause-state-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipeline-pause-state-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-pause-state-settings
                    'make-pipeline-pause-state-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   common-lisp:nil))
(common-lisp:deftype preferred-channel-pipeline () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass purchase-offering common-lisp:nil
                       ((count :initarg :count :initform
                         (common-lisp:error ":count is required") :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-purchase-offering-count :shape
                         "__integerMin1" :location common-lisp:nil
                         :location-name "count")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-renewal-settings :shape
                         "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "requestId")
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-start :shape "__string"
                         :location common-lisp:nil :location-name "start")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-purchase-offering-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering 'make-purchase-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input purchase-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input purchase-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input purchase-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-request common-lisp:nil
                       ((count :initarg :count :initform
                         (common-lisp:error ":count is required") :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-purchase-offering-request-count
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "count")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (offering-id :initarg :offering-id :initform
                         (common-lisp:error ":offering-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-offering-id
                         :shape "__string" :location "uri" :location-name
                         "offeringId")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-request-renewal-settings
                         :shape "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings")
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-request-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "requestId")
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-start :shape
                         "__string" :location common-lisp:nil :location-name
                         "start")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-request
                    'make-purchase-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-response common-lisp:nil
                       ((reservation :initarg :reservation :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-response-reservation
                         :shape "Reservation" :location common-lisp:nil
                         :location-name "reservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-response
                    'make-purchase-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-result-model common-lisp:nil
                       ((reservation :initarg :reservation :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-result-model-reservation
                         :shape "Reservation" :location common-lisp:nil
                         :location-name "reservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-offering-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-result-model
                    'make-purchase-offering-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raw-settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raw-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'raw-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'raw-settings 'make-raw-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-input-device common-lisp:nil
                       ((force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or reboot-input-device-force
                                         common-lisp:null)
                         :accessor struct-shape-reboot-input-device-force
                         :shape "RebootInputDeviceForce" :location
                         common-lisp:nil :location-name "force"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-input-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device 'make-reboot-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-input-device))
   common-lisp:nil))
(common-lisp:deftype reboot-input-device-force () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reboot-input-device-request common-lisp:nil
                       ((force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or reboot-input-device-force
                                         common-lisp:null)
                         :accessor
                         struct-shape-reboot-input-device-request-force :shape
                         "RebootInputDeviceForce" :location common-lisp:nil
                         :location-name "force")
                        (input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-reboot-input-device-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device-request
                    'make-reboot-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-input-device-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-input-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device-response
                    'make-reboot-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rec601settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rec601settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rec601settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rec601settings 'make-rec601settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rec601settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rec601settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rec601settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rec709settings common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rec709settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rec709settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rec709settings 'make-rec709settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rec709settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rec709settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rec709settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-input-device-transfer-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-reject-input-device-transfer-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-input-device-transfer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-input-device-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-input-device-transfer-request
                    'make-reject-input-device-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-input-device-transfer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-input-device-transfer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-input-device-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-input-device-transfer-response
                    'make-reject-input-device-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remix-settings common-lisp:nil
                       ((channel-mappings :initarg :channel-mappings :initform
                         (common-lisp:error ":channel-mappings is required")
                         :type
                         (common-lisp:or |__listOfAudioChannelMapping|
                                         common-lisp:null)
                         :accessor struct-shape-remix-settings-channel-mappings
                         :shape "__listOfAudioChannelMapping" :location
                         common-lisp:nil :location-name "channelMappings")
                        (channels-in :initarg :channels-in :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max16| common-lisp:null)
                         :accessor struct-shape-remix-settings-channels-in
                         :shape "__integerMin1Max16" :location common-lisp:nil
                         :location-name "channelsIn")
                        (channels-out :initarg :channels-out :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max8| common-lisp:null)
                         :accessor struct-shape-remix-settings-channels-out
                         :shape "__integerMin1Max8" :location common-lisp:nil
                         :location-name "channelsOut"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remix-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remix-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'remix-settings 'make-remix-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-mappings))
      (common-lisp:list
       (common-lisp:cons "ChannelMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-in))
      (common-lisp:list
       (common-lisp:cons "ChannelsIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-out))
      (common-lisp:list
       (common-lisp:cons "ChannelsOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remix-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renewal-settings common-lisp:nil
                       ((automatic-renewal :initarg :automatic-renewal
                         :initform common-lisp:nil :type
                         (common-lisp:or reservation-automatic-renewal
                                         common-lisp:null)
                         :accessor
                         struct-shape-renewal-settings-automatic-renewal :shape
                         "ReservationAutomaticRenewal" :location
                         common-lisp:nil :location-name "automaticRenewal")
                        (renewal-count :initarg :renewal-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-renewal-settings-renewal-count
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "renewalCount"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-renewal-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'renewal-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'renewal-settings 'make-renewal-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-renewal))
      (common-lisp:list
       (common-lisp:cons "AutomaticRenewal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-count))
      (common-lisp:list
       (common-lisp:cons "RenewalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-reservation-count :shape
                         "__integer" :location common-lisp:nil :location-name
                         "count")
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-currency-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "currencyCode")
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-reservation-duration :shape
                         "__integer" :location common-lisp:nil :location-name
                         "duration")
                        (duration-units :initarg :duration-units :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor struct-shape-reservation-duration-units
                         :shape "OfferingDurationUnits" :location
                         common-lisp:nil :location-name "durationUnits")
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-end :shape "__string"
                         :location common-lisp:nil :location-name "end")
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-reservation-fixed-price :shape "__double"
                         :location common-lisp:nil :location-name "fixedPrice")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (offering-description :initarg :offering-description
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-offering-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "offeringDescription")
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-offering-id :shape "__string"
                         :location common-lisp:nil :location-name "offeringId")
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor struct-shape-reservation-offering-type
                         :shape "OfferingType" :location common-lisp:nil
                         :location-name "offeringType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-reservation-region :shape
                         "__string" :location common-lisp:nil :location-name
                         "region")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor struct-shape-reservation-renewal-settings
                         :shape "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings")
                        (reservation-id :initarg :reservation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-reservation-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "reservationId")
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification :shape
                         "ReservationResourceSpecification" :location
                         common-lisp:nil :location-name
                         "resourceSpecification")
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-start :shape "__string"
                         :location common-lisp:nil :location-name "start")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor struct-shape-reservation-state :shape
                         "ReservationState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-reservation-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags")
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-reservation-usage-price :shape "__double"
                         :location common-lisp:nil :location-name
                         "usagePrice"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reservation 'make-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation))
   common-lisp:nil))
(common-lisp:deftype reservation-automatic-renewal () 'common-lisp:string)
(common-lisp:deftype reservation-codec () 'common-lisp:string)
(common-lisp:deftype reservation-maximum-bitrate () 'common-lisp:string)
(common-lisp:deftype reservation-maximum-framerate () 'common-lisp:string)
(common-lisp:deftype reservation-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reservation-resource-specification common-lisp:nil
                       ((channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or reservation-codec common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-codec
                         :shape "ReservationCodec" :location common-lisp:nil
                         :location-name "codec")
                        (maximum-bitrate :initarg :maximum-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-maximum-bitrate
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-maximum-bitrate
                         :shape "ReservationMaximumBitrate" :location
                         common-lisp:nil :location-name "maximumBitrate")
                        (maximum-framerate :initarg :maximum-framerate
                         :initform common-lisp:nil :type
                         (common-lisp:or reservation-maximum-framerate
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-maximum-framerate
                         :shape "ReservationMaximumFramerate" :location
                         common-lisp:nil :location-name "maximumFramerate")
                        (resolution :initarg :resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-resolution
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-resolution
                         :shape "ReservationResolution" :location
                         common-lisp:nil :location-name "resolution")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-resource-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-resource-type
                         :shape "ReservationResourceType" :location
                         common-lisp:nil :location-name "resourceType")
                        (special-feature :initarg :special-feature :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-special-feature
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-special-feature
                         :shape "ReservationSpecialFeature" :location
                         common-lisp:nil :location-name "specialFeature")
                        (video-quality :initarg :video-quality :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-video-quality
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification-video-quality
                         :shape "ReservationVideoQuality" :location
                         common-lisp:nil :location-name "videoQuality"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-resource-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-resource-specification
                    'make-reservation-resource-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-framerate))
      (common-lisp:list
       (common-lisp:cons "MaximumFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'special-feature))
      (common-lisp:list
       (common-lisp:cons "SpecialFeature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-quality))
      (common-lisp:list
       (common-lisp:cons "VideoQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   common-lisp:nil))
(common-lisp:deftype reservation-resource-type () 'common-lisp:string)
(common-lisp:deftype reservation-special-feature () 'common-lisp:string)
(common-lisp:deftype reservation-state () 'common-lisp:string)
(common-lisp:deftype reservation-video-quality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-conflict common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-resource-conflict-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-conflict
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-conflict
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-conflict 'make-resource-conflict))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-conflict))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-not-found common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-resource-not-found-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-not-found
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-not-found
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-not-found 'make-resource-not-found))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-not-found))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-not-found))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-not-found))
   common-lisp:nil))
(common-lisp:deftype rtmp-ad-markers () 'common-lisp:string)
(common-lisp:deftype rtmp-cache-full-behavior () 'common-lisp:string)
(common-lisp:deftype rtmp-caption-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rtmp-caption-info-destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rtmp-caption-info-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rtmp-caption-info-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rtmp-caption-info-destination-settings
                    'make-rtmp-caption-info-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rtmp-group-settings common-lisp:nil
                       ((ad-markers :initarg :ad-markers :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfRtmpAdMarkers|
                                         common-lisp:null)
                         :accessor struct-shape-rtmp-group-settings-ad-markers
                         :shape "__listOfRtmpAdMarkers" :location
                         common-lisp:nil :location-name "adMarkers")
                        (authentication-scheme :initarg :authentication-scheme
                         :initform common-lisp:nil :type
                         (common-lisp:or authentication-scheme
                                         common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-authentication-scheme
                         :shape "AuthenticationScheme" :location
                         common-lisp:nil :location-name "authenticationScheme")
                        (cache-full-behavior :initarg :cache-full-behavior
                         :initform common-lisp:nil :type
                         (common-lisp:or rtmp-cache-full-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-cache-full-behavior
                         :shape "RtmpCacheFullBehavior" :location
                         common-lisp:nil :location-name "cacheFullBehavior")
                        (cache-length :initarg :cache-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin30| common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-cache-length :shape
                         "__integerMin30" :location common-lisp:nil
                         :location-name "cacheLength")
                        (caption-data :initarg :caption-data :initform
                         common-lisp:nil :type
                         (common-lisp:or rtmp-caption-data common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-caption-data :shape
                         "RtmpCaptionData" :location common-lisp:nil
                         :location-name "captionData")
                        (input-loss-action :initarg :input-loss-action
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-action-for-rtmp-out
                                         common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-input-loss-action
                         :shape "InputLossActionForRtmpOut" :location
                         common-lisp:nil :location-name "inputLossAction")
                        (restart-delay :initarg :restart-delay :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-restart-delay :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "restartDelay")
                        (include-filler-nal-units :initarg
                         :include-filler-nal-units :initform common-lisp:nil
                         :type
                         (common-lisp:or include-filler-nal-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-rtmp-group-settings-include-filler-nal-units
                         :shape "IncludeFillerNalUnits" :location
                         common-lisp:nil :location-name
                         "includeFillerNalUnits"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rtmp-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rtmp-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rtmp-group-settings 'make-rtmp-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthenticationScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-full-behavior))
      (common-lisp:list
       (common-lisp:cons "CacheFullBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-length))
      (common-lisp:list
       (common-lisp:cons "CacheLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-data))
      (common-lisp:list
       (common-lisp:cons "CaptionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-filler-nal-units))
      (common-lisp:list
       (common-lisp:cons "IncludeFillerNalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   common-lisp:nil))
(common-lisp:deftype rtmp-output-certificate-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rtmp-output-settings common-lisp:nil
                       ((certificate-mode :initarg :certificate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or rtmp-output-certificate-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-rtmp-output-settings-certificate-mode
                         :shape "RtmpOutputCertificateMode" :location
                         common-lisp:nil :location-name "certificateMode")
                        (connection-retry-interval :initarg
                         :connection-retry-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-rtmp-output-settings-connection-retry-interval
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "connectionRetryInterval")
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor
                         struct-shape-rtmp-output-settings-destination :shape
                         "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination")
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-rtmp-output-settings-num-retries :shape
                         "__integerMin0" :location common-lisp:nil
                         :location-name "numRetries"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rtmp-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rtmp-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rtmp-output-settings 'make-rtmp-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "CertificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   common-lisp:nil))
(common-lisp:deftype s3canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule-action common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":action-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-schedule-action-action-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "actionName")
                        (schedule-action-settings :initarg
                         :schedule-action-settings :initform
                         (common-lisp:error
                          ":schedule-action-settings is required")
                         :type
                         (common-lisp:or schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-schedule-action-settings
                         :shape "ScheduleActionSettings" :location
                         common-lisp:nil :location-name
                         "scheduleActionSettings")
                        (schedule-action-start-settings :initarg
                         :schedule-action-start-settings :initform
                         (common-lisp:error
                          ":schedule-action-start-settings is required")
                         :type
                         (common-lisp:or schedule-action-start-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-schedule-action-start-settings
                         :shape "ScheduleActionStartSettings" :location
                         common-lisp:nil :location-name
                         "scheduleActionStartSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schedule-action 'make-schedule-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-action-settings))
      (common-lisp:list
       (common-lisp:cons "ScheduleActionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "ScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-action-settings common-lisp:nil
                       ((hls-id3segment-tagging-settings :initarg
                         :hls-id3segment-tagging-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          hls-id3segment-tagging-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-hls-id3segment-tagging-settings
                         :shape "HlsId3SegmentTaggingScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "hlsId3SegmentTaggingSettings")
                        (hls-timed-metadata-settings :initarg
                         :hls-timed-metadata-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          hls-timed-metadata-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-hls-timed-metadata-settings
                         :shape "HlsTimedMetadataScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "hlsTimedMetadataSettings")
                        (input-prepare-settings :initarg
                         :input-prepare-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or input-prepare-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-input-prepare-settings
                         :shape "InputPrepareScheduleActionSettings" :location
                         common-lisp:nil :location-name "inputPrepareSettings")
                        (input-switch-settings :initarg :input-switch-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-switch-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-input-switch-settings
                         :shape "InputSwitchScheduleActionSettings" :location
                         common-lisp:nil :location-name "inputSwitchSettings")
                        (motion-graphics-image-activate-settings :initarg
                         :motion-graphics-image-activate-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          motion-graphics-activate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-motion-graphics-image-activate-settings
                         :shape "MotionGraphicsActivateScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "motionGraphicsImageActivateSettings")
                        (motion-graphics-image-deactivate-settings :initarg
                         :motion-graphics-image-deactivate-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          motion-graphics-deactivate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-motion-graphics-image-deactivate-settings
                         :shape
                         "MotionGraphicsDeactivateScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "motionGraphicsImageDeactivateSettings")
                        (pause-state-settings :initarg :pause-state-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or pause-state-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-pause-state-settings
                         :shape "PauseStateScheduleActionSettings" :location
                         common-lisp:nil :location-name "pauseStateSettings")
                        (scte35input-settings :initarg :scte35input-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or scte35input-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-scte35input-settings
                         :shape "Scte35InputScheduleActionSettings" :location
                         common-lisp:nil :location-name "scte35InputSettings")
                        (scte35return-to-network-settings :initarg
                         :scte35return-to-network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          scte35return-to-network-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-scte35return-to-network-settings
                         :shape "Scte35ReturnToNetworkScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "scte35ReturnToNetworkSettings")
                        (scte35splice-insert-settings :initarg
                         :scte35splice-insert-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          scte35splice-insert-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-scte35splice-insert-settings
                         :shape "Scte35SpliceInsertScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "scte35SpliceInsertSettings")
                        (scte35time-signal-settings :initarg
                         :scte35time-signal-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          scte35time-signal-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-scte35time-signal-settings
                         :shape "Scte35TimeSignalScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "scte35TimeSignalSettings")
                        (static-image-activate-settings :initarg
                         :static-image-activate-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          static-image-activate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-static-image-activate-settings
                         :shape "StaticImageActivateScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "staticImageActivateSettings")
                        (static-image-deactivate-settings :initarg
                         :static-image-deactivate-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          static-image-deactivate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-static-image-deactivate-settings
                         :shape "StaticImageDeactivateScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "staticImageDeactivateSettings")
                        (static-image-output-activate-settings :initarg
                         :static-image-output-activate-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          static-image-output-activate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-static-image-output-activate-settings
                         :shape
                         "StaticImageOutputActivateScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "staticImageOutputActivateSettings")
                        (static-image-output-deactivate-settings :initarg
                         :static-image-output-deactivate-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          static-image-output-deactivate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-settings-static-image-output-deactivate-settings
                         :shape
                         "StaticImageOutputDeactivateScheduleActionSettings"
                         :location common-lisp:nil :location-name
                         "staticImageOutputDeactivateSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-action-settings 'make-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-id3segment-tagging-settings))
      (common-lisp:list
       (common-lisp:cons "HlsId3SegmentTaggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-timed-metadata-settings))
      (common-lisp:list
       (common-lisp:cons "HlsTimedMetadataSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-prepare-settings))
      (common-lisp:list
       (common-lisp:cons "InputPrepareSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-switch-settings))
      (common-lisp:list
       (common-lisp:cons "InputSwitchSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-image-activate-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsImageActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-image-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsImageDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pause-state-settings))
      (common-lisp:list
       (common-lisp:cons "PauseStateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35input-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35InputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35return-to-network-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35ReturnToNetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35splice-insert-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35SpliceInsertSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35time-signal-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35TimeSignalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-activate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-output-activate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageOutputActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-output-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageOutputDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-action-start-settings common-lisp:nil
                       ((fixed-mode-schedule-action-start-settings :initarg
                         :fixed-mode-schedule-action-start-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          fixed-mode-schedule-action-start-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-start-settings-fixed-mode-schedule-action-start-settings
                         :shape "FixedModeScheduleActionStartSettings"
                         :location common-lisp:nil :location-name
                         "fixedModeScheduleActionStartSettings")
                        (follow-mode-schedule-action-start-settings :initarg
                         :follow-mode-schedule-action-start-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          follow-mode-schedule-action-start-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-start-settings-follow-mode-schedule-action-start-settings
                         :shape "FollowModeScheduleActionStartSettings"
                         :location common-lisp:nil :location-name
                         "followModeScheduleActionStartSettings")
                        (immediate-mode-schedule-action-start-settings :initarg
                         :immediate-mode-schedule-action-start-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          immediate-mode-schedule-action-start-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-schedule-action-start-settings-immediate-mode-schedule-action-start-settings
                         :shape "ImmediateModeScheduleActionStartSettings"
                         :location common-lisp:nil :location-name
                         "immediateModeScheduleActionStartSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-action-start-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-action-start-settings
                    'make-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "FixedModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'follow-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "FollowModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immediate-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "ImmediateModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-delete-result-model common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-delete-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-delete-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-delete-result-model
                    'make-schedule-delete-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-describe-result-model common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-schedule-describe-result-model-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (schedule-actions :initarg :schedule-actions :initform
                         (common-lisp:error ":schedule-actions is required")
                         :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-describe-result-model-schedule-actions
                         :shape "__listOfScheduleAction" :location
                         common-lisp:nil :location-name "scheduleActions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-describe-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'schedule-describe-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-describe-result-model
                    'make-schedule-describe-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   common-lisp:nil))
(common-lisp:deftype scte20convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte20plus-embedded-destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte20plus-embedded-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte20plus-embedded-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte20plus-embedded-destination-settings
                    'make-scte20plus-embedded-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte20source-settings common-lisp:nil
                       ((convert608to708 :initarg :convert608to708 :initform
                         common-lisp:nil :type
                         (common-lisp:or scte20convert608to708
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte20source-settings-convert608to708
                         :shape "Scte20Convert608To708" :location
                         common-lisp:nil :location-name "convert608To708")
                        (source608channel-number :initarg
                         :source608channel-number :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         struct-shape-scte20source-settings-source608channel-number
                         :shape "__integerMin1Max4" :location common-lisp:nil
                         :location-name "source608ChannelNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte20source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte20source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte20source-settings 'make-scte20source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte27destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte27destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte27destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte27destination-settings
                    'make-scte27destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   common-lisp:nil))
(common-lisp:deftype scte27ocr-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte27source-settings common-lisp:nil
                       ((ocr-language :initarg :ocr-language :initform
                         common-lisp:nil :type
                         (common-lisp:or scte27ocr-language common-lisp:null)
                         :accessor
                         struct-shape-scte27source-settings-ocr-language :shape
                         "Scte27OcrLanguage" :location common-lisp:nil
                         :location-name "ocrLanguage")
                        (pid :initarg :pid :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor struct-shape-scte27source-settings-pid
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "pid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte27source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte27source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte27source-settings 'make-scte27source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocr-language))
      (common-lisp:list
       (common-lisp:cons "OcrLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   common-lisp:nil))
(common-lisp:deftype scte35apos-no-regional-blackout-behavior ()
  'common-lisp:string)
(common-lisp:deftype scte35apos-web-delivery-allowed-behavior ()
  'common-lisp:string)
(common-lisp:deftype scte35archive-allowed-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35delivery-restrictions common-lisp:nil
                       ((archive-allowed-flag :initarg :archive-allowed-flag
                         :initform
                         (common-lisp:error
                          ":archive-allowed-flag is required")
                         :type
                         (common-lisp:or scte35archive-allowed-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35delivery-restrictions-archive-allowed-flag
                         :shape "Scte35ArchiveAllowedFlag" :location
                         common-lisp:nil :location-name "archiveAllowedFlag")
                        (device-restrictions :initarg :device-restrictions
                         :initform
                         (common-lisp:error ":device-restrictions is required")
                         :type
                         (common-lisp:or scte35device-restrictions
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35delivery-restrictions-device-restrictions
                         :shape "Scte35DeviceRestrictions" :location
                         common-lisp:nil :location-name "deviceRestrictions")
                        (no-regional-blackout-flag :initarg
                         :no-regional-blackout-flag :initform
                         (common-lisp:error
                          ":no-regional-blackout-flag is required")
                         :type
                         (common-lisp:or scte35no-regional-blackout-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35delivery-restrictions-no-regional-blackout-flag
                         :shape "Scte35NoRegionalBlackoutFlag" :location
                         common-lisp:nil :location-name
                         "noRegionalBlackoutFlag")
                        (web-delivery-allowed-flag :initarg
                         :web-delivery-allowed-flag :initform
                         (common-lisp:error
                          ":web-delivery-allowed-flag is required")
                         :type
                         (common-lisp:or scte35web-delivery-allowed-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35delivery-restrictions-web-delivery-allowed-flag
                         :shape "Scte35WebDeliveryAllowedFlag" :location
                         common-lisp:nil :location-name
                         "webDeliveryAllowedFlag"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35delivery-restrictions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte35delivery-restrictions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35delivery-restrictions
                    'make-scte35delivery-restrictions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "ArchiveAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-restrictions))
      (common-lisp:list
       (common-lisp:cons "DeviceRestrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35descriptor common-lisp:nil
                       ((scte35descriptor-settings :initarg
                         :scte35descriptor-settings :initform
                         (common-lisp:error
                          ":scte35descriptor-settings is required")
                         :type
                         (common-lisp:or scte35descriptor-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35descriptor-scte35descriptor-settings
                         :shape "Scte35DescriptorSettings" :location
                         common-lisp:nil :location-name
                         "scte35DescriptorSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte35descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35descriptor 'make-scte35descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scte35descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scte35descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35descriptor-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35DescriptorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scte35descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35descriptor-settings common-lisp:nil
                       ((segmentation-descriptor-scte35descriptor-settings
                         :initarg
                         :segmentation-descriptor-scte35descriptor-settings
                         :initform
                         (common-lisp:error
                          ":segmentation-descriptor-scte35descriptor-settings is required")
                         :type
                         (common-lisp:or scte35segmentation-descriptor
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35descriptor-settings-segmentation-descriptor-scte35descriptor-settings
                         :shape "Scte35SegmentationDescriptor" :location
                         common-lisp:nil :location-name
                         "segmentationDescriptorScte35DescriptorSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35descriptor-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte35descriptor-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35descriptor-settings
                    'make-scte35descriptor-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-descriptor-scte35descriptor-settings))
      (common-lisp:list
       (common-lisp:cons "SegmentationDescriptorScte35DescriptorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   common-lisp:nil))
(common-lisp:deftype scte35device-restrictions () 'common-lisp:string)
(common-lisp:deftype scte35input-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35input-schedule-action-settings common-lisp:nil
                       ((input-attachment-name-reference :initarg
                         :input-attachment-name-reference :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-scte35input-schedule-action-settings-input-attachment-name-reference
                         :shape "__string" :location common-lisp:nil
                         :location-name "inputAttachmentNameReference")
                        (mode :initarg :mode :initform
                         (common-lisp:error ":mode is required") :type
                         (common-lisp:or scte35input-mode common-lisp:null)
                         :accessor
                         struct-shape-scte35input-schedule-action-settings-mode
                         :shape "Scte35InputMode" :location common-lisp:nil
                         :location-name "mode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35input-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35input-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35input-schedule-action-settings
                    'make-scte35input-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35no-regional-blackout-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35return-to-network-schedule-action-settings
                       common-lisp:nil
                       ((splice-event-id :initarg :splice-event-id :initform
                         (common-lisp:error ":splice-event-id is required")
                         :type
                         (common-lisp:or |__longMin0Max4294967295|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35return-to-network-schedule-action-settings-splice-event-id
                         :shape "__longMin0Max4294967295" :location
                         common-lisp:nil :location-name "spliceEventId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35return-to-network-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35return-to-network-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35return-to-network-schedule-action-settings
                    'make-scte35return-to-network-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'splice-event-id))
      (common-lisp:list
       (common-lisp:cons "SpliceEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35segmentation-cancel-indicator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35segmentation-descriptor common-lisp:nil
                       ((delivery-restrictions :initarg :delivery-restrictions
                         :initform common-lisp:nil :type
                         (common-lisp:or scte35delivery-restrictions
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-delivery-restrictions
                         :shape "Scte35DeliveryRestrictions" :location
                         common-lisp:nil :location-name "deliveryRestrictions")
                        (segment-num :initarg :segment-num :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segment-num
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "segmentNum")
                        (segmentation-cancel-indicator :initarg
                         :segmentation-cancel-indicator :initform
                         (common-lisp:error
                          ":segmentation-cancel-indicator is required")
                         :type
                         (common-lisp:or scte35segmentation-cancel-indicator
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segmentation-cancel-indicator
                         :shape "Scte35SegmentationCancelIndicator" :location
                         common-lisp:nil :location-name
                         "segmentationCancelIndicator")
                        (segmentation-duration :initarg :segmentation-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |__longMin0Max1099511627775|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segmentation-duration
                         :shape "__longMin0Max1099511627775" :location
                         common-lisp:nil :location-name "segmentationDuration")
                        (segmentation-event-id :initarg :segmentation-event-id
                         :initform
                         (common-lisp:error
                          ":segmentation-event-id is required")
                         :type
                         (common-lisp:or |__longMin0Max4294967295|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segmentation-event-id
                         :shape "__longMin0Max4294967295" :location
                         common-lisp:nil :location-name "segmentationEventId")
                        (segmentation-type-id :initarg :segmentation-type-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segmentation-type-id
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "segmentationTypeId")
                        (segmentation-upid :initarg :segmentation-upid
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-scte35segmentation-descriptor-segmentation-upid
                         :shape "__string" :location common-lisp:nil
                         :location-name "segmentationUpid")
                        (segmentation-upid-type :initarg
                         :segmentation-upid-type :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segmentation-upid-type
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "segmentationUpidType")
                        (segments-expected :initarg :segments-expected
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-segments-expected
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "segmentsExpected")
                        (sub-segment-num :initarg :sub-segment-num :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-sub-segment-num
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "subSegmentNum")
                        (sub-segments-expected :initarg :sub-segments-expected
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35segmentation-descriptor-sub-segments-expected
                         :shape "__integerMin0Max255" :location common-lisp:nil
                         :location-name "subSegmentsExpected"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35segmentation-descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35segmentation-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35segmentation-descriptor
                    'make-scte35segmentation-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-restrictions))
      (common-lisp:list
       (common-lisp:cons "DeliveryRestrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-num))
      (common-lisp:list
       (common-lisp:cons "SegmentNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-cancel-indicator))
      (common-lisp:list
       (common-lisp:cons "SegmentationCancelIndicator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-duration))
      (common-lisp:list
       (common-lisp:cons "SegmentationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-event-id))
      (common-lisp:list
       (common-lisp:cons "SegmentationEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-type-id))
      (common-lisp:list
       (common-lisp:cons "SegmentationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-upid))
      (common-lisp:list
       (common-lisp:cons "SegmentationUpid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-upid-type))
      (common-lisp:list
       (common-lisp:cons "SegmentationUpidType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments-expected))
      (common-lisp:list
       (common-lisp:cons "SegmentsExpected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-segment-num))
      (common-lisp:list
       (common-lisp:cons "SubSegmentNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sub-segments-expected))
      (common-lisp:list
       (common-lisp:cons "SubSegmentsExpected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35splice-insert common-lisp:nil
                       ((ad-avail-offset :initarg :ad-avail-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35splice-insert-ad-avail-offset
                         :shape "__integerMinNegative1000Max1000" :location
                         common-lisp:nil :location-name "adAvailOffset")
                        (no-regional-blackout-flag :initarg
                         :no-regional-blackout-flag :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          scte35splice-insert-no-regional-blackout-behavior
                          common-lisp:null)
                         :accessor
                         struct-shape-scte35splice-insert-no-regional-blackout-flag
                         :shape "Scte35SpliceInsertNoRegionalBlackoutBehavior"
                         :location common-lisp:nil :location-name
                         "noRegionalBlackoutFlag")
                        (web-delivery-allowed-flag :initarg
                         :web-delivery-allowed-flag :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          scte35splice-insert-web-delivery-allowed-behavior
                          common-lisp:null)
                         :accessor
                         struct-shape-scte35splice-insert-web-delivery-allowed-flag
                         :shape "Scte35SpliceInsertWebDeliveryAllowedBehavior"
                         :location common-lisp:nil :location-name
                         "webDeliveryAllowedFlag"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35splice-insert
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte35splice-insert
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35splice-insert 'make-scte35splice-insert))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   common-lisp:nil))
(common-lisp:deftype scte35splice-insert-no-regional-blackout-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35splice-insert-schedule-action-settings
                       common-lisp:nil
                       ((duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or |__longMin0Max8589934591|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35splice-insert-schedule-action-settings-duration
                         :shape "__longMin0Max8589934591" :location
                         common-lisp:nil :location-name "duration")
                        (splice-event-id :initarg :splice-event-id :initform
                         (common-lisp:error ":splice-event-id is required")
                         :type
                         (common-lisp:or |__longMin0Max4294967295|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35splice-insert-schedule-action-settings-splice-event-id
                         :shape "__longMin0Max4294967295" :location
                         common-lisp:nil :location-name "spliceEventId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35splice-insert-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35splice-insert-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35splice-insert-schedule-action-settings
                    'make-scte35splice-insert-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'splice-event-id))
      (common-lisp:list
       (common-lisp:cons "SpliceEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35splice-insert-web-delivery-allowed-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35time-signal-apos common-lisp:nil
                       ((ad-avail-offset :initarg :ad-avail-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35time-signal-apos-ad-avail-offset
                         :shape "__integerMinNegative1000Max1000" :location
                         common-lisp:nil :location-name "adAvailOffset")
                        (no-regional-blackout-flag :initarg
                         :no-regional-blackout-flag :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          scte35apos-no-regional-blackout-behavior
                          common-lisp:null)
                         :accessor
                         struct-shape-scte35time-signal-apos-no-regional-blackout-flag
                         :shape "Scte35AposNoRegionalBlackoutBehavior"
                         :location common-lisp:nil :location-name
                         "noRegionalBlackoutFlag")
                        (web-delivery-allowed-flag :initarg
                         :web-delivery-allowed-flag :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          scte35apos-web-delivery-allowed-behavior
                          common-lisp:null)
                         :accessor
                         struct-shape-scte35time-signal-apos-web-delivery-allowed-flag
                         :shape "Scte35AposWebDeliveryAllowedBehavior"
                         :location common-lisp:nil :location-name
                         "webDeliveryAllowedFlag"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35time-signal-apos
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scte35time-signal-apos
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35time-signal-apos 'make-scte35time-signal-apos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35time-signal-schedule-action-settings
                       common-lisp:nil
                       ((scte35descriptors :initarg :scte35descriptors
                         :initform
                         (common-lisp:error ":scte35descriptors is required")
                         :type
                         (common-lisp:or |__listOfScte35Descriptor|
                                         common-lisp:null)
                         :accessor
                         struct-shape-scte35time-signal-schedule-action-settings-scte35descriptors
                         :shape "__listOfScte35Descriptor" :location
                         common-lisp:nil :location-name "scte35Descriptors"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scte35time-signal-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35time-signal-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scte35time-signal-schedule-action-settings
                    'make-scte35time-signal-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35descriptors))
      (common-lisp:list
       (common-lisp:cons "Scte35Descriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35web-delivery-allowed-flag () 'common-lisp:string)
(common-lisp:deftype smooth-group-audio-only-timecode-control ()
  'common-lisp:string)
(common-lisp:deftype smooth-group-certificate-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-event-id-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-event-stop-behavior () 'common-lisp:string)
(common-lisp:deftype smooth-group-segmentation-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-sparse-track-type () 'common-lisp:string)
(common-lisp:deftype smooth-group-stream-manifest-behavior ()
  'common-lisp:string)
(common-lisp:deftype smooth-group-timestamp-offset-mode () 'common-lisp:string)
(common-lisp:deftype smpte2038data-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass smpte-tt-destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-smpte-tt-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'smpte-tt-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'smpte-tt-destination-settings
                    'make-smpte-tt-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass standard-hls-settings common-lisp:nil
                       ((audio-rendition-sets :initarg :audio-rendition-sets
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-standard-hls-settings-audio-rendition-sets
                         :shape "__string" :location common-lisp:nil
                         :location-name "audioRenditionSets")
                        (m3u8settings :initarg :m3u8settings :initform
                         (common-lisp:error ":m3u8settings is required") :type
                         (common-lisp:or m3u8settings common-lisp:null)
                         :accessor
                         struct-shape-standard-hls-settings-m3u8settings :shape
                         "M3u8Settings" :location common-lisp:nil
                         :location-name "m3u8Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-standard-hls-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'standard-hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'standard-hls-settings 'make-standard-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm3u8settings))
      (common-lisp:list
       (common-lisp:cons "M3u8Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-channel-request-channel-id :shape
                         "__string" :location "uri" :location-name
                         "channelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-channel-request 'make-start-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-channel-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-channel-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-egress-endpoints
                         :shape "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-channel-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-start-channel-response-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-maintenance :shape
                         "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-channel-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-pipeline-details
                         :shape "__listOfPipelineDetail" :location
                         common-lisp:nil :location-name "pipelineDetails")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-start-channel-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-start-channel-response-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor struct-shape-start-channel-response-state
                         :shape "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-channel-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor struct-shape-start-channel-response-vpc
                         :shape "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-channel-response 'make-start-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-input-device-maintenance-window-request
                       common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-start-input-device-maintenance-window-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-input-device-maintenance-window-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-input-device-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-input-device-maintenance-window-request
                    'make-start-input-device-maintenance-window-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-input-device-maintenance-window-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-input-device-maintenance-window-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-input-device-maintenance-window-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-input-device-maintenance-window-response
                    'make-start-input-device-maintenance-window-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-input-device-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-start-input-device-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-input-device-request
                    'make-start-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-input-device-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-input-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-input-device-response
                    'make-start-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-multiplex-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-multiplex-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-multiplex-request 'make-start-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-multiplex-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-multiplex-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-start-multiplex-response-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-multiplex-response-destinations
                         :shape "__listOfMultiplexOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-multiplex-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-start-multiplex-response-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-multiplex-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-start-multiplex-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (program-count :initarg :program-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-start-multiplex-response-program-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programCount")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor struct-shape-start-multiplex-response-state
                         :shape "MultiplexState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-multiplex-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-multiplex-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-multiplex-response 'make-start-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-timecode common-lisp:nil
                       ((timecode :initarg :timecode :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-start-timecode-timecode :shape
                         "__string" :location common-lisp:nil :location-name
                         "timecode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-timecode
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-timecode
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'start-timecode 'make-start-timecode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-timecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-timecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-timecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-image-activate-schedule-action-settings
                       common-lisp:nil
                       ((duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-duration
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "duration")
                        (fade-in :initarg :fade-in :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-fade-in
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "fadeIn")
                        (fade-out :initarg :fade-out :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-fade-out
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "fadeOut")
                        (height :initarg :height :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-height
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "height")
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-image
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "image")
                        (image-x :initarg :image-x :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-image-x
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "imageX")
                        (image-y :initarg :image-y :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-image-y
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "imageY")
                        (layer :initarg :layer :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-layer
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "layer")
                        (opacity :initarg :opacity :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-opacity
                         :shape "__integerMin0Max100" :location common-lisp:nil
                         :location-name "opacity")
                        (width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-static-image-activate-schedule-action-settings-width
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "width"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-image-activate-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'static-image-activate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'static-image-activate-schedule-action-settings
                    'make-static-image-activate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-in))
      (common-lisp:list
       (common-lisp:cons "FadeIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-x))
      (common-lisp:list
       (common-lisp:cons "ImageX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-y))
      (common-lisp:list
       (common-lisp:cons "ImageY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opacity))
      (common-lisp:list
       (common-lisp:cons "Opacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-image-deactivate-schedule-action-settings
                       common-lisp:nil
                       ((fade-out :initarg :fade-out :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-deactivate-schedule-action-settings-fade-out
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "fadeOut")
                        (layer :initarg :layer :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         struct-shape-static-image-deactivate-schedule-action-settings-layer
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "layer"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-image-deactivate-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'static-image-deactivate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'static-image-deactivate-schedule-action-settings
                    'make-static-image-deactivate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-image-output-activate-schedule-action-settings
                       common-lisp:nil
                       ((duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-duration
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "duration")
                        (fade-in :initarg :fade-in :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-fade-in
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "fadeIn")
                        (fade-out :initarg :fade-out :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-fade-out
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "fadeOut")
                        (height :initarg :height :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-height
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "height")
                        (image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-image
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "image")
                        (image-x :initarg :image-x :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-image-x
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "imageX")
                        (image-y :initarg :image-y :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-image-y
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "imageY")
                        (layer :initarg :layer :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-layer
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "layer")
                        (opacity :initarg :opacity :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-opacity
                         :shape "__integerMin0Max100" :location common-lisp:nil
                         :location-name "opacity")
                        (output-names :initarg :output-names :initform
                         (common-lisp:error ":output-names is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-output-names
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "outputNames")
                        (width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-activate-schedule-action-settings-width
                         :shape "__integerMin1" :location common-lisp:nil
                         :location-name "width"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-image-output-activate-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'static-image-output-activate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'static-image-output-activate-schedule-action-settings
                    'make-static-image-output-activate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-output-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-output-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-in))
      (common-lisp:list
       (common-lisp:cons "FadeIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-x))
      (common-lisp:list
       (common-lisp:cons "ImageX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-y))
      (common-lisp:list
       (common-lisp:cons "ImageY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opacity))
      (common-lisp:list
       (common-lisp:cons "Opacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-names))
      (common-lisp:list
       (common-lisp:cons "OutputNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-output-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-image-output-deactivate-schedule-action-settings
                       common-lisp:nil
                       ((fade-out :initarg :fade-out :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-deactivate-schedule-action-settings-fade-out
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "fadeOut")
                        (layer :initarg :layer :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-deactivate-schedule-action-settings-layer
                         :shape "__integerMin0Max7" :location common-lisp:nil
                         :location-name "layer")
                        (output-names :initarg :output-names :initform
                         (common-lisp:error ":output-names is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-static-image-output-deactivate-schedule-action-settings-output-names
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "outputNames"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-image-output-deactivate-schedule-action-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'static-image-output-deactivate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'static-image-output-deactivate-schedule-action-settings
                    'make-static-image-output-deactivate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-output-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-output-deactivate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-names))
      (common-lisp:list
       (common-lisp:cons "OutputNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-output-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-key-settings common-lisp:nil
                       ((key-provider-server :initarg :key-provider-server
                         :initform common-lisp:nil :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         struct-shape-static-key-settings-key-provider-server
                         :shape "InputLocation" :location common-lisp:nil
                         :location-name "keyProviderServer")
                        (static-key-value :initarg :static-key-value :initform
                         (common-lisp:error ":static-key-value is required")
                         :type
                         (common-lisp:or |__stringMin32Max32| common-lisp:null)
                         :accessor
                         struct-shape-static-key-settings-static-key-value
                         :shape "__stringMin32Max32" :location common-lisp:nil
                         :location-name "staticKeyValue"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-key-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'static-key-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'static-key-settings 'make-static-key-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-key-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-key-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-provider-server))
      (common-lisp:list
       (common-lisp:cons "KeyProviderServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-value))
      (common-lisp:list
       (common-lisp:cons "StaticKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-key-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-channel-request-channel-id :shape
                         "__string" :location "uri" :location-name
                         "channelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-channel-request 'make-stop-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-channel-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-channel-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-destinations :shape
                         "__listOfOutputDestination" :location common-lisp:nil
                         :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-egress-endpoints
                         :shape "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-channel-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-stop-channel-response-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-maintenance :shape
                         "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-channel-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-pipeline-details
                         :shape "__listOfPipelineDetail" :location
                         common-lisp:nil :location-name "pipelineDetails")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-stop-channel-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-stop-channel-response-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor struct-shape-stop-channel-response-state
                         :shape "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-stop-channel-response-tags :shape "Tags"
                         :location common-lisp:nil :location-name "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor struct-shape-stop-channel-response-vpc
                         :shape "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-channel-response 'make-stop-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-input-device-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-stop-input-device-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-input-device-request
                    'make-stop-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-input-device-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-input-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-input-device-response
                    'make-stop-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-multiplex-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-multiplex-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-multiplex-request 'make-stop-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-multiplex-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-multiplex-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-stop-multiplex-response-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-multiplex-response-destinations
                         :shape "__listOfMultiplexOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-multiplex-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-stop-multiplex-response-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-multiplex-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-stop-multiplex-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (program-count :initarg :program-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-stop-multiplex-response-program-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programCount")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor struct-shape-stop-multiplex-response-state
                         :shape "MultiplexState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-stop-multiplex-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-multiplex-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-multiplex-response 'make-stop-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-timecode common-lisp:nil
                       ((last-frame-clipping-behavior :initarg
                         :last-frame-clipping-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or last-frame-clipping-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-timecode-last-frame-clipping-behavior
                         :shape "LastFrameClippingBehavior" :location
                         common-lisp:nil :location-name
                         "lastFrameClippingBehavior")
                        (timecode :initarg :timecode :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-stop-timecode-timecode :shape
                         "__string" :location common-lisp:nil :location-name
                         "timecode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-timecode
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-timecode
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stop-timecode 'make-stop-timecode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-timecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-timecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-frame-clipping-behavior))
      (common-lisp:list
       (common-lisp:cons "LastFrameClippingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-timecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tags-model common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tags-model-tags :shape "Tags" :location
                         common-lisp:nil :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tags-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tags-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tags-model 'make-tags-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass teletext-destination-settings common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-teletext-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'teletext-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'teletext-destination-settings
                    'make-teletext-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass teletext-source-settings common-lisp:nil
                       ((output-rectangle :initarg :output-rectangle :initform
                         common-lisp:nil :type
                         (common-lisp:or caption-rectangle common-lisp:null)
                         :accessor
                         struct-shape-teletext-source-settings-output-rectangle
                         :shape "CaptionRectangle" :location common-lisp:nil
                         :location-name "outputRectangle")
                        (page-number :initarg :page-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-teletext-source-settings-page-number
                         :shape "__string" :location common-lisp:nil
                         :location-name "pageNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-teletext-source-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'teletext-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'teletext-source-settings 'make-teletext-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rectangle))
      (common-lisp:list
       (common-lisp:cons "OutputRectangle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   common-lisp:nil))
(common-lisp:deftype temporal-filter-post-filter-sharpening ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass temporal-filter-settings common-lisp:nil
                       ((post-filter-sharpening :initarg
                         :post-filter-sharpening :initform common-lisp:nil
                         :type
                         (common-lisp:or temporal-filter-post-filter-sharpening
                                         common-lisp:null)
                         :accessor
                         struct-shape-temporal-filter-settings-post-filter-sharpening
                         :shape "TemporalFilterPostFilterSharpening" :location
                         common-lisp:nil :location-name "postFilterSharpening")
                        (strength :initarg :strength :initform common-lisp:nil
                         :type
                         (common-lisp:or temporal-filter-strength
                                         common-lisp:null)
                         :accessor
                         struct-shape-temporal-filter-settings-strength :shape
                         "TemporalFilterStrength" :location common-lisp:nil
                         :location-name "strength"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-temporal-filter-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'temporal-filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'temporal-filter-settings 'make-temporal-filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-filter-sharpening))
      (common-lisp:list
       (common-lisp:cons "PostFilterSharpening"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   common-lisp:nil))
(common-lisp:deftype temporal-filter-strength () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thumbnail common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-thumbnail-body :shape "__string"
                         :location common-lisp:nil :location-name "body")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-thumbnail-content-type :shape "__string"
                         :location common-lisp:nil :location-name
                         "contentType")
                        (thumbnail-type :initarg :thumbnail-type :initform
                         common-lisp:nil :type
                         (common-lisp:or thumbnail-type common-lisp:null)
                         :accessor struct-shape-thumbnail-thumbnail-type :shape
                         "ThumbnailType" :location common-lisp:nil
                         :location-name "thumbnailType")
                        (time-stamp :initarg :time-stamp :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor struct-shape-thumbnail-time-stamp :shape
                         "__timestampIso8601" :location common-lisp:nil
                         :location-name "timeStamp"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thumbnail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'thumbnail 'make-thumbnail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-type))
      (common-lisp:list
       (common-lisp:cons "ThumbnailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-stamp))
      (common-lisp:list
       (common-lisp:cons "TimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass thumbnail-configuration common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or thumbnail-state common-lisp:null)
                         :accessor struct-shape-thumbnail-configuration-state
                         :shape "ThumbnailState" :location common-lisp:nil
                         :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thumbnail-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnail-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thumbnail-configuration 'make-thumbnail-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thumbnail-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thumbnail-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thumbnail-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass thumbnail-data common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-thumbnail-data-body :shape "__string"
                         :location common-lisp:nil :location-name "body"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thumbnail-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnail-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'thumbnail-data 'make-thumbnail-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnail-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnail-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnail-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass thumbnail-detail common-lisp:nil
                       ((pipeline-id :initarg :pipeline-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-thumbnail-detail-pipeline-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "pipelineId")
                        (thumbnails :initarg :thumbnails :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfThumbnail| common-lisp:null)
                         :accessor struct-shape-thumbnail-detail-thumbnails
                         :shape "__listOfThumbnail" :location common-lisp:nil
                         :location-name "thumbnails"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thumbnail-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnail-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thumbnail-detail 'make-thumbnail-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnail-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnail-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnails))
      (common-lisp:list
       (common-lisp:cons "Thumbnails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnail-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass thumbnail-no-data common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thumbnail-no-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnail-no-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thumbnail-no-data 'make-thumbnail-no-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnail-no-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnail-no-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnail-no-data))
   common-lisp:nil))
(common-lisp:deftype thumbnail-state () 'common-lisp:string)
(common-lisp:deftype thumbnail-type () 'common-lisp:string)
(common-lisp:deftype timecode-burnin-font-size () 'common-lisp:string)
(common-lisp:deftype timecode-burnin-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timecode-burnin-settings common-lisp:nil
                       ((font-size :initarg :font-size :initform
                         (common-lisp:error ":font-size is required") :type
                         (common-lisp:or timecode-burnin-font-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-timecode-burnin-settings-font-size :shape
                         "TimecodeBurninFontSize" :location common-lisp:nil
                         :location-name "fontSize")
                        (position :initarg :position :initform
                         (common-lisp:error ":position is required") :type
                         (common-lisp:or timecode-burnin-position
                                         common-lisp:null)
                         :accessor
                         struct-shape-timecode-burnin-settings-position :shape
                         "TimecodeBurninPosition" :location common-lisp:nil
                         :location-name "position")
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or |__stringMax255| common-lisp:null)
                         :accessor struct-shape-timecode-burnin-settings-prefix
                         :shape "__stringMax255" :location common-lisp:nil
                         :location-name "prefix"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timecode-burnin-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timecode-burnin-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timecode-burnin-settings 'make-timecode-burnin-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timecode-config common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or timecode-config-source
                                         common-lisp:null)
                         :accessor struct-shape-timecode-config-source :shape
                         "TimecodeConfigSource" :location common-lisp:nil
                         :location-name "source")
                        (sync-threshold :initarg :sync-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max1000000|
                                         common-lisp:null)
                         :accessor struct-shape-timecode-config-sync-threshold
                         :shape "__integerMin1Max1000000" :location
                         common-lisp:nil :location-name "syncThreshold"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timecode-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timecode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'timecode-config 'make-timecode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-threshold))
      (common-lisp:list
       (common-lisp:cons "SyncThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timecode-config))
   common-lisp:nil))
(common-lisp:deftype timecode-config-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transfer-input-device common-lisp:nil
                       ((target-customer-id :initarg :target-customer-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transfer-input-device-target-customer-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetCustomerId")
                        (target-region :initarg :target-region :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transfer-input-device-target-region
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetRegion")
                        (transfer-message :initarg :transfer-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transfer-input-device-transfer-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "transferMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transfer-input-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transfer-input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device 'make-transfer-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "TransferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-input-device-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-transfer-input-device-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId")
                        (target-customer-id :initarg :target-customer-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transfer-input-device-request-target-customer-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetCustomerId")
                        (target-region :initarg :target-region :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transfer-input-device-request-target-region
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetRegion")
                        (transfer-message :initarg :transfer-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transfer-input-device-request-transfer-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "transferMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transfer-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device-request
                    'make-transfer-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "TransferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-input-device-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transfer-input-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device-response
                    'make-transfer-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transferring-input-device-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transferring-input-device-summary-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "id")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-transferring-input-device-summary-message
                         :shape "__string" :location common-lisp:nil
                         :location-name "message")
                        (target-customer-id :initarg :target-customer-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transferring-input-device-summary-target-customer-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetCustomerId")
                        (transfer-type :initarg :transfer-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-transfer-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-transferring-input-device-summary-transfer-type
                         :shape "InputDeviceTransferType" :location
                         common-lisp:nil :location-name "transferType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transferring-input-device-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transferring-input-device-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transferring-input-device-summary
                    'make-transferring-input-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-type))
      (common-lisp:list
       (common-lisp:cons "TransferType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ttml-destination-settings common-lisp:nil
                       ((style-control :initarg :style-control :initform
                         common-lisp:nil :type
                         (common-lisp:or ttml-destination-style-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-ttml-destination-settings-style-control
                         :shape "TtmlDestinationStyleControl" :location
                         common-lisp:nil :location-name "styleControl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ttml-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ttml-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ttml-destination-settings
                    'make-ttml-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   common-lisp:nil))
(common-lisp:deftype ttml-destination-style-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass udp-container-settings common-lisp:nil
                       ((m2ts-settings :initarg :m2ts-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or m2ts-settings common-lisp:null)
                         :accessor
                         struct-shape-udp-container-settings-m2ts-settings
                         :shape "M2tsSettings" :location common-lisp:nil
                         :location-name "m2tsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-udp-container-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'udp-container-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'udp-container-settings 'make-udp-container-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass udp-group-settings common-lisp:nil
                       ((input-loss-action :initarg :input-loss-action
                         :initform common-lisp:nil :type
                         (common-lisp:or input-loss-action-for-udp-out
                                         common-lisp:null)
                         :accessor
                         struct-shape-udp-group-settings-input-loss-action
                         :shape "InputLossActionForUdpOut" :location
                         common-lisp:nil :location-name "inputLossAction")
                        (timed-metadata-id3frame :initarg
                         :timed-metadata-id3frame :initform common-lisp:nil
                         :type
                         (common-lisp:or udp-timed-metadata-id3frame
                                         common-lisp:null)
                         :accessor
                         struct-shape-udp-group-settings-timed-metadata-id3frame
                         :shape "UdpTimedMetadataId3Frame" :location
                         common-lisp:nil :location-name
                         "timedMetadataId3Frame")
                        (timed-metadata-id3period :initarg
                         :timed-metadata-id3period :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         struct-shape-udp-group-settings-timed-metadata-id3period
                         :shape "__integerMin0" :location common-lisp:nil
                         :location-name "timedMetadataId3Period"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-udp-group-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'udp-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'udp-group-settings 'make-udp-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input udp-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input udp-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input udp-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass udp-output-settings common-lisp:nil
                       ((buffer-msec :initarg :buffer-msec :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor struct-shape-udp-output-settings-buffer-msec
                         :shape "__integerMin0Max10000" :location
                         common-lisp:nil :location-name "bufferMsec")
                        (container-settings :initarg :container-settings
                         :initform
                         (common-lisp:error ":container-settings is required")
                         :type
                         (common-lisp:or udp-container-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-udp-output-settings-container-settings
                         :shape "UdpContainerSettings" :location
                         common-lisp:nil :location-name "containerSettings")
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor struct-shape-udp-output-settings-destination
                         :shape "OutputLocationRef" :location common-lisp:nil
                         :location-name "destination")
                        (fec-output-settings :initarg :fec-output-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or fec-output-settings common-lisp:null)
                         :accessor
                         struct-shape-udp-output-settings-fec-output-settings
                         :shape "FecOutputSettings" :location common-lisp:nil
                         :location-name "fecOutputSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-udp-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'udp-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'udp-output-settings 'make-udp-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input udp-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input udp-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-msec))
      (common-lisp:list
       (common-lisp:cons "BufferMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fec-output-settings))
      (common-lisp:list
       (common-lisp:cons "FecOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input udp-output-settings))
   common-lisp:nil))
(common-lisp:deftype udp-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (medialive-error)
     ((element-path :initarg :element-path :initform common-lisp:nil :reader
       unprocessable-entity-exception-element-path)
      (error-message :initarg :error-message :initform common-lisp:nil :reader
       unprocessable-entity-exception-error-message)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-element-path
                    'unprocessable-entity-exception-error-message)))
(common-lisp:progn
 (common-lisp:defclass update-account-configuration-request common-lisp:nil
                       ((account-configuration :initarg :account-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or account-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-configuration-request-account-configuration
                         :shape "AccountConfiguration" :location
                         common-lisp:nil :location-name
                         "accountConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-configuration-request
                    'make-update-account-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-configuration-request-model
                       common-lisp:nil
                       ((account-configuration :initarg :account-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or account-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-configuration-request-model-account-configuration
                         :shape "AccountConfiguration" :location
                         common-lisp:nil :location-name
                         "accountConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-configuration-request-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-configuration-request-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-configuration-request-model
                    'make-update-account-configuration-request-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-request-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-request-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-request-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-configuration-response common-lisp:nil
                       ((account-configuration :initarg :account-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or account-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-configuration-response-account-configuration
                         :shape "AccountConfiguration" :location
                         common-lisp:nil :location-name
                         "accountConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-configuration-response
                    'make-update-account-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-configuration-result-model
                       common-lisp:nil
                       ((account-configuration :initarg :account-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or account-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-configuration-result-model-account-configuration
                         :shape "AccountConfiguration" :location
                         common-lisp:nil :location-name
                         "accountConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-configuration-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-configuration-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-configuration-result-model
                    'make-update-account-configuration-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-configuration))
      (common-lisp:list
       (common-lisp:cons "AccountConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-configuration-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel common-lisp:nil
                       ((cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor struct-shape-update-channel-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor struct-shape-update-channel-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-input-attachments :shape
                         "__listOfInputAttachment" :location common-lisp:nil
                         :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-update-channel-input-specification :shape
                         "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-update-channel-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-update-settings
                                         common-lisp:null)
                         :accessor struct-shape-update-channel-maintenance
                         :shape "MaintenanceUpdateSettings" :location
                         common-lisp:nil :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-channel-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-channel-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-channel 'make-update-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-class common-lisp:nil
                       ((channel-class :initarg :channel-class :initform
                         (common-lisp:error ":channel-class is required") :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-update-channel-class-channel-class :shape
                         "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-class-destinations :shape
                         "__listOfOutputDestination" :location common-lisp:nil
                         :location-name "destinations"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-class
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-class
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-class 'make-update-channel-class))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-channel-class))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-channel-class))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-channel-class))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-class-request common-lisp:nil
                       ((channel-class :initarg :channel-class :initform
                         (common-lisp:error ":channel-class is required") :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-update-channel-class-request-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-channel-class-request-channel-id
                         :shape "__string" :location "uri" :location-name
                         "channelId")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-class-request-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-class-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-class-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-class-request
                    'make-update-channel-class-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-class-response common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type (common-lisp:or channel common-lisp:null)
                         :accessor
                         struct-shape-update-channel-class-response-channel
                         :shape "Channel" :location common-lisp:nil
                         :location-name "channel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-class-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-channel-class-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-class-response
                    'make-update-channel-class-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-request common-lisp:nil
                       ((cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-channel-request-channel-id :shape
                         "__string" :location "uri" :location-name "channelId")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-update-channel-request-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-update-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-maintenance :shape
                         "MaintenanceUpdateSettings" :location common-lisp:nil
                         :location-name "maintenance")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-channel-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-channel-request-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-request 'make-update-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-response common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type (common-lisp:or channel common-lisp:null)
                         :accessor struct-shape-update-channel-response-channel
                         :shape "Channel" :location common-lisp:nil
                         :location-name "channel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-response 'make-update-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-result-model common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type (common-lisp:or channel common-lisp:null)
                         :accessor
                         struct-shape-update-channel-result-model-channel
                         :shape "Channel" :location common-lisp:nil
                         :location-name "channel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-result-model
                    'make-update-channel-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor struct-shape-update-input-destinations
                         :shape "__listOfInputDestinationRequest" :location
                         common-lisp:nil :location-name "destinations")
                        (input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-update-input-input-devices
                         :shape "__listOfInputDeviceRequest" :location
                         common-lisp:nil :location-name "inputDevices")
                        (input-security-groups :initarg :input-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-input-input-security-groups :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "inputSecurityGroups")
                        (media-connect-flows :initarg :media-connect-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-media-connect-flows :shape
                         "__listOfMediaConnectFlowRequest" :location
                         common-lisp:nil :location-name "mediaConnectFlows")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-input-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-update-input-sources :shape
                         "__listOfInputSourceRequest" :location common-lisp:nil
                         :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-input 'make-update-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-device common-lisp:nil
                       ((hd-device-settings :initarg :hd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-hd-device-settings
                         :shape "InputDeviceConfigurableSettings" :location
                         common-lisp:nil :location-name "hdDeviceSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (uhd-device-settings :initarg :uhd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-uhd-device-settings
                         :shape "InputDeviceConfigurableSettings" :location
                         common-lisp:nil :location-name "uhdDeviceSettings")
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-device 'make-update-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-device-request common-lisp:nil
                       ((hd-device-settings :initarg :hd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-request-hd-device-settings
                         :shape "InputDeviceConfigurableSettings" :location
                         common-lisp:nil :location-name "hdDeviceSettings")
                        (input-device-id :initarg :input-device-id :initform
                         (common-lisp:error ":input-device-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-request-input-device-id
                         :shape "__string" :location "uri" :location-name
                         "inputDeviceId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (uhd-device-settings :initarg :uhd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-request-uhd-device-settings
                         :shape "InputDeviceConfigurableSettings" :location
                         common-lisp:nil :location-name "uhdDeviceSettings")
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-request-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-device-request
                    'make-update-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-device-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-response-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "arn")
                        (connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-connection-state
                         :shape "InputDeviceConnectionState" :location
                         common-lisp:nil :location-name "connectionState")
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :initform common-lisp:nil
                         :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-device-settings-sync-state
                         :shape "DeviceSettingsSyncState" :location
                         common-lisp:nil :location-name
                         "deviceSettingsSyncState")
                        (device-update-status :initarg :device-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-device-update-status
                         :shape "DeviceUpdateStatus" :location common-lisp:nil
                         :location-name "deviceUpdateStatus")
                        (hd-device-settings :initarg :hd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-hd-device-settings
                         :shape "InputDeviceHdSettings" :location
                         common-lisp:nil :location-name "hdDeviceSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-response-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "id")
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-response-mac-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "macAddress")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (network-settings :initarg :network-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-network-settings
                         :shape "InputDeviceNetworkSettings" :location
                         common-lisp:nil :location-name "networkSettings")
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-response-serial-number
                         :shape "__string" :location common-lisp:nil
                         :location-name "serialNumber")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-type :shape
                         "InputDeviceType" :location common-lisp:nil
                         :location-name "type")
                        (uhd-device-settings :initarg :uhd-device-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-uhd-device-settings
                         :shape "InputDeviceUhdSettings" :location
                         common-lisp:nil :location-name "uhdDeviceSettings")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-update-input-device-response-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-device-response-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone")
                        (medialive-input-arns :initarg :medialive-input-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-medialive-input-arns
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "medialiveInputArns")
                        (output-type :initarg :output-type :initform
                         common-lisp:nil :type
                         (common-lisp:or input-device-output-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-device-response-output-type
                         :shape "InputDeviceOutputType" :location
                         common-lisp:nil :location-name "outputType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-device-response
                    'make-update-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medialive-input-arns))
      (common-lisp:list
       (common-lisp:cons "MedialiveInputArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "OutputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-request common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-request-destinations :shape
                         "__listOfInputDestinationRequest" :location
                         common-lisp:nil :location-name "destinations")
                        (input-devices :initarg :input-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputDeviceRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-request-input-devices :shape
                         "__listOfInputDeviceRequest" :location common-lisp:nil
                         :location-name "inputDevices")
                        (input-id :initarg :input-id :initform
                         (common-lisp:error ":input-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-request-input-id :shape
                         "__string" :location "uri" :location-name "inputId")
                        (input-security-groups :initarg :input-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-input-request-input-security-groups
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "inputSecurityGroups")
                        (media-connect-flows :initarg :media-connect-flows
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-request-media-connect-flows
                         :shape "__listOfMediaConnectFlowRequest" :location
                         common-lisp:nil :location-name "mediaConnectFlows")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-input-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-input-request-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-update-input-request-sources
                         :shape "__listOfInputSourceRequest" :location
                         common-lisp:nil :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-request 'make-update-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-response common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or input common-lisp:null) :accessor
                         struct-shape-update-input-response-input :shape
                         "Input" :location common-lisp:nil :location-name
                         "input"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-response 'make-update-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-result-model common-lisp:nil
                       ((input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or input common-lisp:null) :accessor
                         struct-shape-update-input-result-model-input :shape
                         "Input" :location common-lisp:nil :location-name
                         "input"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-result-model
                    'make-update-input-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-security-group-request common-lisp:nil
                       ((input-security-group-id :initarg
                         :input-security-group-id :initform
                         (common-lisp:error
                          ":input-security-group-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-input-security-group-request-input-security-group-id
                         :shape "__string" :location "uri" :location-name
                         "inputSecurityGroupId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-update-input-security-group-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (whitelist-rules :initarg :whitelist-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfInputWhitelistRuleCidr|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-input-security-group-request-whitelist-rules
                         :shape "__listOfInputWhitelistRuleCidr" :location
                         common-lisp:nil :location-name "whitelistRules"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-security-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-request
                    'make-update-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-security-group-response common-lisp:nil
                       ((security-group :initarg :security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         struct-shape-update-input-security-group-response-security-group
                         :shape "InputSecurityGroup" :location common-lisp:nil
                         :location-name "securityGroup"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-security-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-response
                    'make-update-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-security-group-result-model common-lisp:nil
                       ((security-group :initarg :security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         struct-shape-update-input-security-group-result-model-security-group
                         :shape "InputSecurityGroup" :location common-lisp:nil
                         :location-name "securityGroup"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-input-security-group-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-input-security-group-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-result-model
                    'make-update-input-security-group-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex common-lisp:nil
                       ((multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-update-multiplex-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-multiplex-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex 'make-update-multiplex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program common-lisp:nil
                       ((multiplex-program-settings :initarg
                         :multiplex-program-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-multiplex-program-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-program
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex-program
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program 'make-update-multiplex-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-multiplex-program-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId")
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-multiplex-program-request-multiplex-program-settings
                         :shape "MultiplexProgramSettings" :location
                         common-lisp:nil :location-name
                         "multiplexProgramSettings")
                        (program-name :initarg :program-name :initform
                         (common-lisp:error ":program-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-multiplex-program-request-program-name
                         :shape "__string" :location "uri" :location-name
                         "programName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-program-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-request
                    'make-update-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program-response common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         struct-shape-update-multiplex-program-response-multiplex-program
                         :shape "MultiplexProgram" :location common-lisp:nil
                         :location-name "multiplexProgram"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-program-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-response
                    'make-update-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program-result-model common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         struct-shape-update-multiplex-program-result-model-multiplex-program
                         :shape "MultiplexProgram" :location common-lisp:nil
                         :location-name "multiplexProgram"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-program-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-program-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-result-model
                    'make-update-multiplex-program-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-multiplex-request-multiplex-id
                         :shape "__string" :location "uri" :location-name
                         "multiplexId")
                        (multiplex-settings :initarg :multiplex-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         struct-shape-update-multiplex-request-multiplex-settings
                         :shape "MultiplexSettings" :location common-lisp:nil
                         :location-name "multiplexSettings")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-multiplex-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-request 'make-update-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-response common-lisp:nil
                       ((multiplex :initarg :multiplex :initform
                         common-lisp:nil :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         struct-shape-update-multiplex-response-multiplex
                         :shape "Multiplex" :location common-lisp:nil
                         :location-name "multiplex"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-response
                    'make-update-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-result-model common-lisp:nil
                       ((multiplex :initarg :multiplex :initform
                         common-lisp:nil :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         struct-shape-update-multiplex-result-model-multiplex
                         :shape "Multiplex" :location common-lisp:nil
                         :location-name "multiplex"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-multiplex-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-result-model
                    'make-update-multiplex-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-reservation-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         struct-shape-update-reservation-renewal-settings
                         :shape "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-reservation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-reservation 'make-update-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-reservation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation-request common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-reservation-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (renewal-settings :initarg :renewal-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         struct-shape-update-reservation-request-renewal-settings
                         :shape "RenewalSettings" :location common-lisp:nil
                         :location-name "renewalSettings")
                        (reservation-id :initarg :reservation-id :initform
                         (common-lisp:error ":reservation-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-reservation-request-reservation-id
                         :shape "__string" :location "uri" :location-name
                         "reservationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-reservation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-reservation-request
                    'make-update-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation-response common-lisp:nil
                       ((reservation :initarg :reservation :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor
                         struct-shape-update-reservation-response-reservation
                         :shape "Reservation" :location common-lisp:nil
                         :location-name "reservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-reservation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-reservation-response
                    'make-update-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation-result-model common-lisp:nil
                       ((reservation :initarg :reservation :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor
                         struct-shape-update-reservation-result-model-reservation
                         :shape "Reservation" :location common-lisp:nil
                         :location-name "reservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-reservation-result-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-reservation-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-reservation-result-model
                    'make-update-reservation-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validation-error common-lisp:nil
                       ((element-path :initarg :element-path :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-validation-error-element-path :shape
                         "__string" :location common-lisp:nil :location-name
                         "elementPath")
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-validation-error-error-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "errorMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-path))
      (common-lisp:list
       (common-lisp:cons "ElementPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-black-failover-settings common-lisp:nil
                       ((black-detect-threshold :initarg
                         :black-detect-threshold :initform common-lisp:nil
                         :type
                         (common-lisp:or |__doubleMin0Max1| common-lisp:null)
                         :accessor
                         struct-shape-video-black-failover-settings-black-detect-threshold
                         :shape "__doubleMin0Max1" :location common-lisp:nil
                         :location-name "blackDetectThreshold")
                        (video-black-threshold-msec :initarg
                         :video-black-threshold-msec :initform common-lisp:nil
                         :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor
                         struct-shape-video-black-failover-settings-video-black-threshold-msec
                         :shape "__integerMin1000" :location common-lisp:nil
                         :location-name "videoBlackThresholdMsec"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-black-failover-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'video-black-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-black-failover-settings
                    'make-video-black-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'black-detect-threshold))
      (common-lisp:list
       (common-lisp:cons "BlackDetectThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-black-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "VideoBlackThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-codec-settings common-lisp:nil
                       ((frame-capture-settings :initarg
                         :frame-capture-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or frame-capture-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-codec-settings-frame-capture-settings
                         :shape "FrameCaptureSettings" :location
                         common-lisp:nil :location-name "frameCaptureSettings")
                        (h264settings :initarg :h264settings :initform
                         common-lisp:nil :type
                         (common-lisp:or h264settings common-lisp:null)
                         :accessor
                         struct-shape-video-codec-settings-h264settings :shape
                         "H264Settings" :location common-lisp:nil
                         :location-name "h264Settings")
                        (h265settings :initarg :h265settings :initform
                         common-lisp:nil :type
                         (common-lisp:or h265settings common-lisp:null)
                         :accessor
                         struct-shape-video-codec-settings-h265settings :shape
                         "H265Settings" :location common-lisp:nil
                         :location-name "h265Settings")
                        (mpeg2settings :initarg :mpeg2settings :initform
                         common-lisp:nil :type
                         (common-lisp:or mpeg2settings common-lisp:null)
                         :accessor
                         struct-shape-video-codec-settings-mpeg2settings :shape
                         "Mpeg2Settings" :location common-lisp:nil
                         :location-name "mpeg2Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-codec-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-codec-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-codec-settings 'make-video-codec-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h264settings))
      (common-lisp:list
       (common-lisp:cons "H264Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265settings))
      (common-lisp:list
       (common-lisp:cons "H265Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpeg2settings))
      (common-lisp:list
       (common-lisp:cons "Mpeg2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-description common-lisp:nil
                       ((codec-settings :initarg :codec-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or video-codec-settings common-lisp:null)
                         :accessor
                         struct-shape-video-description-codec-settings :shape
                         "VideoCodecSettings" :location common-lisp:nil
                         :location-name "codecSettings")
                        (height :initarg :height :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-video-description-height :shape
                         "__integer" :location common-lisp:nil :location-name
                         "height")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-video-description-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (respond-to-afd :initarg :respond-to-afd :initform
                         common-lisp:nil :type
                         (common-lisp:or video-description-respond-to-afd
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-description-respond-to-afd :shape
                         "VideoDescriptionRespondToAfd" :location
                         common-lisp:nil :location-name "respondToAfd")
                        (scaling-behavior :initarg :scaling-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or video-description-scaling-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-description-scaling-behavior :shape
                         "VideoDescriptionScalingBehavior" :location
                         common-lisp:nil :location-name "scalingBehavior")
                        (sharpness :initarg :sharpness :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor struct-shape-video-description-sharpness
                         :shape "__integerMin0Max100" :location common-lisp:nil
                         :location-name "sharpness")
                        (width :initarg :width :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-video-description-width :shape
                         "__integer" :location common-lisp:nil :location-name
                         "width"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-description 'make-video-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'respond-to-afd))
      (common-lisp:list
       (common-lisp:cons "RespondToAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-behavior))
      (common-lisp:list
       (common-lisp:cons "ScalingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpness))
      (common-lisp:list
       (common-lisp:cons "Sharpness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-description))
   common-lisp:nil))
(common-lisp:deftype video-description-respond-to-afd () 'common-lisp:string)
(common-lisp:deftype video-description-scaling-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-selector common-lisp:nil
                       ((color-space :initarg :color-space :initform
                         common-lisp:nil :type
                         (common-lisp:or video-selector-color-space
                                         common-lisp:null)
                         :accessor struct-shape-video-selector-color-space
                         :shape "VideoSelectorColorSpace" :location
                         common-lisp:nil :location-name "colorSpace")
                        (color-space-settings :initarg :color-space-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or video-selector-color-space-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-selector-color-space-settings
                         :shape "VideoSelectorColorSpaceSettings" :location
                         common-lisp:nil :location-name "colorSpaceSettings")
                        (color-space-usage :initarg :color-space-usage
                         :initform common-lisp:nil :type
                         (common-lisp:or video-selector-color-space-usage
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-selector-color-space-usage :shape
                         "VideoSelectorColorSpaceUsage" :location
                         common-lisp:nil :location-name "colorSpaceUsage")
                        (selector-settings :initarg :selector-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or video-selector-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-selector-selector-settings :shape
                         "VideoSelectorSettings" :location common-lisp:nil
                         :location-name "selectorSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'video-selector 'make-video-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space-usage))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector))
   common-lisp:nil))
(common-lisp:deftype video-selector-color-space () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-selector-color-space-settings common-lisp:nil
                       ((hdr10settings :initarg :hdr10settings :initform
                         common-lisp:nil :type
                         (common-lisp:or hdr10settings common-lisp:null)
                         :accessor
                         struct-shape-video-selector-color-space-settings-hdr10settings
                         :shape "Hdr10Settings" :location common-lisp:nil
                         :location-name "hdr10Settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-selector-color-space-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'video-selector-color-space-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-selector-color-space-settings
                    'make-video-selector-color-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10settings))
      (common-lisp:list
       (common-lisp:cons "Hdr10Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   common-lisp:nil))
(common-lisp:deftype video-selector-color-space-usage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-selector-pid common-lisp:nil
                       ((pid :initarg :pid :initform common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max8191|
                                         common-lisp:null)
                         :accessor struct-shape-video-selector-pid-pid :shape
                         "__integerMin0Max8191" :location common-lisp:nil
                         :location-name "pid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-selector-pid
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector-pid
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-selector-pid 'make-video-selector-pid))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector-pid))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector-pid))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector-pid))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-selector-program-id common-lisp:nil
                       ((program-id :initarg :program-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin0Max65536|
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-selector-program-id-program-id
                         :shape "__integerMin0Max65536" :location
                         common-lisp:nil :location-name "programId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-selector-program-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector-program-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-selector-program-id
                    'make-video-selector-program-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-id))
      (common-lisp:list
       (common-lisp:cons "ProgramId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-selector-settings common-lisp:nil
                       ((video-selector-pid :initarg :video-selector-pid
                         :initform common-lisp:nil :type
                         (common-lisp:or video-selector-pid common-lisp:null)
                         :accessor
                         struct-shape-video-selector-settings-video-selector-pid
                         :shape "VideoSelectorPid" :location common-lisp:nil
                         :location-name "videoSelectorPid")
                        (video-selector-program-id :initarg
                         :video-selector-program-id :initform common-lisp:nil
                         :type
                         (common-lisp:or video-selector-program-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-video-selector-settings-video-selector-program-id
                         :shape "VideoSelectorProgramId" :location
                         common-lisp:nil :location-name
                         "videoSelectorProgramId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-selector-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'video-selector-settings 'make-video-selector-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector-pid))
      (common-lisp:list
       (common-lisp:cons "VideoSelectorPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-selector-program-id))
      (common-lisp:list
       (common-lisp:cons "VideoSelectorProgramId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-output-settings common-lisp:nil
                       ((public-address-allocation-ids :initarg
                         :public-address-allocation-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-output-settings-public-address-allocation-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "publicAddressAllocationIds")
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-output-settings-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds")
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-vpc-output-settings-subnet-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subnetIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-output-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-output-settings 'make-vpc-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-address-allocation-ids))
      (common-lisp:list
       (common-lisp:cons "PublicAddressAllocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-output-settings-description common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-output-settings-description-availability-zones
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "availabilityZones")
                        (network-interface-ids :initarg :network-interface-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-output-settings-description-network-interface-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "networkInterfaceIds")
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-output-settings-description-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds")
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-output-settings-description-subnet-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subnetIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-output-settings-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-output-settings-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-output-settings-description
                    'make-vpc-output-settings-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   common-lisp:nil))
(common-lisp:deftype wav-coding-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wav-settings common-lisp:nil
                       ((bit-depth :initarg :bit-depth :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-wav-settings-bit-depth :shape "__double"
                         :location common-lisp:nil :location-name "bitDepth")
                        (coding-mode :initarg :coding-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or wav-coding-mode common-lisp:null)
                         :accessor struct-shape-wav-settings-coding-mode :shape
                         "WavCodingMode" :location common-lisp:nil
                         :location-name "codingMode")
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-wav-settings-sample-rate :shape
                         "__double" :location common-lisp:nil :location-name
                         "sampleRate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-wav-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'wav-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'wav-settings 'make-wav-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wav-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass webvtt-destination-settings common-lisp:nil
                       ((style-control :initarg :style-control :initform
                         common-lisp:nil :type
                         (common-lisp:or webvtt-destination-style-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-webvtt-destination-settings-style-control
                         :shape "WebvttDestinationStyleControl" :location
                         common-lisp:nil :location-name "styleControl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-webvtt-destination-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'webvtt-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'webvtt-destination-settings
                    'make-webvtt-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   common-lisp:nil))
(common-lisp:deftype webvtt-destination-style-control () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max100| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max5000| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin1Max65535| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin250Max5000| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin32Max46| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative1Max5| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative59Max0| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max128| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max2000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max255| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max32768| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max3600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max500| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65535| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65536| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max7| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max8191| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max40000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max80000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max30000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max1000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max16| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max3003| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max31| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max32| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max3600000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max4| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max8| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max2000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin3| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32Max8191| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin4Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin800Max3000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin96Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative1000Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative5Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max60| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioChannelMapping| ()
   '(trivial-types:proper-list audio-channel-mapping))
 (common-lisp:defun make-__listofaudiochannelmapping
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-channel-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioDescription| ()
   '(trivial-types:proper-list audio-description))
 (common-lisp:defun make-__listofaudiodescription
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioSelector| ()
   '(trivial-types:proper-list audio-selector))
 (common-lisp:defun make-__listofaudioselector
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioTrack| ()
   '(trivial-types:proper-list audio-track))
 (common-lisp:defun make-__listofaudiotrack
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-track))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchFailedResultModel| ()
   '(trivial-types:proper-list batch-failed-result-model))
 (common-lisp:defun make-__listofbatchfailedresultmodel
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-failed-result-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchSuccessfulResultModel| ()
   '(trivial-types:proper-list batch-successful-result-model))
 (common-lisp:defun make-__listofbatchsuccessfulresultmodel
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-successful-result-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionDescription| ()
   '(trivial-types:proper-list caption-description))
 (common-lisp:defun make-__listofcaptiondescription
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionLanguageMapping| ()
   '(trivial-types:proper-list caption-language-mapping))
 (common-lisp:defun make-__listofcaptionlanguagemapping
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            caption-language-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionSelector| ()
   '(trivial-types:proper-list caption-selector))
 (common-lisp:defun make-__listofcaptionselector
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelEgressEndpoint| ()
   '(trivial-types:proper-list channel-egress-endpoint))
 (common-lisp:defun make-__listofchannelegressendpoint
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-egress-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelSummary| ()
   '(trivial-types:proper-list channel-summary))
 (common-lisp:defun make-__listofchannelsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfColorCorrection| ()
   '(trivial-types:proper-list color-correction))
 (common-lisp:defun make-__listofcolorcorrection
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list color-correction))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFailoverCondition| ()
   '(trivial-types:proper-list failover-condition))
 (common-lisp:defun make-__listoffailovercondition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failover-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHlsAdMarkers| ()
   '(trivial-types:proper-list hls-ad-markers))
 (common-lisp:defun make-__listofhlsadmarkers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hls-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInput| () '(trivial-types:proper-list input))
 (common-lisp:defun make-__listofinput
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputAttachment| ()
   '(trivial-types:proper-list input-attachment))
 (common-lisp:defun make-__listofinputattachment
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputChannelLevel| ()
   '(trivial-types:proper-list input-channel-level))
 (common-lisp:defun make-__listofinputchannellevel
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-channel-level))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDestination| ()
   '(trivial-types:proper-list input-destination))
 (common-lisp:defun make-__listofinputdestination
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDestinationRequest| ()
   '(trivial-types:proper-list input-destination-request))
 (common-lisp:defun make-__listofinputdestinationrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-destination-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceRequest| ()
   '(trivial-types:proper-list input-device-request))
 (common-lisp:defun make-__listofinputdevicerequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceSettings| ()
   '(trivial-types:proper-list input-device-settings))
 (common-lisp:defun make-__listofinputdevicesettings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceSummary| ()
   '(trivial-types:proper-list input-device-summary))
 (common-lisp:defun make-__listofinputdevicesummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSecurityGroup| ()
   '(trivial-types:proper-list input-security-group))
 (common-lisp:defun make-__listofinputsecuritygroup
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSource| ()
   '(trivial-types:proper-list input-source))
 (common-lisp:defun make-__listofinputsource
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSourceRequest| ()
   '(trivial-types:proper-list input-source-request))
 (common-lisp:defun make-__listofinputsourcerequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputWhitelistRule| ()
   '(trivial-types:proper-list input-whitelist-rule))
 (common-lisp:defun make-__listofinputwhitelistrule
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-whitelist-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputWhitelistRuleCidr| ()
   '(trivial-types:proper-list input-whitelist-rule-cidr))
 (common-lisp:defun make-__listofinputwhitelistrulecidr
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-whitelist-rule-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaConnectFlow| ()
   '(trivial-types:proper-list media-connect-flow))
 (common-lisp:defun make-__listofmediaconnectflow
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-connect-flow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaConnectFlowRequest| ()
   '(trivial-types:proper-list media-connect-flow-request))
 (common-lisp:defun make-__listofmediaconnectflowrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-connect-flow-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaPackageOutputDestinationSettings| ()
   '(trivial-types:proper-list media-package-output-destination-settings))
 (common-lisp:defun make-__listofmediapackageoutputdestinationsettings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-package-output-destination-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexOutputDestination| ()
   '(trivial-types:proper-list multiplex-output-destination))
 (common-lisp:defun make-__listofmultiplexoutputdestination
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-output-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexProgramPipelineDetail| ()
   '(trivial-types:proper-list multiplex-program-pipeline-detail))
 (common-lisp:defun make-__listofmultiplexprogrampipelinedetail
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-program-pipeline-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexProgramSummary| ()
   '(trivial-types:proper-list multiplex-program-summary))
 (common-lisp:defun make-__listofmultiplexprogramsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-program-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexSummary| ()
   '(trivial-types:proper-list multiplex-summary))
 (common-lisp:defun make-__listofmultiplexsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multiplex-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOffering| ()
   '(trivial-types:proper-list offering))
 (common-lisp:defun make-__listofoffering
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutput| () '(trivial-types:proper-list output))
 (common-lisp:defun make-__listofoutput
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDestination| ()
   '(trivial-types:proper-list output-destination))
 (common-lisp:defun make-__listofoutputdestination
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDestinationSettings| ()
   '(trivial-types:proper-list output-destination-settings))
 (common-lisp:defun make-__listofoutputdestinationsettings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            output-destination-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputGroup| ()
   '(trivial-types:proper-list output-group))
 (common-lisp:defun make-__listofoutputgroup
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPipelineDetail| ()
   '(trivial-types:proper-list pipeline-detail))
 (common-lisp:defun make-__listofpipelinedetail
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPipelinePauseStateSettings| ()
   '(trivial-types:proper-list pipeline-pause-state-settings))
 (common-lisp:defun make-__listofpipelinepausestatesettings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-pause-state-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReservation| ()
   '(trivial-types:proper-list reservation))
 (common-lisp:defun make-__listofreservation
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reservation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfRtmpAdMarkers| ()
   '(trivial-types:proper-list rtmp-ad-markers))
 (common-lisp:defun make-__listofrtmpadmarkers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rtmp-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfScheduleAction| ()
   '(trivial-types:proper-list schedule-action))
 (common-lisp:defun make-__listofscheduleaction
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfScte35Descriptor| ()
   '(trivial-types:proper-list scte35descriptor))
 (common-lisp:defun make-__listofscte35descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scte35descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfThumbnail| ()
   '(trivial-types:proper-list thumbnail))
 (common-lisp:defun make-__listofthumbnail
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thumbnail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfThumbnailDetail| ()
   '(trivial-types:proper-list thumbnail-detail))
 (common-lisp:defun make-__listofthumbnaildetail
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thumbnail-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTransferringInputDeviceSummary| ()
   '(trivial-types:proper-list transferring-input-device-summary))
 (common-lisp:defun make-__listoftransferringinputdevicesummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transferring-input-device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfValidationError| ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun make-__listofvalidationerror
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVideoDescription| ()
   '(trivial-types:proper-list video-description))
 (common-lisp:defun make-__listofvideodescription
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list video-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integer| ()
   '(trivial-types:proper-list |__integer|))
 (common-lisp:defun make-__listof__integer
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__integer|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun make-__listof__string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max1099511627775| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max4294967295| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max8589934591| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max86400000| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMax1000| () 'common-lisp:string)
(common-lisp:deftype |__stringMax2048| () 'common-lisp:string)
(common-lisp:deftype |__stringMax255| () 'common-lisp:string)
(common-lisp:deftype |__stringMax256| () 'common-lisp:string)
(common-lisp:deftype |__stringMax32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max255| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max256| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max35| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max7| () 'common-lisp:string)
(common-lisp:deftype |__stringMin2Max2| () 'common-lisp:string)
(common-lisp:deftype |__stringMin32Max32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin34Max34| () 'common-lisp:string)
(common-lisp:deftype |__stringMin3Max3| () 'common-lisp:string)
(common-lisp:deftype |__stringMin6Max6| () 'common-lisp:string)
(common-lisp:deftype |__stringPattern010920300| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:deftype input-device-thumbnail ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype accept-header () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype |__timestamp| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-configurable-audio-channel-pair-config
                       common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-audio-channel-pair-config-id
                         :shape "__integer" :location common-lisp:nil
                         :location-name "id")
                        (profile :initarg :profile :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          input-device-configurable-audio-channel-pair-profile
                          common-lisp:null)
                         :accessor
                         struct-shape-input-device-configurable-audio-channel-pair-config-profile
                         :shape
                         "InputDeviceConfigurableAudioChannelPairProfile"
                         :location common-lisp:nil :location-name "profile"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-configurable-audio-channel-pair-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-configurable-audio-channel-pair-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-configurable-audio-channel-pair-config
                    'make-input-device-configurable-audio-channel-pair-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-audio-channel-pair-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-audio-channel-pair-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-audio-channel-pair-config))
   common-lisp:nil))
(common-lisp:deftype input-device-configurable-audio-channel-pair-profile ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-uhd-audio-channel-pair-config
                       common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-audio-channel-pair-config-id
                         :shape "__integer" :location common-lisp:nil
                         :location-name "id")
                        (profile :initarg :profile :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          input-device-uhd-audio-channel-pair-profile
                          common-lisp:null)
                         :accessor
                         struct-shape-input-device-uhd-audio-channel-pair-config-profile
                         :shape "InputDeviceUhdAudioChannelPairProfile"
                         :location common-lisp:nil :location-name "profile"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-device-uhd-audio-channel-pair-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-uhd-audio-channel-pair-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-device-uhd-audio-channel-pair-config
                    'make-input-device-uhd-audio-channel-pair-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-audio-channel-pair-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-audio-channel-pair-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-audio-channel-pair-config))
   common-lisp:nil))
(common-lisp:deftype input-device-uhd-audio-channel-pair-profile ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceConfigurableAudioChannelPairConfig|
                      ()
   '(trivial-types:proper-list
     input-device-configurable-audio-channel-pair-config))
 (common-lisp:defun make-__listofinputdeviceconfigurableaudiochannelpairconfig
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-device-configurable-audio-channel-pair-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceUhdAudioChannelPairConfig| ()
   '(trivial-types:proper-list input-device-uhd-audio-channel-pair-config))
 (common-lisp:defun make-__listofinputdeviceuhdaudiochannelpairconfig
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-device-uhd-audio-channel-pair-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-pipeline-id-to-restart () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restart-channel-pipelines-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channel-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-request-channel-id
                         :shape "__string" :location "uri" :location-name
                         "channelId")
                        (pipeline-ids :initarg :pipeline-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelPipelineIdToRestart|
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-request-pipeline-ids
                         :shape "__listOfChannelPipelineIdToRestart" :location
                         common-lisp:nil :location-name "pipelineIds"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restart-channel-pipelines-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restart-channel-pipelines-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restart-channel-pipelines-request
                    'make-restart-channel-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restart-channel-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restart-channel-pipelines-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-ids))
      (common-lisp:list
       (common-lisp:cons "PipelineIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restart-channel-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restart-channel-pipelines-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-response-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "arn")
                        (cdi-input-specification :initarg
                         :cdi-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-cdi-input-specification
                         :shape "CdiInputSpecification" :location
                         common-lisp:nil :location-name
                         "cdiInputSpecification")
                        (channel-class :initarg :channel-class :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-channel-class
                         :shape "ChannelClass" :location common-lisp:nil
                         :location-name "channelClass")
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-destinations
                         :shape "__listOfOutputDestination" :location
                         common-lisp:nil :location-name "destinations")
                        (egress-endpoints :initarg :egress-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-egress-endpoints
                         :shape "__listOfChannelEgressEndpoint" :location
                         common-lisp:nil :location-name "egressEndpoints")
                        (encoder-settings :initarg :encoder-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-encoder-settings
                         :shape "EncoderSettings" :location common-lisp:nil
                         :location-name "encoderSettings")
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-response-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "id")
                        (input-attachments :initarg :input-attachments
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-input-attachments
                         :shape "__listOfInputAttachment" :location
                         common-lisp:nil :location-name "inputAttachments")
                        (input-specification :initarg :input-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-input-specification
                         :shape "InputSpecification" :location common-lisp:nil
                         :location-name "inputSpecification")
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-response-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name "logLevel")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-maintenance
                         :shape "MaintenanceStatus" :location common-lisp:nil
                         :location-name "maintenance")
                        (maintenance-status :initarg :maintenance-status
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-response-maintenance-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceStatus")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-response-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "name")
                        (pipeline-details :initarg :pipeline-details :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-pipeline-details
                         :shape "__listOfPipelineDetail" :location
                         common-lisp:nil :location-name "pipelineDetails")
                        (pipelines-running-count :initarg
                         :pipelines-running-count :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-pipelines-running-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "pipelinesRunningCount")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-state
                         :shape "ChannelState" :location common-lisp:nil
                         :location-name "state")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-restart-channel-pipelines-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         "tags")
                        (vpc :initarg :vpc :initform common-lisp:nil :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-restart-channel-pipelines-response-vpc
                         :shape "VpcOutputSettingsDescription" :location
                         common-lisp:nil :location-name "vpc"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restart-channel-pipelines-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restart-channel-pipelines-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restart-channel-pipelines-response
                    'make-restart-channel-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restart-channel-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restart-channel-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-status))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restart-channel-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelPipelineIdToRestart| ()
   '(trivial-types:proper-list channel-pipeline-id-to-restart))
 (common-lisp:defun make-__listofchannelpipelineidtorestart
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            channel-pipeline-id-to-restart))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun accept-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "AcceptInputDeviceTransfer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun batch-delete
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids input-ids
                     input-security-group-ids multiplex-ids)
   (common-lisp:declare
    (common-lisp:ignorable channel-ids input-ids input-security-group-ids
     multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/batch/delete"
                                                        "BatchDelete"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete))
(common-lisp:progn
 (common-lisp:defun batch-start
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids multiplex-ids)
   (common-lisp:declare (common-lisp:ignorable channel-ids multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-start-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/batch/start"
                                                        "BatchStart"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-start))
(common-lisp:progn
 (common-lisp:defun batch-stop
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids multiplex-ids)
   (common-lisp:declare (common-lisp:ignorable channel-ids multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/batch/stop"
                                                        "BatchStop"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-stop))
(common-lisp:progn
 (common-lisp:defun batch-update-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id creates deletes)
   (common-lisp:declare (common-lisp:ignorable channel-id creates deletes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "BatchUpdateSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-update-schedule))
(common-lisp:progn
 (common-lisp:defun cancel-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "CancelInputDeviceTransfer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun claim-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-claim-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/claimDevice"
                                                        "ClaimDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'claim-device))
(common-lisp:progn
 (common-lisp:defun create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cdi-input-specification channel-class
                     destinations encoder-settings input-attachments
                     input-specification log-level maintenance name request-id
                     reserved role-arn tags vpc)
   (common-lisp:declare
    (common-lisp:ignorable cdi-input-specification channel-class destinations
     encoder-settings input-attachments input-specification log-level
     maintenance name request-id reserved role-arn tags vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/prod/channels"
                                                        "CreateChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-channel))
(common-lisp:progn
 (common-lisp:defun create-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations input-devices
                     input-security-groups media-connect-flows name request-id
                     role-arn sources tags type vpc)
   (common-lisp:declare
    (common-lisp:ignorable destinations input-devices input-security-groups
     media-connect-flows name request-id role-arn sources tags type vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/prod/inputs"
                                                        "CreateInput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-input))
(common-lisp:progn
 (common-lisp:defun create-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags whitelist-rules)
   (common-lisp:declare (common-lisp:ignorable tags whitelist-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/inputSecurityGroups"
                                                        "CreateInputSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-input-security-group))
(common-lisp:progn
 (common-lisp:defun create-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones multiplex-settings
                     name request-id tags)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones multiplex-settings name
     request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/multiplexes"
                                                        "CreateMultiplex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-multiplex))
(common-lisp:progn
 (common-lisp:defun create-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-program-settings
                     program-name request-id)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-program-settings program-name
     request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "CreateMultiplexProgram"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-multiplex-program))
(common-lisp:progn
 (common-lisp:defun create-partner-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id request-id tags)
   (common-lisp:declare (common-lisp:ignorable input-id request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partner-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A/partners"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "CreatePartnerInput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-partner-input))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DeleteChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-channel))
(common-lisp:progn
 (common-lisp:defun delete-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id)
   (common-lisp:declare (common-lisp:ignorable input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "DeleteInput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-input))
(common-lisp:progn
 (common-lisp:defun delete-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:declare (common-lisp:ignorable input-security-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "DeleteInputSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-input-security-group))
(common-lisp:progn
 (common-lisp:defun delete-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "DeleteMultiplex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-multiplex))
(common-lisp:progn
 (common-lisp:defun delete-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id program-name)
   (common-lisp:declare (common-lisp:ignorable multiplex-id program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "DeleteMultiplexProgram"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-multiplex-program))
(common-lisp:progn
 (common-lisp:defun delete-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id)
   (common-lisp:declare (common-lisp:ignorable reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "DeleteReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-reservation))
(common-lisp:progn
 (common-lisp:defun delete-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DeleteSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-schedule))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DeleteTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-account-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'medialive-request :method "GET" :path
                                "/prod/accountConfiguration" :operation
                                "DescribeAccountConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-account-configuration))
(common-lisp:progn
 (common-lisp:defun describe-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-channel))
(common-lisp:progn
 (common-lisp:defun describe-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id)
   (common-lisp:declare (common-lisp:ignorable input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "DescribeInput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-input))
(common-lisp:progn
 (common-lisp:defun describe-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "DescribeInputDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-input-device))
(common-lisp:progn
 (common-lisp:defun describe-input-device-thumbnail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id accept)
   (common-lisp:declare (common-lisp:ignorable input-device-id accept))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-input-device-thumbnail-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/thumbnailData"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "DescribeInputDeviceThumbnail")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-input-device-thumbnail))
(common-lisp:progn
 (common-lisp:defun describe-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:declare (common-lisp:ignorable input-security-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "DescribeInputSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-input-security-group))
(common-lisp:progn
 (common-lisp:defun describe-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "DescribeMultiplex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-multiplex))
(common-lisp:progn
 (common-lisp:defun describe-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id program-name)
   (common-lisp:declare (common-lisp:ignorable multiplex-id program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-multiplex-program-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "DescribeMultiplexProgram"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-multiplex-program))
(common-lisp:progn
 (common-lisp:defun describe-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-id)
   (common-lisp:declare (common-lisp:ignorable offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-id))))
                                                        "DescribeOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-offering))
(common-lisp:progn
 (common-lisp:defun describe-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id)
   (common-lisp:declare (common-lisp:ignorable reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "DescribeReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-reservation))
(common-lisp:progn
 (common-lisp:defun describe-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable channel-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-schedule))
(common-lisp:progn
 (common-lisp:defun describe-thumbnails
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id pipeline-id thumbnail-type)
   (common-lisp:declare
    (common-lisp:ignorable channel-id pipeline-id thumbnail-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thumbnails-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/thumbnails"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeThumbnails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-thumbnails))
(common-lisp:progn
 (common-lisp:defun list-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/prod/channels"
                                                        "ListChannels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-channels))
(common-lisp:progn
 (common-lisp:defun list-input-device-transfers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token transfer-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token transfer-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-input-device-transfers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/inputDeviceTransfers"
                                                        "ListInputDeviceTransfers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-input-device-transfers))
(common-lisp:progn
 (common-lisp:defun list-input-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-input-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/inputDevices"
                                                        "ListInputDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-input-devices))
(common-lisp:progn
 (common-lisp:defun list-input-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-input-security-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/inputSecurityGroups"
                                                        "ListInputSecurityGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-input-security-groups))
(common-lisp:progn
 (common-lisp:defun list-inputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-inputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/prod/inputs"
                                                        "ListInputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-inputs))
(common-lisp:progn
 (common-lisp:defun list-multiplex-programs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results multiplex-id next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results multiplex-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multiplex-programs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "ListMultiplexPrograms"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-multiplex-programs))
(common-lisp:progn
 (common-lisp:defun list-multiplexes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multiplexes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/multiplexes"
                                                        "ListMultiplexes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-multiplexes))
(common-lisp:progn
 (common-lisp:defun list-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class channel-configuration codec
                     duration max-results maximum-bitrate maximum-framerate
                     next-token resolution resource-type special-feature
                     video-quality)
   (common-lisp:declare
    (common-lisp:ignorable channel-class channel-configuration codec duration
     max-results maximum-bitrate maximum-framerate next-token resolution
     resource-type special-feature video-quality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/prod/offerings"
                                                        "ListOfferings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-offerings))
(common-lisp:progn
 (common-lisp:defun list-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class codec max-results
                     maximum-bitrate maximum-framerate next-token resolution
                     resource-type special-feature video-quality)
   (common-lisp:declare
    (common-lisp:ignorable channel-class codec max-results maximum-bitrate
     maximum-framerate next-token resolution resource-type special-feature
     video-quality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reservations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/reservations"
                                                        "ListReservations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-reservations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key count name offering-id renewal-settings
                     request-id start tags)
   (common-lisp:declare
    (common-lisp:ignorable count name offering-id renewal-settings request-id
     start tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-purchase-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/offerings/~A/purchase"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-id))))
                                                        "PurchaseOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'purchase-offering))
(common-lisp:progn
 (common-lisp:defun reboot-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force input-device-id)
   (common-lisp:declare (common-lisp:ignorable force input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/reboot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "RebootInputDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reboot-input-device))
(common-lisp:progn
 (common-lisp:defun reject-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "RejectInputDeviceTransfer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun start-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "StartChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-channel))
(common-lisp:progn
 (common-lisp:defun start-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "StartInputDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-input-device))
(common-lisp:progn
 (common-lisp:defun start-input-device-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-input-device-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/startInputDeviceMaintenanceWindow"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "StartInputDeviceMaintenanceWindow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-input-device-maintenance-window))
(common-lisp:progn
 (common-lisp:defun start-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "StartMultiplex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-multiplex))
(common-lisp:progn
 (common-lisp:defun stop-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "StopChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-channel))
(common-lisp:progn
 (common-lisp:defun stop-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "StopInputDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-input-device))
(common-lisp:progn
 (common-lisp:defun stop-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "StopMultiplex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-multiplex))
(common-lisp:progn
 (common-lisp:defun transfer-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id target-customer-id
                     target-region transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable input-device-id target-customer-id target-region
     transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/transfer"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "TransferInputDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'transfer-input-device))
(common-lisp:progn
 (common-lisp:defun update-account-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-configuration)
   (common-lisp:declare (common-lisp:ignorable account-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/prod/accountConfiguration"
                                                        "UpdateAccountConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-account-configuration))
(common-lisp:progn
 (common-lisp:defun update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cdi-input-specification channel-id
                     destinations encoder-settings input-attachments
                     input-specification log-level maintenance name role-arn)
   (common-lisp:declare
    (common-lisp:ignorable cdi-input-specification channel-id destinations
     encoder-settings input-attachments input-specification log-level
     maintenance name role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "UpdateChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-channel))
(common-lisp:progn
 (common-lisp:defun update-channel-class
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class channel-id destinations)
   (common-lisp:declare
    (common-lisp:ignorable channel-class channel-id destinations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-class-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/channelClass"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "UpdateChannelClass"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-channel-class))
(common-lisp:progn
 (common-lisp:defun update-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations input-devices input-id
                     input-security-groups media-connect-flows name role-arn
                     sources)
   (common-lisp:declare
    (common-lisp:ignorable destinations input-devices input-id
     input-security-groups media-connect-flows name role-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "UpdateInput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-input))
(common-lisp:progn
 (common-lisp:defun update-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hd-device-settings input-device-id name
                     uhd-device-settings availability-zone)
   (common-lisp:declare
    (common-lisp:ignorable hd-device-settings input-device-id name
     uhd-device-settings availability-zone))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "UpdateInputDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-input-device))
(common-lisp:progn
 (common-lisp:defun update-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id tags
                     whitelist-rules)
   (common-lisp:declare
    (common-lisp:ignorable input-security-group-id tags whitelist-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "UpdateInputSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-input-security-group))
(common-lisp:progn
 (common-lisp:defun update-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-settings name)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-settings name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "UpdateMultiplex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-multiplex))
(common-lisp:progn
 (common-lisp:defun update-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-program-settings
                     program-name)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-program-settings
     program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "UpdateMultiplexProgram"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-multiplex-program))
(common-lisp:progn
 (common-lisp:defun update-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name renewal-settings reservation-id)
   (common-lisp:declare
    (common-lisp:ignorable name renewal-settings reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "UpdateReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-reservation))
(common-lisp:progn
 (common-lisp:defun restart-channel-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id pipeline-ids)
   (common-lisp:declare (common-lisp:ignorable channel-id pipeline-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restart-channel-pipelines-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/restartChannelPipelines"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "RestartChannelPipelines"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'restart-channel-pipelines))
