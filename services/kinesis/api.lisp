;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/kinesis/api (:use)
                             (:nicknames #:aws/kinesis)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kinesis/api)
(common-lisp:progn
 (common-lisp:define-condition kinesis-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kinesis-error))
(common-lisp:progn
 (common-lisp:defclass kinesis-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "kinesis" :api-version
                        "2013-12-02" :host-prefix "kinesis" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "Kinesis_20131202" :json-version "1.1"))
 (common-lisp:export 'kinesis-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ExpiredIteratorException" . expired-iterator-exception)
    ("ExpiredNextTokenException" . expired-next-token-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("KMSAccessDeniedException" . kmsaccess-denied-exception)
    ("KMSDisabledException" . kmsdisabled-exception)
    ("KMSInvalidStateException" . kmsinvalid-state-exception)
    ("KMSNotFoundException" . kmsnot-found-exception)
    ("KMSOptInRequired" . kmsopt-in-required)
    ("KMSThrottlingException" . kmsthrottling-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ProvisionedThroughputExceededException"
     . provisioned-throughput-exceeded-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-stream-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-add-tags-to-stream-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-add-tags-to-stream-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-add-tags-to-stream-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-to-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-stream-input 'make-add-tags-to-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-stream-input))
   common-lisp:nil))
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass child-shard common-lisp:nil
                       ((shard-id :initarg :shard-id :initform
                         (common-lisp:error ":shard-id is required") :type
                         (common-lisp:or shard-id common-lisp:null) :accessor
                         struct-shape-child-shard-shard-id :shape "ShardId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-shards :initarg :parent-shards :initform
                         (common-lisp:error ":parent-shards is required") :type
                         (common-lisp:or shard-id-list common-lisp:null)
                         :accessor struct-shape-child-shard-parent-shards
                         :shape "ShardIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-key-range :initarg :hash-key-range :initform
                         (common-lisp:error ":hash-key-range is required")
                         :type (common-lisp:or hash-key-range common-lisp:null)
                         :accessor struct-shape-child-shard-hash-key-range
                         :shape "HashKeyRange" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-child-shard
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'child-shard
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'child-shard 'make-child-shard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input child-shard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input child-shard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-shards))
      (common-lisp:list
       (common-lisp:cons "ParentShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-range))
      (common-lisp:list
       (common-lisp:cons "HashKeyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input child-shard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype child-shard-list ()
   '(trivial-types:proper-list child-shard))
 (common-lisp:defun make-child-shard-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list child-shard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass consumer common-lisp:nil
                       ((consumer-name :initarg :consumer-name :initform
                         (common-lisp:error ":consumer-name is required") :type
                         (common-lisp:or consumer-name common-lisp:null)
                         :accessor struct-shape-consumer-consumer-name :shape
                         "ConsumerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-arn :initarg :consumer-arn :initform
                         (common-lisp:error ":consumer-arn is required") :type
                         (common-lisp:or consumer-arn common-lisp:null)
                         :accessor struct-shape-consumer-consumer-arn :shape
                         "ConsumerARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (consumer-status :initarg :consumer-status :initform
                         (common-lisp:error ":consumer-status is required")
                         :type
                         (common-lisp:or consumer-status common-lisp:null)
                         :accessor struct-shape-consumer-consumer-status :shape
                         "ConsumerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-creation-timestamp :initarg
                         :consumer-creation-timestamp :initform
                         (common-lisp:error
                          ":consumer-creation-timestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-consumer-consumer-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-consumer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'consumer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'consumer 'make-consumer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input consumer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input consumer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-name))
      (common-lisp:list
       (common-lisp:cons "ConsumerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-status))
      (common-lisp:list
       (common-lisp:cons "ConsumerStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "ConsumerCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input consumer))
   common-lisp:nil))
(common-lisp:deftype consumer-arn () 'common-lisp:string)
(common-lisp:deftype consumer-count-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass consumer-description common-lisp:nil
                       ((consumer-name :initarg :consumer-name :initform
                         (common-lisp:error ":consumer-name is required") :type
                         (common-lisp:or consumer-name common-lisp:null)
                         :accessor
                         struct-shape-consumer-description-consumer-name :shape
                         "ConsumerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-arn :initarg :consumer-arn :initform
                         (common-lisp:error ":consumer-arn is required") :type
                         (common-lisp:or consumer-arn common-lisp:null)
                         :accessor
                         struct-shape-consumer-description-consumer-arn :shape
                         "ConsumerARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (consumer-status :initarg :consumer-status :initform
                         (common-lisp:error ":consumer-status is required")
                         :type
                         (common-lisp:or consumer-status common-lisp:null)
                         :accessor
                         struct-shape-consumer-description-consumer-status
                         :shape "ConsumerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-creation-timestamp :initarg
                         :consumer-creation-timestamp :initform
                         (common-lisp:error
                          ":consumer-creation-timestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-consumer-description-consumer-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-consumer-description-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-consumer-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'consumer-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'consumer-description 'make-consumer-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input consumer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input consumer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-name))
      (common-lisp:list
       (common-lisp:cons "ConsumerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-status))
      (common-lisp:list
       (common-lisp:cons "ConsumerStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "ConsumerCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input consumer-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype consumer-list () '(trivial-types:proper-list consumer))
 (common-lisp:defun make-consumer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list consumer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype consumer-name () 'common-lisp:string)
(common-lisp:deftype consumer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-stream-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         (common-lisp:error ":stream-name is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-create-stream-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-count :initarg :shard-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer-object
                                         common-lisp:null)
                         :accessor struct-shape-create-stream-input-shard-count
                         :shape "PositiveIntegerObject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-mode-details :initarg :stream-mode-details
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-mode-details common-lisp:null)
                         :accessor
                         struct-shape-create-stream-input-stream-mode-details
                         :shape "StreamModeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stream-input 'make-create-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "ShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-mode-details))
      (common-lisp:list
       (common-lisp:cons "StreamModeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stream-input))
   common-lisp:nil))
(common-lisp:deftype data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass decrease-stream-retention-period-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-decrease-stream-retention-period-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period-hours :initarg
                         :retention-period-hours :initform
                         (common-lisp:error
                          ":retention-period-hours is required")
                         :type
                         (common-lisp:or retention-period-hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrease-stream-retention-period-input-retention-period-hours
                         :shape "RetentionPeriodHours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-decrease-stream-retention-period-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrease-stream-retention-period-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'decrease-stream-retention-period-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decrease-stream-retention-period-input
                    'make-decrease-stream-retention-period-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decrease-stream-retention-period-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decrease-stream-retention-period-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decrease-stream-retention-period-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-input-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resource-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-input
                    'make-delete-resource-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stream-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-delete-stream-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enforce-consumer-deletion :initarg
                         :enforce-consumer-deletion :initform common-lisp:nil
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-delete-stream-input-enforce-consumer-deletion
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-delete-stream-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stream-input 'make-delete-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-consumer-deletion))
      (common-lisp:list
       (common-lisp:cons "EnforceConsumerDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-stream-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-stream-consumer-input common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-deregister-stream-consumer-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-name :initarg :consumer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or consumer-name common-lisp:null)
                         :accessor
                         struct-shape-deregister-stream-consumer-input-consumer-name
                         :shape "ConsumerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-arn :initarg :consumer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or consumer-arn common-lisp:null)
                         :accessor
                         struct-shape-deregister-stream-consumer-input-consumer-arn
                         :shape "ConsumerARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-stream-consumer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-stream-consumer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-stream-consumer-input
                    'make-deregister-stream-consumer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-stream-consumer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-stream-consumer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-name))
      (common-lisp:list
       (common-lisp:cons "ConsumerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-stream-consumer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-limits-input common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-limits-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-limits-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-limits-input 'make-describe-limits-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-limits-output common-lisp:nil
                       ((shard-limit :initarg :shard-limit :initform
                         (common-lisp:error ":shard-limit is required") :type
                         (common-lisp:or shard-count-object common-lisp:null)
                         :accessor
                         struct-shape-describe-limits-output-shard-limit :shape
                         "ShardCountObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-shard-count :initarg :open-shard-count :initform
                         (common-lisp:error ":open-shard-count is required")
                         :type
                         (common-lisp:or shard-count-object common-lisp:null)
                         :accessor
                         struct-shape-describe-limits-output-open-shard-count
                         :shape "ShardCountObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-demand-stream-count :initarg
                         :on-demand-stream-count :initform
                         (common-lisp:error
                          ":on-demand-stream-count is required")
                         :type
                         (common-lisp:or on-demand-stream-count-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-limits-output-on-demand-stream-count
                         :shape "OnDemandStreamCountObject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (on-demand-stream-count-limit :initarg
                         :on-demand-stream-count-limit :initform
                         (common-lisp:error
                          ":on-demand-stream-count-limit is required")
                         :type
                         (common-lisp:or on-demand-stream-count-limit-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-limits-output-on-demand-stream-count-limit
                         :shape "OnDemandStreamCountLimitObject" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-limits-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-limits-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-limits-output 'make-describe-limits-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-limit))
      (common-lisp:list
       (common-lisp:cons "ShardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-shard-count))
      (common-lisp:list
       (common-lisp:cons "OpenShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-stream-count))
      (common-lisp:list
       (common-lisp:cons "OnDemandStreamCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-stream-count-limit))
      (common-lisp:list
       (common-lisp:cons "OnDemandStreamCountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-consumer-input common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-describe-stream-consumer-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-name :initarg :consumer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or consumer-name common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-consumer-input-consumer-name
                         :shape "ConsumerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-arn :initarg :consumer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or consumer-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-consumer-input-consumer-arn
                         :shape "ConsumerARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-consumer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stream-consumer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-consumer-input
                    'make-describe-stream-consumer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-consumer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-consumer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-name))
      (common-lisp:list
       (common-lisp:cons "ConsumerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-consumer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-consumer-output common-lisp:nil
                       ((consumer-description :initarg :consumer-description
                         :initform
                         (common-lisp:error
                          ":consumer-description is required")
                         :type
                         (common-lisp:or consumer-description common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-consumer-output-consumer-description
                         :shape "ConsumerDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-consumer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stream-consumer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-consumer-output
                    'make-describe-stream-consumer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-consumer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-consumer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-description))
      (common-lisp:list
       (common-lisp:cons "ConsumerDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-consumer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-input-stream-name :shape
                         "StreamName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or describe-stream-input-limit
                                         common-lisp:null)
                         :accessor struct-shape-describe-stream-input-limit
                         :shape "DescribeStreamInputLimit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exclusive-start-shard-id :initarg
                         :exclusive-start-shard-id :initform common-lisp:nil
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-input-exclusive-start-shard-id
                         :shape "ShardId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-describe-stream-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-input 'make-describe-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-shard-id))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-input))
   common-lisp:nil))
(common-lisp:deftype describe-stream-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-stream-output common-lisp:nil
                       ((stream-description :initarg :stream-description
                         :initform
                         (common-lisp:error ":stream-description is required")
                         :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-output-stream-description
                         :shape "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stream-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-output 'make-describe-stream-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-description))
      (common-lisp:list
       (common-lisp:cons "StreamDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-summary-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-summary-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-describe-stream-summary-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-summary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stream-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-summary-input
                    'make-describe-stream-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-summary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-summary-output common-lisp:nil
                       ((stream-description-summary :initarg
                         :stream-description-summary :initform
                         (common-lisp:error
                          ":stream-description-summary is required")
                         :type
                         (common-lisp:or stream-description-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-summary-output-stream-description-summary
                         :shape "StreamDescriptionSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-summary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stream-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-summary-output
                    'make-describe-stream-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-description-summary))
      (common-lisp:list
       (common-lisp:cons "StreamDescriptionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-enhanced-monitoring-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-disable-enhanced-monitoring-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-level-metrics :initarg :shard-level-metrics
                         :initform
                         (common-lisp:error ":shard-level-metrics is required")
                         :type
                         (common-lisp:or metrics-name-list common-lisp:null)
                         :accessor
                         struct-shape-disable-enhanced-monitoring-input-shard-level-metrics
                         :shape "MetricsNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-disable-enhanced-monitoring-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-enhanced-monitoring-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-enhanced-monitoring-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-enhanced-monitoring-input
                    'make-disable-enhanced-monitoring-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-enhanced-monitoring-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-enhanced-monitoring-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-level-metrics))
      (common-lisp:list
       (common-lisp:cons "ShardLevelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-enhanced-monitoring-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-enhanced-monitoring-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-enable-enhanced-monitoring-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-level-metrics :initarg :shard-level-metrics
                         :initform
                         (common-lisp:error ":shard-level-metrics is required")
                         :type
                         (common-lisp:or metrics-name-list common-lisp:null)
                         :accessor
                         struct-shape-enable-enhanced-monitoring-input-shard-level-metrics
                         :shape "MetricsNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-enable-enhanced-monitoring-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-enhanced-monitoring-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-enhanced-monitoring-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-enhanced-monitoring-input
                    'make-enable-enhanced-monitoring-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-enhanced-monitoring-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-enhanced-monitoring-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-level-metrics))
      (common-lisp:list
       (common-lisp:cons "ShardLevelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-enhanced-monitoring-input))
   common-lisp:nil))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enhanced-metrics common-lisp:nil
                       ((shard-level-metrics :initarg :shard-level-metrics
                         :initform common-lisp:nil :type
                         (common-lisp:or metrics-name-list common-lisp:null)
                         :accessor
                         struct-shape-enhanced-metrics-shard-level-metrics
                         :shape "MetricsNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enhanced-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enhanced-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enhanced-metrics 'make-enhanced-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enhanced-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enhanced-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-level-metrics))
      (common-lisp:list
       (common-lisp:cons "ShardLevelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enhanced-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enhanced-monitoring-list ()
   '(trivial-types:proper-list enhanced-metrics))
 (common-lisp:defun make-enhanced-monitoring-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enhanced-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enhanced-monitoring-output common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-enhanced-monitoring-output-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-shard-level-metrics :initarg
                         :current-shard-level-metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or metrics-name-list common-lisp:null)
                         :accessor
                         struct-shape-enhanced-monitoring-output-current-shard-level-metrics
                         :shape "MetricsNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (desired-shard-level-metrics :initarg
                         :desired-shard-level-metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or metrics-name-list common-lisp:null)
                         :accessor
                         struct-shape-enhanced-monitoring-output-desired-shard-level-metrics
                         :shape "MetricsNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-enhanced-monitoring-output-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enhanced-monitoring-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enhanced-monitoring-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enhanced-monitoring-output
                    'make-enhanced-monitoring-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-monitoring-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-monitoring-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-shard-level-metrics))
      (common-lisp:list
       (common-lisp:cons "CurrentShardLevelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-shard-level-metrics))
      (common-lisp:list
       (common-lisp:cons "DesiredShardLevelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-monitoring-output))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-iterator-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-iterator-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-iterator-exception
                    'expired-iterator-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition expired-next-token-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-next-token-exception
                    'expired-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-records-input common-lisp:nil
                       ((shard-iterator :initarg :shard-iterator :initform
                         (common-lisp:error ":shard-iterator is required")
                         :type (common-lisp:or shard-iterator common-lisp:null)
                         :accessor
                         struct-shape-get-records-input-shard-iterator :shape
                         "ShardIterator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or get-records-input-limit
                                         common-lisp:null)
                         :accessor struct-shape-get-records-input-limit :shape
                         "GetRecordsInputLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-get-records-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-records-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-records-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-records-input 'make-get-records-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-records-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-records-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-iterator))
      (common-lisp:list
       (common-lisp:cons "ShardIterator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-records-input))
   common-lisp:nil))
(common-lisp:deftype get-records-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-records-output common-lisp:nil
                       ((records :initarg :records :initform
                         (common-lisp:error ":records is required") :type
                         (common-lisp:or record-list common-lisp:null)
                         :accessor struct-shape-get-records-output-records
                         :shape "RecordList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-shard-iterator :initarg :next-shard-iterator
                         :initform common-lisp:nil :type
                         (common-lisp:or shard-iterator common-lisp:null)
                         :accessor
                         struct-shape-get-records-output-next-shard-iterator
                         :shape "ShardIterator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (millis-behind-latest :initarg :millis-behind-latest
                         :initform common-lisp:nil :type
                         (common-lisp:or millis-behind-latest common-lisp:null)
                         :accessor
                         struct-shape-get-records-output-millis-behind-latest
                         :shape "MillisBehindLatest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (child-shards :initarg :child-shards :initform
                         common-lisp:nil :type
                         (common-lisp:or child-shard-list common-lisp:null)
                         :accessor struct-shape-get-records-output-child-shards
                         :shape "ChildShardList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-records-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-records-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-records-output 'make-get-records-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-records-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-records-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-shard-iterator))
      (common-lisp:list
       (common-lisp:cons "NextShardIterator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'millis-behind-latest))
      (common-lisp:list
       (common-lisp:cons "MillisBehindLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-shards))
      (common-lisp:list
       (common-lisp:cons "ChildShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-records-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-input-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-input
                    'make-get-resource-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-output common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-get-resource-policy-output-policy :shape
                         "Policy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-output
                    'make-get-resource-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-shard-iterator-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-get-shard-iterator-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-id :initarg :shard-id :initform
                         (common-lisp:error ":shard-id is required") :type
                         (common-lisp:or shard-id common-lisp:null) :accessor
                         struct-shape-get-shard-iterator-input-shard-id :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shard-iterator-type :initarg :shard-iterator-type
                         :initform
                         (common-lisp:error ":shard-iterator-type is required")
                         :type
                         (common-lisp:or shard-iterator-type common-lisp:null)
                         :accessor
                         struct-shape-get-shard-iterator-input-shard-iterator-type
                         :shape "ShardIteratorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (starting-sequence-number :initarg
                         :starting-sequence-number :initform common-lisp:nil
                         :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-get-shard-iterator-input-starting-sequence-number
                         :shape "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-shard-iterator-input-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-get-shard-iterator-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-shard-iterator-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-shard-iterator-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-shard-iterator-input 'make-get-shard-iterator-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-iterator-type))
      (common-lisp:list
       (common-lisp:cons "ShardIteratorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-sequence-number))
      (common-lisp:list
       (common-lisp:cons "StartingSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-shard-iterator-output common-lisp:nil
                       ((shard-iterator :initarg :shard-iterator :initform
                         common-lisp:nil :type
                         (common-lisp:or shard-iterator common-lisp:null)
                         :accessor
                         struct-shape-get-shard-iterator-output-shard-iterator
                         :shape "ShardIterator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-shard-iterator-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-shard-iterator-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-shard-iterator-output
                    'make-get-shard-iterator-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-iterator))
      (common-lisp:list
       (common-lisp:cons "ShardIterator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-shard-iterator-output))
   common-lisp:nil))
(common-lisp:deftype hash-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hash-key-range common-lisp:nil
                       ((starting-hash-key :initarg :starting-hash-key
                         :initform
                         (common-lisp:error ":starting-hash-key is required")
                         :type (common-lisp:or hash-key common-lisp:null)
                         :accessor
                         struct-shape-hash-key-range-starting-hash-key :shape
                         "HashKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ending-hash-key :initarg :ending-hash-key :initform
                         (common-lisp:error ":ending-hash-key is required")
                         :type (common-lisp:or hash-key common-lisp:null)
                         :accessor struct-shape-hash-key-range-ending-hash-key
                         :shape "HashKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hash-key-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hash-key-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hash-key-range 'make-hash-key-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hash-key-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hash-key-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-hash-key))
      (common-lisp:list
       (common-lisp:cons "StartingHashKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ending-hash-key))
      (common-lisp:list
       (common-lisp:cons "EndingHashKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hash-key-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass increase-stream-retention-period-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-increase-stream-retention-period-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period-hours :initarg
                         :retention-period-hours :initform
                         (common-lisp:error
                          ":retention-period-hours is required")
                         :type
                         (common-lisp:or retention-period-hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-increase-stream-retention-period-input-retention-period-hours
                         :shape "RetentionPeriodHours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-increase-stream-retention-period-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-increase-stream-retention-period-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'increase-stream-retention-period-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'increase-stream-retention-period-input
                    'make-increase-stream-retention-period-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          increase-stream-retention-period-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          increase-stream-retention-period-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          increase-stream-retention-period-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsaccess-denied-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsaccess-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsaccess-denied-exception
                    'kmsaccess-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsdisabled-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsdisabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsdisabled-exception 'kmsdisabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-state-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-exception
                    'kmsinvalid-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsnot-found-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsnot-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsnot-found-exception 'kmsnot-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsopt-in-required
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsopt-in-required-message)))
 (common-lisp:export
  (common-lisp:list 'kmsopt-in-required 'kmsopt-in-required-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsthrottling-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsthrottling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsthrottling-exception 'kmsthrottling-exception-message)))
(common-lisp:deftype key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-shards-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-list-shards-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-shards-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exclusive-start-shard-id :initarg
                         :exclusive-start-shard-id :initform common-lisp:nil
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor
                         struct-shape-list-shards-input-exclusive-start-shard-id
                         :shape "ShardId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-shards-input-limit
                                         common-lisp:null)
                         :accessor struct-shape-list-shards-input-max-results
                         :shape "ListShardsInputLimit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-creation-timestamp :initarg
                         :stream-creation-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-shards-input-stream-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-filter :initarg :shard-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or shard-filter common-lisp:null)
                         :accessor struct-shape-list-shards-input-shard-filter
                         :shape "ShardFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-list-shards-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-shards-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-shards-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-shards-input 'make-list-shards-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-shards-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-shards-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-shard-id))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "StreamCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-filter))
      (common-lisp:list
       (common-lisp:cons "ShardFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-shards-input))
   common-lisp:nil))
(common-lisp:deftype list-shards-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-shards-output common-lisp:nil
                       ((shards :initarg :shards :initform common-lisp:nil
                         :type (common-lisp:or shard-list common-lisp:null)
                         :accessor struct-shape-list-shards-output-shards
                         :shape "ShardList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-shards-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-shards-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-shards-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-shards-output 'make-list-shards-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-shards-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-shards-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shards))
      (common-lisp:list
       (common-lisp:cons "Shards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-shards-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stream-consumers-input common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-list-stream-consumers-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-stream-consumers-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-stream-consumers-input-limit
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-stream-consumers-input-max-results
                         :shape "ListStreamConsumersInputLimit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-creation-timestamp :initarg
                         :stream-creation-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-stream-consumers-input-stream-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-stream-consumers-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-stream-consumers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-stream-consumers-input
                    'make-list-stream-consumers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-consumers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-consumers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "StreamCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-consumers-input))
   common-lisp:nil))
(common-lisp:deftype list-stream-consumers-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-stream-consumers-output common-lisp:nil
                       ((consumers :initarg :consumers :initform
                         common-lisp:nil :type
                         (common-lisp:or consumer-list common-lisp:null)
                         :accessor
                         struct-shape-list-stream-consumers-output-consumers
                         :shape "ConsumerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-stream-consumers-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-stream-consumers-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-stream-consumers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-stream-consumers-output
                    'make-list-stream-consumers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-consumers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-consumers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumers))
      (common-lisp:list
       (common-lisp:cons "Consumers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stream-consumers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streams-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-streams-input-limit
                                         common-lisp:null)
                         :accessor struct-shape-list-streams-input-limit :shape
                         "ListStreamsInputLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusive-start-stream-name :initarg
                         :exclusive-start-stream-name :initform common-lisp:nil
                         :type (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-list-streams-input-exclusive-start-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-streams-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streams-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-streams-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streams-input 'make-list-streams-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-streams-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-streams-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-stream-name))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-streams-input))
   common-lisp:nil))
(common-lisp:deftype list-streams-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-streams-output common-lisp:nil
                       ((stream-names :initarg :stream-names :initform
                         (common-lisp:error ":stream-names is required") :type
                         (common-lisp:or stream-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-streams-output-stream-names :shape
                         "StreamNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-more-streams :initarg :has-more-streams :initform
                         (common-lisp:error ":has-more-streams is required")
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-list-streams-output-has-more-streams
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-streams-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-summaries :initarg :stream-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-streams-output-stream-summaries
                         :shape "StreamSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streams-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-streams-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streams-output 'make-list-streams-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-streams-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-streams-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-names))
      (common-lisp:list
       (common-lisp:cons "StreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-streams))
      (common-lisp:list
       (common-lisp:cons "HasMoreStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-summaries))
      (common-lisp:list
       (common-lisp:cons "StreamSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-streams-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-stream-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-stream-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusive-start-tag-key :initarg
                         :exclusive-start-tag-key :initform common-lisp:nil
                         :type (common-lisp:or tag-key common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-stream-input-exclusive-start-tag-key
                         :shape "TagKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-tags-for-stream-input-limit
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-stream-input-limit :shape
                         "ListTagsForStreamInputLimit" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-stream-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-stream-input
                    'make-list-tags-for-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-tag-key))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartTagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-stream-input))
   common-lisp:nil))
(common-lisp:deftype list-tags-for-stream-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-stream-output common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-stream-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (has-more-tags :initarg :has-more-tags :initform
                         (common-lisp:error ":has-more-tags is required") :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-stream-output-has-more-tags
                         :shape "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-stream-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-stream-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-stream-output
                    'make-list-tags-for-stream-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-stream-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-stream-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-tags))
      (common-lisp:list
       (common-lisp:cons "HasMoreTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-stream-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass merge-shards-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-merge-shards-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-to-merge :initarg :shard-to-merge :initform
                         (common-lisp:error ":shard-to-merge is required")
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor
                         struct-shape-merge-shards-input-shard-to-merge :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (adjacent-shard-to-merge :initarg
                         :adjacent-shard-to-merge :initform
                         (common-lisp:error
                          ":adjacent-shard-to-merge is required")
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor
                         struct-shape-merge-shards-input-adjacent-shard-to-merge
                         :shape "ShardId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-merge-shards-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-merge-shards-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'merge-shards-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'merge-shards-input 'make-merge-shards-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input merge-shards-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input merge-shards-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-to-merge))
      (common-lisp:list
       (common-lisp:cons "ShardToMerge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adjacent-shard-to-merge))
      (common-lisp:list
       (common-lisp:cons "AdjacentShardToMerge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input merge-shards-input))
   common-lisp:nil))
(common-lisp:deftype metrics-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metrics-name-list ()
   '(trivial-types:proper-list metrics-name))
 (common-lisp:defun make-metrics-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metrics-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype millis-behind-latest () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype on-demand-stream-count-limit-object ()
  'common-lisp:integer)
(common-lisp:deftype on-demand-stream-count-object () 'common-lisp:integer)
(common-lisp:deftype partition-key () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:deftype positive-integer-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition provisioned-throughput-exceeded-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       provisioned-throughput-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-exceeded-exception
                    'provisioned-throughput-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass put-record-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-put-record-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or data common-lisp:null) :accessor
                         struct-shape-put-record-input-data :shape "Data"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-key :initarg :partition-key :initform
                         (common-lisp:error ":partition-key is required") :type
                         (common-lisp:or partition-key common-lisp:null)
                         :accessor struct-shape-put-record-input-partition-key
                         :shape "PartitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (explicit-hash-key :initarg :explicit-hash-key
                         :initform common-lisp:nil :type
                         (common-lisp:or hash-key common-lisp:null) :accessor
                         struct-shape-put-record-input-explicit-hash-key :shape
                         "HashKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sequence-number-for-ordering :initarg
                         :sequence-number-for-ordering :initform
                         common-lisp:nil :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-put-record-input-sequence-number-for-ordering
                         :shape "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-put-record-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-record-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-record-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-record-input 'make-put-record-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-record-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-record-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "PartitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-hash-key))
      (common-lisp:list
       (common-lisp:cons "ExplicitHashKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sequence-number-for-ordering))
      (common-lisp:list
       (common-lisp:cons "SequenceNumberForOrdering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-record-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-record-output common-lisp:nil
                       ((shard-id :initarg :shard-id :initform
                         (common-lisp:error ":shard-id is required") :type
                         (common-lisp:or shard-id common-lisp:null) :accessor
                         struct-shape-put-record-output-shard-id :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sequence-number :initarg :sequence-number :initform
                         (common-lisp:error ":sequence-number is required")
                         :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-put-record-output-sequence-number :shape
                         "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-record-output-encryption-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-record-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-record-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-record-output 'make-put-record-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-record-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-number))
      (common-lisp:list
       (common-lisp:cons "SequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-record-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-records-input common-lisp:nil
                       ((records :initarg :records :initform
                         (common-lisp:error ":records is required") :type
                         (common-lisp:or put-records-request-entry-list
                                         common-lisp:null)
                         :accessor struct-shape-put-records-input-records
                         :shape "PutRecordsRequestEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-put-records-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-put-records-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-records-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-records-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-records-input 'make-put-records-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-records-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-records-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-records-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-records-output common-lisp:nil
                       ((failed-record-count :initarg :failed-record-count
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-records-output-failed-record-count
                         :shape "PositiveIntegerObject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (records :initarg :records :initform
                         (common-lisp:error ":records is required") :type
                         (common-lisp:or put-records-result-entry-list
                                         common-lisp:null)
                         :accessor struct-shape-put-records-output-records
                         :shape "PutRecordsResultEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-records-output-encryption-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-records-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-records-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-records-output 'make-put-records-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-records-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-records-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-record-count))
      (common-lisp:list
       (common-lisp:cons "FailedRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-records-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-records-request-entry common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or data common-lisp:null) :accessor
                         struct-shape-put-records-request-entry-data :shape
                         "Data" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explicit-hash-key :initarg :explicit-hash-key
                         :initform common-lisp:nil :type
                         (common-lisp:or hash-key common-lisp:null) :accessor
                         struct-shape-put-records-request-entry-explicit-hash-key
                         :shape "HashKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-key :initarg :partition-key :initform
                         (common-lisp:error ":partition-key is required") :type
                         (common-lisp:or partition-key common-lisp:null)
                         :accessor
                         struct-shape-put-records-request-entry-partition-key
                         :shape "PartitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-records-request-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-records-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-records-request-entry
                    'make-put-records-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-records-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-records-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-hash-key))
      (common-lisp:list
       (common-lisp:cons "ExplicitHashKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "PartitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-records-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-records-request-entry-list ()
   '(trivial-types:proper-list put-records-request-entry))
 (common-lisp:defun make-put-records-request-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-records-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-records-result-entry common-lisp:nil
                       ((sequence-number :initarg :sequence-number :initform
                         common-lisp:nil :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-put-records-result-entry-sequence-number
                         :shape "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-id :initarg :shard-id :initform common-lisp:nil
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor
                         struct-shape-put-records-result-entry-shard-id :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-put-records-result-entry-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-put-records-result-entry-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-records-result-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-records-result-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-records-result-entry 'make-put-records-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-records-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-records-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-number))
      (common-lisp:list
       (common-lisp:cons "SequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-records-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-records-result-entry-list ()
   '(trivial-types:proper-list put-records-result-entry))
 (common-lisp:defun make-put-records-result-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-records-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-input-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-put-resource-policy-input-policy :shape
                         "Policy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-input
                    'make-put-resource-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((sequence-number :initarg :sequence-number :initform
                         (common-lisp:error ":sequence-number is required")
                         :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor struct-shape-record-sequence-number :shape
                         "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (approximate-arrival-timestamp :initarg
                         :approximate-arrival-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-record-approximate-arrival-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or data common-lisp:null) :accessor
                         struct-shape-record-data :shape "Data" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partition-key :initarg :partition-key :initform
                         (common-lisp:error ":partition-key is required") :type
                         (common-lisp:or partition-key common-lisp:null)
                         :accessor struct-shape-record-partition-key :shape
                         "PartitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor struct-shape-record-encryption-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-number))
      (common-lisp:list
       (common-lisp:cons "SequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-arrival-timestamp))
      (common-lisp:list
       (common-lisp:cons "ApproximateArrivalTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "PartitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-list () '(trivial-types:proper-list record))
 (common-lisp:defun make-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass register-stream-consumer-input common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-register-stream-consumer-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-name :initarg :consumer-name :initform
                         (common-lisp:error ":consumer-name is required") :type
                         (common-lisp:or consumer-name common-lisp:null)
                         :accessor
                         struct-shape-register-stream-consumer-input-consumer-name
                         :shape "ConsumerName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-stream-consumer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-stream-consumer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-stream-consumer-input
                    'make-register-stream-consumer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-stream-consumer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-stream-consumer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-name))
      (common-lisp:list
       (common-lisp:cons "ConsumerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-stream-consumer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-stream-consumer-output common-lisp:nil
                       ((consumer :initarg :consumer :initform
                         (common-lisp:error ":consumer is required") :type
                         (common-lisp:or consumer common-lisp:null) :accessor
                         struct-shape-register-stream-consumer-output-consumer
                         :shape "Consumer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-stream-consumer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-stream-consumer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-stream-consumer-output
                    'make-register-stream-consumer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-stream-consumer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-stream-consumer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer))
      (common-lisp:list
       (common-lisp:cons "Consumer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-stream-consumer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-stream-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-remove-tags-from-stream-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-remove-tags-from-stream-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-remove-tags-from-stream-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-from-stream-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-stream-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-stream-input
                    'make-remove-tags-from-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-stream-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-stream-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-stream-input))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype retention-period-hours () 'common-lisp:integer)
(common-lisp:deftype scaling-type () 'common-lisp:string)
(common-lisp:deftype sequence-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sequence-number-range common-lisp:nil
                       ((starting-sequence-number :initarg
                         :starting-sequence-number :initform
                         (common-lisp:error
                          ":starting-sequence-number is required")
                         :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-sequence-number-range-starting-sequence-number
                         :shape "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ending-sequence-number :initarg
                         :ending-sequence-number :initform common-lisp:nil
                         :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-sequence-number-range-ending-sequence-number
                         :shape "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sequence-number-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sequence-number-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sequence-number-range 'make-sequence-number-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sequence-number-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sequence-number-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-sequence-number))
      (common-lisp:list
       (common-lisp:cons "StartingSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ending-sequence-number))
      (common-lisp:list
       (common-lisp:cons "EndingSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sequence-number-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass shard common-lisp:nil
                       ((shard-id :initarg :shard-id :initform
                         (common-lisp:error ":shard-id is required") :type
                         (common-lisp:or shard-id common-lisp:null) :accessor
                         struct-shape-shard-shard-id :shape "ShardId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parent-shard-id :initarg :parent-shard-id :initform
                         common-lisp:nil :type
                         (common-lisp:or shard-id common-lisp:null) :accessor
                         struct-shape-shard-parent-shard-id :shape "ShardId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (adjacent-parent-shard-id :initarg
                         :adjacent-parent-shard-id :initform common-lisp:nil
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor struct-shape-shard-adjacent-parent-shard-id
                         :shape "ShardId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-key-range :initarg :hash-key-range :initform
                         (common-lisp:error ":hash-key-range is required")
                         :type (common-lisp:or hash-key-range common-lisp:null)
                         :accessor struct-shape-shard-hash-key-range :shape
                         "HashKeyRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sequence-number-range :initarg :sequence-number-range
                         :initform
                         (common-lisp:error
                          ":sequence-number-range is required")
                         :type
                         (common-lisp:or sequence-number-range
                                         common-lisp:null)
                         :accessor struct-shape-shard-sequence-number-range
                         :shape "SequenceNumberRange" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shard
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shard
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'shard 'make-shard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-shard-id))
      (common-lisp:list
       (common-lisp:cons "ParentShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adjacent-parent-shard-id))
      (common-lisp:list
       (common-lisp:cons "AdjacentParentShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-range))
      (common-lisp:list
       (common-lisp:cons "HashKeyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sequence-number-range))
      (common-lisp:list
       (common-lisp:cons "SequenceNumberRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shard))
   common-lisp:nil))
(common-lisp:deftype shard-count-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass shard-filter common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or shard-filter-type common-lisp:null)
                         :accessor struct-shape-shard-filter-type :shape
                         "ShardFilterType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-id :initarg :shard-id :initform common-lisp:nil
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor struct-shape-shard-filter-shard-id :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-shard-filter-timestamp :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shard-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shard-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'shard-filter 'make-shard-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shard-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shard-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shard-filter))
   common-lisp:nil))
(common-lisp:deftype shard-filter-type () 'common-lisp:string)
(common-lisp:deftype shard-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype shard-id-list () '(trivial-types:proper-list shard-id))
 (common-lisp:defun make-shard-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shard-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype shard-iterator () 'common-lisp:string)
(common-lisp:deftype shard-iterator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype shard-list () '(trivial-types:proper-list shard))
 (common-lisp:defun make-shard-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass split-shard-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-split-shard-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-to-split :initarg :shard-to-split :initform
                         (common-lisp:error ":shard-to-split is required")
                         :type (common-lisp:or shard-id common-lisp:null)
                         :accessor
                         struct-shape-split-shard-input-shard-to-split :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (new-starting-hash-key :initarg :new-starting-hash-key
                         :initform
                         (common-lisp:error
                          ":new-starting-hash-key is required")
                         :type (common-lisp:or hash-key common-lisp:null)
                         :accessor
                         struct-shape-split-shard-input-new-starting-hash-key
                         :shape "HashKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-split-shard-input-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-split-shard-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'split-shard-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'split-shard-input 'make-split-shard-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input split-shard-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input split-shard-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-to-split))
      (common-lisp:list
       (common-lisp:cons "ShardToSplit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-starting-hash-key))
      (common-lisp:list
       (common-lisp:cons "NewStartingHashKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input split-shard-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-stream-encryption-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-start-stream-encryption-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryption-type is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-start-stream-encryption-input-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id common-lisp:null) :accessor
                         struct-shape-start-stream-encryption-input-key-id
                         :shape "KeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-start-stream-encryption-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-stream-encryption-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-stream-encryption-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-stream-encryption-input
                    'make-start-stream-encryption-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-encryption-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-encryption-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-encryption-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass starting-position common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or shard-iterator-type common-lisp:null)
                         :accessor struct-shape-starting-position-type :shape
                         "ShardIteratorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sequence-number :initarg :sequence-number :initform
                         common-lisp:nil :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-starting-position-sequence-number :shape
                         "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-starting-position-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-starting-position
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'starting-position
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'starting-position 'make-starting-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input starting-position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input starting-position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-number))
      (common-lisp:list
       (common-lisp:cons "SequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input starting-position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-stream-encryption-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-stop-stream-encryption-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryption-type is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-stop-stream-encryption-input-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id common-lisp:null) :accessor
                         struct-shape-stop-stream-encryption-input-key-id
                         :shape "KeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-stop-stream-encryption-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-stream-encryption-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-stream-encryption-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-stream-encryption-input
                    'make-stop-stream-encryption-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-encryption-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-encryption-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stream-encryption-input))
   common-lisp:nil))
(common-lisp:deftype stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-description common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         (common-lisp:error ":stream-name is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-stream-description-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-stream-description-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-status :initarg :stream-status :initform
                         (common-lisp:error ":stream-status is required") :type
                         (common-lisp:or stream-status common-lisp:null)
                         :accessor
                         struct-shape-stream-description-stream-status :shape
                         "StreamStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-mode-details :initarg :stream-mode-details
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-mode-details common-lisp:null)
                         :accessor
                         struct-shape-stream-description-stream-mode-details
                         :shape "StreamModeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shards :initarg :shards :initform
                         (common-lisp:error ":shards is required") :type
                         (common-lisp:or shard-list common-lisp:null) :accessor
                         struct-shape-stream-description-shards :shape
                         "ShardList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (has-more-shards :initarg :has-more-shards :initform
                         (common-lisp:error ":has-more-shards is required")
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         struct-shape-stream-description-has-more-shards :shape
                         "BooleanObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period-hours :initarg
                         :retention-period-hours :initform
                         (common-lisp:error
                          ":retention-period-hours is required")
                         :type
                         (common-lisp:or retention-period-hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-description-retention-period-hours
                         :shape "RetentionPeriodHours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-creation-timestamp :initarg
                         :stream-creation-timestamp :initform
                         (common-lisp:error
                          ":stream-creation-timestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-stream-description-stream-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform
                         (common-lisp:error ":enhanced-monitoring is required")
                         :type
                         (common-lisp:or enhanced-monitoring-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-description-enhanced-monitoring
                         :shape "EnhancedMonitoringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-stream-description-encryption-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id common-lisp:null)
                         :accessor struct-shape-stream-description-key-id
                         :shape "KeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-description 'make-stream-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-status))
      (common-lisp:list
       (common-lisp:cons "StreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-mode-details))
      (common-lisp:list
       (common-lisp:cons "StreamModeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shards))
      (common-lisp:list
       (common-lisp:cons "Shards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-more-shards))
      (common-lisp:list
       (common-lisp:cons "HasMoreShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "StreamCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-description-summary common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         (common-lisp:error ":stream-name is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-stream-description-summary-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-status :initarg :stream-status :initform
                         (common-lisp:error ":stream-status is required") :type
                         (common-lisp:or stream-status common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-stream-status
                         :shape "StreamStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-mode-details :initarg :stream-mode-details
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-mode-details common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-stream-mode-details
                         :shape "StreamModeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period-hours :initarg
                         :retention-period-hours :initform
                         (common-lisp:error
                          ":retention-period-hours is required")
                         :type
                         (common-lisp:or retention-period-hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-retention-period-hours
                         :shape "RetentionPeriodHours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-creation-timestamp :initarg
                         :stream-creation-timestamp :initform
                         (common-lisp:error
                          ":stream-creation-timestamp is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-stream-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-monitoring :initarg :enhanced-monitoring
                         :initform
                         (common-lisp:error ":enhanced-monitoring is required")
                         :type
                         (common-lisp:or enhanced-monitoring-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-enhanced-monitoring
                         :shape "EnhancedMonitoringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-key-id :shape
                         "KeyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (open-shard-count :initarg :open-shard-count :initform
                         (common-lisp:error ":open-shard-count is required")
                         :type
                         (common-lisp:or shard-count-object common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-open-shard-count
                         :shape "ShardCountObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-count :initarg :consumer-count :initform
                         common-lisp:nil :type
                         (common-lisp:or consumer-count-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-description-summary-consumer-count
                         :shape "ConsumerCountObject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-description-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-description-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-description-summary
                    'make-stream-description-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-description-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-description-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-status))
      (common-lisp:list
       (common-lisp:cons "StreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-mode-details))
      (common-lisp:list
       (common-lisp:cons "StreamModeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "StreamCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-shard-count))
      (common-lisp:list
       (common-lisp:cons "OpenShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-count))
      (common-lisp:list
       (common-lisp:cons "ConsumerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-description-summary))
   common-lisp:nil))
(common-lisp:deftype stream-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-mode-details common-lisp:nil
                       ((stream-mode :initarg :stream-mode :initform
                         (common-lisp:error ":stream-mode is required") :type
                         (common-lisp:or stream-mode common-lisp:null)
                         :accessor struct-shape-stream-mode-details-stream-mode
                         :shape "StreamMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-mode-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-mode-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-mode-details 'make-stream-mode-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-mode-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-mode-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-mode))
      (common-lisp:list
       (common-lisp:cons "StreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-mode-details))
   common-lisp:nil))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stream-name-list ()
   '(trivial-types:proper-list stream-name))
 (common-lisp:defun make-stream-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stream-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-summary common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         (common-lisp:error ":stream-name is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-stream-summary-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-stream-summary-stream-arn :shape
                         "StreamARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-status :initarg :stream-status :initform
                         (common-lisp:error ":stream-status is required") :type
                         (common-lisp:or stream-status common-lisp:null)
                         :accessor struct-shape-stream-summary-stream-status
                         :shape "StreamStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-mode-details :initarg :stream-mode-details
                         :initform common-lisp:nil :type
                         (common-lisp:or stream-mode-details common-lisp:null)
                         :accessor
                         struct-shape-stream-summary-stream-mode-details :shape
                         "StreamModeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-creation-timestamp :initarg
                         :stream-creation-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-stream-summary-stream-creation-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stream-summary 'make-stream-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-status))
      (common-lisp:list
       (common-lisp:cons "StreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-mode-details))
      (common-lisp:list
       (common-lisp:cons "StreamModeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "StreamCreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stream-summary-list ()
   '(trivial-types:proper-list stream-summary))
 (common-lisp:defun make-stream-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subscribe-to-shard-event common-lisp:nil
                       ((records :initarg :records :initform
                         (common-lisp:error ":records is required") :type
                         (common-lisp:or record-list common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-records :shape
                         "RecordList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (continuation-sequence-number :initarg
                         :continuation-sequence-number :initform
                         (common-lisp:error
                          ":continuation-sequence-number is required")
                         :type
                         (common-lisp:or sequence-number common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-continuation-sequence-number
                         :shape "SequenceNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (millis-behind-latest :initarg :millis-behind-latest
                         :initform
                         (common-lisp:error
                          ":millis-behind-latest is required")
                         :type
                         (common-lisp:or millis-behind-latest common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-millis-behind-latest
                         :shape "MillisBehindLatest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (child-shards :initarg :child-shards :initform
                         common-lisp:nil :type
                         (common-lisp:or child-shard-list common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-child-shards
                         :shape "ChildShardList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribe-to-shard-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-to-shard-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-shard-event 'make-subscribe-to-shard-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuation-sequence-number))
      (common-lisp:list
       (common-lisp:cons "ContinuationSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'millis-behind-latest))
      (common-lisp:list
       (common-lisp:cons "MillisBehindLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-shards))
      (common-lisp:list
       (common-lisp:cons "ChildShards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribe-to-shard-event-stream common-lisp:nil
                       ((subscribe-to-shard-event :initarg
                         :subscribe-to-shard-event :initform
                         (common-lisp:error
                          ":subscribe-to-shard-event is required")
                         :type
                         (common-lisp:or subscribe-to-shard-event
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-subscribe-to-shard-event
                         :shape "SubscribeToShardEvent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-not-found-exception :initarg
                         :resource-not-found-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-not-found-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-resource-not-found-exception
                         :shape "ResourceNotFoundException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-in-use-exception :initarg
                         :resource-in-use-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-in-use-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-resource-in-use-exception
                         :shape "ResourceInUseException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmsdisabled-exception :initarg :kmsdisabled-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or kmsdisabled-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-kmsdisabled-exception
                         :shape "KMSDisabledException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmsinvalid-state-exception :initarg
                         :kmsinvalid-state-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or kmsinvalid-state-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-kmsinvalid-state-exception
                         :shape "KMSInvalidStateException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmsaccess-denied-exception :initarg
                         :kmsaccess-denied-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or kmsaccess-denied-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-kmsaccess-denied-exception
                         :shape "KMSAccessDeniedException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmsnot-found-exception :initarg
                         :kmsnot-found-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or kmsnot-found-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-kmsnot-found-exception
                         :shape "KMSNotFoundException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmsopt-in-required :initarg :kmsopt-in-required
                         :initform common-lisp:nil :type
                         (common-lisp:or kmsopt-in-required common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-kmsopt-in-required
                         :shape "KMSOptInRequired" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmsthrottling-exception :initarg
                         :kmsthrottling-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or kmsthrottling-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-kmsthrottling-exception
                         :shape "KMSThrottlingException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (internal-failure-exception :initarg
                         :internal-failure-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or internal-failure-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-event-stream-internal-failure-exception
                         :shape "InternalFailureException" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribe-to-shard-event-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'subscribe-to-shard-event-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-shard-event-stream
                    'make-subscribe-to-shard-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribe-to-shard-event))
      (common-lisp:list
       (common-lisp:cons "SubscribeToShardEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-not-found-exception))
      (common-lisp:list
       (common-lisp:cons "ResourceNotFoundException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-in-use-exception))
      (common-lisp:list
       (common-lisp:cons "ResourceInUseException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsdisabled-exception))
      (common-lisp:list
       (common-lisp:cons "KMSDisabledException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsinvalid-state-exception))
      (common-lisp:list
       (common-lisp:cons "KMSInvalidStateException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsaccess-denied-exception))
      (common-lisp:list
       (common-lisp:cons "KMSAccessDeniedException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsnot-found-exception))
      (common-lisp:list
       (common-lisp:cons "KMSNotFoundException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsopt-in-required))
      (common-lisp:list
       (common-lisp:cons "KMSOptInRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsthrottling-exception))
      (common-lisp:list
       (common-lisp:cons "KMSThrottlingException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribe-to-shard-input common-lisp:nil
                       ((consumer-arn :initarg :consumer-arn :initform
                         (common-lisp:error ":consumer-arn is required") :type
                         (common-lisp:or consumer-arn common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-input-consumer-arn
                         :shape "ConsumerARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shard-id :initarg :shard-id :initform
                         (common-lisp:error ":shard-id is required") :type
                         (common-lisp:or shard-id common-lisp:null) :accessor
                         struct-shape-subscribe-to-shard-input-shard-id :shape
                         "ShardId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (starting-position :initarg :starting-position
                         :initform
                         (common-lisp:error ":starting-position is required")
                         :type
                         (common-lisp:or starting-position common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-input-starting-position
                         :shape "StartingPosition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribe-to-shard-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-to-shard-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-shard-input 'make-subscribe-to-shard-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-id))
      (common-lisp:list
       (common-lisp:cons "ShardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribe-to-shard-output common-lisp:nil
                       ((event-stream :initarg :event-stream :initform
                         (common-lisp:error ":event-stream is required") :type
                         (common-lisp:or subscribe-to-shard-event-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-subscribe-to-shard-output-event-stream
                         :shape "SubscribeToShardEventStream" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscribe-to-shard-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-to-shard-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-shard-output
                    'make-subscribe-to-shard-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream))
      (common-lisp:list
       (common-lisp:cons "EventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-shard-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-shard-count-input common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-update-shard-count-input-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-shard-count :initarg :target-shard-count
                         :initform
                         (common-lisp:error ":target-shard-count is required")
                         :type
                         (common-lisp:or positive-integer-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-shard-count-input-target-shard-count
                         :shape "PositiveIntegerObject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scaling-type :initarg :scaling-type :initform
                         (common-lisp:error ":scaling-type is required") :type
                         (common-lisp:or scaling-type common-lisp:null)
                         :accessor
                         struct-shape-update-shard-count-input-scaling-type
                         :shape "ScalingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-update-shard-count-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-shard-count-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-shard-count-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-shard-count-input 'make-update-shard-count-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-shard-count-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-shard-count-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-shard-count))
      (common-lisp:list
       (common-lisp:cons "TargetShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-type))
      (common-lisp:list
       (common-lisp:cons "ScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-shard-count-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-shard-count-output common-lisp:nil
                       ((stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-update-shard-count-output-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-shard-count :initarg :current-shard-count
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-shard-count-output-current-shard-count
                         :shape "PositiveIntegerObject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-shard-count :initarg :target-shard-count
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer-object
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-shard-count-output-target-shard-count
                         :shape "PositiveIntegerObject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-update-shard-count-output-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-shard-count-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-shard-count-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-shard-count-output
                    'make-update-shard-count-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-shard-count-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-shard-count-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-shard-count))
      (common-lisp:list
       (common-lisp:cons "CurrentShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-shard-count))
      (common-lisp:list
       (common-lisp:cons "TargetShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-shard-count-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stream-mode-input common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-update-stream-mode-input-stream-arn
                         :shape "StreamARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-mode-details :initarg :stream-mode-details
                         :initform
                         (common-lisp:error ":stream-mode-details is required")
                         :type
                         (common-lisp:or stream-mode-details common-lisp:null)
                         :accessor
                         struct-shape-update-stream-mode-input-stream-mode-details
                         :shape "StreamModeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-stream-mode-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-stream-mode-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-stream-mode-input 'make-update-stream-mode-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-mode-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-mode-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-mode-details))
      (common-lisp:list
       (common-lisp:cons "StreamModeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-mode-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (kinesis-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun add-tags-to-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name tags stream-arn)
   (common-lisp:declare (common-lisp:ignorable stream-name tags stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-tags-to-stream))
(common-lisp:progn
 (common-lisp:defun create-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-count
                     stream-mode-details)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-count stream-mode-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-stream))
(common-lisp:progn
 (common-lisp:defun decrease-stream-retention-period
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name retention-period-hours
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name retention-period-hours stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decrease-stream-retention-period-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DecreaseStreamRetentionPeriod"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'decrease-stream-retention-period))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name enforce-consumer-deletion
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name enforce-consumer-deletion stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-stream))
(common-lisp:progn
 (common-lisp:defun deregister-stream-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn consumer-name consumer-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-arn consumer-name consumer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-stream-consumer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterStreamConsumer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-stream-consumer))
(common-lisp:progn
 (common-lisp:defun describe-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'kinesis-request :method "POST" :path "/"
                                :operation "DescribeLimits"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-limits))
(common-lisp:progn
 (common-lisp:defun describe-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name limit
                     exclusive-start-shard-id stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name limit exclusive-start-shard-id
     stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stream))
(common-lisp:progn
 (common-lisp:defun describe-stream-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn consumer-name consumer-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-arn consumer-name consumer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-consumer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStreamConsumer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stream-consumer))
(common-lisp:progn
 (common-lisp:defun describe-stream-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn)
   (common-lisp:declare (common-lisp:ignorable stream-name stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-summary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStreamSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stream-summary))
(common-lisp:progn
 (common-lisp:defun disable-enhanced-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-level-metrics
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-level-metrics stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-enhanced-monitoring-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableEnhancedMonitoring"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-enhanced-monitoring))
(common-lisp:progn
 (common-lisp:defun enable-enhanced-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-level-metrics
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-level-metrics stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-enhanced-monitoring-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableEnhancedMonitoring"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-enhanced-monitoring))
(common-lisp:progn
 (common-lisp:defun get-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key shard-iterator limit stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable shard-iterator limit stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-records-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-records))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-shard-iterator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-id shard-iterator-type
                     starting-sequence-number timestamp stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-id shard-iterator-type
     starting-sequence-number timestamp stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-shard-iterator-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetShardIterator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-shard-iterator))
(common-lisp:progn
 (common-lisp:defun increase-stream-retention-period
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name retention-period-hours
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name retention-period-hours stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-increase-stream-retention-period-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IncreaseStreamRetentionPeriod"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'increase-stream-retention-period))
(common-lisp:progn
 (common-lisp:defun list-shards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name next-token
                     exclusive-start-shard-id max-results
                     stream-creation-timestamp shard-filter stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name next-token exclusive-start-shard-id
     max-results stream-creation-timestamp shard-filter stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-shards-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListShards"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-shards))
(common-lisp:progn
 (common-lisp:defun list-stream-consumers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn next-token max-results
                     stream-creation-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable stream-arn next-token max-results
     stream-creation-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stream-consumers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStreamConsumers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-stream-consumers))
(common-lisp:progn
 (common-lisp:defun list-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit exclusive-start-stream-name
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit exclusive-start-stream-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streams-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStreams"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-streams))
(common-lisp:progn
 (common-lisp:defun list-tags-for-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name exclusive-start-tag-key limit
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name exclusive-start-tag-key limit
     stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-stream))
(common-lisp:progn
 (common-lisp:defun merge-shards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-to-merge
                     adjacent-shard-to-merge stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-to-merge adjacent-shard-to-merge
     stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-merge-shards-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "MergeShards"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'merge-shards))
(common-lisp:progn
 (common-lisp:defun put-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name data partition-key
                     explicit-hash-key sequence-number-for-ordering stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name data partition-key explicit-hash-key
     sequence-number-for-ordering stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-record-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRecord"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-record))
(common-lisp:progn
 (common-lisp:defun put-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key records stream-name stream-arn)
   (common-lisp:declare (common-lisp:ignorable records stream-name stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-records-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-records))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun register-stream-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn consumer-name)
   (common-lisp:declare (common-lisp:ignorable stream-arn consumer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-stream-consumer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterStreamConsumer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-stream-consumer))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name tag-keys stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name tag-keys stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-from-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-tags-from-stream))
(common-lisp:progn
 (common-lisp:defun split-shard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-to-split
                     new-starting-hash-key stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-to-split new-starting-hash-key
     stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-split-shard-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SplitShard"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'split-shard))
(common-lisp:progn
 (common-lisp:defun start-stream-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name encryption-type key-id
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name encryption-type key-id stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-stream-encryption-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartStreamEncryption"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-stream-encryption))
(common-lisp:progn
 (common-lisp:defun stop-stream-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name encryption-type key-id
                     stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name encryption-type key-id stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-stream-encryption-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopStreamEncryption"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-stream-encryption))
(common-lisp:progn
 (common-lisp:defun subscribe-to-shard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key consumer-arn shard-id starting-position)
   (common-lisp:declare
    (common-lisp:ignorable consumer-arn shard-id starting-position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-subscribe-to-shard-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SubscribeToShard"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'subscribe-to-shard))
(common-lisp:progn
 (common-lisp:defun update-shard-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name target-shard-count
                     scaling-type stream-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-name target-shard-count scaling-type
     stream-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-shard-count-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateShardCount"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-shard-count))
(common-lisp:progn
 (common-lisp:defun update-stream-mode
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-arn stream-mode-details)
   (common-lisp:declare (common-lisp:ignorable stream-arn stream-mode-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stream-mode-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kinesis-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStreamMode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-stream-mode))
