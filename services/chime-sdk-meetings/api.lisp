;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/chime-sdk-meetings/api
  (:use)
  (:nicknames #:aws/chime-sdk-meetings)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/chime-sdk-meetings/api)
(common-lisp:progn
 (common-lisp:define-condition chime-sdk-meetings-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'chime-sdk-meetings-error))
(common-lisp:progn
 (common-lisp:defclass chime-sdk-meetings-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "chime-sdk-meetings"
                        :api-version "2021-07-15" :host-prefix "meetings-chime"
                        :signing-name "chime" :global-host common-lisp:nil))
 (common-lisp:export 'chime-sdk-meetings-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attendee common-lisp:nil
                       ((external-user-id :initarg :external-user-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor struct-shape-attendee-external-user-id
                         :shape "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attendee-id :initarg :attendee-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor struct-shape-attendee-attendee-id :shape
                         "GuidString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (join-token :initarg :join-token :initform
                         common-lisp:nil :type
                         (common-lisp:or join-token-string common-lisp:null)
                         :accessor struct-shape-attendee-join-token :shape
                         "JoinTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-capabilities
                                         common-lisp:null)
                         :accessor struct-shape-attendee-capabilities :shape
                         "AttendeeCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attendee
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attendee
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attendee 'make-attendee))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attendee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attendee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-user-id))
      (common-lisp:list
       (common-lisp:cons "ExternalUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee-id))
      (common-lisp:list
       (common-lisp:cons "AttendeeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-token))
      (common-lisp:list
       (common-lisp:cons "JoinToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attendee))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attendee-capabilities common-lisp:nil
                       ((audio :initarg :audio :initform
                         (common-lisp:error ":audio is required") :type
                         (common-lisp:or media-capabilities common-lisp:null)
                         :accessor struct-shape-attendee-capabilities-audio
                         :shape "MediaCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform
                         (common-lisp:error ":video is required") :type
                         (common-lisp:or media-capabilities common-lisp:null)
                         :accessor struct-shape-attendee-capabilities-video
                         :shape "MediaCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or media-capabilities common-lisp:null)
                         :accessor struct-shape-attendee-capabilities-content
                         :shape "MediaCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attendee-capabilities
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attendee-capabilities
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attendee-capabilities 'make-attendee-capabilities))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attendee-capabilities))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attendee-capabilities))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attendee-capabilities))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attendee-features common-lisp:nil
                       ((max-count :initarg :max-count :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-max common-lisp:null)
                         :accessor struct-shape-attendee-features-max-count
                         :shape "AttendeeMax" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attendee-features
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attendee-features
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attendee-features 'make-attendee-features))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attendee-features))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attendee-features))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attendee-features))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attendee-id-item common-lisp:nil
                       ((attendee-id :initarg :attendee-id :initform
                         (common-lisp:error ":attendee-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor struct-shape-attendee-id-item-attendee-id
                         :shape "GuidString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attendee-id-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attendee-id-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attendee-id-item 'make-attendee-id-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attendee-id-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attendee-id-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee-id))
      (common-lisp:list
       (common-lisp:cons "AttendeeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attendee-id-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attendee-ids-list ()
   '(trivial-types:proper-list attendee-id-item))
 (common-lisp:defun make-attendee-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attendee-id-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attendee-list () '(trivial-types:proper-list attendee))
 (common-lisp:defun make-attendee-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attendee))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attendee-max () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass audio-features common-lisp:nil
                       ((echo-reduction :initarg :echo-reduction :initform
                         common-lisp:nil :type
                         (common-lisp:or meeting-feature-status
                                         common-lisp:null)
                         :accessor struct-shape-audio-features-echo-reduction
                         :shape "MeetingFeatureStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-features
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-features
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio-features 'make-audio-features))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-features))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-features))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'echo-reduction))
      (common-lisp:list
       (common-lisp:cons "EchoReduction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-features))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       bad-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-code
                    'bad-request-exception-message
                    'bad-request-exception-request-id)))
(common-lisp:progn
 (common-lisp:deftype batch-create-attendee-error-list ()
   '(trivial-types:proper-list create-attendee-error))
 (common-lisp:defun make-batch-create-attendee-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-attendee-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-create-attendee-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-batch-create-attendee-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (attendees :initarg :attendees :initform
                         (common-lisp:error ":attendees is required") :type
                         (common-lisp:or create-attendee-request-item-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-attendee-request-attendees
                         :shape "CreateAttendeeRequestItemList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-attendee-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-attendee-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-attendee-request
                    'make-batch-create-attendee-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-attendee-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-attendee-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendees))
      (common-lisp:list
       (common-lisp:cons "Attendees"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-attendee-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-attendee-response common-lisp:nil
                       ((attendees :initarg :attendees :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-list common-lisp:null)
                         :accessor
                         struct-shape-batch-create-attendee-response-attendees
                         :shape "AttendeeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-create-attendee-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-attendee-response-errors
                         :shape "BatchCreateAttendeeErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-attendee-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-attendee-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-attendee-response
                    'make-batch-create-attendee-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-attendee-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-attendee-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendees))
      (common-lisp:list
       (common-lisp:cons "Attendees"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-attendee-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-attendee-capabilities-except-request
                       common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-batch-update-attendee-capabilities-except-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (excluded-attendee-ids :initarg :excluded-attendee-ids
                         :initform
                         (common-lisp:error
                          ":excluded-attendee-ids is required")
                         :type
                         (common-lisp:or attendee-ids-list common-lisp:null)
                         :accessor
                         struct-shape-batch-update-attendee-capabilities-except-request-excluded-attendee-ids
                         :shape "AttendeeIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capabilities :initarg :capabilities :initform
                         (common-lisp:error ":capabilities is required") :type
                         (common-lisp:or attendee-capabilities
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-attendee-capabilities-except-request-capabilities
                         :shape "AttendeeCapabilities" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-attendee-capabilities-except-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-attendee-capabilities-except-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-attendee-capabilities-except-request
                    'make-batch-update-attendee-capabilities-except-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-attendee-capabilities-except-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-attendee-capabilities-except-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-attendee-ids))
      (common-lisp:list
       (common-lisp:cons "ExcludedAttendeeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-attendee-capabilities-except-request))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       conflict-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-message
                    'conflict-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass content-features common-lisp:nil
                       ((max-resolution :initarg :max-resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or content-resolution common-lisp:null)
                         :accessor struct-shape-content-features-max-resolution
                         :shape "ContentResolution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content-features
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content-features
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'content-features 'make-content-features))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-features))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-features))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-resolution))
      (common-lisp:list
       (common-lisp:cons "MaxResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-features))
   common-lisp:nil))
(common-lisp:deftype content-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-attendee-error common-lisp:nil
                       ((external-user-id :initarg :external-user-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-error-external-user-id
                         :shape "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-attendee-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-attendee-error-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-attendee-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-attendee-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-attendee-error 'make-create-attendee-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-user-id))
      (common-lisp:list
       (common-lisp:cons "ExternalUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-attendee-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-request-meeting-id :shape
                         "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (external-user-id :initarg :external-user-id :initform
                         (common-lisp:error ":external-user-id is required")
                         :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-request-external-user-id
                         :shape "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-capabilities
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-request-capabilities
                         :shape "AttendeeCapabilities" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-attendee-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-attendee-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-attendee-request 'make-create-attendee-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-user-id))
      (common-lisp:list
       (common-lisp:cons "ExternalUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-attendee-request-item common-lisp:nil
                       ((external-user-id :initarg :external-user-id :initform
                         (common-lisp:error ":external-user-id is required")
                         :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-request-item-external-user-id
                         :shape "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-capabilities
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-request-item-capabilities
                         :shape "AttendeeCapabilities" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-attendee-request-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-attendee-request-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-attendee-request-item
                    'make-create-attendee-request-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-request-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-request-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-user-id))
      (common-lisp:list
       (common-lisp:cons "ExternalUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-request-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-attendee-request-item-list ()
   '(trivial-types:proper-list create-attendee-request-item))
 (common-lisp:defun make-create-attendee-request-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-attendee-request-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-attendee-response common-lisp:nil
                       ((attendee :initarg :attendee :initform common-lisp:nil
                         :type (common-lisp:or attendee common-lisp:null)
                         :accessor
                         struct-shape-create-attendee-response-attendee :shape
                         "Attendee" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-attendee-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-attendee-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-attendee-response 'make-create-attendee-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee))
      (common-lisp:list
       (common-lisp:cons "Attendee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-attendee-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-meeting-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-region :initarg :media-region :initform
                         (common-lisp:error ":media-region is required") :type
                         (common-lisp:or media-region common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-media-region
                         :shape "MediaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-host-id :initarg :meeting-host-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-meeting-host-id
                         :shape "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-meeting-id :initarg :external-meeting-id
                         :initform
                         (common-lisp:error ":external-meeting-id is required")
                         :type
                         (common-lisp:or external-meeting-id common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-external-meeting-id
                         :shape "ExternalMeetingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notifications-configuration :initarg
                         :notifications-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or notifications-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-notifications-configuration
                         :shape "NotificationsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (meeting-features :initarg :meeting-features :initform
                         common-lisp:nil :type
                         (common-lisp:or meeting-features-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-meeting-features
                         :shape "MeetingFeaturesConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (primary-meeting-id :initarg :primary-meeting-id
                         :initform common-lisp:nil :type
                         (common-lisp:or primary-meeting-id common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-primary-meeting-id
                         :shape "PrimaryMeetingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-ids :initarg :tenant-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-id-list common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-request-tenant-ids :shape
                         "TenantIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-meeting-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-meeting-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-meeting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-meeting-request 'make-create-meeting-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-region))
      (common-lisp:list
       (common-lisp:cons "MediaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-host-id))
      (common-lisp:list
       (common-lisp:cons "MeetingHostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-meeting-id))
      (common-lisp:list
       (common-lisp:cons "ExternalMeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notifications-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-features))
      (common-lisp:list
       (common-lisp:cons "MeetingFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-meeting-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryMeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-ids))
      (common-lisp:list
       (common-lisp:cons "TenantIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-meeting-response common-lisp:nil
                       ((meeting :initarg :meeting :initform common-lisp:nil
                         :type (common-lisp:or meeting common-lisp:null)
                         :accessor struct-shape-create-meeting-response-meeting
                         :shape "Meeting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-meeting-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-meeting-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-meeting-response 'make-create-meeting-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting))
      (common-lisp:list
       (common-lisp:cons "Meeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-meeting-with-attendees-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-region :initarg :media-region :initform
                         (common-lisp:error ":media-region is required") :type
                         (common-lisp:or media-region common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-media-region
                         :shape "MediaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-host-id :initarg :meeting-host-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-meeting-host-id
                         :shape "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-meeting-id :initarg :external-meeting-id
                         :initform
                         (common-lisp:error ":external-meeting-id is required")
                         :type
                         (common-lisp:or external-meeting-id common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-external-meeting-id
                         :shape "ExternalMeetingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-features :initarg :meeting-features :initform
                         common-lisp:nil :type
                         (common-lisp:or meeting-features-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-meeting-features
                         :shape "MeetingFeaturesConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (notifications-configuration :initarg
                         :notifications-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or notifications-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-notifications-configuration
                         :shape "NotificationsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attendees :initarg :attendees :initform
                         (common-lisp:error ":attendees is required") :type
                         (common-lisp:or
                          create-meeting-with-attendees-request-item-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-attendees
                         :shape "CreateMeetingWithAttendeesRequestItemList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (primary-meeting-id :initarg :primary-meeting-id
                         :initform common-lisp:nil :type
                         (common-lisp:or primary-meeting-id common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-primary-meeting-id
                         :shape "PrimaryMeetingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-ids :initarg :tenant-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-id-list common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-request-tenant-ids
                         :shape "TenantIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-meeting-with-attendees-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-meeting-with-attendees-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-meeting-with-attendees-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-meeting-with-attendees-request
                    'make-create-meeting-with-attendees-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-with-attendees-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-with-attendees-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-region))
      (common-lisp:list
       (common-lisp:cons "MediaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-host-id))
      (common-lisp:list
       (common-lisp:cons "MeetingHostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-meeting-id))
      (common-lisp:list
       (common-lisp:cons "ExternalMeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-features))
      (common-lisp:list
       (common-lisp:cons "MeetingFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notifications-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendees))
      (common-lisp:list
       (common-lisp:cons "Attendees"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-meeting-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryMeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-ids))
      (common-lisp:list
       (common-lisp:cons "TenantIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-with-attendees-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-meeting-with-attendees-request-item-list ()
   '(trivial-types:proper-list create-attendee-request-item))
 (common-lisp:defun make-create-meeting-with-attendees-request-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-attendee-request-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-meeting-with-attendees-response common-lisp:nil
                       ((meeting :initarg :meeting :initform common-lisp:nil
                         :type (common-lisp:or meeting common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-response-meeting
                         :shape "Meeting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attendees :initarg :attendees :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-list common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-response-attendees
                         :shape "AttendeeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-create-attendee-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-with-attendees-response-errors
                         :shape "BatchCreateAttendeeErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-meeting-with-attendees-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-meeting-with-attendees-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-meeting-with-attendees-response
                    'make-create-meeting-with-attendees-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-with-attendees-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-with-attendees-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting))
      (common-lisp:list
       (common-lisp:cons "Meeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendees))
      (common-lisp:list
       (common-lisp:cons "Attendees"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-with-attendees-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-attendee-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-delete-attendee-request-meeting-id :shape
                         "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (attendee-id :initarg :attendee-id :initform
                         (common-lisp:error ":attendee-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-delete-attendee-request-attendee-id
                         :shape "GuidString" :location "uri" :location-name
                         "AttendeeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-attendee-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attendee-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-attendee-request 'make-delete-attendee-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attendee-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attendee-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attendee-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-meeting-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-delete-meeting-request-meeting-id :shape
                         "GuidString" :location "uri" :location-name
                         "MeetingId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-meeting-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-meeting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-meeting-request 'make-delete-meeting-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-meeting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-meeting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-meeting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-transcribe-medical-settings common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or transcribe-medical-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-medical-settings-language-code
                         :shape "TranscribeMedicalLanguageCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (specialty :initarg :specialty :initform
                         (common-lisp:error ":specialty is required") :type
                         (common-lisp:or transcribe-medical-specialty
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-medical-settings-specialty
                         :shape "TranscribeMedicalSpecialty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or transcribe-medical-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-medical-settings-type
                         :shape "TranscribeMedicalType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-engine-transcribe-medical-settings-vocabulary-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or transcribe-medical-region
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-medical-settings-region
                         :shape "TranscribeMedicalRegion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          transcribe-medical-content-identification-type
                          common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-medical-settings-content-identification-type
                         :shape "TranscribeMedicalContentIdentificationType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-transcribe-medical-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'engine-transcribe-medical-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'engine-transcribe-medical-settings
                    'make-engine-transcribe-medical-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          engine-transcribe-medical-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          engine-transcribe-medical-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          engine-transcribe-medical-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-transcribe-settings common-lisp:nil
                       ((language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or transcribe-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-language-code
                         :shape "TranscribeLanguageCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-method :initarg
                         :vocabulary-filter-method :initform common-lisp:nil
                         :type
                         (common-lisp:or transcribe-vocabulary-filter-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-vocabulary-filter-method
                         :shape "TranscribeVocabularyFilterMethod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-filter-name :initarg
                         :vocabulary-filter-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-vocabulary-filter-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vocabulary-name :initarg :vocabulary-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-engine-transcribe-settings-vocabulary-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or transcribe-region common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-region :shape
                         "TranscribeRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-partial-results-stabilization :initarg
                         :enable-partial-results-stabilization :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-engine-transcribe-settings-enable-partial-results-stabilization
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partial-results-stability :initarg
                         :partial-results-stability :initform common-lisp:nil
                         :type
                         (common-lisp:or transcribe-partial-results-stability
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-partial-results-stability
                         :shape "TranscribePartialResultsStability" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-identification-type :initarg
                         :content-identification-type :initform common-lisp:nil
                         :type
                         (common-lisp:or transcribe-content-identification-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-content-identification-type
                         :shape "TranscribeContentIdentificationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-redaction-type :initarg
                         :content-redaction-type :initform common-lisp:nil
                         :type
                         (common-lisp:or transcribe-content-redaction-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-content-redaction-type
                         :shape "TranscribeContentRedactionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pii-entity-types :initarg :pii-entity-types :initform
                         common-lisp:nil :type
                         (common-lisp:or transcribe-pii-entity-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-pii-entity-types
                         :shape "TranscribePiiEntityTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (language-model-name :initarg :language-model-name
                         :initform common-lisp:nil :type
                         (common-lisp:or transcribe-language-model-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-language-model-name
                         :shape "TranscribeLanguageModelName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identify-language :initarg :identify-language
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-engine-transcribe-settings-identify-language
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-options :initarg :language-options :initform
                         common-lisp:nil :type
                         (common-lisp:or transcribe-language-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-language-options
                         :shape "TranscribeLanguageOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-language :initarg :preferred-language
                         :initform common-lisp:nil :type
                         (common-lisp:or transcribe-language-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-preferred-language
                         :shape "TranscribeLanguageCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vocabulary-names :initarg :vocabulary-names :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          transcribe-vocabulary-names-or-filter-names-string
                          common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-vocabulary-names
                         :shape "TranscribeVocabularyNamesOrFilterNamesString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vocabulary-filter-names :initarg
                         :vocabulary-filter-names :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          transcribe-vocabulary-names-or-filter-names-string
                          common-lisp:null)
                         :accessor
                         struct-shape-engine-transcribe-settings-vocabulary-filter-names
                         :shape "TranscribeVocabularyNamesOrFilterNamesString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-transcribe-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'engine-transcribe-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'engine-transcribe-settings
                    'make-engine-transcribe-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          engine-transcribe-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          engine-transcribe-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:list
       (common-lisp:cons "EnablePartialResultsStabilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:list
       (common-lisp:cons "PartialResultsStability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:list
       (common-lisp:cons "ContentRedactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:list
       (common-lisp:cons "PiiEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:list
       (common-lisp:cons "PreferredLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-names))
      (common-lisp:list
       (common-lisp:cons "VocabularyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-names))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          engine-transcribe-settings))
   common-lisp:nil))
(common-lisp:deftype external-meeting-id () 'common-lisp:string)
(common-lisp:deftype external-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       forbidden-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       forbidden-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-code
                    'forbidden-exception-message
                    'forbidden-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass get-attendee-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor struct-shape-get-attendee-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (attendee-id :initarg :attendee-id :initform
                         (common-lisp:error ":attendee-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-get-attendee-request-attendee-id :shape
                         "GuidString" :location "uri" :location-name
                         "AttendeeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-attendee-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-attendee-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-attendee-request 'make-get-attendee-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-attendee-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-attendee-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-attendee-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-attendee-response common-lisp:nil
                       ((attendee :initarg :attendee :initform common-lisp:nil
                         :type (common-lisp:or attendee common-lisp:null)
                         :accessor struct-shape-get-attendee-response-attendee
                         :shape "Attendee" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-attendee-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-attendee-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-attendee-response 'make-get-attendee-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-attendee-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-attendee-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee))
      (common-lisp:list
       (common-lisp:cons "Attendee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-attendee-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-meeting-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor struct-shape-get-meeting-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-meeting-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-meeting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-meeting-request 'make-get-meeting-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-meeting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-meeting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-meeting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-meeting-response common-lisp:nil
                       ((meeting :initarg :meeting :initform common-lisp:nil
                         :type (common-lisp:or meeting common-lisp:null)
                         :accessor struct-shape-get-meeting-response-meeting
                         :shape "Meeting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-meeting-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-meeting-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-meeting-response 'make-get-meeting-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-meeting-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-meeting-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting))
      (common-lisp:list
       (common-lisp:cons "Meeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-meeting-response))
   common-lisp:nil))
(common-lisp:deftype guid-string () 'common-lisp:string)
(common-lisp:deftype join-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-code
                    'limit-exceeded-exception-message
                    'limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass list-attendees-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-list-attendees-request-meeting-id :shape
                         "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-attendees-request-next-token :shape
                         "String" :location "querystring" :location-name
                         "next-token")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-max common-lisp:null) :accessor
                         struct-shape-list-attendees-request-max-results :shape
                         "ResultMax" :location "querystring" :location-name
                         "max-results"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attendees-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-attendees-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attendees-request 'make-list-attendees-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attendees-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attendees-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attendees-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attendees-response common-lisp:nil
                       ((attendees :initarg :attendees :initform
                         common-lisp:nil :type
                         (common-lisp:or attendee-list common-lisp:null)
                         :accessor
                         struct-shape-list-attendees-response-attendees :shape
                         "AttendeeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-attendees-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attendees-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-attendees-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attendees-response 'make-list-attendees-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attendees-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attendees-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendees))
      (common-lisp:list
       (common-lisp:cons "Attendees"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attendees-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "querystring"
                         :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype media-capabilities () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass media-placement common-lisp:nil
                       ((audio-host-url :initarg :audio-host-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-audio-host-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (audio-fallback-url :initarg :audio-fallback-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-audio-fallback-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signaling-url :initarg :signaling-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-signaling-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (turn-control-url :initarg :turn-control-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-turn-control-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (screen-data-url :initarg :screen-data-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-screen-data-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (screen-viewing-url :initarg :screen-viewing-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-screen-viewing-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (screen-sharing-url :initarg :screen-sharing-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-screen-sharing-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-ingestion-url :initarg :event-ingestion-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-media-placement-event-ingestion-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-placement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-placement
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'media-placement 'make-media-placement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-placement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-placement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-host-url))
      (common-lisp:list
       (common-lisp:cons "AudioHostUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-fallback-url))
      (common-lisp:list
       (common-lisp:cons "AudioFallbackUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signaling-url))
      (common-lisp:list
       (common-lisp:cons "SignalingUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turn-control-url))
      (common-lisp:list
       (common-lisp:cons "TurnControlUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'screen-data-url))
      (common-lisp:list
       (common-lisp:cons "ScreenDataUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'screen-viewing-url))
      (common-lisp:list
       (common-lisp:cons "ScreenViewingUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'screen-sharing-url))
      (common-lisp:list
       (common-lisp:cons "ScreenSharingUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-ingestion-url))
      (common-lisp:list
       (common-lisp:cons "EventIngestionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-placement))
   common-lisp:nil))
(common-lisp:deftype media-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass meeting common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor struct-shape-meeting-meeting-id :shape
                         "GuidString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (meeting-host-id :initarg :meeting-host-id :initform
                         common-lisp:nil :type
                         (common-lisp:or external-user-id common-lisp:null)
                         :accessor struct-shape-meeting-meeting-host-id :shape
                         "ExternalUserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-meeting-id :initarg :external-meeting-id
                         :initform common-lisp:nil :type
                         (common-lisp:or external-meeting-id common-lisp:null)
                         :accessor struct-shape-meeting-external-meeting-id
                         :shape "ExternalMeetingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-region :initarg :media-region :initform
                         common-lisp:nil :type
                         (common-lisp:or media-region common-lisp:null)
                         :accessor struct-shape-meeting-media-region :shape
                         "MediaRegion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (media-placement :initarg :media-placement :initform
                         common-lisp:nil :type
                         (common-lisp:or media-placement common-lisp:null)
                         :accessor struct-shape-meeting-media-placement :shape
                         "MediaPlacement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-features :initarg :meeting-features :initform
                         common-lisp:nil :type
                         (common-lisp:or meeting-features-configuration
                                         common-lisp:null)
                         :accessor struct-shape-meeting-meeting-features :shape
                         "MeetingFeaturesConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (primary-meeting-id :initarg :primary-meeting-id
                         :initform common-lisp:nil :type
                         (common-lisp:or primary-meeting-id common-lisp:null)
                         :accessor struct-shape-meeting-primary-meeting-id
                         :shape "PrimaryMeetingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenant-ids :initarg :tenant-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or tenant-id-list common-lisp:null)
                         :accessor struct-shape-meeting-tenant-ids :shape
                         "TenantIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-arn :initarg :meeting-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-meeting-meeting-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-meeting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'meeting
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'meeting 'make-meeting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input meeting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input meeting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-id))
      (common-lisp:list
       (common-lisp:cons "MeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-host-id))
      (common-lisp:list
       (common-lisp:cons "MeetingHostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-meeting-id))
      (common-lisp:list
       (common-lisp:cons "ExternalMeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-region))
      (common-lisp:list
       (common-lisp:cons "MediaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-placement))
      (common-lisp:list
       (common-lisp:cons "MediaPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-features))
      (common-lisp:list
       (common-lisp:cons "MeetingFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-meeting-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryMeetingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenant-ids))
      (common-lisp:list
       (common-lisp:cons "TenantIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-arn))
      (common-lisp:list
       (common-lisp:cons "MeetingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input meeting))
   common-lisp:nil))
(common-lisp:deftype meeting-feature-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass meeting-features-configuration common-lisp:nil
                       ((audio :initarg :audio :initform common-lisp:nil :type
                         (common-lisp:or audio-features common-lisp:null)
                         :accessor
                         struct-shape-meeting-features-configuration-audio
                         :shape "AudioFeatures" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (video :initarg :video :initform common-lisp:nil :type
                         (common-lisp:or video-features common-lisp:null)
                         :accessor
                         struct-shape-meeting-features-configuration-video
                         :shape "VideoFeatures" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or content-features common-lisp:null)
                         :accessor
                         struct-shape-meeting-features-configuration-content
                         :shape "ContentFeatures" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attendee :initarg :attendee :initform common-lisp:nil
                         :type
                         (common-lisp:or attendee-features common-lisp:null)
                         :accessor
                         struct-shape-meeting-features-configuration-attendee
                         :shape "AttendeeFeatures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-meeting-features-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'meeting-features-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'meeting-features-configuration
                    'make-meeting-features-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          meeting-features-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          meeting-features-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee))
      (common-lisp:list
       (common-lisp:cons "Attendee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          meeting-features-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-code
                    'not-found-exception-message
                    'not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass notifications-configuration common-lisp:nil
                       ((lambda-function-arn :initarg :lambda-function-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-notifications-configuration-lambda-function-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-notifications-configuration-sns-topic-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sqs-queue-arn :initarg :sqs-queue-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-notifications-configuration-sqs-queue-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notifications-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notifications-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notifications-configuration
                    'make-notifications-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notifications-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notifications-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-queue-arn))
      (common-lisp:list
       (common-lisp:cons "SqsQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notifications-configuration))
   common-lisp:nil))
(common-lisp:deftype primary-meeting-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-not-found-exception-request-id)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-message
                    'resource-not-found-exception-request-id
                    'resource-not-found-exception-resource-name)))
(common-lisp:deftype result-max () 'common-lisp:integer)
(common-lisp:deftype retry-after-seconds () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-failure-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-failure-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception 'service-failure-exception-code
                    'service-failure-exception-message
                    'service-failure-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-unavailable-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-unavailable-exception-request-id)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader
       service-unavailable-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-code
                    'service-unavailable-exception-message
                    'service-unavailable-exception-request-id
                    'service-unavailable-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass start-meeting-transcription-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-start-meeting-transcription-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (transcription-configuration :initarg
                         :transcription-configuration :initform
                         (common-lisp:error
                          ":transcription-configuration is required")
                         :type
                         (common-lisp:or transcription-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-meeting-transcription-request-transcription-configuration
                         :shape "TranscriptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-meeting-transcription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-meeting-transcription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-meeting-transcription-request
                    'make-start-meeting-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-meeting-transcription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-meeting-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-configuration))
      (common-lisp:list
       (common-lisp:cons "TranscriptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-meeting-transcription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-meeting-transcription-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-stop-meeting-transcription-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-meeting-transcription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-meeting-transcription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-meeting-transcription-request
                    'make-stop-meeting-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-meeting-transcription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-meeting-transcription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-meeting-transcription-request))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tenant-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tenant-id-list () '(trivial-types:proper-list tenant-id))
 (common-lisp:defun make-tenant-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tenant-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttling-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttling-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-code
                    'throttling-exception-message
                    'throttling-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       too-many-tags-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       too-many-tags-exception-request-id)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-code
                    'too-many-tags-exception-message
                    'too-many-tags-exception-request-id
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype transcribe-content-identification-type ()
  'common-lisp:string)
(common-lisp:deftype transcribe-content-redaction-type () 'common-lisp:string)
(common-lisp:deftype transcribe-language-code () 'common-lisp:string)
(common-lisp:deftype transcribe-language-model-name () 'common-lisp:string)
(common-lisp:deftype transcribe-language-options () 'common-lisp:string)
(common-lisp:deftype transcribe-medical-content-identification-type ()
  'common-lisp:string)
(common-lisp:deftype transcribe-medical-language-code () 'common-lisp:string)
(common-lisp:deftype transcribe-medical-region () 'common-lisp:string)
(common-lisp:deftype transcribe-medical-specialty () 'common-lisp:string)
(common-lisp:deftype transcribe-medical-type () 'common-lisp:string)
(common-lisp:deftype transcribe-partial-results-stability ()
  'common-lisp:string)
(common-lisp:deftype transcribe-pii-entity-types () 'common-lisp:string)
(common-lisp:deftype transcribe-region () 'common-lisp:string)
(common-lisp:deftype transcribe-vocabulary-filter-method () 'common-lisp:string)
(common-lisp:deftype transcribe-vocabulary-names-or-filter-names-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcription-configuration common-lisp:nil
                       ((engine-transcribe-settings :initarg
                         :engine-transcribe-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or engine-transcribe-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-configuration-engine-transcribe-settings
                         :shape "EngineTranscribeSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-transcribe-medical-settings :initarg
                         :engine-transcribe-medical-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-transcribe-medical-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcription-configuration-engine-transcribe-medical-settings
                         :shape "EngineTranscribeMedicalSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcription-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcription-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcription-configuration
                    'make-transcription-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcription-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcription-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-transcribe-settings))
      (common-lisp:list
       (common-lisp:cons "EngineTranscribeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-transcribe-medical-settings))
      (common-lisp:list
       (common-lisp:cons "EngineTranscribeMedicalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcription-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unauthorized-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unauthorized-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-code
                    'unauthorized-exception-message
                    'unauthorized-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (chime-sdk-meetings-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unprocessable-entity-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       unprocessable-entity-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unprocessable-entity-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-code
                    'unprocessable-entity-exception-message
                    'unprocessable-entity-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-attendee-capabilities-request common-lisp:nil
                       ((meeting-id :initarg :meeting-id :initform
                         (common-lisp:error ":meeting-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-update-attendee-capabilities-request-meeting-id
                         :shape "GuidString" :location "uri" :location-name
                         "MeetingId")
                        (attendee-id :initarg :attendee-id :initform
                         (common-lisp:error ":attendee-id is required") :type
                         (common-lisp:or guid-string common-lisp:null)
                         :accessor
                         struct-shape-update-attendee-capabilities-request-attendee-id
                         :shape "GuidString" :location "uri" :location-name
                         "AttendeeId")
                        (capabilities :initarg :capabilities :initform
                         (common-lisp:error ":capabilities is required") :type
                         (common-lisp:or attendee-capabilities
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-attendee-capabilities-request-capabilities
                         :shape "AttendeeCapabilities" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-attendee-capabilities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-attendee-capabilities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-attendee-capabilities-request
                    'make-update-attendee-capabilities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-attendee-capabilities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-attendee-capabilities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-attendee-capabilities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-attendee-capabilities-response common-lisp:nil
                       ((attendee :initarg :attendee :initform common-lisp:nil
                         :type (common-lisp:or attendee common-lisp:null)
                         :accessor
                         struct-shape-update-attendee-capabilities-response-attendee
                         :shape "Attendee" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-attendee-capabilities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-attendee-capabilities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-attendee-capabilities-response
                    'make-update-attendee-capabilities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-attendee-capabilities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-attendee-capabilities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee))
      (common-lisp:list
       (common-lisp:cons "Attendee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-attendee-capabilities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-features common-lisp:nil
                       ((max-resolution :initarg :max-resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or video-resolution common-lisp:null)
                         :accessor struct-shape-video-features-max-resolution
                         :shape "VideoResolution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-video-features
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'video-features
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'video-features 'make-video-features))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-features))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-features))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-resolution))
      (common-lisp:list
       (common-lisp:cons "MaxResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-features))
   common-lisp:nil))
(common-lisp:deftype video-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-create-attendee
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id attendees)
   (common-lisp:declare (common-lisp:ignorable meeting-id attendees))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-attendee-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/meetings/~A/attendees?operation=batch-create"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "BatchCreateAttendee"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-create-attendee))
(common-lisp:progn
 (common-lisp:defun batch-update-attendee-capabilities-except
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id excluded-attendee-ids
                     capabilities)
   (common-lisp:declare
    (common-lisp:ignorable meeting-id excluded-attendee-ids capabilities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-attendee-capabilities-except-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/meetings/~A/attendees/capabilities?operation=batch-update-except"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "BatchUpdateAttendeeCapabilitiesExcept"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-update-attendee-capabilities-except))
(common-lisp:progn
 (common-lisp:defun create-attendee
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id external-user-id capabilities)
   (common-lisp:declare
    (common-lisp:ignorable meeting-id external-user-id capabilities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-attendee-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/meetings/~A/attendees"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "CreateAttendee"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-attendee))
(common-lisp:progn
 (common-lisp:defun create-meeting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token media-region
                     meeting-host-id external-meeting-id
                     notifications-configuration meeting-features
                     primary-meeting-id tenant-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token media-region meeting-host-id
     external-meeting-id notifications-configuration meeting-features
     primary-meeting-id tenant-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-meeting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        "/meetings" "CreateMeeting"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-meeting))
(common-lisp:progn
 (common-lisp:defun create-meeting-with-attendees
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token media-region
                     meeting-host-id external-meeting-id meeting-features
                     notifications-configuration attendees primary-meeting-id
                     tenant-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token media-region meeting-host-id
     external-meeting-id meeting-features notifications-configuration attendees
     primary-meeting-id tenant-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-meeting-with-attendees-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        "/meetings?operation=create-attendees" "CreateMeetingWithAttendees"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-meeting-with-attendees))
(common-lisp:progn
 (common-lisp:defun delete-attendee
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id attendee-id)
   (common-lisp:declare (common-lisp:ignorable meeting-id attendee-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-attendee-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/meetings/~A/attendees/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'attendee-id))))
        "DeleteAttendee"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-attendee))
(common-lisp:progn
 (common-lisp:defun delete-meeting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id)
   (common-lisp:declare (common-lisp:ignorable meeting-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-meeting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/meetings/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "DeleteMeeting"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-meeting))
(common-lisp:progn
 (common-lisp:defun get-attendee
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id attendee-id)
   (common-lisp:declare (common-lisp:ignorable meeting-id attendee-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-attendee-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/meetings/~A/attendees/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'attendee-id))))
        "GetAttendee"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-attendee))
(common-lisp:progn
 (common-lisp:defun get-meeting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id)
   (common-lisp:declare (common-lisp:ignorable meeting-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-meeting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/meetings/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "GetMeeting"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-meeting))
(common-lisp:progn
 (common-lisp:defun list-attendees
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable meeting-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attendees-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/meetings/~A/attendees"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "ListAttendees"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-attendees))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "GET"
        "/tags" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-meeting-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id transcription-configuration)
   (common-lisp:declare
    (common-lisp:ignorable meeting-id transcription-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-meeting-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/meetings/~A/transcription?operation=start"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "StartMeetingTranscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-meeting-transcription))
(common-lisp:progn
 (common-lisp:defun stop-meeting-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id)
   (common-lisp:declare (common-lisp:ignorable meeting-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-meeting-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/meetings/~A/transcription?operation=stop"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))))
        "StopMeetingTranscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-meeting-transcription))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        "/tags?operation=tag-resource" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "POST"
        "/tags?operation=untag-resource" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-attendee-capabilities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key meeting-id attendee-id capabilities)
   (common-lisp:declare
    (common-lisp:ignorable meeting-id attendee-id capabilities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-attendee-capabilities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-meetings-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/meetings/~A/attendees/~A/capabilities"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'meeting-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'attendee-id))))
        "UpdateAttendeeCapabilities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-attendee-capabilities))
