;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appconfig/api
  (:use)
  (:nicknames #:aws/appconfig)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appconfig/api)
(common-lisp:progn
 (common-lisp:define-condition appconfig-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appconfig-error))
(common-lisp:progn
 (common-lisp:defclass appconfig-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "appconfig" :api-version
                        "2019-10-09" :host-prefix "appconfig" :signing-name
                        "appconfig" :global-host common-lisp:nil))
 (common-lisp:export 'appconfig-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("PayloadTooLargeException" . payload-too-large-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-action-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-action-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-action-uri :shape "Uri" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-action-role-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-invocation common-lisp:nil
                       ((extension-identifier :initarg :extension-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-action-invocation-extension-identifier
                         :shape "Identifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-action-invocation-action-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-action-invocation-uri :shape "Uri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-action-invocation-role-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-action-invocation-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-action-invocation-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (invocation-id :initarg :invocation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-action-invocation-invocation-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action-invocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action-invocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'action-invocation 'make-action-invocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-invocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-invocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extension-identifier))
      (common-lisp:list
       (common-lisp:cons "ExtensionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-id))
      (common-lisp:list
       (common-lisp:cons "InvocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-invocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-invocations ()
   '(trivial-types:proper-list action-invocation))
 (common-lisp:defun make-action-invocations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-invocation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype actions-map () 'common-lisp:hash-table)
 (common-lisp:defun make-actions-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-application-id :shape "Id" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-application-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-application-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-list ()
   '(trivial-types:proper-list application))
 (common-lisp:defun make-application-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass applications common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or application-list common-lisp:null)
                         :accessor struct-shape-applications-items :shape
                         "ApplicationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-applications-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-applications
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'applications
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'applications 'make-applications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input applications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input applications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input applications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass applied-extension common-lisp:nil
                       ((extension-id :initarg :extension-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-applied-extension-extension-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (extension-association-id :initarg
                         :extension-association-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-applied-extension-extension-association-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-applied-extension-version-number :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-value-map common-lisp:null)
                         :accessor struct-shape-applied-extension-parameters
                         :shape "ParameterValueMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-applied-extension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'applied-extension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'applied-extension 'make-applied-extension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input applied-extension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input applied-extension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension-id))
      (common-lisp:list
       (common-lisp:cons "ExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extension-association-id))
      (common-lisp:list
       (common-lisp:cons "ExtensionAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input applied-extension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype applied-extensions ()
   '(trivial-types:proper-list applied-extension))
 (common-lisp:defun make-applied-extensions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list applied-extension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bad-request-details common-lisp:nil
                       ((invalid-configuration :initarg :invalid-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or invalid-configuration-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-bad-request-details-invalid-configuration
                         :shape "InvalidConfigurationDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bad-request-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bad-request-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bad-request-details 'make-bad-request-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bad-request-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bad-request-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-configuration))
      (common-lisp:list
       (common-lisp:cons "InvalidConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bad-request-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (appconfig-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       bad-request-exception-reason)
      (details :initarg :details :initform common-lisp:nil :reader
       bad-request-exception-details)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-reason
                    'bad-request-exception-details)))
(common-lisp:deftype bad-request-reason () 'common-lisp:string)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bytes-measure () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-configuration-content :shape "Blob"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-version :initarg :configuration-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-configuration-configuration-version
                         :shape "Version" :location "header" :location-name
                         "Configuration-Version")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configuration-content-type :shape
                         "String" :location "header" :location-name
                         "Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-version))
      (common-lisp:cons "Configuration-Version"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass configuration-profile common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-configuration-profile-application-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-configuration-profile-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or long-name common-lisp:null) :accessor
                         struct-shape-configuration-profile-name :shape
                         "LongName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-configuration-profile-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location-uri :initarg :location-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-configuration-profile-location-uri :shape
                         "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retrieval-role-arn :initarg :retrieval-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-configuration-profile-retrieval-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validators :initarg :validators :initform
                         common-lisp:nil :type
                         (common-lisp:or validator-list common-lisp:null)
                         :accessor
                         struct-shape-configuration-profile-validators :shape
                         "ValidatorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or configuration-profile-type
                                         common-lisp:null)
                         :accessor struct-shape-configuration-profile-type
                         :shape "ConfigurationProfileType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-configuration-profile-kms-key-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-identifier common-lisp:null)
                         :accessor
                         struct-shape-configuration-profile-kms-key-identifier
                         :shape "KmsKeyIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-profile 'make-configuration-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieval-role-arn))
      (common-lisp:list
       (common-lisp:cons "RetrievalRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validators))
      (common-lisp:list
       (common-lisp:cons "Validators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "KmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configuration-profile-summary common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-configuration-profile-summary-application-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-configuration-profile-summary-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or long-name common-lisp:null) :accessor
                         struct-shape-configuration-profile-summary-name :shape
                         "LongName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (location-uri :initarg :location-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-configuration-profile-summary-location-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validator-types :initarg :validator-types :initform
                         common-lisp:nil :type
                         (common-lisp:or validator-type-list common-lisp:null)
                         :accessor
                         struct-shape-configuration-profile-summary-validator-types
                         :shape "ValidatorTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or configuration-profile-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-profile-summary-type :shape
                         "ConfigurationProfileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-profile-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-profile-summary
                    'make-configuration-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validator-types))
      (common-lisp:list
       (common-lisp:cons "ValidatorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-profile-summary-list ()
   '(trivial-types:proper-list configuration-profile-summary))
 (common-lisp:defun make-configuration-profile-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-profile-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-profiles common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or configuration-profile-summary-list
                                         common-lisp:null)
                         :accessor struct-shape-configuration-profiles-items
                         :shape "ConfigurationProfileSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-configuration-profiles-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-profiles
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-profiles
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-profiles 'make-configuration-profiles))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profiles))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profiles))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-profiles))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (appconfig-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-application-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-application-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-profile-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-configuration-profile-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or long-name common-lisp:null) :accessor
                         struct-shape-create-configuration-profile-request-name
                         :shape "LongName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-profile-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location-uri :initarg :location-uri :initform
                         (common-lisp:error ":location-uri is required") :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-create-configuration-profile-request-location-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retrieval-role-arn :initarg :retrieval-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-configuration-profile-request-retrieval-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validators :initarg :validators :initform
                         common-lisp:nil :type
                         (common-lisp:or validator-list common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-profile-request-validators
                         :shape "ValidatorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-configuration-profile-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or configuration-profile-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-profile-request-type
                         :shape "ConfigurationProfileType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-profile-request-kms-key-identifier
                         :shape "KmsKeyIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-profile-request
                    'make-create-configuration-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieval-role-arn))
      (common-lisp:list
       (common-lisp:cons "RetrievalRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validators))
      (common-lisp:list
       (common-lisp:cons "Validators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "KmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-strategy-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-deployment-strategy-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-strategy-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-duration-in-minutes :initarg
                         :deployment-duration-in-minutes :initform
                         (common-lisp:error
                          ":deployment-duration-in-minutes is required")
                         :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-strategy-request-deployment-duration-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (final-bake-time-in-minutes :initarg
                         :final-bake-time-in-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-strategy-request-final-bake-time-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (growth-factor :initarg :growth-factor :initform
                         (common-lisp:error ":growth-factor is required") :type
                         (common-lisp:or growth-factor common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-strategy-request-growth-factor
                         :shape "GrowthFactor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (growth-type :initarg :growth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or growth-type common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-strategy-request-growth-type
                         :shape "GrowthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicate-to :initarg :replicate-to :initform
                         common-lisp:nil :type
                         (common-lisp:or replicate-to common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-strategy-request-replicate-to
                         :shape "ReplicateTo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-deployment-strategy-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-deployment-strategy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-strategy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-deployment-strategy-request
                    'make-create-deployment-strategy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-strategy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-strategy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DeploymentDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-bake-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "FinalBakeTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-factor))
      (common-lisp:list
       (common-lisp:cons "GrowthFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-type))
      (common-lisp:list
       (common-lisp:cons "GrowthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicate-to))
      (common-lisp:list
       (common-lisp:cons "ReplicateTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-strategy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-environment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-environment-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitors :initarg :monitors :initform common-lisp:nil
                         :type (common-lisp:or monitor-list common-lisp:null)
                         :accessor
                         struct-shape-create-environment-request-monitors
                         :shape "MonitorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-environment-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-request
                    'make-create-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitors))
      (common-lisp:list
       (common-lisp:cons "Monitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-extension-association-request common-lisp:nil
                       ((extension-identifier :initarg :extension-identifier
                         :initform
                         (common-lisp:error
                          ":extension-identifier is required")
                         :type (common-lisp:or identifier common-lisp:null)
                         :accessor
                         struct-shape-create-extension-association-request-extension-identifier
                         :shape "Identifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extension-version-number :initarg
                         :extension-version-number :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-create-extension-association-request-extension-version-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resource-identifier is required")
                         :type (common-lisp:or identifier common-lisp:null)
                         :accessor
                         struct-shape-create-extension-association-request-resource-identifier
                         :shape "Identifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-value-map common-lisp:null)
                         :accessor
                         struct-shape-create-extension-association-request-parameters
                         :shape "ParameterValueMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-extension-association-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-extension-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-extension-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-extension-association-request
                    'make-create-extension-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-extension-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-extension-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extension-identifier))
      (common-lisp:list
       (common-lisp:cons "ExtensionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extension-version-number))
      (common-lisp:list
       (common-lisp:cons "ExtensionVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-extension-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-extension-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or extension-or-parameter-name
                                         common-lisp:null)
                         :accessor struct-shape-create-extension-request-name
                         :shape "ExtensionOrParameterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-extension-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or actions-map common-lisp:null)
                         :accessor
                         struct-shape-create-extension-request-actions :shape
                         "ActionsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-map common-lisp:null)
                         :accessor
                         struct-shape-create-extension-request-parameters
                         :shape "ParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-extension-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (latest-version-number :initarg :latest-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-extension-request-latest-version-number
                         :shape "Integer" :location "header" :location-name
                         "Latest-Version-Number"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-extension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-extension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-extension-request 'make-create-extension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:cons "Latest-Version-Number"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hosted-configuration-version-request
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-hosted-configuration-version-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-hosted-configuration-version-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-hosted-configuration-version-request-description
                         :shape "Description" :location "header" :location-name
                         "Description")
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-create-hosted-configuration-version-request-content
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":content-type is required") :type
                         (common-lisp:or string-with-length-between1and255
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-hosted-configuration-version-request-content-type
                         :shape "StringWithLengthBetween1And255" :location
                         "header" :location-name "Content-Type")
                        (latest-version-number :initarg :latest-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-hosted-configuration-version-request-latest-version-number
                         :shape "Integer" :location "header" :location-name
                         "Latest-Version-Number")
                        (version-label :initarg :version-label :initform
                         common-lisp:nil :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         struct-shape-create-hosted-configuration-version-request-version-label
                         :shape "VersionLabel" :location "header"
                         :location-name "VersionLabel"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hosted-configuration-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hosted-configuration-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hosted-configuration-version-request
                    'make-create-hosted-configuration-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-configuration-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:cons "Description" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:cons "Latest-Version-Number"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:cons "VersionLabel" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-configuration-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-configuration-version-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-configuration-version-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-application-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-profile-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-configuration-profile-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-configuration-profile-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-profile-request
                    'make-delete-configuration-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-strategy-request common-lisp:nil
                       ((deployment-strategy-id :initarg
                         :deployment-strategy-id :initform
                         (common-lisp:error
                          ":deployment-strategy-id is required")
                         :type
                         (common-lisp:or deployment-strategy-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-deployment-strategy-request-deployment-strategy-id
                         :shape "DeploymentStrategyId" :location "uri"
                         :location-name "DeploymentStrategyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-deployment-strategy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-deployment-strategy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-strategy-request
                    'make-delete-deployment-strategy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-strategy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-strategy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-strategy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-environment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-environment-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-request
                    'make-delete-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-extension-association-request common-lisp:nil
                       ((extension-association-id :initarg
                         :extension-association-id :initform
                         (common-lisp:error
                          ":extension-association-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-extension-association-request-extension-association-id
                         :shape "Id" :location "uri" :location-name
                         "ExtensionAssociationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-extension-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-extension-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-extension-association-request
                    'make-delete-extension-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-extension-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-extension-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-extension-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-extension-request common-lisp:nil
                       ((extension-identifier :initarg :extension-identifier
                         :initform
                         (common-lisp:error
                          ":extension-identifier is required")
                         :type (common-lisp:or identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-extension-request-extension-identifier
                         :shape "Identifier" :location "uri" :location-name
                         "ExtensionIdentifier")
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-delete-extension-request-version-number
                         :shape "Integer" :location "querystring"
                         :location-name "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-extension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-extension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-extension-request 'make-delete-extension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-hosted-configuration-version-request
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-hosted-configuration-version-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-hosted-configuration-version-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-delete-hosted-configuration-version-request-version-number
                         :shape "Integer" :location "uri" :location-name
                         "VersionNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hosted-configuration-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-hosted-configuration-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hosted-configuration-version-request
                    'make-delete-hosted-configuration-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-configuration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-configuration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-configuration-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-deployment-application-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-id :initarg :environment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-deployment-environment-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-strategy-id :initarg
                         :deployment-strategy-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-deployment-deployment-strategy-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-deployment-configuration-profile-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-number :initarg :deployment-number
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-deployment-deployment-number :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-name :initarg :configuration-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-deployment-configuration-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-location-uri :initarg
                         :configuration-location-uri :initform common-lisp:nil
                         :type (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-deployment-configuration-location-uri
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-version :initarg :configuration-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-deployment-configuration-version :shape
                         "Version" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-deployment-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-duration-in-minutes :initarg
                         :deployment-duration-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-deployment-duration-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (growth-type :initarg :growth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or growth-type common-lisp:null)
                         :accessor struct-shape-deployment-growth-type :shape
                         "GrowthType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (growth-factor :initarg :growth-factor :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-deployment-growth-factor :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (final-bake-time-in-minutes :initarg
                         :final-bake-time-in-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-final-bake-time-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or deployment-state common-lisp:null)
                         :accessor struct-shape-deployment-state :shape
                         "DeploymentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-log :initarg :event-log :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-events common-lisp:null)
                         :accessor struct-shape-deployment-event-log :shape
                         "DeploymentEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percentage-complete :initarg :percentage-complete
                         :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-deployment-percentage-complete :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor struct-shape-deployment-started-at :shape
                         "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor struct-shape-deployment-completed-at :shape
                         "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (applied-extensions :initarg :applied-extensions
                         :initform common-lisp:nil :type
                         (common-lisp:or applied-extensions common-lisp:null)
                         :accessor struct-shape-deployment-applied-extensions
                         :shape "AppliedExtensions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-deployment-kms-key-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-identifier common-lisp:null)
                         :accessor struct-shape-deployment-kms-key-identifier
                         :shape "KmsKeyIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-label :initarg :version-label :initform
                         common-lisp:nil :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor struct-shape-deployment-version-label :shape
                         "VersionLabel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-strategy-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentStrategyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-profile-id))
      (common-lisp:list
       (common-lisp:cons "ConfigurationProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-number))
      (common-lisp:list
       (common-lisp:cons "DeploymentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-location-uri))
      (common-lisp:list
       (common-lisp:cons "ConfigurationLocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-version))
      (common-lisp:list
       (common-lisp:cons "ConfigurationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DeploymentDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-type))
      (common-lisp:list
       (common-lisp:cons "GrowthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-factor))
      (common-lisp:list
       (common-lisp:cons "GrowthFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-bake-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "FinalBakeTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-log))
      (common-lisp:list
       (common-lisp:cons "EventLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "CompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-extensions))
      (common-lisp:list
       (common-lisp:cons "AppliedExtensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "KmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-event common-lisp:nil
                       ((event-type :initarg :event-type :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-event-type
                                         common-lisp:null)
                         :accessor struct-shape-deployment-event-event-type
                         :shape "DeploymentEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (triggered-by :initarg :triggered-by :initform
                         common-lisp:nil :type
                         (common-lisp:or triggered-by common-lisp:null)
                         :accessor struct-shape-deployment-event-triggered-by
                         :shape "TriggeredBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-deployment-event-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-invocations :initarg :action-invocations
                         :initform common-lisp:nil :type
                         (common-lisp:or action-invocations common-lisp:null)
                         :accessor
                         struct-shape-deployment-event-action-invocations
                         :shape "ActionInvocations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (occurred-at :initarg :occurred-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor struct-shape-deployment-event-occurred-at
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-event 'make-deployment-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-by))
      (common-lisp:list
       (common-lisp:cons "TriggeredBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-invocations))
      (common-lisp:list
       (common-lisp:cons "ActionInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurred-at))
      (common-lisp:list
       (common-lisp:cons "OccurredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-event))
   common-lisp:nil))
(common-lisp:deftype deployment-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-events ()
   '(trivial-types:proper-list deployment-event))
 (common-lisp:defun make-deployment-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype deployment-list ()
   '(trivial-types:proper-list deployment-summary))
 (common-lisp:defun make-deployment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-strategies common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or deployment-strategy-list
                                         common-lisp:null)
                         :accessor struct-shape-deployment-strategies-items
                         :shape "DeploymentStrategyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-deployment-strategies-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-strategies
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-strategies
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-strategies 'make-deployment-strategies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-strategies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-strategies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-strategies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-strategy common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-deployment-strategy-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-deployment-strategy-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-deployment-strategy-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-duration-in-minutes :initarg
                         :deployment-duration-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-strategy-deployment-duration-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (growth-type :initarg :growth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or growth-type common-lisp:null)
                         :accessor struct-shape-deployment-strategy-growth-type
                         :shape "GrowthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (growth-factor :initarg :growth-factor :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-deployment-strategy-growth-factor :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (final-bake-time-in-minutes :initarg
                         :final-bake-time-in-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-strategy-final-bake-time-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replicate-to :initarg :replicate-to :initform
                         common-lisp:nil :type
                         (common-lisp:or replicate-to common-lisp:null)
                         :accessor
                         struct-shape-deployment-strategy-replicate-to :shape
                         "ReplicateTo" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-strategy 'make-deployment-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DeploymentDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-type))
      (common-lisp:list
       (common-lisp:cons "GrowthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-factor))
      (common-lisp:list
       (common-lisp:cons "GrowthFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-bake-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "FinalBakeTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicate-to))
      (common-lisp:list
       (common-lisp:cons "ReplicateTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-strategy))
   common-lisp:nil))
(common-lisp:deftype deployment-strategy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-strategy-list ()
   '(trivial-types:proper-list deployment-strategy))
 (common-lisp:defun make-deployment-strategy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-summary common-lisp:nil
                       ((deployment-number :initarg :deployment-number
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-deployment-summary-deployment-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-name :initarg :configuration-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-deployment-summary-configuration-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-version :initarg :configuration-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-deployment-summary-configuration-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-duration-in-minutes :initarg
                         :deployment-duration-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-deployment-duration-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (growth-type :initarg :growth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or growth-type common-lisp:null)
                         :accessor struct-shape-deployment-summary-growth-type
                         :shape "GrowthType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (growth-factor :initarg :growth-factor :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-deployment-summary-growth-factor :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (final-bake-time-in-minutes :initarg
                         :final-bake-time-in-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-final-bake-time-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or deployment-state common-lisp:null)
                         :accessor struct-shape-deployment-summary-state :shape
                         "DeploymentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percentage-complete :initarg :percentage-complete
                         :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-deployment-summary-percentage-complete
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor struct-shape-deployment-summary-started-at
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor struct-shape-deployment-summary-completed-at
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-label :initarg :version-label :initform
                         common-lisp:nil :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-version-label :shape
                         "VersionLabel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-summary 'make-deployment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-number))
      (common-lisp:list
       (common-lisp:cons "DeploymentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-version))
      (common-lisp:list
       (common-lisp:cons "ConfigurationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DeploymentDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-type))
      (common-lisp:list
       (common-lisp:cons "GrowthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-factor))
      (common-lisp:list
       (common-lisp:cons "GrowthFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-bake-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "FinalBakeTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "PercentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "CompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployments common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or deployment-list common-lisp:null)
                         :accessor struct-shape-deployments-items :shape
                         "DeploymentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-deployments-next-token :shape "NextToken"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployments
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployments
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployments 'make-deployments))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployments))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployments))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype dynamic-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dynamic-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-dynamic-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-environment-application-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-environment-id :shape "Id" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-environment-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-environment-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or environment-state common-lisp:null)
                         :accessor struct-shape-environment-state :shape
                         "EnvironmentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitors :initarg :monitors :initform common-lisp:nil
                         :type (common-lisp:or monitor-list common-lisp:null)
                         :accessor struct-shape-environment-monitors :shape
                         "MonitorList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitors))
      (common-lisp:list
       (common-lisp:cons "Monitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-list ()
   '(trivial-types:proper-list environment))
 (common-lisp:defun make-environment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environments common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or environment-list common-lisp:null)
                         :accessor struct-shape-environments-items :shape
                         "EnvironmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-environments-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environments
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environments
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'environments 'make-environments))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environments))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environments))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extension common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-extension-id :shape "Id" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-extension-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-extension-version-number :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-extension-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-map common-lisp:null)
                         :accessor struct-shape-extension-actions :shape
                         "ActionsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-map common-lisp:null)
                         :accessor struct-shape-extension-parameters :shape
                         "ParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extension
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extension 'make-extension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extension-association common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-extension-association-id :shape
                         "Identifier" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (extension-arn :initarg :extension-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-association-extension-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-association-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-association-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-value-map common-lisp:null)
                         :accessor
                         struct-shape-extension-association-parameters :shape
                         "ParameterValueMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extension-version-number :initarg
                         :extension-version-number :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-extension-association-extension-version-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extension-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extension-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'extension-association 'make-extension-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extension-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extension-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension-arn))
      (common-lisp:list
       (common-lisp:cons "ExtensionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extension-version-number))
      (common-lisp:list
       (common-lisp:cons "ExtensionVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extension-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype extension-association-summaries ()
   '(trivial-types:proper-list extension-association-summary))
 (common-lisp:defun make-extension-association-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            extension-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass extension-association-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-extension-association-summary-id :shape
                         "Identifier" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (extension-arn :initarg :extension-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-association-summary-extension-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-association-summary-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extension-association-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'extension-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'extension-association-summary
                    'make-extension-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extension-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extension-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension-arn))
      (common-lisp:list
       (common-lisp:cons "ExtensionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extension-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extension-associations common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or extension-association-summaries
                                         common-lisp:null)
                         :accessor struct-shape-extension-associations-items
                         :shape "ExtensionAssociationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-extension-associations-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extension-associations
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extension-associations
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'extension-associations 'make-extension-associations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extension-associations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extension-associations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extension-associations))
   common-lisp:nil))
(common-lisp:deftype extension-or-parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype extension-summaries ()
   '(trivial-types:proper-list extension-summary))
 (common-lisp:defun make-extension-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extension-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass extension-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-extension-summary-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-extension-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-extension-summary-version-number :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-extension-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-extension-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extension-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extension-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'extension-summary 'make-extension-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extension-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extension-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extension-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extensions common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or extension-summaries common-lisp:null)
                         :accessor struct-shape-extensions-items :shape
                         "ExtensionSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-extensions-next-token :shape "NextToken"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extensions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extensions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extensions 'make-extensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions))
   common-lisp:nil))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass get-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-application-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configuration-profile-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-configuration-profile-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-configuration-profile-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configuration-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configuration-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configuration-profile-request
                    'make-get-configuration-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configuration-request common-lisp:nil
                       ((application :initarg :application :initform
                         (common-lisp:error ":application is required") :type
                         (common-lisp:or string-with-length-between1and64
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configuration-request-application
                         :shape "StringWithLengthBetween1And64" :location "uri"
                         :location-name "Application")
                        (environment :initarg :environment :initform
                         (common-lisp:error ":environment is required") :type
                         (common-lisp:or string-with-length-between1and64
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configuration-request-environment
                         :shape "StringWithLengthBetween1And64" :location "uri"
                         :location-name "Environment")
                        (configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or string-with-length-between1and64
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configuration-request-configuration
                         :shape "StringWithLengthBetween1And64" :location "uri"
                         :location-name "Configuration")
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or string-with-length-between1and64
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-configuration-request-client-id
                         :shape "StringWithLengthBetween1And64" :location
                         "querystring" :location-name "client_id")
                        (client-configuration-version :initarg
                         :client-configuration-version :initform
                         common-lisp:nil :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-get-configuration-request-client-configuration-version
                         :shape "Version" :location "querystring"
                         :location-name "client_configuration_version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-configuration-request
                    'make-get-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-deployment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-deployment-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId")
                        (deployment-number :initarg :deployment-number
                         :initform
                         (common-lisp:error ":deployment-number is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-request-deployment-number
                         :shape "Integer" :location "uri" :location-name
                         "DeploymentNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-deployment-request 'make-get-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-strategy-request common-lisp:nil
                       ((deployment-strategy-id :initarg
                         :deployment-strategy-id :initform
                         (common-lisp:error
                          ":deployment-strategy-id is required")
                         :type
                         (common-lisp:or deployment-strategy-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-strategy-request-deployment-strategy-id
                         :shape "DeploymentStrategyId" :location "uri"
                         :location-name "DeploymentStrategyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-deployment-strategy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-deployment-strategy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-deployment-strategy-request
                    'make-get-deployment-strategy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-strategy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-strategy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-strategy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-environment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-environment-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-request 'make-get-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-extension-association-request common-lisp:nil
                       ((extension-association-id :initarg
                         :extension-association-id :initform
                         (common-lisp:error
                          ":extension-association-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-extension-association-request-extension-association-id
                         :shape "Id" :location "uri" :location-name
                         "ExtensionAssociationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-extension-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-extension-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-extension-association-request
                    'make-get-extension-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-extension-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-extension-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-extension-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-extension-request common-lisp:nil
                       ((extension-identifier :initarg :extension-identifier
                         :initform
                         (common-lisp:error
                          ":extension-identifier is required")
                         :type (common-lisp:or identifier common-lisp:null)
                         :accessor
                         struct-shape-get-extension-request-extension-identifier
                         :shape "Identifier" :location "uri" :location-name
                         "ExtensionIdentifier")
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-extension-request-version-number
                         :shape "Integer" :location "querystring"
                         :location-name "version_number"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-extension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-extension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-extension-request 'make-get-extension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-hosted-configuration-version-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-hosted-configuration-version-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-hosted-configuration-version-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId")
                        (version-number :initarg :version-number :initform
                         (common-lisp:error ":version-number is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-hosted-configuration-version-request-version-number
                         :shape "Integer" :location "uri" :location-name
                         "VersionNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-hosted-configuration-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-hosted-configuration-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-hosted-configuration-version-request
                    'make-get-hosted-configuration-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-configuration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-configuration-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-configuration-version-request))
   common-lisp:nil))
(common-lisp:deftype growth-factor () 'common-lisp:single-float)
(common-lisp:deftype growth-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hosted-configuration-version common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-application-id
                         :shape "Id" :location "header" :location-name
                         "Application-Id")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-configuration-profile-id
                         :shape "Id" :location "header" :location-name
                         "Configuration-Profile-Id")
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-version-number
                         :shape "Integer" :location "header" :location-name
                         "Version-Number")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-version-description
                         :shape "Description" :location "header" :location-name
                         "Description")
                        (content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-content
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-length-between1and255
                                         common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-version-content-type
                         :shape "StringWithLengthBetween1And255" :location
                         "header" :location-name "Content-Type")
                        (version-label :initarg :version-label :initform
                         common-lisp:nil :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-version-version-label
                         :shape "VersionLabel" :location "header"
                         :location-name "VersionLabel")
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-kms-key-arn
                         :shape "Arn" :location "header" :location-name
                         "KmsKeyArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hosted-configuration-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hosted-configuration-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hosted-configuration-version
                    'make-hosted-configuration-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:cons "Application-Id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-profile-id))
      (common-lisp:cons "Configuration-Profile-Id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:cons "Version-Number" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:cons "Description" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:cons "VersionLabel" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:cons "KmsKeyArn" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass hosted-configuration-version-summary common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-summary-application-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-summary-configuration-profile-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-summary-version-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-version-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-length-between1and255
                                         common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-version-summary-content-type
                         :shape "StringWithLengthBetween1And255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-label :initarg :version-label :initform
                         common-lisp:nil :type
                         (common-lisp:or version-label common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-version-summary-version-label
                         :shape "VersionLabel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-hosted-configuration-version-summary-kms-key-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hosted-configuration-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'hosted-configuration-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hosted-configuration-version-summary
                    'make-hosted-configuration-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-profile-id))
      (common-lisp:list
       (common-lisp:cons "ConfigurationProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hosted-configuration-version-summary-list ()
   '(trivial-types:proper-list hosted-configuration-version-summary))
 (common-lisp:defun make-hosted-configuration-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hosted-configuration-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass hosted-configuration-versions common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or
                          hosted-configuration-version-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-hosted-configuration-versions-items
                         :shape "HostedConfigurationVersionSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-hosted-configuration-versions-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hosted-configuration-versions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'hosted-configuration-versions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hosted-configuration-versions
                    'make-hosted-configuration-versions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-versions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-versions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hosted-configuration-versions))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (appconfig-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invalid-configuration-detail common-lisp:nil
                       ((constraint :initarg :constraint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invalid-configuration-detail-constraint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-invalid-configuration-detail-location
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-invalid-configuration-detail-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invalid-configuration-detail-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-invalid-configuration-detail-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invalid-configuration-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-configuration-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-detail
                    'make-invalid-configuration-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-configuration-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-configuration-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraint))
      (common-lisp:list
       (common-lisp:cons "Constraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-configuration-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invalid-configuration-detail-list ()
   '(trivial-types:proper-list invalid-configuration-detail))
 (common-lisp:defun make-invalid-configuration-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            invalid-configuration-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iso8601date-time () 'common-lisp:string)
(common-lisp:deftype kms-key-identifier () 'common-lisp:string)
(common-lisp:deftype kms-key-identifier-or-empty () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-applications-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-profiles-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-configuration-profiles-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-configuration-profiles-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-configuration-profiles-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or configuration-profile-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configuration-profiles-request-type
                         :shape "ConfigurationProfileType" :location
                         "querystring" :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configuration-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configuration-profiles-request
                    'make-list-configuration-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-strategies-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-deployment-strategies-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployment-strategies-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployment-strategies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-strategies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployment-strategies-request
                    'make-list-deployment-strategies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-strategies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-strategies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-deployments-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-deployments-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployments-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployments-request 'make-list-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-environments-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-environments-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environments-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-request
                    'make-list-environments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-extension-associations-request common-lisp:nil
                       ((resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-extension-associations-request-resource-identifier
                         :shape "Arn" :location "querystring" :location-name
                         "resource_identifier")
                        (extension-identifier :initarg :extension-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         struct-shape-list-extension-associations-request-extension-identifier
                         :shape "Identifier" :location "querystring"
                         :location-name "extension_identifier")
                        (extension-version-number :initarg
                         :extension-version-number :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-list-extension-associations-request-extension-version-number
                         :shape "Integer" :location "querystring"
                         :location-name "extension_version_number")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-extension-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-extension-associations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-extension-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-extension-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-extension-associations-request
                    'make-list-extension-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-extension-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-extension-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-extension-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-extensions-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-extensions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-extensions-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "next_token")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or query-name common-lisp:null) :accessor
                         struct-shape-list-extensions-request-name :shape
                         "QueryName" :location "querystring" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-extensions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-extensions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-extensions-request 'make-list-extensions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-extensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-extensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-extensions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-hosted-configuration-versions-request
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-hosted-configuration-versions-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-hosted-configuration-versions-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-hosted-configuration-versions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-hosted-configuration-versions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token")
                        (version-label :initarg :version-label :initform
                         common-lisp:nil :type
                         (common-lisp:or query-name common-lisp:null) :accessor
                         struct-shape-list-hosted-configuration-versions-request-version-label
                         :shape "QueryName" :location "querystring"
                         :location-name "version_label"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-hosted-configuration-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-hosted-configuration-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-hosted-configuration-versions-request
                    'make-list-hosted-configuration-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-configuration-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-configuration-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-configuration-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:deftype long-name () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype minutes-between0and24hours () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass monitor common-lisp:nil
                       ((alarm-arn :initarg :alarm-arn :initform
                         (common-lisp:error ":alarm-arn is required") :type
                         (common-lisp:or string-with-length-between1and2048
                                         common-lisp:null)
                         :accessor struct-shape-monitor-alarm-arn :shape
                         "StringWithLengthBetween1And2048" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alarm-role-arn :initarg :alarm-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-monitor-alarm-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitor
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'monitor 'make-monitor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-role-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitor-list () '(trivial-types:proper-list monitor))
 (common-lisp:defun make-monitor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitor))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-parameter-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (required :initarg :required :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-parameter-required :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dynamic :initarg :dynamic :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-parameter-dynamic :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "Required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic))
      (common-lisp:list
       (common-lisp:cons "Dynamic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameter-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype parameter-value-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameter-value-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition payload-too-large-exception
     (appconfig-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       payload-too-large-exception-message)
      (measure :initarg :measure :initform common-lisp:nil :reader
       payload-too-large-exception-measure)
      (limit :initarg :limit :initform common-lisp:nil :reader
       payload-too-large-exception-limit)
      (size :initarg :size :initform common-lisp:nil :reader
       payload-too-large-exception-size)))
 (common-lisp:export
  (common-lisp:list 'payload-too-large-exception
                    'payload-too-large-exception-message
                    'payload-too-large-exception-measure
                    'payload-too-large-exception-limit
                    'payload-too-large-exception-size)))
(common-lisp:deftype percentage () 'common-lisp:single-float)
(common-lisp:deftype query-name () 'common-lisp:string)
(common-lisp:deftype replicate-to () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (appconfig-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass resource-tags common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-resource-tags-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-tags
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-tags
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-tags 'make-resource-tags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tags))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (appconfig-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-deployment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-deployment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-deployment-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId")
                        (deployment-strategy-id :initarg
                         :deployment-strategy-id :initform
                         (common-lisp:error
                          ":deployment-strategy-id is required")
                         :type
                         (common-lisp:or deployment-strategy-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-deployment-request-deployment-strategy-id
                         :shape "DeploymentStrategyId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-deployment-request-configuration-profile-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-version :initarg :configuration-version
                         :initform
                         (common-lisp:error
                          ":configuration-version is required")
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-start-deployment-request-configuration-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-start-deployment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-start-deployment-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-identifier common-lisp:null)
                         :accessor
                         struct-shape-start-deployment-request-kms-key-identifier
                         :shape "KmsKeyIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamic-extension-parameters :initarg
                         :dynamic-extension-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamic-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-deployment-request-dynamic-extension-parameters
                         :shape "DynamicParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-deployment-request 'make-start-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-strategy-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentStrategyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-profile-id))
      (common-lisp:list
       (common-lisp:cons "ConfigurationProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-version))
      (common-lisp:list
       (common-lisp:cons "ConfigurationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "KmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-extension-parameters))
      (common-lisp:list
       (common-lisp:cons "DynamicExtensionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-deployment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-stop-deployment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-stop-deployment-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId")
                        (deployment-number :initarg :deployment-number
                         :initform
                         (common-lisp:error ":deployment-number is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-stop-deployment-request-deployment-number
                         :shape "Integer" :location "uri" :location-name
                         "DeploymentNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-deployment-request 'make-stop-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-request))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-with-length-between0and32768 () 'common-lisp:string)
(common-lisp:deftype string-with-length-between1and2048 () 'common-lisp:string)
(common-lisp:deftype string-with-length-between1and255 () 'common-lisp:string)
(common-lisp:deftype string-with-length-between1and64 () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location "uri" :location-name "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype triggered-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-application-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-application-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-profile-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-configuration-profile-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-configuration-profile-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-configuration-profile-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-profile-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retrieval-role-arn :initarg :retrieval-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-configuration-profile-request-retrieval-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validators :initarg :validators :initform
                         common-lisp:nil :type
                         (common-lisp:or validator-list common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-profile-request-validators
                         :shape "ValidatorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-identifier :initarg :kms-key-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or kms-key-identifier-or-empty
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-profile-request-kms-key-identifier
                         :shape "KmsKeyIdentifierOrEmpty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-profile-request
                    'make-update-configuration-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retrieval-role-arn))
      (common-lisp:list
       (common-lisp:cons "RetrievalRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validators))
      (common-lisp:list
       (common-lisp:cons "Validators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-identifier))
      (common-lisp:list
       (common-lisp:cons "KmsKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-deployment-strategy-request common-lisp:nil
                       ((deployment-strategy-id :initarg
                         :deployment-strategy-id :initform
                         (common-lisp:error
                          ":deployment-strategy-id is required")
                         :type
                         (common-lisp:or deployment-strategy-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-deployment-strategy-request-deployment-strategy-id
                         :shape "DeploymentStrategyId" :location "uri"
                         :location-name "DeploymentStrategyId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-deployment-strategy-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-duration-in-minutes :initarg
                         :deployment-duration-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-deployment-strategy-request-deployment-duration-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (final-bake-time-in-minutes :initarg
                         :final-bake-time-in-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or minutes-between0and24hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-deployment-strategy-request-final-bake-time-in-minutes
                         :shape "MinutesBetween0And24Hours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (growth-factor :initarg :growth-factor :initform
                         common-lisp:nil :type
                         (common-lisp:or growth-factor common-lisp:null)
                         :accessor
                         struct-shape-update-deployment-strategy-request-growth-factor
                         :shape "GrowthFactor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (growth-type :initarg :growth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or growth-type common-lisp:null)
                         :accessor
                         struct-shape-update-deployment-strategy-request-growth-type
                         :shape "GrowthType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-deployment-strategy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-deployment-strategy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-deployment-strategy-request
                    'make-update-deployment-strategy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-strategy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-strategy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DeploymentDurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-bake-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "FinalBakeTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-factor))
      (common-lisp:list
       (common-lisp:cons "GrowthFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'growth-type))
      (common-lisp:list
       (common-lisp:cons "GrowthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-strategy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-environment-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environment-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-environment-request-environment-id
                         :shape "Id" :location "uri" :location-name
                         "EnvironmentId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-environment-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitors :initarg :monitors :initform common-lisp:nil
                         :type (common-lisp:or monitor-list common-lisp:null)
                         :accessor
                         struct-shape-update-environment-request-monitors
                         :shape "MonitorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-request
                    'make-update-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitors))
      (common-lisp:list
       (common-lisp:cons "Monitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-extension-association-request common-lisp:nil
                       ((extension-association-id :initarg
                         :extension-association-id :initform
                         (common-lisp:error
                          ":extension-association-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-extension-association-request-extension-association-id
                         :shape "Id" :location "uri" :location-name
                         "ExtensionAssociationId")
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-value-map common-lisp:null)
                         :accessor
                         struct-shape-update-extension-association-request-parameters
                         :shape "ParameterValueMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-extension-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-extension-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-extension-association-request
                    'make-update-extension-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-extension-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-extension-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-extension-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-extension-request common-lisp:nil
                       ((extension-identifier :initarg :extension-identifier
                         :initform
                         (common-lisp:error
                          ":extension-identifier is required")
                         :type (common-lisp:or identifier common-lisp:null)
                         :accessor
                         struct-shape-update-extension-request-extension-identifier
                         :shape "Identifier" :location "uri" :location-name
                         "ExtensionIdentifier")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-extension-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-map common-lisp:null)
                         :accessor
                         struct-shape-update-extension-request-actions :shape
                         "ActionsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-map common-lisp:null)
                         :accessor
                         struct-shape-update-extension-request-parameters
                         :shape "ParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-update-extension-request-version-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-extension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-extension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-extension-request 'make-update-extension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-extension-request))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-configuration-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-validate-configuration-request-application-id
                         :shape "Id" :location "uri" :location-name
                         "ApplicationId")
                        (configuration-profile-id :initarg
                         :configuration-profile-id :initform
                         (common-lisp:error
                          ":configuration-profile-id is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-validate-configuration-request-configuration-profile-id
                         :shape "Id" :location "uri" :location-name
                         "ConfigurationProfileId")
                        (configuration-version :initarg :configuration-version
                         :initform
                         (common-lisp:error
                          ":configuration-version is required")
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-validate-configuration-request-configuration-version
                         :shape "Version" :location "querystring"
                         :location-name "configuration_version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-configuration-request
                    'make-validate-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validator common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or validator-type common-lisp:null)
                         :accessor struct-shape-validator-type :shape
                         "ValidatorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or string-with-length-between0and32768
                                         common-lisp:null)
                         :accessor struct-shape-validator-content :shape
                         "StringWithLengthBetween0And32768" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'validator 'make-validator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validator-list () '(trivial-types:proper-list validator))
 (common-lisp:defun make-validator-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype validator-type-list ()
   '(trivial-types:proper-list validator-type))
 (common-lisp:defun make-validator-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validator-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype version-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description tags)
   (common-lisp:declare (common-lisp:ignorable name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/applications"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-configuration-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id name description
                     location-uri retrieval-role-arn validators tags type
                     kms-key-identifier)
   (common-lisp:declare
    (common-lisp:ignorable application-id name description location-uri
     retrieval-role-arn validators tags type kms-key-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configuration-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateConfigurationProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-configuration-profile))
(common-lisp:progn
 (common-lisp:defun create-deployment-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description
                     deployment-duration-in-minutes final-bake-time-in-minutes
                     growth-factor growth-type replicate-to tags)
   (common-lisp:declare
    (common-lisp:ignorable name description deployment-duration-in-minutes
     final-bake-time-in-minutes growth-factor growth-type replicate-to tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-deployment-strategy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deploymentstrategies"
                                                        "CreateDeploymentStrategy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-deployment-strategy))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id name description monitors
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable application-id name description monitors tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description actions parameters tags
                     latest-version-number)
   (common-lisp:declare
    (common-lisp:ignorable name description actions parameters tags
     latest-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/extensions"
                                                        "CreateExtension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-extension))
(common-lisp:progn
 (common-lisp:defun create-extension-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-identifier
                     extension-version-number resource-identifier parameters
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable extension-identifier extension-version-number
     resource-identifier parameters tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-extension-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/extensionassociations"
                                                        "CreateExtensionAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-extension-association))
(common-lisp:progn
 (common-lisp:defun create-hosted-configuration-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id
                     description content content-type latest-version-number
                     version-label)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id description
     content content-type latest-version-number version-label))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-hosted-configuration-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A/hostedconfigurationversions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))))
                                                        "CreateHostedConfigurationVersion")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-hosted-configuration-version))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-configuration-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))))
                                                        "DeleteConfigurationProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configuration-profile))
(common-lisp:progn
 (common-lisp:defun delete-deployment-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-strategy-id)
   (common-lisp:declare (common-lisp:ignorable deployment-strategy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-deployment-strategy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/deployementstrategies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'deployment-strategy-id))))
                                                        "DeleteDeploymentStrategy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-deployment-strategy))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id)
   (common-lisp:declare (common-lisp:ignorable application-id environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "DeleteEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun delete-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-identifier version-number)
   (common-lisp:declare
    (common-lisp:ignorable extension-identifier version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/extensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'extension-identifier))))
                                                        "DeleteExtension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-extension))
(common-lisp:progn
 (common-lisp:defun delete-extension-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-association-id)
   (common-lisp:declare (common-lisp:ignorable extension-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-extension-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/extensionassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'extension-association-id))))
                                                        "DeleteExtensionAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-extension-association))
(common-lisp:progn
 (common-lisp:defun delete-hosted-configuration-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id
     version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-hosted-configuration-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A/hostedconfigurationversions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "DeleteHostedConfigurationVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-hosted-configuration-version))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application environment configuration
                     client-id client-configuration-version)
   (common-lisp:declare
    (common-lisp:ignorable application environment configuration client-id
     client-configuration-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A/configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration))))
                                                        "GetConfiguration")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-configuration))
(common-lisp:progn
 (common-lisp:defun get-configuration-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configuration-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))))
                                                        "GetConfigurationProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-configuration-profile))
(common-lisp:progn
 (common-lisp:defun get-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id
                     deployment-number)
   (common-lisp:declare
    (common-lisp:ignorable application-id environment-id deployment-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A/deployments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'deployment-number))))
                                                        "GetDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-deployment))
(common-lisp:progn
 (common-lisp:defun get-deployment-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-strategy-id)
   (common-lisp:declare (common-lisp:ignorable deployment-strategy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-strategy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/deploymentstrategies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'deployment-strategy-id))))
                                                        "GetDeploymentStrategy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-deployment-strategy))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id)
   (common-lisp:declare (common-lisp:ignorable application-id environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "GetEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun get-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-identifier version-number)
   (common-lisp:declare
    (common-lisp:ignorable extension-identifier version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/extensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'extension-identifier))))
                                                        "GetExtension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-extension))
(common-lisp:progn
 (common-lisp:defun get-extension-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-association-id)
   (common-lisp:declare (common-lisp:ignorable extension-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-extension-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/extensionassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'extension-association-id))))
                                                        "GetExtensionAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-extension-association))
(common-lisp:progn
 (common-lisp:defun get-hosted-configuration-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id
                     version-number)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id
     version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-hosted-configuration-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A/hostedconfigurationversions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-number))))
                                                        "GetHostedConfigurationVersion")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-hosted-configuration-version))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/applications"
                                                        "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-configuration-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token
                     type)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configuration-profiles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListConfigurationProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configuration-profiles))
(common-lisp:progn
 (common-lisp:defun list-deployment-strategies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-deployment-strategies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/deploymentstrategies"
                                                        "ListDeploymentStrategies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-deployment-strategies))
(common-lisp:progn
 (common-lisp:defun list-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id environment-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A/deployments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "ListDeployments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-deployments))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListEnvironments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-extension-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier extension-identifier
                     extension-version-number max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier extension-identifier
     extension-version-number max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-extension-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/extensionassociations"
                                                        "ListExtensionAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-extension-associations))
(common-lisp:progn
 (common-lisp:defun list-extensions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:declare (common-lisp:ignorable max-results next-token name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-extensions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/extensions"
                                                        "ListExtensions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-extensions))
(common-lisp:progn
 (common-lisp:defun list-hosted-configuration-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id
                     max-results next-token version-label)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id max-results
     next-token version-label))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-hosted-configuration-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A/hostedconfigurationversions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))))
                                                        "ListHostedConfigurationVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-hosted-configuration-versions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id
                     deployment-strategy-id configuration-profile-id
                     configuration-version description tags kms-key-identifier
                     dynamic-extension-parameters)
   (common-lisp:declare
    (common-lisp:ignorable application-id environment-id deployment-strategy-id
     configuration-profile-id configuration-version description tags
     kms-key-identifier dynamic-extension-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A/deployments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "StartDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-deployment))
(common-lisp:progn
 (common-lisp:defun stop-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id
                     deployment-number)
   (common-lisp:declare
    (common-lisp:ignorable application-id environment-id deployment-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A/deployments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'deployment-number))))
                                                        "StopDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-deployment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id name description)
   (common-lisp:declare
    (common-lisp:ignorable application-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-configuration-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id
                     name description retrieval-role-arn validators
                     kms-key-identifier)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id name
     description retrieval-role-arn validators kms-key-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))))
                                                        "UpdateConfigurationProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-configuration-profile))
(common-lisp:progn
 (common-lisp:defun update-deployment-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-strategy-id description
                     deployment-duration-in-minutes final-bake-time-in-minutes
                     growth-factor growth-type)
   (common-lisp:declare
    (common-lisp:ignorable deployment-strategy-id description
     deployment-duration-in-minutes final-bake-time-in-minutes growth-factor
     growth-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-deployment-strategy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/deploymentstrategies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'deployment-strategy-id))))
                                                        "UpdateDeploymentStrategy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-deployment-strategy))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id environment-id name
                     description monitors)
   (common-lisp:declare
    (common-lisp:ignorable application-id environment-id name description
     monitors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/environments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "UpdateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-identifier description actions
                     parameters version-number)
   (common-lisp:declare
    (common-lisp:ignorable extension-identifier description actions parameters
     version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/extensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'extension-identifier))))
                                                        "UpdateExtension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-extension))
(common-lisp:progn
 (common-lisp:defun update-extension-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key extension-association-id parameters)
   (common-lisp:declare
    (common-lisp:ignorable extension-association-id parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-extension-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/extensionassociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'extension-association-id))))
                                                        "UpdateExtensionAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-extension-association))
(common-lisp:progn
 (common-lisp:defun validate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id configuration-profile-id
                     configuration-version)
   (common-lisp:declare
    (common-lisp:ignorable application-id configuration-profile-id
     configuration-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appconfig-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/configurationprofiles/~A/validators"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-profile-id))))
                                                        "ValidateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-configuration))
