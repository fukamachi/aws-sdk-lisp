;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/redshift/api
  (:use)
  (:nicknames #:aws/redshift)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/redshift/api)
(common-lisp:progn
 (common-lisp:define-condition redshift-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'redshift-error))
(common-lisp:progn
 (common-lisp:defclass redshift-request (aws-sdk/query-request:query-request)
                       common-lisp:nil
                       (:default-initargs :service "redshift" :api-version
                        "2012-12-01" :host-prefix "redshift" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'redshift-request))
(common-lisp:defvar *error-map*
  '(("AccessToClusterDeniedFault" . access-to-cluster-denied-fault)
    ("AccessToSnapshotDeniedFault" . access-to-snapshot-denied-fault)
    ("AuthenticationProfileAlreadyExistsFault"
     . authentication-profile-already-exists-fault)
    ("AuthenticationProfileNotFoundFault"
     . authentication-profile-not-found-fault)
    ("AuthenticationProfileQuotaExceededFault"
     . authentication-profile-quota-exceeded-fault)
    ("AuthorizationAlreadyExistsFault" . authorization-already-exists-fault)
    ("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("AuthorizationQuotaExceededFault" . authorization-quota-exceeded-fault)
    ("BatchDeleteRequestSizeExceededFault"
     . batch-delete-request-size-exceeded-fault)
    ("BatchModifyClusterSnapshotsLimitExceededFault"
     . batch-modify-cluster-snapshots-limit-exceeded-fault)
    ("BucketNotFoundFault" . bucket-not-found-fault)
    ("ClusterAlreadyExistsFault" . cluster-already-exists-fault)
    ("ClusterNotFoundFault" . cluster-not-found-fault)
    ("ClusterOnLatestRevisionFault" . cluster-on-latest-revision-fault)
    ("ClusterParameterGroupAlreadyExistsFault"
     . cluster-parameter-group-already-exists-fault)
    ("ClusterParameterGroupNotFoundFault"
     . cluster-parameter-group-not-found-fault)
    ("ClusterParameterGroupQuotaExceededFault"
     . cluster-parameter-group-quota-exceeded-fault)
    ("ClusterQuotaExceededFault" . cluster-quota-exceeded-fault)
    ("ClusterSecurityGroupAlreadyExistsFault"
     . cluster-security-group-already-exists-fault)
    ("ClusterSecurityGroupNotFoundFault"
     . cluster-security-group-not-found-fault)
    ("ClusterSecurityGroupQuotaExceededFault"
     . cluster-security-group-quota-exceeded-fault)
    ("ClusterSnapshotAlreadyExistsFault"
     . cluster-snapshot-already-exists-fault)
    ("ClusterSnapshotNotFoundFault" . cluster-snapshot-not-found-fault)
    ("ClusterSnapshotQuotaExceededFault"
     . cluster-snapshot-quota-exceeded-fault)
    ("ClusterSubnetGroupAlreadyExistsFault"
     . cluster-subnet-group-already-exists-fault)
    ("ClusterSubnetGroupNotFoundFault" . cluster-subnet-group-not-found-fault)
    ("ClusterSubnetGroupQuotaExceededFault"
     . cluster-subnet-group-quota-exceeded-fault)
    ("ClusterSubnetQuotaExceededFault" . cluster-subnet-quota-exceeded-fault)
    ("ConflictPolicyUpdateFault" . conflict-policy-update-fault)
    ("CopyToRegionDisabledFault" . copy-to-region-disabled-fault)
    ("CustomCnameAssociationFault" . custom-cname-association-fault)
    ("CustomDomainAssociationNotFoundFault"
     . custom-domain-association-not-found-fault)
    ("DependentServiceAccessDeniedFault"
     . dependent-service-access-denied-fault)
    ("DependentServiceRequestThrottlingFault"
     . dependent-service-request-throttling-fault)
    ("DependentServiceUnavailableFault" . dependent-service-unavailable-fault)
    ("EndpointAlreadyExistsFault" . endpoint-already-exists-fault)
    ("EndpointAuthorizationAlreadyExistsFault"
     . endpoint-authorization-already-exists-fault)
    ("EndpointAuthorizationNotFoundFault"
     . endpoint-authorization-not-found-fault)
    ("EndpointAuthorizationsPerClusterLimitExceededFault"
     . endpoint-authorizations-per-cluster-limit-exceeded-fault)
    ("EndpointNotFoundFault" . endpoint-not-found-fault)
    ("EndpointsPerAuthorizationLimitExceededFault"
     . endpoints-per-authorization-limit-exceeded-fault)
    ("EndpointsPerClusterLimitExceededFault"
     . endpoints-per-cluster-limit-exceeded-fault)
    ("EventSubscriptionQuotaExceededFault"
     . event-subscription-quota-exceeded-fault)
    ("HsmClientCertificateAlreadyExistsFault"
     . hsm-client-certificate-already-exists-fault)
    ("HsmClientCertificateNotFoundFault"
     . hsm-client-certificate-not-found-fault)
    ("HsmClientCertificateQuotaExceededFault"
     . hsm-client-certificate-quota-exceeded-fault)
    ("HsmConfigurationAlreadyExistsFault"
     . hsm-configuration-already-exists-fault)
    ("HsmConfigurationNotFoundFault" . hsm-configuration-not-found-fault)
    ("HsmConfigurationQuotaExceededFault"
     . hsm-configuration-quota-exceeded-fault)
    ("InProgressTableRestoreQuotaExceededFault"
     . in-progress-table-restore-quota-exceeded-fault)
    ("IncompatibleOrderableOptions" . incompatible-orderable-options)
    ("InsufficientClusterCapacityFault" . insufficient-cluster-capacity-fault)
    ("InsufficientS3BucketPolicyFault" . insufficient-s3bucket-policy-fault)
    ("IntegrationNotFoundFault" . integration-not-found-fault)
    ("InvalidAuthenticationProfileRequestFault"
     . invalid-authentication-profile-request-fault)
    ("InvalidAuthorizationStateFault" . invalid-authorization-state-fault)
    ("InvalidClusterParameterGroupStateFault"
     . invalid-cluster-parameter-group-state-fault)
    ("InvalidClusterSecurityGroupStateFault"
     . invalid-cluster-security-group-state-fault)
    ("InvalidClusterSnapshotScheduleStateFault"
     . invalid-cluster-snapshot-schedule-state-fault)
    ("InvalidClusterSnapshotStateFault" . invalid-cluster-snapshot-state-fault)
    ("InvalidClusterStateFault" . invalid-cluster-state-fault)
    ("InvalidClusterSubnetGroupStateFault"
     . invalid-cluster-subnet-group-state-fault)
    ("InvalidClusterSubnetStateFault" . invalid-cluster-subnet-state-fault)
    ("InvalidClusterTrackFault" . invalid-cluster-track-fault)
    ("InvalidDataShareFault" . invalid-data-share-fault)
    ("InvalidElasticIpFault" . invalid-elastic-ip-fault)
    ("InvalidEndpointStateFault" . invalid-endpoint-state-fault)
    ("InvalidHsmClientCertificateStateFault"
     . invalid-hsm-client-certificate-state-fault)
    ("InvalidHsmConfigurationStateFault"
     . invalid-hsm-configuration-state-fault)
    ("InvalidNamespaceFault" . invalid-namespace-fault)
    ("InvalidPolicyFault" . invalid-policy-fault)
    ("InvalidReservedNodeStateFault" . invalid-reserved-node-state-fault)
    ("InvalidRestoreFault" . invalid-restore-fault)
    ("InvalidRetentionPeriodFault" . invalid-retention-period-fault)
    ("InvalidS3BucketNameFault" . invalid-s3bucket-name-fault)
    ("InvalidS3KeyPrefixFault" . invalid-s3key-prefix-fault)
    ("InvalidScheduleFault" . invalid-schedule-fault)
    ("InvalidScheduledActionFault" . invalid-scheduled-action-fault)
    ("InvalidSnapshotCopyGrantStateFault"
     . invalid-snapshot-copy-grant-state-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidSubscriptionStateFault" . invalid-subscription-state-fault)
    ("InvalidTableRestoreArgumentFault" . invalid-table-restore-argument-fault)
    ("InvalidTagFault" . invalid-tag-fault)
    ("InvalidUsageLimitFault" . invalid-usage-limit-fault)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("Ipv6CidrBlockNotFoundFault" . ipv6cidr-block-not-found-fault)
    ("LimitExceededFault" . limit-exceeded-fault)
    ("NumberOfNodesPerClusterLimitExceededFault"
     . number-of-nodes-per-cluster-limit-exceeded-fault)
    ("NumberOfNodesQuotaExceededFault" . number-of-nodes-quota-exceeded-fault)
    ("PartnerNotFoundFault" . partner-not-found-fault)
    ("RedshiftIdcApplicationAlreadyExistsFault"
     . redshift-idc-application-already-exists-fault)
    ("RedshiftIdcApplicationNotExistsFault"
     . redshift-idc-application-not-exists-fault)
    ("RedshiftIdcApplicationQuotaExceededFault"
     . redshift-idc-application-quota-exceeded-fault)
    ("ReservedNodeAlreadyExistsFault" . reserved-node-already-exists-fault)
    ("ReservedNodeAlreadyMigratedFault" . reserved-node-already-migrated-fault)
    ("ReservedNodeExchangeNotFoundFault"
     . reserved-node-exchange-not-found-fault)
    ("ReservedNodeNotFoundFault" . reserved-node-not-found-fault)
    ("ReservedNodeOfferingNotFoundFault"
     . reserved-node-offering-not-found-fault)
    ("ReservedNodeQuotaExceededFault" . reserved-node-quota-exceeded-fault)
    ("ResizeNotFoundFault" . resize-not-found-fault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("SNSTopicArnNotFoundFault" . snstopic-arn-not-found-fault)
    ("ScheduleDefinitionTypeUnsupportedFault"
     . schedule-definition-type-unsupported-fault)
    ("ScheduledActionAlreadyExistsFault"
     . scheduled-action-already-exists-fault)
    ("ScheduledActionNotFoundFault" . scheduled-action-not-found-fault)
    ("ScheduledActionQuotaExceededFault"
     . scheduled-action-quota-exceeded-fault)
    ("ScheduledActionTypeUnsupportedFault"
     . scheduled-action-type-unsupported-fault)
    ("SnapshotCopyAlreadyDisabledFault" . snapshot-copy-already-disabled-fault)
    ("SnapshotCopyAlreadyEnabledFault" . snapshot-copy-already-enabled-fault)
    ("SnapshotCopyDisabledFault" . snapshot-copy-disabled-fault)
    ("SnapshotCopyGrantAlreadyExistsFault"
     . snapshot-copy-grant-already-exists-fault)
    ("SnapshotCopyGrantNotFoundFault" . snapshot-copy-grant-not-found-fault)
    ("SnapshotCopyGrantQuotaExceededFault"
     . snapshot-copy-grant-quota-exceeded-fault)
    ("SnapshotScheduleAlreadyExistsFault"
     . snapshot-schedule-already-exists-fault)
    ("SnapshotScheduleNotFoundFault" . snapshot-schedule-not-found-fault)
    ("SnapshotScheduleQuotaExceededFault"
     . snapshot-schedule-quota-exceeded-fault)
    ("SnapshotScheduleUpdateInProgressFault"
     . snapshot-schedule-update-in-progress-fault)
    ("SourceNotFoundFault" . source-not-found-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("SubscriptionAlreadyExistFault" . subscription-already-exist-fault)
    ("SubscriptionCategoryNotFoundFault"
     . subscription-category-not-found-fault)
    ("SubscriptionEventIdNotFoundFault"
     . subscription-event-id-not-found-fault)
    ("SubscriptionNotFoundFault" . subscription-not-found-fault)
    ("SubscriptionSeverityNotFoundFault"
     . subscription-severity-not-found-fault)
    ("TableLimitExceededFault" . table-limit-exceeded-fault)
    ("TableRestoreNotFoundFault" . table-restore-not-found-fault)
    ("TagLimitExceededFault" . tag-limit-exceeded-fault)
    ("UnauthorizedOperation" . unauthorized-operation)
    ("UnauthorizedPartnerIntegrationFault"
     . unauthorized-partner-integration-fault)
    ("UnknownSnapshotCopyRegionFault" . unknown-snapshot-copy-region-fault)
    ("UnsupportedOperationFault" . unsupported-operation-fault)
    ("UnsupportedOptionFault" . unsupported-option-fault)
    ("UsageLimitAlreadyExistsFault" . usage-limit-already-exists-fault)
    ("UsageLimitNotFoundFault" . usage-limit-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass accept-reserved-node-exchange-input-message
                       common-lisp:nil
                       ((reserved-node-id :initarg :reserved-node-id :initform
                         (common-lisp:error ":reserved-node-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-accept-reserved-node-exchange-input-message-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-offering-id :initarg
                         :target-reserved-node-offering-id :initform
                         (common-lisp:error
                          ":target-reserved-node-offering-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-accept-reserved-node-exchange-input-message-target-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-reserved-node-exchange-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-reserved-node-exchange-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-reserved-node-exchange-input-message
                    'make-accept-reserved-node-exchange-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-node-exchange-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-node-exchange-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-node-exchange-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-reserved-node-exchange-output-message
                       common-lisp:nil
                       ((exchanged-reserved-node :initarg
                         :exchanged-reserved-node :initform common-lisp:nil
                         :type (common-lisp:or reserved-node common-lisp:null)
                         :accessor
                         struct-shape-accept-reserved-node-exchange-output-message-exchanged-reserved-node
                         :shape "ReservedNode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-reserved-node-exchange-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-reserved-node-exchange-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-reserved-node-exchange-output-message
                    'make-accept-reserved-node-exchange-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-node-exchange-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-node-exchange-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exchanged-reserved-node))
      (common-lisp:list
       (common-lisp:cons "ExchangedReservedNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-node-exchange-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-to-cluster-denied-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-to-cluster-denied-fault)))
(common-lisp:progn
 (common-lisp:define-condition access-to-snapshot-denied-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-to-snapshot-denied-fault)))
(common-lisp:progn
 (common-lisp:defclass account-attribute common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-account-attribute-attribute-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attribute-values :initarg :attribute-values :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         struct-shape-account-attribute-attribute-values :shape
                         "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-attribute 'make-account-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-attribute-list common-lisp:nil
                       ((account-attributes :initarg :account-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor
                         struct-shape-account-attribute-list-account-attributes
                         :shape "AttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-attribute-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-attribute-list 'make-account-attribute-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-attribute-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-attribute-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-attributes))
      (common-lisp:list
       (common-lisp:cons "AccountAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-attribute-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass account-with-restore-access common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-account-with-restore-access-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-alias :initarg :account-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-account-with-restore-access-account-alias
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-with-restore-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-with-restore-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-with-restore-access
                    'make-account-with-restore-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-with-restore-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-with-restore-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "AccountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-with-restore-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accounts-with-restore-access-list ()
   '(trivial-types:proper-list account-with-restore-access))
 (common-lisp:defun make-accounts-with-restore-access-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            account-with-restore-access))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aqua-configuration common-lisp:nil
                       ((aqua-status :initarg :aqua-status :initform
                         common-lisp:nil :type
                         (common-lisp:or aqua-status common-lisp:null)
                         :accessor struct-shape-aqua-configuration-aqua-status
                         :shape "AquaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aqua-configuration-status :initarg
                         :aqua-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or aqua-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-aqua-configuration-aqua-configuration-status
                         :shape "AquaConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aqua-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aqua-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aqua-configuration 'make-aqua-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aqua-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aqua-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aqua-status))
      (common-lisp:list
       (common-lisp:cons "AquaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aqua-configuration-status))
      (common-lisp:list
       (common-lisp:cons "AquaConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aqua-configuration))
   common-lisp:nil))
(common-lisp:deftype aqua-configuration-status () 'common-lisp:string)
(common-lisp:deftype aqua-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-data-share-consumer-message common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         (common-lisp:error ":data-share-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-associate-data-share-consumer-message-data-share-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associate-entire-account :initarg
                         :associate-entire-account :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-associate-data-share-consumer-message-associate-entire-account
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-arn :initarg :consumer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-data-share-consumer-message-consumer-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-region :initarg :consumer-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-data-share-consumer-message-consumer-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-writes :initarg :allow-writes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-associate-data-share-consumer-message-allow-writes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-data-share-consumer-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-data-share-consumer-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-data-share-consumer-message
                    'make-associate-data-share-consumer-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-data-share-consumer-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-data-share-consumer-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-entire-account))
      (common-lisp:list
       (common-lisp:cons "AssociateEntireAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-region))
      (common-lisp:list
       (common-lisp:cons "ConsumerRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-writes))
      (common-lisp:list
       (common-lisp:cons "AllowWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-data-share-consumer-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-cluster-list ()
   '(trivial-types:proper-list cluster-associated-to-schedule))
 (common-lisp:defun make-associated-cluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-associated-to-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass association common-lisp:nil
                       ((custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-association-custom-domain-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-certificate-expiry-date :initarg
                         :custom-domain-certificate-expiry-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-association-custom-domain-certificate-expiry-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-associations :initarg
                         :certificate-associations :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-association-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-association-certificate-associations
                         :shape "CertificateAssociationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'association
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'association 'make-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-associations))
      (common-lisp:list
       (common-lisp:cons "CertificateAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-list ()
   '(trivial-types:proper-list association))
 (common-lisp:defun make-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-list ()
   '(trivial-types:proper-list account-attribute))
 (common-lisp:defun make-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-attribute-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-value-list ()
   '(trivial-types:proper-list attribute-value-target))
 (common-lisp:defun make-attribute-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-value-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attribute-value-target common-lisp:nil
                       ((attribute-value :initarg :attribute-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attribute-value-target-attribute-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-value-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-value-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-value-target 'make-attribute-value-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attribute-value-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attribute-value-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attribute-value-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authentication-profile common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform common-lisp:nil
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-authentication-profile-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-profile-content :initarg
                         :authentication-profile-content :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authentication-profile-authentication-profile-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authentication-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authentication-profile 'make-authentication-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-content))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition authentication-profile-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'authentication-profile-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype authentication-profile-list ()
   '(trivial-types:proper-list authentication-profile))
 (common-lisp:defun make-authentication-profile-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authentication-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype authentication-profile-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition authentication-profile-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'authentication-profile-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition authentication-profile-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'authentication-profile-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-quota-exceeded-fault)))
(common-lisp:deftype authorization-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorize-cluster-security-group-ingress-message
                       common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform
                         (common-lisp:error
                          ":cluster-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cluster-security-group-ingress-message-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrip :initarg :cidrip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cluster-security-group-ingress-message-cidrip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cluster-security-group-ingress-message-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-cluster-security-group-ingress-message-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-cluster-security-group-ingress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-cluster-security-group-ingress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-cluster-security-group-ingress-message
                    'make-authorize-cluster-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-cluster-security-group-ingress-result
                       common-lisp:nil
                       ((cluster-security-group :initarg
                         :cluster-security-group :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-authorize-cluster-security-group-ingress-result-cluster-security-group
                         :shape "ClusterSecurityGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-cluster-security-group-ingress-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-cluster-security-group-ingress-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-cluster-security-group-ingress-result
                    'make-authorize-cluster-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-data-share-message common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         (common-lisp:error ":data-share-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-data-share-message-data-share-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-identifier :initarg :consumer-identifier
                         :initform
                         (common-lisp:error ":consumer-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-data-share-message-consumer-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-writes :initarg :allow-writes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-authorize-data-share-message-allow-writes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-data-share-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorize-data-share-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-data-share-message
                    'make-authorize-data-share-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-data-share-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-data-share-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-identifier))
      (common-lisp:list
       (common-lisp:cons "ConsumerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-writes))
      (common-lisp:list
       (common-lisp:cons "AllowWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-data-share-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-endpoint-access-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authorize-endpoint-access-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account :initarg :account :initform
                         (common-lisp:error ":account is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authorize-endpoint-access-message-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-ids :initarg :vpc-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-identifier-list common-lisp:null)
                         :accessor
                         struct-shape-authorize-endpoint-access-message-vpc-ids
                         :shape "VpcIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-endpoint-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-endpoint-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-endpoint-access-message
                    'make-authorize-endpoint-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-endpoint-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-endpoint-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-ids))
      (common-lisp:list
       (common-lisp:cons "VpcIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-endpoint-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-snapshot-access-message common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authorize-snapshot-access-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-arn :initarg :snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authorize-snapshot-access-message-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-cluster-identifier :initarg
                         :snapshot-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-snapshot-access-message-snapshot-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-with-restore-access :initarg
                         :account-with-restore-access :initform
                         (common-lisp:error
                          ":account-with-restore-access is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorize-snapshot-access-message-account-with-restore-access
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-snapshot-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-snapshot-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-snapshot-access-message
                    'make-authorize-snapshot-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "AccountWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-snapshot-access-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor
                         struct-shape-authorize-snapshot-access-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-snapshot-access-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-snapshot-access-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-snapshot-access-result
                    'make-authorize-snapshot-access-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorized-audience-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-authorized-audience-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass authorized-token-issuer common-lisp:nil
                       ((trusted-token-issuer-arn :initarg
                         :trusted-token-issuer-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-authorized-token-issuer-trusted-token-issuer-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-audiences-list :initarg
                         :authorized-audiences-list :initform common-lisp:nil
                         :type
                         (common-lisp:or authorized-audience-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-authorized-token-issuer-authorized-audiences-list
                         :shape "AuthorizedAudienceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorized-token-issuer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorized-token-issuer
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorized-token-issuer 'make-authorized-token-issuer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorized-token-issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorized-token-issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trusted-token-issuer-arn))
      (common-lisp:list
       (common-lisp:cons "TrustedTokenIssuerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-audiences-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAudiencesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorized-token-issuer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorized-token-issuer-list ()
   '(trivial-types:proper-list authorized-token-issuer))
 (common-lisp:defun make-authorized-token-issuer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authorized-token-issuer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-availability-zone-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-platforms :initarg :supported-platforms
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-platforms-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-availability-zone-supported-platforms
                         :shape "SupportedPlatformsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-platforms))
      (common-lisp:list
       (common-lisp:cons "SupportedPlatforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-cluster-snapshots-request common-lisp:nil
                       ((identifiers :initarg :identifiers :initform
                         (common-lisp:error ":identifiers is required") :type
                         (common-lisp:or delete-cluster-snapshot-message-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-cluster-snapshots-request-identifiers
                         :shape "DeleteClusterSnapshotMessageList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-cluster-snapshots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-cluster-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-cluster-snapshots-request
                    'make-batch-delete-cluster-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-cluster-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-cluster-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifiers))
      (common-lisp:list
       (common-lisp:cons "Identifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-cluster-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-cluster-snapshots-result common-lisp:nil
                       ((resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-cluster-snapshots-result-resources
                         :shape "SnapshotIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-snapshot-operation-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-cluster-snapshots-result-errors
                         :shape "BatchSnapshotOperationErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-cluster-snapshots-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-cluster-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-cluster-snapshots-result
                    'make-batch-delete-cluster-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-cluster-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-cluster-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-cluster-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition batch-delete-request-size-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'batch-delete-request-size-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition batch-modify-cluster-snapshots-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'batch-modify-cluster-snapshots-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass batch-modify-cluster-snapshots-message common-lisp:nil
                       ((snapshot-identifier-list :initarg
                         :snapshot-identifier-list :initform
                         (common-lisp:error
                          ":snapshot-identifier-list is required")
                         :type
                         (common-lisp:or snapshot-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-modify-cluster-snapshots-message-snapshot-identifier-list
                         :shape "SnapshotIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-batch-modify-cluster-snapshots-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-batch-modify-cluster-snapshots-message-force
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-modify-cluster-snapshots-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-modify-cluster-snapshots-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-modify-cluster-snapshots-message
                    'make-batch-modify-cluster-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-modify-cluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-modify-cluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-identifier-list))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-modify-cluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-modify-cluster-snapshots-output-message
                       common-lisp:nil
                       ((resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-modify-cluster-snapshots-output-message-resources
                         :shape "SnapshotIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-snapshot-operation-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-modify-cluster-snapshots-output-message-errors
                         :shape "BatchSnapshotOperationErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-modify-cluster-snapshots-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-modify-cluster-snapshots-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-modify-cluster-snapshots-output-message
                    'make-batch-modify-cluster-snapshots-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-modify-cluster-snapshots-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-modify-cluster-snapshots-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-modify-cluster-snapshots-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-snapshot-operation-error-list ()
   '(trivial-types:proper-list snapshot-error-message))
 (common-lisp:defun make-batch-snapshot-operation-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-error-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-snapshot-operation-errors ()
   '(trivial-types:proper-list snapshot-error-message))
 (common-lisp:defun make-batch-snapshot-operation-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-error-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass cancel-resize-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-resize-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-resize-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-resize-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-resize-message 'make-cancel-resize-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-resize-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-resize-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-resize-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate-association common-lisp:nil
                       ((custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-association-custom-domain-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-association-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-association 'make-certificate-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-association-list ()
   '(trivial-types:proper-list certificate-association))
 (common-lisp:defun make-certificate-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-node-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-status :initarg :cluster-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-availability-status :initarg
                         :cluster-availability-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-cluster-availability-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modify-status :initarg :modify-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-modify-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-master-username :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-dbname :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor struct-shape-cluster-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-cluster-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-automated-snapshot-retention-period
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-manual-snapshot-retention-period
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-security-groups :initarg
                         :cluster-security-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-cluster-cluster-security-groups
                         :shape "ClusterSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor struct-shape-cluster-vpc-security-groups
                         :shape "VpcSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-parameter-groups :initarg
                         :cluster-parameter-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-parameter-group-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-cluster-parameter-groups :shape
                         "ClusterParameterGroupStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-cluster-subnet-group-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-vpc-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-availability-zone :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-modified-values
                                         common-lisp:null)
                         :accessor struct-shape-cluster-pending-modified-values
                         :shape "PendingModifiedValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-version-upgrade :initarg :allow-version-upgrade
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-allow-version-upgrade :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-number-of-nodes :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-publicly-accessible :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-encrypted :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (restore-status :initarg :restore-status :initform
                         common-lisp:nil :type
                         (common-lisp:or restore-status common-lisp:null)
                         :accessor struct-shape-cluster-restore-status :shape
                         "RestoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-transfer-progress :initarg
                         :data-transfer-progress :initform common-lisp:nil
                         :type
                         (common-lisp:or data-transfer-progress
                                         common-lisp:null)
                         :accessor struct-shape-cluster-data-transfer-progress
                         :shape "DataTransferProgress" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hsm-status :initarg :hsm-status :initform
                         common-lisp:nil :type
                         (common-lisp:or hsm-status common-lisp:null) :accessor
                         struct-shape-cluster-hsm-status :shape "HsmStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-snapshot-copy-status :initarg
                         :cluster-snapshot-copy-status :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-snapshot-copy-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-cluster-snapshot-copy-status
                         :shape "ClusterSnapshotCopyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-public-key :initarg :cluster-public-key
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-public-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-nodes :initarg :cluster-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-nodes-list common-lisp:null)
                         :accessor struct-shape-cluster-cluster-nodes :shape
                         "ClusterNodesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elastic-ip-status :initarg :elastic-ip-status
                         :initform common-lisp:nil :type
                         (common-lisp:or elastic-ip-status common-lisp:null)
                         :accessor struct-shape-cluster-elastic-ip-status
                         :shape "ElasticIpStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-revision-number :initarg
                         :cluster-revision-number :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-cluster-revision-number
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-cluster-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cluster-enhanced-vpc-routing :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iam-roles :initarg :iam-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-iam-role-list
                                         common-lisp:null)
                         :accessor struct-shape-cluster-iam-roles :shape
                         "ClusterIamRoleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-actions :initarg :pending-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-actions-list common-lisp:null)
                         :accessor struct-shape-cluster-pending-actions :shape
                         "PendingActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elastic-resize-number-of-node-options :initarg
                         :elastic-resize-number-of-node-options :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-elastic-resize-number-of-node-options
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deferred-maintenance-windows :initarg
                         :deferred-maintenance-windows :initform
                         common-lisp:nil :type
                         (common-lisp:or deferred-maintenance-windows-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-deferred-maintenance-windows
                         :shape "DeferredMaintenanceWindowsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (snapshot-schedule-identifier :initarg
                         :snapshot-schedule-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-snapshot-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-schedule-state :initarg
                         :snapshot-schedule-state :initform common-lisp:nil
                         :type (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-cluster-snapshot-schedule-state
                         :shape "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-next-snapshot-schedule-time :initarg
                         :expected-next-snapshot-schedule-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-expected-next-snapshot-schedule-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-next-snapshot-schedule-time-status :initarg
                         :expected-next-snapshot-schedule-time-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-expected-next-snapshot-schedule-time-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-maintenance-window-start-time :initarg
                         :next-maintenance-window-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-next-maintenance-window-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resize-info :initarg :resize-info :initform
                         common-lisp:nil :type
                         (common-lisp:or resize-info common-lisp:null)
                         :accessor struct-shape-cluster-resize-info :shape
                         "ResizeInfo" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-relocation-status :initarg
                         :availability-zone-relocation-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-availability-zone-relocation-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-namespace-arn :initarg :cluster-namespace-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-namespace-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-storage-capacity-in-mega-bytes :initarg
                         :total-storage-capacity-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-cluster-total-storage-capacity-in-mega-bytes
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aqua-configuration :initarg :aqua-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or aqua-configuration common-lisp:null)
                         :accessor struct-shape-cluster-aqua-configuration
                         :shape "AquaConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-iam-role-arn :initarg :default-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-default-iam-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reserved-node-exchange-status :initarg
                         :reserved-node-exchange-status :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-node-exchange-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-reserved-node-exchange-status
                         :shape "ReservedNodeExchangeStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-custom-domain-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-custom-domain-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-certificate-expiry-date :initarg
                         :custom-domain-certificate-expiry-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-custom-domain-certificate-expiry-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-password-secret-arn :initarg
                         :master-password-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-master-password-secret-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-password-secret-kms-key-id :initarg
                         :master-password-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-master-password-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-ip-address-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-multi-az :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-azsecondary :initarg :multi-azsecondary
                         :initform common-lisp:nil :type
                         (common-lisp:or secondary-cluster-info
                                         common-lisp:null)
                         :accessor struct-shape-cluster-multi-azsecondary
                         :shape "SecondaryClusterInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-availability-status))
      (common-lisp:list
       (common-lisp:cons "ClusterAvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modify-status))
      (common-lisp:list
       (common-lisp:cons "ModifyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-progress))
      (common-lisp:list
       (common-lisp:cons "DataTransferProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-status))
      (common-lisp:list
       (common-lisp:cons "HsmStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-snapshot-copy-status))
      (common-lisp:list
       (common-lisp:cons "ClusterSnapshotCopyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-public-key))
      (common-lisp:list
       (common-lisp:cons "ClusterPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-nodes))
      (common-lisp:list
       (common-lisp:cons "ClusterNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip-status))
      (common-lisp:list
       (common-lisp:cons "ElasticIpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-revision-number))
      (common-lisp:list
       (common-lisp:cons "ClusterRevisionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-actions))
      (common-lisp:list
       (common-lisp:cons "PendingActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-resize-number-of-node-options))
      (common-lisp:list
       (common-lisp:cons "ElasticResizeNumberOfNodeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deferred-maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "DeferredMaintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-state))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-next-snapshot-schedule-time))
      (common-lisp:list
       (common-lisp:cons "ExpectedNextSnapshotScheduleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-next-snapshot-schedule-time-status))
      (common-lisp:list
       (common-lisp:cons "ExpectedNextSnapshotScheduleTimeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-maintenance-window-start-time))
      (common-lisp:list
       (common-lisp:cons "NextMaintenanceWindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-info))
      (common-lisp:list
       (common-lisp:cons "ResizeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-relocation-status))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneRelocationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-namespace-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterNamespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-storage-capacity-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalStorageCapacityInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aqua-configuration))
      (common-lisp:list
       (common-lisp:cons "AquaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-exchange-status))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeExchangeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-arn))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azsecondary))
      (common-lisp:list
       (common-lisp:cons "MultiAZSecondary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-associated-to-schedule common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-associated-to-schedule-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-association-state :initarg
                         :schedule-association-state :initform common-lisp:nil
                         :type (common-lisp:or schedule-state common-lisp:null)
                         :accessor
                         struct-shape-cluster-associated-to-schedule-schedule-association-state
                         :shape "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-associated-to-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-associated-to-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-associated-to-schedule
                    'make-cluster-associated-to-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-associated-to-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-associated-to-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-association-state))
      (common-lisp:list
       (common-lisp:cons "ScheduleAssociationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-associated-to-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-credentials common-lisp:nil
                       ((db-user :initarg :db-user :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-credentials-db-user
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-password :initarg :db-password :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-cluster-credentials-db-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-credentials-expiration :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-credentials 'make-cluster-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "DbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-db-revision common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-db-revision-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-database-revision :initarg
                         :current-database-revision :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-db-revision-current-database-revision
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-revision-release-date :initarg
                         :database-revision-release-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-db-revision-database-revision-release-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-targets :initarg :revision-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-targets-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-db-revision-revision-targets
                         :shape "RevisionTargetsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-db-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-db-revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-db-revision 'make-cluster-db-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-db-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-db-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-database-revision))
      (common-lisp:list
       (common-lisp:cons "CurrentDatabaseRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-revision-release-date))
      (common-lisp:list
       (common-lisp:cons "DatabaseRevisionReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-targets))
      (common-lisp:list
       (common-lisp:cons "RevisionTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-db-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-db-revisions-list ()
   '(trivial-types:proper-list cluster-db-revision))
 (common-lisp:defun make-cluster-db-revisions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-db-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-db-revisions-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-db-revisions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-db-revisions :initarg :cluster-db-revisions
                         :initform common-lisp:nil :type
                         (common-lisp:or cluster-db-revisions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-db-revisions-message-cluster-db-revisions
                         :shape "ClusterDbRevisionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-db-revisions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-db-revisions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-db-revisions-message
                    'make-cluster-db-revisions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-db-revisions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-db-revisions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-db-revisions))
      (common-lisp:list
       (common-lisp:cons "ClusterDbRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-db-revisions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-extended-credentials common-lisp:nil
                       ((db-user :initarg :db-user :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-extended-credentials-db-user
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-password :initarg :db-password :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-cluster-extended-credentials-db-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-extended-credentials-expiration
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-refresh-time :initarg :next-refresh-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-cluster-extended-credentials-next-refresh-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-extended-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-extended-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-extended-credentials
                    'make-cluster-extended-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-extended-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-extended-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "DbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-refresh-time))
      (common-lisp:list
       (common-lisp:cons "NextRefreshTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-extended-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-iam-role common-lisp:nil
                       ((iam-role-arn :initarg :iam-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-iam-role-iam-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apply-status :initarg :apply-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-iam-role-apply-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-iam-role
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-iam-role
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-iam-role 'make-cluster-iam-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-iam-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-iam-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-status))
      (common-lisp:list
       (common-lisp:cons "ApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-iam-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-iam-role-list ()
   '(trivial-types:proper-list cluster-iam-role))
 (common-lisp:defun make-cluster-iam-role-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-iam-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cluster-list () '(trivial-types:proper-list cluster))
 (common-lisp:defun make-cluster-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-node common-lisp:nil
                       ((node-role :initarg :node-role :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-node-node-role :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-ipaddress :initarg :private-ipaddress
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-node-private-ipaddress :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-ipaddress :initarg :public-ipaddress :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-node-public-ipaddress :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-node 'make-cluster-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "NodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipaddress))
      (common-lisp:list
       (common-lisp:cons "PrivateIPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ipaddress))
      (common-lisp:list
       (common-lisp:cons "PublicIPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-nodes-list ()
   '(trivial-types:proper-list cluster-node))
 (common-lisp:defun make-cluster-nodes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-on-latest-revision-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-on-latest-revision-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-parameter-group common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-parameter-group-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-group-family :initarg
                         :parameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-group-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-parameter-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-cluster-parameter-group-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-parameter-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group 'make-cluster-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-parameter-group-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-parameter-group-details common-lisp:nil
                       ((parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-group-details-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-group-details-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-parameter-group-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-parameter-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-details
                    'make-cluster-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-parameter-group-name-message common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-parameter-group-name-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-group-status :initarg
                         :parameter-group-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-group-name-message-parameter-group-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-parameter-group-name-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-parameter-group-name-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-name-message
                    'make-cluster-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-parameter-group-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-parameter-group-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-parameter-group-status common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-parameter-group-status-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-group-status-parameter-apply-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-parameter-status-list :initarg
                         :cluster-parameter-status-list :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-parameter-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-group-status-cluster-parameter-status-list
                         :shape "ClusterParameterStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-parameter-group-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-parameter-group-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-status
                    'make-cluster-parameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-status-list))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-parameter-group-status-list ()
   '(trivial-types:proper-list cluster-parameter-group-status))
 (common-lisp:defun make-cluster-parameter-group-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-parameter-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-parameter-groups-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-groups :initarg :parameter-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-group-list common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-groups-message-parameter-groups
                         :shape "ParameterGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-parameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-groups-message
                    'make-cluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-parameter-status common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-parameter-status-parameter-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-parameter-status-parameter-apply-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-apply-error-description :initarg
                         :parameter-apply-error-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-parameter-status-parameter-apply-error-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-parameter-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-parameter-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-status 'make-cluster-parameter-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-error-description))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyErrorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-parameter-status-list ()
   '(trivial-types:proper-list cluster-parameter-status))
 (common-lisp:defun make-cluster-parameter-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-parameter-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-security-group common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-security-group-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-security-group-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-groups :initarg :ec2security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2security-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-security-group-ec2security-groups
                         :shape "EC2SecurityGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ipranges :initarg :ipranges :initform common-lisp:nil
                         :type (common-lisp:or iprange-list common-lisp:null)
                         :accessor struct-shape-cluster-security-group-ipranges
                         :shape "IPRangeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-cluster-security-group-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-security-group 'make-cluster-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipranges))
      (common-lisp:list
       (common-lisp:cons "IPRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-security-group-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-security-group-membership common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-security-group-membership-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-security-group-membership-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-security-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-membership
                    'make-cluster-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-security-group-membership-list ()
   '(trivial-types:proper-list cluster-security-group-membership))
 (common-lisp:defun make-cluster-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-security-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-security-group-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-security-groups :initarg
                         :cluster-security-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-security-group-message-cluster-security-groups
                         :shape "ClusterSecurityGroups" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-security-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-security-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-message
                    'make-cluster-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-security-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-cluster-security-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-security-group-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-security-group-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cluster-security-groups ()
   '(trivial-types:proper-list cluster-security-group))
 (common-lisp:defun make-cluster-security-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-snapshot-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-snapshot-copy-status common-lisp:nil
                       ((destination-region :initarg :destination-region
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-snapshot-copy-status-destination-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-cluster-snapshot-copy-status-retention-period
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-snapshot-copy-status-manual-snapshot-retention-period
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-snapshot-copy-status-snapshot-copy-grant-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-snapshot-copy-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-snapshot-copy-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-snapshot-copy-status
                    'make-cluster-snapshot-copy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-copy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-copy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-copy-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-snapshot-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-snapshot-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-subnet-group common-lisp:nil
                       ((cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-subnet-group-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-subnet-group-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-subnet-group-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-group-status :initarg :subnet-group-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-subnet-group-subnet-group-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or subnet-list common-lisp:null)
                         :accessor struct-shape-cluster-subnet-group-subnets
                         :shape "SubnetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-cluster-subnet-group-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-cluster-ip-address-types :initarg
                         :supported-cluster-ip-address-types :initform
                         common-lisp:nil :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-cluster-subnet-group-supported-cluster-ip-address-types
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-subnet-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-subnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group 'make-cluster-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-cluster-ip-address-types))
      (common-lisp:list
       (common-lisp:cons "SupportedClusterIpAddressTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-group-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-subnet-group-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cluster-subnet-group-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-subnet-groups :initarg :cluster-subnet-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or cluster-subnet-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-subnet-group-message-cluster-subnet-groups
                         :shape "ClusterSubnetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group-message
                    'make-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-group-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-group-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cluster-subnet-groups ()
   '(trivial-types:proper-list cluster-subnet-group))
 (common-lisp:defun make-cluster-subnet-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-subnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass cluster-version common-lisp:nil
                       ((cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-version-cluster-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-parameter-group-family :initarg
                         :cluster-parameter-group-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-version-cluster-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-version-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-version 'make-cluster-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-version-list ()
   '(trivial-types:proper-list cluster-version))
 (common-lisp:defun make-cluster-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-versions-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-versions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-versions :initarg :cluster-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-version-list common-lisp:null)
                         :accessor
                         struct-shape-cluster-versions-message-cluster-versions
                         :shape "ClusterVersionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-versions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-versions-message 'make-cluster-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-versions))
      (common-lisp:list
       (common-lisp:cons "ClusterVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clusters-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-clusters-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (clusters :initarg :clusters :initform common-lisp:nil
                         :type (common-lisp:or cluster-list common-lisp:null)
                         :accessor struct-shape-clusters-message-clusters
                         :shape "ClusterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clusters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clusters-message 'make-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-policy-update-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'conflict-policy-update-fault)))
(common-lisp:progn
 (common-lisp:defclass copy-cluster-snapshot-message common-lisp:nil
                       ((source-snapshot-identifier :initarg
                         :source-snapshot-identifier :initform
                         (common-lisp:error
                          ":source-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-cluster-snapshot-message-source-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-snapshot-cluster-identifier :initarg
                         :source-snapshot-cluster-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-copy-cluster-snapshot-message-source-snapshot-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-snapshot-identifier :initarg
                         :target-snapshot-identifier :initform
                         (common-lisp:error
                          ":target-snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-copy-cluster-snapshot-message-target-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-copy-cluster-snapshot-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-cluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-cluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-cluster-snapshot-message
                    'make-copy-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-cluster-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor
                         struct-shape-copy-cluster-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-cluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-cluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-cluster-snapshot-result
                    'make-copy-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition copy-to-region-disabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'copy-to-region-disabled-fault)))
(common-lisp:progn
 (common-lisp:defclass create-authentication-profile-message common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform
                         (common-lisp:error
                          ":authentication-profile-name is required")
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-authentication-profile-message-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-profile-content :initarg
                         :authentication-profile-content :initform
                         (common-lisp:error
                          ":authentication-profile-content is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-authentication-profile-message-authentication-profile-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-authentication-profile-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-authentication-profile-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-authentication-profile-message
                    'make-create-authentication-profile-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-authentication-profile-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-authentication-profile-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-content))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-authentication-profile-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-authentication-profile-result common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform common-lisp:nil
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-authentication-profile-result-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-profile-content :initarg
                         :authentication-profile-content :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-authentication-profile-result-authentication-profile-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-authentication-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-authentication-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-authentication-profile-result
                    'make-create-authentication-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-authentication-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-authentication-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-content))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-authentication-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-message common-lisp:nil
                       ((dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-cluster-message-dbname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-cluster-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         (common-lisp:error ":node-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         (common-lisp:error ":master-username is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-master-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-security-groups :initarg
                         :cluster-security-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-cluster-security-groups
                         :shape "ClusterSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-parameter-group-name :initarg
                         :cluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-cluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-automated-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-create-cluster-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-cluster-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-version-upgrade :initarg :allow-version-upgrade
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-allow-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-number-of-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-encrypted :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elastic-ip :initarg :elastic-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-elastic-ip :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cluster-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-enhanced-vpc-routing
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-additional-info
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-roles :initarg :iam-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-role-arn-list common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-iam-roles :shape
                         "IamRoleArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-schedule-identifier :initarg
                         :snapshot-schedule-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-snapshot-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-relocation :initarg
                         :availability-zone-relocation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-availability-zone-relocation
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aqua-configuration-status :initarg
                         :aqua-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or aqua-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-aqua-configuration-status
                         :shape "AquaConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-iam-role-arn :initarg :default-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-default-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-sample-data :initarg :load-sample-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-load-sample-data
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-password :initarg
                         :manage-master-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-message-manage-master-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-password-secret-kms-key-id :initarg
                         :master-password-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-master-password-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-ip-address-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-create-cluster-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-idc-application-arn :initarg
                         :redshift-idc-application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-message-redshift-idc-application-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-message 'make-create-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-relocation))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneRelocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aqua-configuration-status))
      (common-lisp:list
       (common-lisp:cons "AquaConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-sample-data))
      (common-lisp:list
       (common-lisp:cons "LoadSampleData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-arn))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-parameter-group-message common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-parameter-group-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-group-family :initarg
                         :parameter-group-family :initform
                         (common-lisp:error
                          ":parameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-parameter-group-message-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-parameter-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cluster-parameter-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-parameter-group-message
                    'make-create-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-parameter-group-result common-lisp:nil
                       ((cluster-parameter-group :initarg
                         :cluster-parameter-group :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-parameter-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-parameter-group-result-cluster-parameter-group
                         :shape "ClusterParameterGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-parameter-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-parameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-parameter-group-result
                    'make-create-cluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-create-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-result 'make-create-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-security-group-message common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform
                         (common-lisp:error
                          ":cluster-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-security-group-message-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-security-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cluster-security-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-security-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-security-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-security-group-message
                    'make-create-cluster-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-security-group-result common-lisp:nil
                       ((cluster-security-group :initarg
                         :cluster-security-group :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-security-group-result-cluster-security-group
                         :shape "ClusterSecurityGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-security-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-security-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-security-group-result
                    'make-create-cluster-security-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-snapshot-message common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform
                         (common-lisp:error ":snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-snapshot-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-snapshot-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-snapshot-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cluster-snapshot-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-snapshot-message
                    'make-create-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-snapshot-result
                    'make-create-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-subnet-group-message common-lisp:nil
                       ((cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform
                         (common-lisp:error
                          ":cluster-subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-subnet-group-message-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-subnet-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-subnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-cluster-subnet-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-subnet-group-message
                    'make-create-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-subnet-group-result common-lisp:nil
                       ((cluster-subnet-group :initarg :cluster-subnet-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cluster-subnet-group common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-subnet-group-result-cluster-subnet-group
                         :shape "ClusterSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-subnet-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-subnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-subnet-group-result
                    'make-create-cluster-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-domain-association-message common-lisp:nil
                       ((custom-domain-name :initarg :custom-domain-name
                         :initform
                         (common-lisp:error ":custom-domain-name is required")
                         :type
                         (common-lisp:or custom-domain-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-domain-association-message-custom-domain-name
                         :shape "CustomDomainNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         (common-lisp:error
                          ":custom-domain-certificate-arn is required")
                         :type
                         (common-lisp:or custom-domain-certificate-arn-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-domain-association-message-custom-domain-certificate-arn
                         :shape "CustomDomainCertificateArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-domain-association-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-domain-association-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-domain-association-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-domain-association-message
                    'make-create-custom-domain-association-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-domain-association-result common-lisp:nil
                       ((custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-domain-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-domain-association-result-custom-domain-name
                         :shape "CustomDomainNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-domain-certificate-arn-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-domain-association-result-custom-domain-certificate-arn
                         :shape "CustomDomainCertificateArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-custom-domain-association-result-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-cert-expiry-time :initarg
                         :custom-domain-cert-expiry-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-custom-domain-association-result-custom-domain-cert-expiry-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-domain-association-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-domain-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-domain-association-result
                    'make-create-custom-domain-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-cert-expiry-time))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-access-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-access-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-access-message-resource-owner
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-access-message-endpoint-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name
                         :initform
                         (common-lisp:error ":subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-access-message-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-access-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-endpoint-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-endpoint-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-access-message
                    'make-create-endpoint-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         (common-lisp:error ":sns-topic-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-sns-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-ids :initarg :source-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-source-ids
                         :shape "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-severity
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-result
                    'make-create-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hsm-client-certificate-message common-lisp:nil
                       ((hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         (common-lisp:error
                          ":hsm-client-certificate-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-client-certificate-message-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-hsm-client-certificate-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hsm-client-certificate-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hsm-client-certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hsm-client-certificate-message
                    'make-create-hsm-client-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hsm-client-certificate-result common-lisp:nil
                       ((hsm-client-certificate :initarg
                         :hsm-client-certificate :initform common-lisp:nil
                         :type
                         (common-lisp:or hsm-client-certificate
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-client-certificate-result-hsm-client-certificate
                         :shape "HsmClientCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hsm-client-certificate-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hsm-client-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hsm-client-certificate-result
                    'make-create-hsm-client-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hsm-configuration-message common-lisp:nil
                       ((hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         (common-lisp:error
                          ":hsm-configuration-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-configuration-message-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-hsm-configuration-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-ip-address :initarg :hsm-ip-address :initform
                         (common-lisp:error ":hsm-ip-address is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-configuration-message-hsm-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-partition-name :initarg :hsm-partition-name
                         :initform
                         (common-lisp:error ":hsm-partition-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-configuration-message-hsm-partition-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-partition-password :initarg
                         :hsm-partition-password :initform
                         (common-lisp:error
                          ":hsm-partition-password is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-configuration-message-hsm-partition-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-server-public-certificate :initarg
                         :hsm-server-public-certificate :initform
                         (common-lisp:error
                          ":hsm-server-public-certificate is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-configuration-message-hsm-server-public-certificate
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-hsm-configuration-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hsm-configuration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hsm-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hsm-configuration-message
                    'make-create-hsm-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-ip-address))
      (common-lisp:list
       (common-lisp:cons "HsmIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-partition-name))
      (common-lisp:list
       (common-lisp:cons "HsmPartitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-partition-password))
      (common-lisp:list
       (common-lisp:cons "HsmPartitionPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-server-public-certificate))
      (common-lisp:list
       (common-lisp:cons "HsmServerPublicCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-hsm-configuration-result common-lisp:nil
                       ((hsm-configuration :initarg :hsm-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or hsm-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-hsm-configuration-result-hsm-configuration
                         :shape "HsmConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-hsm-configuration-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-hsm-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-hsm-configuration-result
                    'make-create-hsm-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-configuration))
      (common-lisp:list
       (common-lisp:cons "HsmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-redshift-idc-application-message common-lisp:nil
                       ((idc-instance-arn :initarg :idc-instance-arn :initform
                         (common-lisp:error ":idc-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-message-idc-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-idc-application-name :initarg
                         :redshift-idc-application-name :initform
                         (common-lisp:error
                          ":redshift-idc-application-name is required")
                         :type
                         (common-lisp:or redshift-idc-application-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-message-redshift-idc-application-name
                         :shape "RedshiftIdcApplicationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-namespace :initarg :identity-namespace
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-namespace-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-message-identity-namespace
                         :shape "IdentityNamespaceString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idc-display-name :initarg :idc-display-name :initform
                         (common-lisp:error ":idc-display-name is required")
                         :type
                         (common-lisp:or idc-display-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-message-idc-display-name
                         :shape "IdcDisplayNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         (common-lisp:error ":iam-role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-redshift-idc-application-message-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-token-issuer-list :initarg
                         :authorized-token-issuer-list :initform
                         common-lisp:nil :type
                         (common-lisp:or authorized-token-issuer-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-message-authorized-token-issuer-list
                         :shape "AuthorizedTokenIssuerList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-integrations :initarg :service-integrations
                         :initform common-lisp:nil :type
                         (common-lisp:or service-integration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-message-service-integrations
                         :shape "ServiceIntegrationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-redshift-idc-application-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-redshift-idc-application-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-redshift-idc-application-message
                    'make-create-redshift-idc-application-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-redshift-idc-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-redshift-idc-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-instance-arn))
      (common-lisp:list
       (common-lisp:cons "IdcInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-name))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-namespace))
      (common-lisp:list
       (common-lisp:cons "IdentityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-display-name))
      (common-lisp:list
       (common-lisp:cons "IdcDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-token-issuer-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedTokenIssuerList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-integrations))
      (common-lisp:list
       (common-lisp:cons "ServiceIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-redshift-idc-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-redshift-idc-application-result common-lisp:nil
                       ((redshift-idc-application :initarg
                         :redshift-idc-application :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-idc-application
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-redshift-idc-application-result-redshift-idc-application
                         :shape "RedshiftIdcApplication" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-redshift-idc-application-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-redshift-idc-application-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-redshift-idc-application-result
                    'make-create-redshift-idc-application-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-redshift-idc-application-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-redshift-idc-application-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-redshift-idc-application-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scheduled-action-message common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-action-message-scheduled-action-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-action :initarg :target-action :initform
                         (common-lisp:error ":target-action is required") :type
                         (common-lisp:or scheduled-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-action-message-target-action
                         :shape "ScheduledActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform
                         (common-lisp:error ":schedule is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-scheduled-action-message-schedule
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform
                         (common-lisp:error ":iam-role is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-scheduled-action-message-iam-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-action-description :initarg
                         :scheduled-action-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-scheduled-action-message-scheduled-action-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-create-scheduled-action-message-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-action-message-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable :initarg :enable :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-action-message-enable
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scheduled-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-scheduled-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-action-message
                    'make-create-scheduled-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "TargetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-description))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-copy-grant-message common-lisp:nil
                       ((snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :initform
                         (common-lisp:error
                          ":snapshot-copy-grant-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-snapshot-copy-grant-message-snapshot-copy-grant-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-copy-grant-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-snapshot-copy-grant-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-snapshot-copy-grant-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-snapshot-copy-grant-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-copy-grant-message
                    'make-create-snapshot-copy-grant-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-copy-grant-result common-lisp:nil
                       ((snapshot-copy-grant :initarg :snapshot-copy-grant
                         :initform common-lisp:nil :type
                         (common-lisp:or snapshot-copy-grant common-lisp:null)
                         :accessor
                         struct-shape-create-snapshot-copy-grant-result-snapshot-copy-grant
                         :shape "SnapshotCopyGrant" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-snapshot-copy-grant-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-snapshot-copy-grant-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-copy-grant-result
                    'make-create-snapshot-copy-grant-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-copy-grant))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-schedule-message common-lisp:nil
                       ((schedule-definitions :initarg :schedule-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or schedule-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-snapshot-schedule-message-schedule-definitions
                         :shape "ScheduleDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule-identifier :initarg :schedule-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-schedule-message-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-description :initarg :schedule-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-snapshot-schedule-message-schedule-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-snapshot-schedule-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-snapshot-schedule-message-dry-run
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-invocations :initarg :next-invocations :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-snapshot-schedule-message-next-invocations
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-snapshot-schedule-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-snapshot-schedule-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-schedule-message
                    'make-create-snapshot-schedule-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-schedule-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-schedule-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-definitions))
      (common-lisp:list
       (common-lisp:cons "ScheduleDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "ScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-description))
      (common-lisp:list
       (common-lisp:cons "ScheduleDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-invocations))
      (common-lisp:list
       (common-lisp:cons "NextInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-schedule-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-tags-message-resource-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-tags-message-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-tags-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-tags-message 'make-create-tags-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-usage-limit-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-usage-limit-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-type :initarg :feature-type :initform
                         (common-lisp:error ":feature-type is required") :type
                         (common-lisp:or usage-limit-feature-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-usage-limit-message-feature-type
                         :shape "UsageLimitFeatureType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit-type :initarg :limit-type :initform
                         (common-lisp:error ":limit-type is required") :type
                         (common-lisp:or usage-limit-limit-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-usage-limit-message-limit-type
                         :shape "UsageLimitLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amount :initarg :amount :initform
                         (common-lisp:error ":amount is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-create-usage-limit-message-amount :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or usage-limit-period common-lisp:null)
                         :accessor
                         struct-shape-create-usage-limit-message-period :shape
                         "UsageLimitPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (breach-action :initarg :breach-action :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limit-breach-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-usage-limit-message-breach-action
                         :shape "UsageLimitBreachAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-usage-limit-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-usage-limit-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-usage-limit-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-usage-limit-message
                    'make-create-usage-limit-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-type))
      (common-lisp:list
       (common-lisp:cons "FeatureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-type))
      (common-lisp:list
       (common-lisp:cons "LimitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-action))
      (common-lisp:list
       (common-lisp:cons "BreachAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-cname-association-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'custom-cname-association-fault)))
(common-lisp:progn
 (common-lisp:define-condition custom-domain-association-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-domain-association-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass custom-domain-associations-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-custom-domain-associations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associations :initarg :associations :initform
                         common-lisp:nil :type
                         (common-lisp:or association-list common-lisp:null)
                         :accessor
                         struct-shape-custom-domain-associations-message-associations
                         :shape "AssociationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-domain-associations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-domain-associations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-domain-associations-message
                    'make-custom-domain-associations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-domain-associations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-domain-associations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-domain-associations-message))
   common-lisp:nil))
(common-lisp:deftype custom-domain-certificate-arn-string ()
  'common-lisp:string)
(common-lisp:deftype custom-domain-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass customer-storage-message common-lisp:nil
                       ((total-backup-size-in-mega-bytes :initarg
                         :total-backup-size-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-customer-storage-message-total-backup-size-in-mega-bytes
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-provisioned-storage-in-mega-bytes :initarg
                         :total-provisioned-storage-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-customer-storage-message-total-provisioned-storage-in-mega-bytes
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-storage-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-storage-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-storage-message 'make-customer-storage-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-storage-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-storage-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-provisioned-storage-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalProvisionedStorageInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-storage-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-share common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-share-data-share-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (producer-arn :initarg :producer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-share-producer-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-publicly-accessible-consumers :initarg
                         :allow-publicly-accessible-consumers :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-data-share-allow-publicly-accessible-consumers
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-share-associations :initarg
                         :data-share-associations :initform common-lisp:nil
                         :type
                         (common-lisp:or data-share-association-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-share-data-share-associations :shape
                         "DataShareAssociationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-by :initarg :managed-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-share-managed-by :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-share
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-share
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-share 'make-data-share))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-share))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-share))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'producer-arn))
      (common-lisp:list
       (common-lisp:cons "ProducerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-publicly-accessible-consumers))
      (common-lisp:list
       (common-lisp:cons "AllowPubliclyAccessibleConsumers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-share-associations))
      (common-lisp:list
       (common-lisp:cons "DataShareAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-by))
      (common-lisp:list
       (common-lisp:cons "ManagedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-share))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-share-association common-lisp:nil
                       ((consumer-identifier :initarg :consumer-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-share-association-consumer-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-share-status common-lisp:null)
                         :accessor struct-shape-data-share-association-status
                         :shape "DataShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-region :initarg :consumer-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-share-association-consumer-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-data-share-association-created-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-change-date :initarg :status-change-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-data-share-association-status-change-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (producer-allowed-writes :initarg
                         :producer-allowed-writes :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-data-share-association-producer-allowed-writes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-accepted-writes :initarg
                         :consumer-accepted-writes :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-data-share-association-consumer-accepted-writes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-share-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-share-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-share-association 'make-data-share-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-share-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-share-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-identifier))
      (common-lisp:list
       (common-lisp:cons "ConsumerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-region))
      (common-lisp:list
       (common-lisp:cons "ConsumerRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-change-date))
      (common-lisp:list
       (common-lisp:cons "StatusChangeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'producer-allowed-writes))
      (common-lisp:list
       (common-lisp:cons "ProducerAllowedWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumer-accepted-writes))
      (common-lisp:list
       (common-lisp:cons "ConsumerAcceptedWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-share-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-share-association-list ()
   '(trivial-types:proper-list data-share-association))
 (common-lisp:defun make-data-share-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-share-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-share-list ()
   '(trivial-types:proper-list data-share))
 (common-lisp:defun make-data-share-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-share))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-share-status () 'common-lisp:string)
(common-lisp:deftype data-share-status-for-consumer () 'common-lisp:string)
(common-lisp:deftype data-share-status-for-producer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-transfer-progress common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-data-transfer-progress-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-rate-in-mega-bytes-per-second :initarg
                         :current-rate-in-mega-bytes-per-second :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-data-transfer-progress-current-rate-in-mega-bytes-per-second
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-data-in-mega-bytes :initarg
                         :total-data-in-mega-bytes :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-transfer-progress-total-data-in-mega-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-transferred-in-mega-bytes :initarg
                         :data-transferred-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-data-transfer-progress-data-transferred-in-mega-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated-time-to-completion-in-seconds :initarg
                         :estimated-time-to-completion-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-data-transfer-progress-estimated-time-to-completion-in-seconds
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elapsed-time-in-seconds :initarg
                         :elapsed-time-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-data-transfer-progress-elapsed-time-in-seconds
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-transfer-progress
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-transfer-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-transfer-progress 'make-data-transfer-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-transfer-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-transfer-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-data-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalDataInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transferred-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "DataTransferredInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-transfer-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype db-group-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-db-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deauthorize-data-share-message common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         (common-lisp:error ":data-share-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deauthorize-data-share-message-data-share-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-identifier :initarg :consumer-identifier
                         :initform
                         (common-lisp:error ":consumer-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deauthorize-data-share-message-consumer-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deauthorize-data-share-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deauthorize-data-share-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deauthorize-data-share-message
                    'make-deauthorize-data-share-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-data-share-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-data-share-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-identifier))
      (common-lisp:list
       (common-lisp:cons "ConsumerIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-data-share-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-cluster-parameters common-lisp:nil
                       ((parameter-group-family :initarg
                         :parameter-group-family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-default-cluster-parameters-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-default-cluster-parameters-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-default-cluster-parameters-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-default-cluster-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'default-cluster-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'default-cluster-parameters
                    'make-default-cluster-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-cluster-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-cluster-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-cluster-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deferred-maintenance-window common-lisp:nil
                       ((defer-maintenance-identifier :initarg
                         :defer-maintenance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deferred-maintenance-window-defer-maintenance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance-start-time :initarg
                         :defer-maintenance-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-deferred-maintenance-window-defer-maintenance-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance-end-time :initarg
                         :defer-maintenance-end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-deferred-maintenance-window-defer-maintenance-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deferred-maintenance-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deferred-maintenance-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deferred-maintenance-window
                    'make-deferred-maintenance-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deferred-maintenance-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deferred-maintenance-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-identifier))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-end-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deferred-maintenance-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deferred-maintenance-windows-list ()
   '(trivial-types:proper-list deferred-maintenance-window))
 (common-lisp:defun make-deferred-maintenance-windows-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            deferred-maintenance-window))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-authentication-profile-message common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform
                         (common-lisp:error
                          ":authentication-profile-name is required")
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-authentication-profile-message-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-authentication-profile-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-authentication-profile-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-authentication-profile-message
                    'make-delete-authentication-profile-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-authentication-profile-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-authentication-profile-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-authentication-profile-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-authentication-profile-result common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform common-lisp:nil
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-authentication-profile-result-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-authentication-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-authentication-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-authentication-profile-result
                    'make-delete-authentication-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-authentication-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-authentication-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-authentication-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-final-cluster-snapshot :initarg
                         :skip-final-cluster-snapshot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-message-skip-final-cluster-snapshot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-cluster-snapshot-identifier :initarg
                         :final-cluster-snapshot-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-cluster-message-final-cluster-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (final-cluster-snapshot-retention-period :initarg
                         :final-cluster-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-message-final-cluster-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-message 'make-delete-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skip-final-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-cluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-cluster-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "FinalClusterSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-parameter-group-message common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-parameter-group-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-parameter-group-message
                    'make-delete-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-delete-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-result 'make-delete-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-security-group-message common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform
                         (common-lisp:error
                          ":cluster-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-security-group-message-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-security-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-security-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-security-group-message
                    'make-delete-cluster-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-snapshot-message common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform
                         (common-lisp:error ":snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-snapshot-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-cluster-identifier :initarg
                         :snapshot-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-snapshot-message-snapshot-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-snapshot-message
                    'make-delete-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-cluster-snapshot-message-list ()
   '(trivial-types:proper-list delete-cluster-snapshot-message))
 (common-lisp:defun make-delete-cluster-snapshot-message-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            delete-cluster-snapshot-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-snapshot-result
                    'make-delete-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-subnet-group-message common-lisp:nil
                       ((cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform
                         (common-lisp:error
                          ":cluster-subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-cluster-subnet-group-message-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-subnet-group-message
                    'make-delete-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-domain-association-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-domain-association-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-name :initarg :custom-domain-name
                         :initform
                         (common-lisp:error ":custom-domain-name is required")
                         :type
                         (common-lisp:or custom-domain-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-domain-association-message-custom-domain-name
                         :shape "CustomDomainNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-domain-association-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-domain-association-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-domain-association-message
                    'make-delete-custom-domain-association-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-endpoint-access-message common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-endpoint-access-message-endpoint-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-endpoint-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-endpoint-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-access-message
                    'make-delete-endpoint-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-hsm-client-certificate-message common-lisp:nil
                       ((hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         (common-lisp:error
                          ":hsm-client-certificate-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-hsm-client-certificate-message-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hsm-client-certificate-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-hsm-client-certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hsm-client-certificate-message
                    'make-delete-hsm-client-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-client-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-client-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-client-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-hsm-configuration-message common-lisp:nil
                       ((hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         (common-lisp:error
                          ":hsm-configuration-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-hsm-configuration-message-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-hsm-configuration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-hsm-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-hsm-configuration-message
                    'make-delete-hsm-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-redshift-idc-application-message common-lisp:nil
                       ((redshift-idc-application-arn :initarg
                         :redshift-idc-application-arn :initform
                         (common-lisp:error
                          ":redshift-idc-application-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-redshift-idc-application-message-redshift-idc-application-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-redshift-idc-application-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-redshift-idc-application-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-redshift-idc-application-message
                    'make-delete-redshift-idc-application-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-redshift-idc-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-redshift-idc-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-arn))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-redshift-idc-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-resource-policy-message-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-message
                    'make-delete-resource-policy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-action-message common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-scheduled-action-message-scheduled-action-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scheduled-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scheduled-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-message
                    'make-delete-scheduled-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-copy-grant-message common-lisp:nil
                       ((snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :initform
                         (common-lisp:error
                          ":snapshot-copy-grant-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-snapshot-copy-grant-message-snapshot-copy-grant-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-snapshot-copy-grant-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-snapshot-copy-grant-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-copy-grant-message
                    'make-delete-snapshot-copy-grant-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-grant-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-grant-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-grant-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-schedule-message common-lisp:nil
                       ((schedule-identifier :initarg :schedule-identifier
                         :initform
                         (common-lisp:error ":schedule-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-snapshot-schedule-message-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-snapshot-schedule-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-snapshot-schedule-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-schedule-message
                    'make-delete-snapshot-schedule-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-schedule-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-schedule-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "ScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-schedule-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-tags-message-resource-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-delete-tags-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-tags-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-tags-message 'make-delete-tags-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-usage-limit-message common-lisp:nil
                       ((usage-limit-id :initarg :usage-limit-id :initform
                         (common-lisp:error ":usage-limit-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-usage-limit-message-usage-limit-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-usage-limit-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-usage-limit-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-usage-limit-message
                    'make-delete-usage-limit-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "UsageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependent-service-access-denied-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dependent-service-access-denied-fault)))
(common-lisp:progn
 (common-lisp:define-condition dependent-service-request-throttling-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dependent-service-request-throttling-fault)))
(common-lisp:progn
 (common-lisp:define-condition dependent-service-unavailable-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dependent-service-unavailable-fault)))
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-message common-lisp:nil
                       ((attribute-names :initarg :attribute-names :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-account-attributes-message-attribute-names
                         :shape "AttributeNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-attributes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-message
                    'make-describe-account-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-authentication-profiles-message common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform common-lisp:nil
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-authentication-profiles-message-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-authentication-profiles-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-authentication-profiles-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-authentication-profiles-message
                    'make-describe-authentication-profiles-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-authentication-profiles-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-authentication-profiles-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-authentication-profiles-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-authentication-profiles-result common-lisp:nil
                       ((authentication-profiles :initarg
                         :authentication-profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or authentication-profile-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-authentication-profiles-result-authentication-profiles
                         :shape "AuthenticationProfileList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-authentication-profiles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-authentication-profiles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-authentication-profiles-result
                    'make-describe-authentication-profiles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-authentication-profiles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-authentication-profiles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profiles))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-authentication-profiles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-db-revisions-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-db-revisions-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-db-revisions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-db-revisions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-db-revisions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-db-revisions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-db-revisions-message
                    'make-describe-cluster-db-revisions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-db-revisions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-db-revisions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-db-revisions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-parameter-groups-message
                       common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-parameter-groups-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameter-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameter-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameter-groups-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameter-groups-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-parameter-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-parameter-groups-message
                    'make-describe-cluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-parameters-message common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameters-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameters-message-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-parameters-message
                    'make-describe-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-security-groups-message common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-security-groups-message-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-security-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-security-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-security-groups-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-security-groups-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-security-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-security-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-security-groups-message
                    'make-describe-cluster-security-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-security-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-security-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-security-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-snapshots-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-snapshots-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-snapshots-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-arn :initarg :snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-snapshots-message-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-snapshots-message-snapshot-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-cluster-snapshots-message-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-snapshots-message-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-exists :initarg :cluster-exists :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-cluster-exists
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sorting-entities :initarg :sorting-entities :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-sorting-entity-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-snapshots-message-sorting-entities
                         :shape "SnapshotSortingEntityList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-snapshots-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-snapshots-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-snapshots-message
                    'make-describe-cluster-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-exists))
      (common-lisp:list
       (common-lisp:cons "ClusterExists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sorting-entities))
      (common-lisp:list
       (common-lisp:cons "SortingEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-subnet-groups-message common-lisp:nil
                       ((cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-subnet-groups-message-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-subnet-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-subnet-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-subnet-groups-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-subnet-groups-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-subnet-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-subnet-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-subnet-groups-message
                    'make-describe-cluster-subnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-subnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-subnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-subnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-tracks-message common-lisp:nil
                       ((maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-tracks-message-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-tracks-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-tracks-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-tracks-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-tracks-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-tracks-message
                    'make-describe-cluster-tracks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-tracks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-tracks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-tracks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cluster-versions-message common-lisp:nil
                       ((cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-versions-message-cluster-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-parameter-group-family :initarg
                         :cluster-parameter-group-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-cluster-versions-message-cluster-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-versions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-cluster-versions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cluster-versions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cluster-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-versions-message
                    'make-describe-cluster-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-clusters-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-message-tag-keys :shape
                         "TagKeyList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-clusters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-message
                    'make-describe-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-domain-associations-message
                       common-lisp:nil
                       ((custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-domain-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-domain-associations-message-custom-domain-name
                         :shape "CustomDomainNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-domain-certificate-arn-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-domain-associations-message-custom-domain-certificate-arn
                         :shape "CustomDomainCertificateArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-domain-associations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-domain-associations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-domain-associations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-domain-associations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-domain-associations-message
                    'make-describe-custom-domain-associations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domain-associations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domain-associations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domain-associations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-shares-for-consumer-message
                       common-lisp:nil
                       ((consumer-arn :initarg :consumer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-data-shares-for-consumer-message-consumer-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-share-status-for-consumer
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-consumer-message-status
                         :shape "DataShareStatusForConsumer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-consumer-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-consumer-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-shares-for-consumer-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-shares-for-consumer-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-shares-for-consumer-message
                    'make-describe-data-shares-for-consumer-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-consumer-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-consumer-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-consumer-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-shares-for-consumer-result common-lisp:nil
                       ((data-shares :initarg :data-shares :initform
                         common-lisp:nil :type
                         (common-lisp:or data-share-list common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-consumer-result-data-shares
                         :shape "DataShareList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-consumer-result-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-shares-for-consumer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-shares-for-consumer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-shares-for-consumer-result
                    'make-describe-data-shares-for-consumer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-consumer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-consumer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-shares))
      (common-lisp:list
       (common-lisp:cons "DataShares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-consumer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-shares-for-producer-message
                       common-lisp:nil
                       ((producer-arn :initarg :producer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-data-shares-for-producer-message-producer-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-share-status-for-producer
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-producer-message-status
                         :shape "DataShareStatusForProducer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-producer-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-producer-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-shares-for-producer-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-shares-for-producer-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-shares-for-producer-message
                    'make-describe-data-shares-for-producer-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-producer-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-producer-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'producer-arn))
      (common-lisp:list
       (common-lisp:cons "ProducerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-producer-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-shares-for-producer-result common-lisp:nil
                       ((data-shares :initarg :data-shares :initform
                         common-lisp:nil :type
                         (common-lisp:or data-share-list common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-producer-result-data-shares
                         :shape "DataShareList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-for-producer-result-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-shares-for-producer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-shares-for-producer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-shares-for-producer-result
                    'make-describe-data-shares-for-producer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-producer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-producer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-shares))
      (common-lisp:list
       (common-lisp:cons "DataShares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-for-producer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-shares-message common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-data-shares-message-data-share-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-shares-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-shares-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-shares-message
                    'make-describe-data-shares-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-shares-result common-lisp:nil
                       ((data-shares :initarg :data-shares :initform
                         common-lisp:nil :type
                         (common-lisp:or data-share-list common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-result-data-shares
                         :shape "DataShareList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-shares-result-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-shares-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-data-shares-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-shares-result
                    'make-describe-data-shares-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-shares))
      (common-lisp:list
       (common-lisp:cons "DataShares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-shares-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-cluster-parameters-message
                       common-lisp:nil
                       ((parameter-group-family :initarg
                         :parameter-group-family :initform
                         (common-lisp:error
                          ":parameter-group-family is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-default-cluster-parameters-message-parameter-group-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-default-cluster-parameters-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-default-cluster-parameters-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-default-cluster-parameters-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-cluster-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-default-cluster-parameters-message
                    'make-describe-default-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-cluster-parameters-result
                       common-lisp:nil
                       ((default-cluster-parameters :initarg
                         :default-cluster-parameters :initform common-lisp:nil
                         :type
                         (common-lisp:or default-cluster-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-default-cluster-parameters-result-default-cluster-parameters
                         :shape "DefaultClusterParameters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-default-cluster-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-cluster-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-default-cluster-parameters-result
                    'make-describe-default-cluster-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cluster-parameters))
      (common-lisp:list
       (common-lisp:cons "DefaultClusterParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-access-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-endpoint-access-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-endpoint-access-message-resource-owner
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-name :initarg :endpoint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-endpoint-access-message-endpoint-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-access-message-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-access-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-access-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-access-message
                    'make-describe-endpoint-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-authorization-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-endpoint-authorization-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account :initarg :account :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-authorization-message-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee :initarg :grantee :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-authorization-message-grantee
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-authorization-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-authorization-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-authorization-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-authorization-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-authorization-message
                    'make-describe-endpoint-authorization-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-authorization-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-authorization-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-authorization-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-categories-message common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-event-categories-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-categories-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-subscriptions-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-event-subscriptions-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-subscriptions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-message common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-events-message-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-source-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-events-message-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-end-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-duration :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-events-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-hsm-client-certificates-message common-lisp:nil
                       ((hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-hsm-client-certificates-message-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-client-certificates-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-client-certificates-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-client-certificates-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-client-certificates-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-hsm-client-certificates-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-hsm-client-certificates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-hsm-client-certificates-message
                    'make-describe-hsm-client-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-client-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-client-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-client-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-hsm-configurations-message common-lisp:nil
                       ((hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-hsm-configurations-message-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-configurations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-configurations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-configurations-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-hsm-configurations-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-hsm-configurations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-hsm-configurations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-hsm-configurations-message
                    'make-describe-hsm-configurations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-configurations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-configurations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-configurations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inbound-integrations-message common-lisp:nil
                       ((integration-arn :initarg :integration-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-inbound-integrations-message-integration-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-inbound-integrations-message-target-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-inbound-integrations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-inbound-integrations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-inbound-integrations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-integrations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-integrations-message
                    'make-describe-inbound-integrations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-integrations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-integrations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-integrations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-status-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-logging-status-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-status-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-status-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-status-message
                    'make-describe-logging-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-status-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-node-configuration-options-message
                       common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         (common-lisp:error ":action-type is required") :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor
                         struct-shape-describe-node-configuration-options-message-action-type
                         :shape "ActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-node-configuration-options-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-node-configuration-options-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-arn :initarg :snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-node-configuration-options-message-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-node-configuration-options-message-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or node-configuration-options-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-node-configuration-options-message-filters
                         :shape "NodeConfigurationOptionsFilterList" :location
                         common-lisp:nil :location-name "Filter")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-node-configuration-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-node-configuration-options-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-node-configuration-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-node-configuration-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-node-configuration-options-message
                    'make-describe-node-configuration-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-configuration-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-configuration-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-node-configuration-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-orderable-cluster-options-message
                       common-lisp:nil
                       ((cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-orderable-cluster-options-message-cluster-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-orderable-cluster-options-message-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-cluster-options-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-cluster-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-orderable-cluster-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-orderable-cluster-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-cluster-options-message
                    'make-describe-orderable-cluster-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-cluster-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-cluster-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-cluster-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-partners-input-message common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or partner-integration-account-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-partners-input-message-account-id
                         :shape "PartnerIntegrationAccountId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type
                         (common-lisp:or partner-integration-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-partners-input-message-cluster-identifier
                         :shape "PartnerIntegrationClusterIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-partners-input-message-database-name
                         :shape "PartnerIntegrationDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partner-name :initarg :partner-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-partner-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-partners-input-message-partner-name
                         :shape "PartnerIntegrationPartnerName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-partners-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-partners-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-partners-input-message
                    'make-describe-partners-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-partners-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-partners-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "PartnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-partners-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-partners-output-message common-lisp:nil
                       ((partner-integration-info-list :initarg
                         :partner-integration-info-list :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-partners-output-message-partner-integration-info-list
                         :shape "PartnerIntegrationInfoList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-partners-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-partners-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-partners-output-message
                    'make-describe-partners-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-partners-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-partners-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partner-integration-info-list))
      (common-lisp:list
       (common-lisp:cons "PartnerIntegrationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-partners-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-redshift-idc-applications-message
                       common-lisp:nil
                       ((redshift-idc-application-arn :initarg
                         :redshift-idc-application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-redshift-idc-applications-message-redshift-idc-application-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-redshift-idc-applications-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-redshift-idc-applications-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-redshift-idc-applications-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-redshift-idc-applications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-redshift-idc-applications-message
                    'make-describe-redshift-idc-applications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-redshift-idc-applications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-redshift-idc-applications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-arn))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-redshift-idc-applications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-redshift-idc-applications-result
                       common-lisp:nil
                       ((redshift-idc-applications :initarg
                         :redshift-idc-applications :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-idc-application-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-redshift-idc-applications-result-redshift-idc-applications
                         :shape "RedshiftIdcApplicationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-redshift-idc-applications-result-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-redshift-idc-applications-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-redshift-idc-applications-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-redshift-idc-applications-result
                    'make-describe-redshift-idc-applications-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-redshift-idc-applications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-redshift-idc-applications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-applications))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-redshift-idc-applications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-node-exchange-status-input-message
                       common-lisp:nil
                       ((reserved-node-id :initarg :reserved-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-node-exchange-status-input-message-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-exchange-request-id :initarg
                         :reserved-node-exchange-request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-node-exchange-status-input-message-reserved-node-exchange-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-exchange-status-input-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-exchange-status-input-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-node-exchange-status-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-node-exchange-status-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-node-exchange-status-input-message
                    'make-describe-reserved-node-exchange-status-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-exchange-status-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-exchange-status-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-exchange-request-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeExchangeRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-exchange-status-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-node-exchange-status-output-message
                       common-lisp:nil
                       ((reserved-node-exchange-status-details :initarg
                         :reserved-node-exchange-status-details :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-node-exchange-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-exchange-status-output-message-reserved-node-exchange-status-details
                         :shape "ReservedNodeExchangeStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-exchange-status-output-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-node-exchange-status-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-node-exchange-status-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-node-exchange-status-output-message
                    'make-describe-reserved-node-exchange-status-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-exchange-status-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-exchange-status-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-exchange-status-details))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeExchangeStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-exchange-status-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-node-offerings-message common-lisp:nil
                       ((reserved-node-offering-id :initarg
                         :reserved-node-offering-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-offerings-message-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-offerings-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-node-offerings-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-node-offerings-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-node-offerings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-node-offerings-message
                    'make-describe-reserved-node-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-nodes-message common-lisp:nil
                       ((reserved-node-id :initarg :reserved-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-nodes-message-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-nodes-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-nodes-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-nodes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-nodes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-nodes-message
                    'make-describe-reserved-nodes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resize-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-resize-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resize-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-resize-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resize-message 'make-describe-resize-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resize-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resize-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resize-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-actions-message common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-scheduled-actions-message-scheduled-action-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-action-type :initarg :target-action-type
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-action-type-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-message-target-action-type
                         :shape "ScheduledActionTypeValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-scheduled-actions-message-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-message-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-message-active
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or scheduled-action-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-message-filters
                         :shape "ScheduledActionFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-actions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scheduled-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-actions-message
                    'make-describe-scheduled-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action-type))
      (common-lisp:list
       (common-lisp:cons "TargetActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshot-copy-grants-message common-lisp:nil
                       ((snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-copy-grants-message-snapshot-copy-grant-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-copy-grants-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-copy-grants-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-copy-grants-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-copy-grants-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snapshot-copy-grants-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-snapshot-copy-grants-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snapshot-copy-grants-message
                    'make-describe-snapshot-copy-grants-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-copy-grants-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-copy-grants-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-copy-grants-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshot-schedules-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-snapshot-schedules-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-identifier :initarg :schedule-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-snapshot-schedules-message-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-schedules-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-schedules-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-schedules-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-schedules-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snapshot-schedules-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-snapshot-schedules-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snapshot-schedules-message
                    'make-describe-snapshot-schedules-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-schedules-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-schedules-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "ScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-schedules-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshot-schedules-output-message
                       common-lisp:nil
                       ((snapshot-schedules :initarg :snapshot-schedules
                         :initform common-lisp:nil :type
                         (common-lisp:or snapshot-schedule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-schedules-output-message-snapshot-schedules
                         :shape "SnapshotScheduleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-snapshot-schedules-output-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snapshot-schedules-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-snapshot-schedules-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snapshot-schedules-output-message
                    'make-describe-snapshot-schedules-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-schedules-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-schedules-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-schedules))
      (common-lisp:list
       (common-lisp:cons "SnapshotSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-schedules-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-table-restore-status-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-table-restore-status-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-restore-request-id :initarg
                         :table-restore-request-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-table-restore-status-message-table-restore-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-table-restore-status-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-table-restore-status-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-table-restore-status-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-table-restore-status-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-table-restore-status-message
                    'make-describe-table-restore-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-restore-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-restore-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-request-id))
      (common-lisp:list
       (common-lisp:cons "TableRestoreRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-restore-status-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-message common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-tags-message-resource-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-tags-message-resource-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-tags-message-max-records :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-tags-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-describe-tags-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-tags-message-tag-values :shape
                         "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-message 'make-describe-tags-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-usage-limits-message common-lisp:nil
                       ((usage-limit-id :initarg :usage-limit-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-usage-limits-message-usage-limit-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-usage-limits-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feature-type :initarg :feature-type :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limit-feature-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-usage-limits-message-feature-type
                         :shape "UsageLimitFeatureType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-usage-limits-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-usage-limits-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         struct-shape-describe-usage-limits-message-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-values :initarg :tag-values :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-value-list common-lisp:null)
                         :accessor
                         struct-shape-describe-usage-limits-message-tag-values
                         :shape "TagValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-usage-limits-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-usage-limits-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-usage-limits-message
                    'make-describe-usage-limits-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-limits-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-limits-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "UsageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-type))
      (common-lisp:list
       (common-lisp:cons "FeatureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-limits-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-logging-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disable-logging-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-logging-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-logging-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-logging-message 'make-disable-logging-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-logging-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-logging-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-logging-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-snapshot-copy-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disable-snapshot-copy-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-snapshot-copy-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-snapshot-copy-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-snapshot-copy-message
                    'make-disable-snapshot-copy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-snapshot-copy-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-disable-snapshot-copy-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-snapshot-copy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-snapshot-copy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-snapshot-copy-result
                    'make-disable-snapshot-copy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-data-share-consumer-message common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         (common-lisp:error ":data-share-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-disassociate-data-share-consumer-message-data-share-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disassociate-entire-account :initarg
                         :disassociate-entire-account :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-disassociate-data-share-consumer-message-disassociate-entire-account
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-arn :initarg :consumer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-data-share-consumer-message-consumer-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumer-region :initarg :consumer-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-data-share-consumer-message-consumer-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-data-share-consumer-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-data-share-consumer-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-data-share-consumer-message
                    'make-disassociate-data-share-consumer-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-data-share-consumer-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-data-share-consumer-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-entire-account))
      (common-lisp:list
       (common-lisp:cons "DisassociateEntireAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-arn))
      (common-lisp:list
       (common-lisp:cons "ConsumerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumer-region))
      (common-lisp:list
       (common-lisp:cons "ConsumerRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-data-share-consumer-message))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double-optional () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass ec2security-group common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ec2security-group-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2security-group-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2security-group-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-ec2security-group-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2security-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2security-group 'make-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2security-group-list ()
   '(trivial-types:proper-list ec2security-group))
 (common-lisp:defun make-ec2security-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass elastic-ip-status common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elastic-ip-status-elastic-ip :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-ip-status-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elastic-ip-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elastic-ip-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elastic-ip-status 'make-elastic-ip-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elastic-ip-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elastic-ip-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elastic-ip-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eligible-tracks-to-update-list ()
   '(trivial-types:proper-list update-target))
 (common-lisp:defun make-eligible-tracks-to-update-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enable-logging-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enable-logging-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-enable-logging-message-bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-enable-logging-message-s3key-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-destination-type :initarg :log-destination-type
                         :initform common-lisp:nil :type
                         (common-lisp:or log-destination-type common-lisp:null)
                         :accessor
                         struct-shape-enable-logging-message-log-destination-type
                         :shape "LogDestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-exports :initarg :log-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         struct-shape-enable-logging-message-log-exports :shape
                         "LogTypeList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-logging-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-logging-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-logging-message 'make-enable-logging-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-logging-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-logging-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-destination-type))
      (common-lisp:list
       (common-lisp:cons "LogDestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-exports))
      (common-lisp:list
       (common-lisp:cons "LogExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-logging-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-snapshot-copy-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enable-snapshot-copy-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-region :initarg :destination-region
                         :initform
                         (common-lisp:error ":destination-region is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enable-snapshot-copy-message-destination-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-enable-snapshot-copy-message-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-enable-snapshot-copy-message-snapshot-copy-grant-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-enable-snapshot-copy-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-snapshot-copy-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-snapshot-copy-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-snapshot-copy-message
                    'make-enable-snapshot-copy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-snapshot-copy-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-enable-snapshot-copy-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-snapshot-copy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-snapshot-copy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-snapshot-copy-result
                    'make-enable-snapshot-copy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-endpoint-port :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-endpoints :initarg :vpc-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoints-list common-lisp:null)
                         :accessor struct-shape-endpoint-vpc-endpoints :shape
                         "VpcEndpointsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint-access common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-access-cluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-access-resource-owner :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-group-name :initarg :subnet-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-access-subnet-group-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-status :initarg :endpoint-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-access-endpoint-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-name :initarg :endpoint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-access-endpoint-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-create-time :initarg :endpoint-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-endpoint-access-endpoint-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-endpoint-access-port :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-access-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-access-vpc-security-groups
                         :shape "VpcSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-endpoint :initarg :vpc-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint common-lisp:null)
                         :accessor struct-shape-endpoint-access-vpc-endpoint
                         :shape "VpcEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint-access 'make-endpoint-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-create-time))
      (common-lisp:list
       (common-lisp:cons "EndpointCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint-access-list common-lisp:nil
                       ((endpoint-access-list :initarg :endpoint-access-list
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint-accesses common-lisp:null)
                         :accessor
                         struct-shape-endpoint-access-list-endpoint-access-list
                         :shape "EndpointAccesses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-access-list-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-access-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-access-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-access-list 'make-endpoint-access-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-access-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-access-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-access-list))
      (common-lisp:list
       (common-lisp:cons "EndpointAccessList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-access-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-accesses ()
   '(trivial-types:proper-list endpoint-access))
 (common-lisp:defun make-endpoint-accesses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition endpoint-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'endpoint-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass endpoint-authorization common-lisp:nil
                       ((grantor :initarg :grantor :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-authorization-grantor
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee :initarg :grantee :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-authorization-grantee
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-authorization-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorize-time :initarg :authorize-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-endpoint-authorization-authorize-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-status :initarg :cluster-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-authorization-cluster-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or authorization-status common-lisp:null)
                         :accessor struct-shape-endpoint-authorization-status
                         :shape "AuthorizationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-all-vpcs :initarg :allowed-all-vpcs :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-endpoint-authorization-allowed-all-vpcs
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-vpcs :initarg :allowed-vpcs :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-identifier-list common-lisp:null)
                         :accessor
                         struct-shape-endpoint-authorization-allowed-vpcs
                         :shape "VpcIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-count :initarg :endpoint-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-endpoint-authorization-endpoint-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-authorization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-authorization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-authorization 'make-endpoint-authorization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantor))
      (common-lisp:list
       (common-lisp:cons "Grantor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorize-time))
      (common-lisp:list
       (common-lisp:cons "AuthorizeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-all-vpcs))
      (common-lisp:list
       (common-lisp:cons "AllowedAllVPCs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-vpcs))
      (common-lisp:list
       (common-lisp:cons "AllowedVPCs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-count))
      (common-lisp:list
       (common-lisp:cons "EndpointCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-authorization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition endpoint-authorization-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'endpoint-authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass endpoint-authorization-list common-lisp:nil
                       ((endpoint-authorization-list :initarg
                         :endpoint-authorization-list :initform common-lisp:nil
                         :type
                         (common-lisp:or endpoint-authorizations
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-authorization-list-endpoint-authorization-list
                         :shape "EndpointAuthorizations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-authorization-list-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-authorization-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-authorization-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-authorization-list
                    'make-endpoint-authorization-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-authorization-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-authorization-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-authorization-list))
      (common-lisp:list
       (common-lisp:cons "EndpointAuthorizationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-authorization-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition endpoint-authorization-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'endpoint-authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype endpoint-authorizations ()
   '(trivial-types:proper-list endpoint-authorization))
 (common-lisp:defun make-endpoint-authorizations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-authorization))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition endpoint-authorizations-per-cluster-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'endpoint-authorizations-per-cluster-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition endpoint-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'endpoint-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition endpoints-per-authorization-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'endpoints-per-authorization-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition endpoints-per-cluster-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'endpoints-per-cluster-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-event-source-type :shape
                         "SourceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor struct-shape-event-event-categories :shape
                         "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-severity :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-event-date :shape "TStamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-id :initarg :event-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-event-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-event-categories-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-categories-map common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-categories-map-source-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type
                         (common-lisp:or event-info-map-list common-lisp:null)
                         :accessor struct-shape-event-categories-map-events
                         :shape "EventInfoMapList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-categories-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-categories-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-categories-map 'make-event-categories-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-categories-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-map-list ()
   '(trivial-types:proper-list event-categories-map))
 (common-lisp:defun make-event-categories-map-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-categories-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-categories-message common-lisp:nil
                       ((event-categories-map-list :initarg
                         :event-categories-map-list :initform common-lisp:nil
                         :type
                         (common-lisp:or event-categories-map-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-categories-message-event-categories-map-list
                         :shape "EventCategoriesMapList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-categories-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-categories-message 'make-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-map-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesMapList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-info-map common-lisp:nil
                       ((event-id :initarg :event-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-info-map-event-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor struct-shape-event-info-map-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-description :initarg :event-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-info-map-event-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-info-map-severity :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-info-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-info-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event-info-map 'make-event-info-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-info-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-info-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-description))
      (common-lisp:list
       (common-lisp:cons "EventDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-info-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-info-map-list ()
   '(trivial-types:proper-list event-info-map))
 (common-lisp:defun make-event-info-map-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-info-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscription common-lisp:nil
                       ((customer-aws-id :initarg :customer-aws-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-customer-aws-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cust-subscription-id :initarg :cust-subscription-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-cust-subscription-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-sns-topic-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-subscription-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-creation-time :initarg
                         :subscription-creation-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-subscription-creation-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-source-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-ids-list :initarg :source-ids-list :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-source-ids-list :shape
                         "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories-list :initarg :event-categories-list
                         :initform common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-event-categories-list
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-subscription-severity
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-event-subscription-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-event-subscription-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-subscription
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-subscription-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-subscription-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun make-event-subscriptions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscriptions-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-subscriptions-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-subscriptions-list :initarg
                         :event-subscriptions-list :initform common-lisp:nil
                         :type
                         (common-lisp:or event-subscriptions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-subscriptions-message-event-subscriptions-list
                         :shape "EventSubscriptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-subscriptions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-subscriptions-message
                    'make-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass events-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-events-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor struct-shape-events-message-events :shape
                         "EventList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-primary-compute-input-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-failover-primary-compute-input-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-primary-compute-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failover-primary-compute-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-primary-compute-input-message
                    'make-failover-primary-compute-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-primary-compute-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-primary-compute-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-primary-compute-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-primary-compute-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-failover-primary-compute-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-primary-compute-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failover-primary-compute-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failover-primary-compute-result
                    'make-failover-primary-compute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-primary-compute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-primary-compute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-primary-compute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-credentials-message common-lisp:nil
                       ((db-user :initarg :db-user :initform
                         (common-lisp:error ":db-user is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-cluster-credentials-message-db-user
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-name :initarg :db-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-credentials-message-db-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-cluster-credentials-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-credentials-message-duration-seconds
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-create :initarg :auto-create :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-credentials-message-auto-create
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-groups :initarg :db-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or db-group-list common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-credentials-message-db-groups
                         :shape "DbGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-cluster-credentials-message-custom-domain-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cluster-credentials-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cluster-credentials-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cluster-credentials-message
                    'make-get-cluster-credentials-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-name))
      (common-lisp:list
       (common-lisp:cons "DbName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create))
      (common-lisp:list
       (common-lisp:cons "AutoCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-groups))
      (common-lisp:list
       (common-lisp:cons "DbGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-credentials-with-iammessage common-lisp:nil
                       ((db-name :initarg :db-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-credentials-with-iammessage-db-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-cluster-credentials-with-iammessage-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-get-cluster-credentials-with-iammessage-duration-seconds
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-cluster-credentials-with-iammessage-custom-domain-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cluster-credentials-with-iammessage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cluster-credentials-with-iammessage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cluster-credentials-with-iammessage
                    'make-get-cluster-credentials-with-iammessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-with-iammessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-with-iammessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-name))
      (common-lisp:list
       (common-lisp:cons "DbName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-with-iammessage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-reserved-node-exchange-configuration-options-input-message
  common-lisp:nil
  ((action-type :initarg :action-type :initform
    (common-lisp:error ":action-type is required") :type
    (common-lisp:or reserved-node-exchange-action-type common-lisp:null)
    :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-input-message-action-type
    :shape "ReservedNodeExchangeActionType" :location common-lisp:nil
    :location-name common-lisp:nil)
   (cluster-identifier :initarg :cluster-identifier :initform common-lisp:nil
    :type (common-lisp:or string common-lisp:null) :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-input-message-cluster-identifier
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil)
   (snapshot-identifier :initarg :snapshot-identifier :initform common-lisp:nil
    :type (common-lisp:or string common-lisp:null) :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-input-message-snapshot-identifier
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil)
   (max-records :initarg :max-records :initform common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null) :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-input-message-max-records
    :shape "IntegerOptional" :location common-lisp:nil :location-name
    common-lisp:nil)
   (marker :initarg :marker :initform common-lisp:nil :type
    (common-lisp:or string common-lisp:null) :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-input-message-marker
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reserved-node-exchange-configuration-options-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reserved-node-exchange-configuration-options-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'get-reserved-node-exchange-configuration-options-input-message
   'make-get-reserved-node-exchange-configuration-options-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-configuration-options-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-configuration-options-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-configuration-options-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-reserved-node-exchange-configuration-options-output-message
  common-lisp:nil
  ((marker :initarg :marker :initform common-lisp:nil :type
    (common-lisp:or string common-lisp:null) :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-output-message-marker
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil)
   (reserved-node-configuration-option-list :initarg
    :reserved-node-configuration-option-list :initform common-lisp:nil :type
    (common-lisp:or reserved-node-configuration-option-list common-lisp:null)
    :accessor
    struct-shape-get-reserved-node-exchange-configuration-options-output-message-reserved-node-configuration-option-list
    :shape "ReservedNodeConfigurationOptionList" :location common-lisp:nil
    :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reserved-node-exchange-configuration-options-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reserved-node-exchange-configuration-options-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'get-reserved-node-exchange-configuration-options-output-message
   'make-get-reserved-node-exchange-configuration-options-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-configuration-options-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-configuration-options-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-configuration-option-list))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeConfigurationOptionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-configuration-options-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reserved-node-exchange-offerings-input-message
                       common-lisp:nil
                       ((reserved-node-id :initarg :reserved-node-id :initform
                         (common-lisp:error ":reserved-node-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-reserved-node-exchange-offerings-input-message-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-get-reserved-node-exchange-offerings-input-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-reserved-node-exchange-offerings-input-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reserved-node-exchange-offerings-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reserved-node-exchange-offerings-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reserved-node-exchange-offerings-input-message
                    'make-get-reserved-node-exchange-offerings-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-offerings-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-offerings-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-offerings-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reserved-node-exchange-offerings-output-message
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-reserved-node-exchange-offerings-output-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-offerings :initarg
                         :reserved-node-offerings :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-node-offering-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-reserved-node-exchange-offerings-output-message-reserved-node-offerings
                         :shape "ReservedNodeOfferingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reserved-node-exchange-offerings-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reserved-node-exchange-offerings-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reserved-node-exchange-offerings-output-message
                    'make-get-reserved-node-exchange-offerings-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-offerings-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-offerings-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-node-exchange-offerings-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-resource-policy-message-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-message
                    'make-get-resource-policy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-result common-lisp:nil
                       ((resource-policy :initarg :resource-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-result-resource-policy
                         :shape "ResourcePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-result
                    'make-get-resource-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hsm-client-certificate common-lisp:nil
                       ((hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-client-certificate-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-client-certificate-public-key :initarg
                         :hsm-client-certificate-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-client-certificate-hsm-client-certificate-public-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-hsm-client-certificate-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hsm-client-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hsm-client-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate 'make-hsm-client-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-public-key))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificatePublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-client-certificate-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype hsm-client-certificate-list ()
   '(trivial-types:proper-list hsm-client-certificate))
 (common-lisp:defun make-hsm-client-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hsm-client-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass hsm-client-certificate-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-hsm-client-certificate-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-client-certificates :initarg
                         :hsm-client-certificates :initform common-lisp:nil
                         :type
                         (common-lisp:or hsm-client-certificate-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-hsm-client-certificate-message-hsm-client-certificates
                         :shape "HsmClientCertificateList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hsm-client-certificate-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'hsm-client-certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-message
                    'make-hsm-client-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificates))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-client-certificate-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition hsm-client-certificate-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass hsm-configuration common-lisp:nil
                       ((hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-configuration-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-configuration-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsm-ip-address :initarg :hsm-ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-configuration-hsm-ip-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsm-partition-name :initarg :hsm-partition-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-configuration-hsm-partition-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-hsm-configuration-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hsm-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hsm-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hsm-configuration 'make-hsm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hsm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hsm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-ip-address))
      (common-lisp:list
       (common-lisp:cons "HsmIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-partition-name))
      (common-lisp:list
       (common-lisp:cons "HsmPartitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hsm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-configuration-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-configuration-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype hsm-configuration-list ()
   '(trivial-types:proper-list hsm-configuration))
 (common-lisp:defun make-hsm-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hsm-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass hsm-configuration-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-hsm-configuration-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hsm-configurations :initarg :hsm-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or hsm-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-hsm-configuration-message-hsm-configurations
                         :shape "HsmConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hsm-configuration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hsm-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hsm-configuration-message
                    'make-hsm-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hsm-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hsm-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-configurations))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hsm-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-configuration-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'hsm-configuration-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition hsm-configuration-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-configuration-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass hsm-status common-lisp:nil
                       ((hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-status-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-hsm-status-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-hsm-status-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hsm-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hsm-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hsm-status 'make-hsm-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hsm-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hsm-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hsm-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iprange common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-iprange-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cidrip :initarg :cidrip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-iprange-cidrip :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-iprange-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iprange
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iprange
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iprange 'make-iprange))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iprange))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iprange-list () '(trivial-types:proper-list iprange))
 (common-lisp:defun make-iprange-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list iprange))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype iam-role-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-iam-role-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype idc-display-name-string () 'common-lisp:string)
(common-lisp:deftype identity-namespace-string () 'common-lisp:string)
(common-lisp:deftype impact-ranking-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-tables-completed ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-import-tables-completed
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-tables-in-progress ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-import-tables-in-progress
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-tables-not-started ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-import-tables-not-started
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition in-progress-table-restore-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'in-progress-table-restore-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass inbound-integration common-lisp:nil
                       ((integration-arn :initarg :integration-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inbound-integration-integration-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inbound-integration-source-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inbound-integration-target-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or zero-etlintegration-status
                                         common-lisp:null)
                         :accessor struct-shape-inbound-integration-status
                         :shape "ZeroETLIntegrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or integration-error-list
                                         common-lisp:null)
                         :accessor struct-shape-inbound-integration-errors
                         :shape "IntegrationErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-inbound-integration-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inbound-integration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inbound-integration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inbound-integration 'make-inbound-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inbound-integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inbound-integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-arn))
      (common-lisp:list
       (common-lisp:cons "IntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inbound-integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inbound-integration-list ()
   '(trivial-types:proper-list inbound-integration))
 (common-lisp:defun make-inbound-integration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inbound-integration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inbound-integrations-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-inbound-integrations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inbound-integrations :initarg :inbound-integrations
                         :initform common-lisp:nil :type
                         (common-lisp:or inbound-integration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-inbound-integrations-message-inbound-integrations
                         :shape "InboundIntegrationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inbound-integrations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inbound-integrations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inbound-integrations-message
                    'make-inbound-integrations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inbound-integrations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inbound-integrations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-integrations))
      (common-lisp:list
       (common-lisp:cons "InboundIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inbound-integrations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition incompatible-orderable-options
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'incompatible-orderable-options)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-cluster-capacity-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-cluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-s3bucket-policy-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-s3bucket-policy-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass integration-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":error-code is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-integration-error-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-integration-error-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-integration-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'integration-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'integration-error 'make-integration-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integration-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integration-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integration-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integration-error-list ()
   '(trivial-types:proper-list integration-error))
 (common-lisp:defun make-integration-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integration-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition integration-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'integration-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-authentication-profile-request-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-authentication-profile-request-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-authorization-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-authorization-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-parameter-group-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-security-group-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-security-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-snapshot-schedule-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-snapshot-schedule-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-snapshot-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-subnet-group-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-subnet-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-subnet-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-subnet-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-track-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-track-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-data-share-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-data-share-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-elastic-ip-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-elastic-ip-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-endpoint-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-endpoint-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-hsm-client-certificate-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-hsm-client-certificate-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-hsm-configuration-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-hsm-configuration-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-namespace-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-namespace-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-policy-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-reserved-node-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-reserved-node-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-restore-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-restore-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-retention-period-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-retention-period-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-name-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3bucket-name-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3key-prefix-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3key-prefix-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-schedule-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-schedule-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-scheduled-action-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-scheduled-action-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snapshot-copy-grant-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-snapshot-copy-grant-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subscription-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subscription-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-table-restore-argument-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-table-restore-argument-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-usage-limit-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-usage-limit-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition ipv6cidr-block-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'ipv6cidr-block-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass lake-formation-query common-lisp:nil
                       ((authorization :initarg :authorization :initform
                         (common-lisp:error ":authorization is required") :type
                         (common-lisp:or service-authorization
                                         common-lisp:null)
                         :accessor
                         struct-shape-lake-formation-query-authorization :shape
                         "ServiceAuthorization" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lake-formation-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lake-formation-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lake-formation-query 'make-lake-formation-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lake-formation-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lake-formation-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization))
      (common-lisp:list
       (common-lisp:cons "Authorization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lake-formation-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lake-formation-scope-union common-lisp:nil
                       ((lake-formation-query :initarg :lake-formation-query
                         :initform common-lisp:nil :type
                         (common-lisp:or lake-formation-query common-lisp:null)
                         :accessor
                         struct-shape-lake-formation-scope-union-lake-formation-query
                         :shape "LakeFormationQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lake-formation-scope-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lake-formation-scope-union
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lake-formation-scope-union
                    'make-lake-formation-scope-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-scope-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-scope-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-query))
      (common-lisp:list
       (common-lisp:cons "LakeFormationQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-scope-union))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lake-formation-service-integrations ()
   '(trivial-types:proper-list lake-formation-scope-union))
 (common-lisp:defun make-lake-formation-service-integrations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lake-formation-scope-union))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass list-recommendations-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendations-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace-arn :initarg :namespace-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendations-message-namespace-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommendations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-recommendations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-message
                    'make-list-recommendations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "NamespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommendations-result common-lisp:nil
                       ((recommendations :initarg :recommendations :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-list common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-result-recommendations
                         :shape "RecommendationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-result-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommendations-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-recommendations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-result
                    'make-list-recommendations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "Recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-result))
   common-lisp:nil))
(common-lisp:deftype log-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-log-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass logging-status common-lisp:nil
                       ((logging-enabled :initarg :logging-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-logging-status-logging-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-logging-status-bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-logging-status-s3key-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-successful-delivery-time :initarg
                         :last-successful-delivery-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-logging-status-last-successful-delivery-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-failure-time :initarg :last-failure-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-logging-status-last-failure-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-failure-message :initarg :last-failure-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-logging-status-last-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-destination-type :initarg :log-destination-type
                         :initform common-lisp:nil :type
                         (common-lisp:or log-destination-type common-lisp:null)
                         :accessor
                         struct-shape-logging-status-log-destination-type
                         :shape "LogDestinationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-exports :initarg :log-exports :initform
                         common-lisp:nil :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor struct-shape-logging-status-log-exports
                         :shape "LogTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-status 'make-logging-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-failure-time))
      (common-lisp:list
       (common-lisp:cons "LastFailureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-destination-type))
      (common-lisp:list
       (common-lisp:cons "LogDestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-exports))
      (common-lisp:list
       (common-lisp:cons "LogExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-status))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass maintenance-track common-lisp:nil
                       ((maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-maintenance-track-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-version :initarg :database-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-maintenance-track-database-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-targets :initarg :update-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or eligible-tracks-to-update-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-maintenance-track-update-targets :shape
                         "EligibleTracksToUpdateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maintenance-track
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-track
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'maintenance-track 'make-maintenance-track))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-track))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-track))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-version))
      (common-lisp:list
       (common-lisp:cons "DatabaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-targets))
      (common-lisp:list
       (common-lisp:cons "UpdateTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-track))
   common-lisp:nil))
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-aqua-input-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-aqua-input-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aqua-configuration-status :initarg
                         :aqua-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or aqua-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-aqua-input-message-aqua-configuration-status
                         :shape "AquaConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-aqua-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-aqua-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-aqua-input-message
                    'make-modify-aqua-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-aqua-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-aqua-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aqua-configuration-status))
      (common-lisp:list
       (common-lisp:cons "AquaConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-aqua-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-aqua-output-message common-lisp:nil
                       ((aqua-configuration :initarg :aqua-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or aqua-configuration common-lisp:null)
                         :accessor
                         struct-shape-modify-aqua-output-message-aqua-configuration
                         :shape "AquaConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-aqua-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-aqua-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-aqua-output-message
                    'make-modify-aqua-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-aqua-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-aqua-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aqua-configuration))
      (common-lisp:list
       (common-lisp:cons "AquaConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-aqua-output-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-authentication-profile-message common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform
                         (common-lisp:error
                          ":authentication-profile-name is required")
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-authentication-profile-message-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-profile-content :initarg
                         :authentication-profile-content :initform
                         (common-lisp:error
                          ":authentication-profile-content is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-authentication-profile-message-authentication-profile-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-authentication-profile-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-authentication-profile-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-authentication-profile-message
                    'make-modify-authentication-profile-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-authentication-profile-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-authentication-profile-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-content))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-authentication-profile-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-authentication-profile-result common-lisp:nil
                       ((authentication-profile-name :initarg
                         :authentication-profile-name :initform common-lisp:nil
                         :type
                         (common-lisp:or authentication-profile-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-authentication-profile-result-authentication-profile-name
                         :shape "AuthenticationProfileNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-profile-content :initarg
                         :authentication-profile-content :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-authentication-profile-result-authentication-profile-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-authentication-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-authentication-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-authentication-profile-result
                    'make-modify-authentication-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-authentication-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-authentication-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-name))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-profile-content))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProfileContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-authentication-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-db-revision-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-db-revision-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-target :initarg :revision-target :initform
                         (common-lisp:error ":revision-target is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-db-revision-message-revision-target
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-db-revision-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-db-revision-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-db-revision-message
                    'make-modify-cluster-db-revision-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-db-revision-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-db-revision-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-target))
      (common-lisp:list
       (common-lisp:cons "RevisionTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-db-revision-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-db-revision-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-db-revision-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-db-revision-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-db-revision-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-db-revision-result
                    'make-modify-cluster-db-revision-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-db-revision-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-db-revision-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-db-revision-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-iam-roles-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-iam-roles-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-iam-roles :initarg :add-iam-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-role-arn-list common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-iam-roles-message-add-iam-roles
                         :shape "IamRoleArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-iam-roles :initarg :remove-iam-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-role-arn-list common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-iam-roles-message-remove-iam-roles
                         :shape "IamRoleArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-iam-role-arn :initarg :default-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-iam-roles-message-default-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-iam-roles-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-iam-roles-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-iam-roles-message
                    'make-modify-cluster-iam-roles-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-iam-roles))
      (common-lisp:list
       (common-lisp:cons "AddIamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-iam-roles))
      (common-lisp:list
       (common-lisp:cons "RemoveIamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-iam-roles-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-iam-roles-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-iam-roles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-iam-roles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-iam-roles-result
                    'make-modify-cluster-iam-roles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-maintenance-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-maintenance-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance :initarg :defer-maintenance
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-maintenance-message-defer-maintenance
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance-identifier :initarg
                         :defer-maintenance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-maintenance-message-defer-maintenance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance-start-time :initarg
                         :defer-maintenance-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-modify-cluster-maintenance-message-defer-maintenance-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance-end-time :initarg
                         :defer-maintenance-end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-maintenance-message-defer-maintenance-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (defer-maintenance-duration :initarg
                         :defer-maintenance-duration :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-maintenance-message-defer-maintenance-duration
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-maintenance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-maintenance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-maintenance-message
                    'make-modify-cluster-maintenance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-maintenance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-maintenance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defer-maintenance))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-identifier))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-end-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-duration))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-maintenance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-maintenance-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-maintenance-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-maintenance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-maintenance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-maintenance-result
                    'make-modify-cluster-maintenance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-maintenance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-maintenance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-maintenance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-cluster-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-number-of-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-security-groups :initarg
                         :cluster-security-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-cluster-security-groups
                         :shape "ClusterSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-parameter-group-name :initarg
                         :cluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-cluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-automated-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-cluster-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-version-upgrade :initarg :allow-version-upgrade
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-allow-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-cluster-identifier :initarg
                         :new-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-new-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elastic-ip :initarg :elastic-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-elastic-ip :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-enhanced-vpc-routing
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-encrypted :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone-relocation :initarg
                         :availability-zone-relocation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-availability-zone-relocation
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-modify-cluster-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-password :initarg
                         :manage-master-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-message-manage-master-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-password-secret-kms-key-id :initarg
                         :master-password-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-master-password-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-message-ip-address-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-modify-cluster-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-message 'make-modify-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-relocation))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneRelocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-parameter-group-message common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-parameter-group-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-parameter-group-message-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-parameter-group-message
                    'make-modify-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-modify-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-result 'make-modify-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-snapshot-message common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform
                         (common-lisp:error ":snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-snapshot-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-snapshot-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-cluster-snapshot-message-force
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-snapshot-message
                    'make-modify-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-snapshot-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-snapshot-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-snapshot-result
                    'make-modify-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-snapshot-schedule-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-snapshot-schedule-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-identifier :initarg :schedule-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-snapshot-schedule-message-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disassociate-schedule :initarg :disassociate-schedule
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-snapshot-schedule-message-disassociate-schedule
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-snapshot-schedule-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-snapshot-schedule-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-snapshot-schedule-message
                    'make-modify-cluster-snapshot-schedule-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-schedule-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-schedule-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "ScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-schedule))
      (common-lisp:list
       (common-lisp:cons "DisassociateSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-snapshot-schedule-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-subnet-group-message common-lisp:nil
                       ((cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform
                         (common-lisp:error
                          ":cluster-subnet-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-subnet-group-message-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-cluster-subnet-group-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-subnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-subnet-group-message
                    'make-modify-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-cluster-subnet-group-result common-lisp:nil
                       ((cluster-subnet-group :initarg :cluster-subnet-group
                         :initform common-lisp:nil :type
                         (common-lisp:or cluster-subnet-group common-lisp:null)
                         :accessor
                         struct-shape-modify-cluster-subnet-group-result-cluster-subnet-group
                         :shape "ClusterSubnetGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-cluster-subnet-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-cluster-subnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-subnet-group-result
                    'make-modify-cluster-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-custom-domain-association-message common-lisp:nil
                       ((custom-domain-name :initarg :custom-domain-name
                         :initform
                         (common-lisp:error ":custom-domain-name is required")
                         :type
                         (common-lisp:or custom-domain-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-domain-association-message-custom-domain-name
                         :shape "CustomDomainNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         (common-lisp:error
                          ":custom-domain-certificate-arn is required")
                         :type
                         (common-lisp:or custom-domain-certificate-arn-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-domain-association-message-custom-domain-certificate-arn
                         :shape "CustomDomainCertificateArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-domain-association-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-custom-domain-association-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-custom-domain-association-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-custom-domain-association-message
                    'make-modify-custom-domain-association-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-domain-association-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-domain-association-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-domain-association-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-custom-domain-association-result common-lisp:nil
                       ((custom-domain-name :initarg :custom-domain-name
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-domain-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-domain-association-result-custom-domain-name
                         :shape "CustomDomainNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-domain-certificate-arn :initarg
                         :custom-domain-certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-domain-certificate-arn-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-custom-domain-association-result-custom-domain-certificate-arn
                         :shape "CustomDomainCertificateArnString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-custom-domain-association-result-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-domain-cert-expiry-time :initarg
                         :custom-domain-cert-expiry-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-custom-domain-association-result-custom-domain-cert-expiry-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-custom-domain-association-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-custom-domain-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-custom-domain-association-result
                    'make-modify-custom-domain-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-domain-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-domain-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "CustomDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-cert-expiry-time))
      (common-lisp:list
       (common-lisp:cons "CustomDomainCertExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-domain-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-endpoint-access-message common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-access-message-endpoint-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-access-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-endpoint-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-endpoint-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-endpoint-access-message
                    'make-modify-endpoint-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-event-subscription-message-sns-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-event-subscription-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-ids :initarg :source-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-source-ids
                         :shape "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-severity
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-result-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-event-subscription-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-result
                    'make-modify-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-redshift-idc-application-message common-lisp:nil
                       ((redshift-idc-application-arn :initarg
                         :redshift-idc-application-arn :initform
                         (common-lisp:error
                          ":redshift-idc-application-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-redshift-idc-application-message-redshift-idc-application-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-namespace :initarg :identity-namespace
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-namespace-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-redshift-idc-application-message-identity-namespace
                         :shape "IdentityNamespaceString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-redshift-idc-application-message-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idc-display-name :initarg :idc-display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or idc-display-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-redshift-idc-application-message-idc-display-name
                         :shape "IdcDisplayNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorized-token-issuer-list :initarg
                         :authorized-token-issuer-list :initform
                         common-lisp:nil :type
                         (common-lisp:or authorized-token-issuer-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-redshift-idc-application-message-authorized-token-issuer-list
                         :shape "AuthorizedTokenIssuerList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-integrations :initarg :service-integrations
                         :initform common-lisp:nil :type
                         (common-lisp:or service-integration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-redshift-idc-application-message-service-integrations
                         :shape "ServiceIntegrationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-redshift-idc-application-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-redshift-idc-application-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-redshift-idc-application-message
                    'make-modify-redshift-idc-application-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-redshift-idc-application-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-redshift-idc-application-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-arn))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-namespace))
      (common-lisp:list
       (common-lisp:cons "IdentityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-display-name))
      (common-lisp:list
       (common-lisp:cons "IdcDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-token-issuer-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedTokenIssuerList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-integrations))
      (common-lisp:list
       (common-lisp:cons "ServiceIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-redshift-idc-application-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-redshift-idc-application-result common-lisp:nil
                       ((redshift-idc-application :initarg
                         :redshift-idc-application :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-idc-application
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-redshift-idc-application-result-redshift-idc-application
                         :shape "RedshiftIdcApplication" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-redshift-idc-application-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-redshift-idc-application-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-redshift-idc-application-result
                    'make-modify-redshift-idc-application-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-redshift-idc-application-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-redshift-idc-application-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-redshift-idc-application-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-scheduled-action-message common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :initform
                         (common-lisp:error
                          ":scheduled-action-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-scheduled-action-message-scheduled-action-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-action :initarg :target-action :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-scheduled-action-message-target-action
                         :shape "ScheduledActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-scheduled-action-message-schedule
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-scheduled-action-message-iam-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-action-description :initarg
                         :scheduled-action-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-scheduled-action-message-scheduled-action-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-modify-scheduled-action-message-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-modify-scheduled-action-message-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable :initarg :enable :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-scheduled-action-message-enable
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-scheduled-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-scheduled-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-scheduled-action-message
                    'make-modify-scheduled-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-scheduled-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-scheduled-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "TargetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-description))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-scheduled-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-snapshot-copy-retention-period-message
                       common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-snapshot-copy-retention-period-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         (common-lisp:error ":retention-period is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-modify-snapshot-copy-retention-period-message-retention-period
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual :initarg :manual :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-snapshot-copy-retention-period-message-manual
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-snapshot-copy-retention-period-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-snapshot-copy-retention-period-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-snapshot-copy-retention-period-message
                    'make-modify-snapshot-copy-retention-period-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manual))
      (common-lisp:list
       (common-lisp:cons "Manual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-snapshot-copy-retention-period-result
                       common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-modify-snapshot-copy-retention-period-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-snapshot-copy-retention-period-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-snapshot-copy-retention-period-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-snapshot-copy-retention-period-result
                    'make-modify-snapshot-copy-retention-period-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-snapshot-schedule-message common-lisp:nil
                       ((schedule-identifier :initarg :schedule-identifier
                         :initform
                         (common-lisp:error ":schedule-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-snapshot-schedule-message-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-definitions :initarg :schedule-definitions
                         :initform
                         (common-lisp:error
                          ":schedule-definitions is required")
                         :type
                         (common-lisp:or schedule-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-snapshot-schedule-message-schedule-definitions
                         :shape "ScheduleDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-snapshot-schedule-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-snapshot-schedule-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-snapshot-schedule-message
                    'make-modify-snapshot-schedule-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-schedule-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-schedule-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "ScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-definitions))
      (common-lisp:list
       (common-lisp:cons "ScheduleDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-schedule-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-usage-limit-message common-lisp:nil
                       ((usage-limit-id :initarg :usage-limit-id :initform
                         (common-lisp:error ":usage-limit-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-usage-limit-message-usage-limit-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amount :initarg :amount :initform common-lisp:nil
                         :type (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-usage-limit-message-amount :shape
                         "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (breach-action :initarg :breach-action :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limit-breach-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-usage-limit-message-breach-action
                         :shape "UsageLimitBreachAction" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-usage-limit-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-usage-limit-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-usage-limit-message
                    'make-modify-usage-limit-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-usage-limit-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-usage-limit-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "UsageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-action))
      (common-lisp:list
       (common-lisp:cons "BreachAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-usage-limit-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((network-interface-id :initarg :network-interface-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-network-interface-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-subnet-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-ip-address :initarg :private-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-private-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6address :initarg :ipv6address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-ipv6address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "Ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interface-list ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interface-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node-configuration-option common-lisp:nil
                       ((node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-node-configuration-option-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-node-configuration-option-number-of-nodes
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-disk-utilization-percent :initarg
                         :estimated-disk-utilization-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-option-estimated-disk-utilization-percent
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or mode common-lisp:null) :accessor
                         struct-shape-node-configuration-option-mode :shape
                         "Mode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-configuration-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node-configuration-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-configuration-option
                    'make-node-configuration-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-disk-utilization-percent))
      (common-lisp:list
       (common-lisp:cons "EstimatedDiskUtilizationPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-configuration-option-list ()
   '(trivial-types:proper-list node-configuration-option))
 (common-lisp:defun make-node-configuration-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-configuration-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node-configuration-options-filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or node-configuration-options-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-options-filter-name
                         :shape "NodeConfigurationOptionsFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operator :initarg :operator :initform common-lisp:nil
                         :type (common-lisp:or operator-type common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-options-filter-operator
                         :shape "OperatorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-options-filter-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name "Value"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-configuration-options-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-configuration-options-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-configuration-options-filter
                    'make-node-configuration-options-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-options-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-options-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-options-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype node-configuration-options-filter-list ()
   '(trivial-types:proper-list node-configuration-options-filter))
 (common-lisp:defun make-node-configuration-options-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            node-configuration-options-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-configuration-options-filter-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-configuration-options-message common-lisp:nil
                       ((node-configuration-option-list :initarg
                         :node-configuration-option-list :initform
                         common-lisp:nil :type
                         (common-lisp:or node-configuration-option-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-options-message-node-configuration-option-list
                         :shape "NodeConfigurationOptionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-node-configuration-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-configuration-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-configuration-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-configuration-options-message
                    'make-node-configuration-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-configuration-option-list))
      (common-lisp:list
       (common-lisp:cons "NodeConfigurationOptionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-configuration-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition number-of-nodes-per-cluster-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'number-of-nodes-per-cluster-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition number-of-nodes-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'number-of-nodes-quota-exceeded-fault)))
(common-lisp:deftype operator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass orderable-cluster-option common-lisp:nil
                       ((cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-cluster-option-cluster-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-cluster-option-cluster-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-cluster-option-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-cluster-option-availability-zones
                         :shape "AvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-orderable-cluster-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'orderable-cluster-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'orderable-cluster-option 'make-orderable-cluster-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-cluster-options-list ()
   '(trivial-types:proper-list orderable-cluster-option))
 (common-lisp:defun make-orderable-cluster-options-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-cluster-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass orderable-cluster-options-message common-lisp:nil
                       ((orderable-cluster-options :initarg
                         :orderable-cluster-options :initform common-lisp:nil
                         :type
                         (common-lisp:or orderable-cluster-options-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-cluster-options-message-orderable-cluster-options
                         :shape "OrderableClusterOptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-orderable-cluster-options-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-orderable-cluster-options-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'orderable-cluster-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'orderable-cluster-options-message
                    'make-orderable-cluster-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-cluster-options))
      (common-lisp:list
       (common-lisp:cons "OrderableClusterOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-parameter-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-parameter-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-parameter-source :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-data-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-parameter-allowed-values :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apply-type :initarg :apply-type :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-apply-type common-lisp:null)
                         :accessor struct-shape-parameter-apply-type :shape
                         "ParameterApplyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-parameter-is-modifiable :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-parameter-minimum-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:deftype parameter-apply-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-group-list ()
   '(trivial-types:proper-list cluster-parameter-group))
 (common-lisp:defun make-parameter-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun make-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partner-integration-account-id () 'common-lisp:string)
(common-lisp:deftype partner-integration-cluster-identifier ()
  'common-lisp:string)
(common-lisp:deftype partner-integration-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partner-integration-info common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-info-database-name
                         :shape "PartnerIntegrationDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partner-name :initarg :partner-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-partner-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-info-partner-name
                         :shape "PartnerIntegrationPartnerName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or partner-integration-status
                                         common-lisp:null)
                         :accessor struct-shape-partner-integration-info-status
                         :shape "PartnerIntegrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-status-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-info-status-message
                         :shape "PartnerIntegrationStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-partner-integration-info-created-at
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-partner-integration-info-updated-at
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partner-integration-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partner-integration-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'partner-integration-info 'make-partner-integration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "PartnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partner-integration-info-list ()
   '(trivial-types:proper-list partner-integration-info))
 (common-lisp:defun make-partner-integration-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            partner-integration-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass partner-integration-input-message common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or partner-integration-account-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-input-message-account-id
                         :shape "PartnerIntegrationAccountId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type
                         (common-lisp:or partner-integration-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-input-message-cluster-identifier
                         :shape "PartnerIntegrationClusterIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or partner-integration-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-input-message-database-name
                         :shape "PartnerIntegrationDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partner-name :initarg :partner-name :initform
                         (common-lisp:error ":partner-name is required") :type
                         (common-lisp:or partner-integration-partner-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-input-message-partner-name
                         :shape "PartnerIntegrationPartnerName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partner-integration-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'partner-integration-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'partner-integration-input-message
                    'make-partner-integration-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "PartnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass partner-integration-output-message common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-output-message-database-name
                         :shape "PartnerIntegrationDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partner-name :initarg :partner-name :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-partner-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-partner-integration-output-message-partner-name
                         :shape "PartnerIntegrationPartnerName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partner-integration-output-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'partner-integration-output-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'partner-integration-output-message
                    'make-partner-integration-output-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-output-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-output-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "PartnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          partner-integration-output-message))
   common-lisp:nil))
(common-lisp:deftype partner-integration-partner-name () 'common-lisp:string)
(common-lisp:deftype partner-integration-status () 'common-lisp:string)
(common-lisp:deftype partner-integration-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition partner-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'partner-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass pause-cluster-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pause-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pause-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pause-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pause-cluster-message 'make-pause-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pause-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-pause-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pause-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pause-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pause-cluster-result 'make-pause-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pause-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pause-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pause-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-actions-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-pending-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-modified-values common-lisp:nil
                       ((master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-master-user-password
                         :shape "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-number-of-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-cluster-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-cluster-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-automated-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-enhanced-vpc-routing
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pending-modified-values-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-modified-values-encryption-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-node-offering-message common-lisp:nil
                       ((reserved-node-offering-id :initarg
                         :reserved-node-offering-id :initform
                         (common-lisp:error
                          ":reserved-node-offering-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-node-offering-message-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-count :initarg :node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-node-offering-message-node-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-node-offering-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-node-offering-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-node-offering-message
                    'make-purchase-reserved-node-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "NodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-node-offering-result common-lisp:nil
                       ((reserved-node :initarg :reserved-node :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-node common-lisp:null)
                         :accessor
                         struct-shape-purchase-reserved-node-offering-result-reserved-node
                         :shape "ReservedNode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-node-offering-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-node-offering-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-node-offering-result
                    'make-purchase-reserved-node-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node))
      (common-lisp:list
       (common-lisp:cons "ReservedNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-resource-policy-message-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-resource-policy-message-policy :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-message
                    'make-put-resource-policy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-result common-lisp:nil
                       ((resource-policy :initarg :resource-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-result-resource-policy
                         :shape "ResourcePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-result
                    'make-put-resource-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-cluster-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reboot-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-cluster-message 'make-reboot-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-reboot-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-cluster-result 'make-reboot-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-cluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (namespace-arn :initarg :namespace-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-namespace-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-recommendation-created-at :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-type :initarg :recommendation-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-recommendation-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-title :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (observation :initarg :observation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-observation :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (impact-ranking :initarg :impact-ranking :initform
                         common-lisp:nil :type
                         (common-lisp:or impact-ranking-type common-lisp:null)
                         :accessor struct-shape-recommendation-impact-ranking
                         :shape "ImpactRankingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation-text :initarg :recommendation-text
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-recommendation-text :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommended-actions :initarg :recommended-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or recommended-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommendation-recommended-actions :shape
                         "RecommendedActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-links :initarg :reference-links :initform
                         common-lisp:nil :type
                         (common-lisp:or reference-link-list common-lisp:null)
                         :accessor struct-shape-recommendation-reference-links
                         :shape "ReferenceLinkList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "NamespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-type))
      (common-lisp:list
       (common-lisp:cons "RecommendationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation))
      (common-lisp:list
       (common-lisp:cons "Observation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-ranking))
      (common-lisp:list
       (common-lisp:cons "ImpactRanking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-text))
      (common-lisp:list
       (common-lisp:cons "RecommendationText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "RecommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-links))
      (common-lisp:list
       (common-lisp:cons "ReferenceLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-list ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun make-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommended-action common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommended-action-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-recommended-action-database
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-recommended-action-command
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or recommended-action-type
                                         common-lisp:null)
                         :accessor struct-shape-recommended-action-type :shape
                         "RecommendedActionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommended-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommended-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommended-action 'make-recommended-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommended-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommended-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommended-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommended-action-list ()
   '(trivial-types:proper-list recommended-action))
 (common-lisp:defun make-recommended-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommended-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommended-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((recurring-charge-amount :initarg
                         :recurring-charge-amount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-amount
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charge-frequency :initarg
                         :recurring-charge-frequency :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-frequency
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recurring-charge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun make-recurring-charge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass redshift-idc-application common-lisp:nil
                       ((idc-instance-arn :initarg :idc-instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-idc-application-idc-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-idc-application-name :initarg
                         :redshift-idc-application-name :initform
                         common-lisp:nil :type
                         (common-lisp:or redshift-idc-application-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-idc-application-redshift-idc-application-name
                         :shape "RedshiftIdcApplicationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-idc-application-arn :initarg
                         :redshift-idc-application-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-idc-application-redshift-idc-application-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-namespace :initarg :identity-namespace
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-namespace-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-idc-application-identity-namespace
                         :shape "IdentityNamespaceString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idc-display-name :initarg :idc-display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or idc-display-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-idc-application-idc-display-name
                         :shape "IdcDisplayNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-idc-application-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idc-managed-application-arn :initarg
                         :idc-managed-application-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redshift-idc-application-idc-managed-application-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idc-onboard-status :initarg :idc-onboard-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-idc-application-idc-onboard-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-token-issuer-list :initarg
                         :authorized-token-issuer-list :initform
                         common-lisp:nil :type
                         (common-lisp:or authorized-token-issuer-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-idc-application-authorized-token-issuer-list
                         :shape "AuthorizedTokenIssuerList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-integrations :initarg :service-integrations
                         :initform common-lisp:nil :type
                         (common-lisp:or service-integration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-idc-application-service-integrations
                         :shape "ServiceIntegrationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-idc-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-idc-application
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-idc-application 'make-redshift-idc-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-idc-application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-idc-application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-instance-arn))
      (common-lisp:list
       (common-lisp:cons "IdcInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-name))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-arn))
      (common-lisp:list
       (common-lisp:cons "RedshiftIdcApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-namespace))
      (common-lisp:list
       (common-lisp:cons "IdentityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-display-name))
      (common-lisp:list
       (common-lisp:cons "IdcDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idc-managed-application-arn))
      (common-lisp:list
       (common-lisp:cons "IdcManagedApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idc-onboard-status))
      (common-lisp:list
       (common-lisp:cons "IdcOnboardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-token-issuer-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedTokenIssuerList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-integrations))
      (common-lisp:list
       (common-lisp:cons "ServiceIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-idc-application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition redshift-idc-application-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'redshift-idc-application-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype redshift-idc-application-list ()
   '(trivial-types:proper-list redshift-idc-application))
 (common-lisp:defun make-redshift-idc-application-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            redshift-idc-application))
   aws-sdk/generator/shape::members))
(common-lisp:deftype redshift-idc-application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition redshift-idc-application-not-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'redshift-idc-application-not-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition redshift-idc-application-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'redshift-idc-application-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass reference-link common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reference-link-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link :initarg :link :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reference-link-link :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reference-link
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reference-link
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reference-link 'make-reference-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reference-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reference-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reference-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-link-list ()
   '(trivial-types:proper-list reference-link))
 (common-lisp:defun make-reference-link-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reference-link))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reject-data-share-message common-lisp:nil
                       ((data-share-arn :initarg :data-share-arn :initform
                         (common-lisp:error ":data-share-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reject-data-share-message-data-share-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-data-share-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-data-share-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-data-share-message
                    'make-reject-data-share-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-data-share-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-data-share-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-share-arn))
      (common-lisp:list
       (common-lisp:cons "DataShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-data-share-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reserved-node common-lisp:nil
                       ((reserved-node-id :initarg :reserved-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-reserved-node-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reserved-node-offering-id :initarg
                         :reserved-node-offering-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-node-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-reserved-node-start-time :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-reserved-node-duration :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-node-fixed-price :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-node-usage-price :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-currency-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-count :initarg :node-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-reserved-node-node-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-state :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-offering-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor struct-shape-reserved-node-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-offering-type :initarg
                         :reserved-node-offering-type :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-node-offering-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-reserved-node-offering-type
                         :shape "ReservedNodeOfferingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reserved-node 'make-reserved-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "NodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-type))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-already-migrated-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-already-migrated-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-node-configuration-option common-lisp:nil
                       ((source-reserved-node :initarg :source-reserved-node
                         :initform common-lisp:nil :type
                         (common-lisp:or reserved-node common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-configuration-option-source-reserved-node
                         :shape "ReservedNode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-count :initarg
                         :target-reserved-node-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-configuration-option-target-reserved-node-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-offering :initarg
                         :target-reserved-node-offering :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-node-offering
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-configuration-option-target-reserved-node-offering
                         :shape "ReservedNodeOffering" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-node-configuration-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-node-configuration-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-node-configuration-option
                    'make-reserved-node-configuration-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-configuration-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-configuration-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-reserved-node))
      (common-lisp:list
       (common-lisp:cons "SourceReservedNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-count))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-offering))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeOffering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-configuration-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-node-configuration-option-list ()
   '(trivial-types:proper-list reserved-node-configuration-option))
 (common-lisp:defun make-reserved-node-configuration-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-node-configuration-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-node-exchange-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition reserved-node-exchange-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-node-exchange-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-node-exchange-status common-lisp:nil
                       ((reserved-node-exchange-request-id :initarg
                         :reserved-node-exchange-request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-exchange-status-reserved-node-exchange-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-node-exchange-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-exchange-status-status
                         :shape "ReservedNodeExchangeStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-time :initarg :request-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-reserved-node-exchange-status-request-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-reserved-node-id :initarg
                         :source-reserved-node-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-exchange-status-source-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-reserved-node-type :initarg
                         :source-reserved-node-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-exchange-status-source-reserved-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-reserved-node-count :initarg
                         :source-reserved-node-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-exchange-status-source-reserved-node-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-offering-id :initarg
                         :target-reserved-node-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-exchange-status-target-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-type :initarg
                         :target-reserved-node-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-exchange-status-target-reserved-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-count :initarg
                         :target-reserved-node-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-exchange-status-target-reserved-node-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-node-exchange-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-node-exchange-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-node-exchange-status
                    'make-reserved-node-exchange-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-exchange-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-exchange-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-exchange-request-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeExchangeRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "RequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "SourceReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-reserved-node-type))
      (common-lisp:list
       (common-lisp:cons "SourceReservedNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-reserved-node-count))
      (common-lisp:list
       (common-lisp:cons "SourceReservedNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-type))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-count))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-exchange-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-node-exchange-status-list ()
   '(trivial-types:proper-list reserved-node-exchange-status))
 (common-lisp:defun make-reserved-node-exchange-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-node-exchange-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-node-exchange-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reserved-node-list ()
   '(trivial-types:proper-list reserved-node))
 (common-lisp:defun make-reserved-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-node-offering common-lisp:nil
                       ((reserved-node-offering-id :initarg
                         :reserved-node-offering-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-offering-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-offering-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-reserved-node-offering-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-node-offering-fixed-price :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-node-offering-usage-price :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-offering-currency-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-type :initarg :offering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-node-offering-offering-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-offering-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-offering-type :initarg
                         :reserved-node-offering-type :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-node-offering-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-offering-reserved-node-offering-type
                         :shape "ReservedNodeOfferingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-node-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-node-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-node-offering 'make-reserved-node-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-type))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-node-offering-list ()
   '(trivial-types:proper-list reserved-node-offering))
 (common-lisp:defun make-reserved-node-offering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-node-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-offering-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-node-offering-not-found-fault)))
(common-lisp:deftype reserved-node-offering-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reserved-node-offerings-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-offerings-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-offerings :initarg
                         :reserved-node-offerings :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-node-offering-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-node-offerings-message-reserved-node-offerings
                         :shape "ReservedNodeOfferingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-node-offerings-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-node-offerings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-node-offerings-message
                    'make-reserved-node-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass reserved-nodes-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-reserved-nodes-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-nodes :initarg :reserved-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-node-list common-lisp:null)
                         :accessor
                         struct-shape-reserved-nodes-message-reserved-nodes
                         :shape "ReservedNodeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-nodes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-nodes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-nodes-message 'make-reserved-nodes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-nodes))
      (common-lisp:list
       (common-lisp:cons "ReservedNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-cluster-parameter-group-message common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :initform
                         (common-lisp:error
                          ":parameter-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reset-cluster-parameter-group-message-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reset-all-parameters :initarg :reset-all-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-reset-cluster-parameter-group-message-reset-all-parameters
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         struct-shape-reset-cluster-parameter-group-message-parameters
                         :shape "ParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-cluster-parameter-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-cluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-cluster-parameter-group-message
                    'make-reset-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resize-cluster-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-resize-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-type :initarg :cluster-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-cluster-message-cluster-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-cluster-message-node-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-cluster-message-number-of-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (classic :initarg :classic :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-resize-cluster-message-classic
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-id :initarg :reserved-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-cluster-message-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-offering-id :initarg
                         :target-reserved-node-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-cluster-message-target-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resize-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resize-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resize-cluster-message 'make-resize-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resize-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resize-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic))
      (common-lisp:list
       (common-lisp:cons "Classic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resize-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resize-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-resize-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resize-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resize-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resize-cluster-result 'make-resize-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resize-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resize-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resize-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resize-info common-lisp:nil
                       ((resize-type :initarg :resize-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-info-resize-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-cancel-resize :initarg :allow-cancel-resize
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-resize-info-allow-cancel-resize :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resize-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resize-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resize-info 'make-resize-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resize-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resize-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-type))
      (common-lisp:list
       (common-lisp:cons "ResizeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cancel-resize))
      (common-lisp:list
       (common-lisp:cons "AllowCancelResize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resize-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resize-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resize-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass resize-progress-message common-lisp:nil
                       ((target-node-type :initarg :target-node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-progress-message-target-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-number-of-nodes :initarg
                         :target-number-of-nodes :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-target-number-of-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-cluster-type :initarg :target-cluster-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-progress-message-target-cluster-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-resize-progress-message-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-tables-completed :initarg
                         :import-tables-completed :initform common-lisp:nil
                         :type
                         (common-lisp:or import-tables-completed
                                         common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-import-tables-completed
                         :shape "ImportTablesCompleted" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (import-tables-in-progress :initarg
                         :import-tables-in-progress :initform common-lisp:nil
                         :type
                         (common-lisp:or import-tables-in-progress
                                         common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-import-tables-in-progress
                         :shape "ImportTablesInProgress" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (import-tables-not-started :initarg
                         :import-tables-not-started :initform common-lisp:nil
                         :type
                         (common-lisp:or import-tables-not-started
                                         common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-import-tables-not-started
                         :shape "ImportTablesNotStarted" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (avg-resize-rate-in-mega-bytes-per-second :initarg
                         :avg-resize-rate-in-mega-bytes-per-second :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-avg-resize-rate-in-mega-bytes-per-second
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-resize-data-in-mega-bytes :initarg
                         :total-resize-data-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-total-resize-data-in-mega-bytes
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress-in-mega-bytes :initarg
                         :progress-in-mega-bytes :initform common-lisp:nil
                         :type (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-progress-in-mega-bytes
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elapsed-time-in-seconds :initarg
                         :elapsed-time-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-elapsed-time-in-seconds
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-time-to-completion-in-seconds :initarg
                         :estimated-time-to-completion-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-estimated-time-to-completion-in-seconds
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resize-type :initarg :resize-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resize-progress-message-resize-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-resize-progress-message-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-encryption-type :initarg
                         :target-encryption-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-target-encryption-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-transfer-progress-percent :initarg
                         :data-transfer-progress-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-resize-progress-message-data-transfer-progress-percent
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resize-progress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resize-progress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resize-progress-message 'make-resize-progress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resize-progress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resize-progress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-node-type))
      (common-lisp:list
       (common-lisp:cons "TargetNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "TargetNumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-type))
      (common-lisp:list
       (common-lisp:cons "TargetClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-tables-completed))
      (common-lisp:list
       (common-lisp:cons "ImportTablesCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-tables-in-progress))
      (common-lisp:list
       (common-lisp:cons "ImportTablesInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-tables-not-started))
      (common-lisp:list
       (common-lisp:cons "ImportTablesNotStarted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avg-resize-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "AvgResizeRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-resize-data-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalResizeDataInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-type))
      (common-lisp:list
       (common-lisp:cons "ResizeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-encryption-type))
      (common-lisp:list
       (common-lisp:cons "TargetEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-progress-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resize-progress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass resource-policy common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-policy-resource-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-resource-policy-policy :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype restorable-node-type-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-restorable-node-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass restore-from-cluster-snapshot-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-arn :initarg :snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-cluster-identifier :initarg
                         :snapshot-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-snapshot-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-version-upgrade :initarg :allow-version-upgrade
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-allow-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-cluster-subnet-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-hsm-client-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-hsm-configuration-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elastic-ip :initarg :elastic-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-parameter-group-name :initarg
                         :cluster-parameter-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-cluster-parameter-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-security-groups :initarg
                         :cluster-security-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-cluster-security-groups
                         :shape "ClusterSecurityGroupNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-automated-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-node-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-enhanced-vpc-routing
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-additional-info
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-roles :initarg :iam-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-role-arn-list common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-iam-roles
                         :shape "IamRoleArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-schedule-identifier :initarg
                         :snapshot-schedule-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-snapshot-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-number-of-nodes
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-relocation :initarg
                         :availability-zone-relocation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-availability-zone-relocation
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aqua-configuration-status :initarg
                         :aqua-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or aqua-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-aqua-configuration-status
                         :shape "AquaConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-iam-role-arn :initarg :default-iam-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-default-iam-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-node-id :initarg :reserved-node-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-reserved-node-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-reserved-node-offering-id :initarg
                         :target-reserved-node-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-target-reserved-node-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-encrypted
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manage-master-password :initarg
                         :manage-master-password :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-manage-master-password
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-password-secret-kms-key-id :initarg
                         :master-password-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-master-password-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-from-cluster-snapshot-message-ip-address-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-from-cluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-from-cluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-from-cluster-snapshot-message
                    'make-restore-from-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-relocation))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneRelocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aqua-configuration-status))
      (common-lisp:list
       (common-lisp:cons "AquaConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "TargetReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-from-cluster-snapshot-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-restore-from-cluster-snapshot-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-from-cluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-from-cluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-from-cluster-snapshot-result
                    'make-restore-from-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-status common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-restore-status-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (current-restore-rate-in-mega-bytes-per-second :initarg
                         :current-restore-rate-in-mega-bytes-per-second
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-restore-status-current-restore-rate-in-mega-bytes-per-second
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-size-in-mega-bytes :initarg
                         :snapshot-size-in-mega-bytes :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-restore-status-snapshot-size-in-mega-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress-in-mega-bytes :initarg
                         :progress-in-mega-bytes :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-restore-status-progress-in-mega-bytes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (elapsed-time-in-seconds :initarg
                         :elapsed-time-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-restore-status-elapsed-time-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated-time-to-completion-in-seconds :initarg
                         :estimated-time-to-completion-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-restore-status-estimated-time-to-completion-in-seconds
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'restore-status 'make-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-restore-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentRestoreRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "SnapshotSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-table-from-cluster-snapshot-message
                       common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-identifier :initarg :snapshot-identifier
                         :initform
                         (common-lisp:error ":snapshot-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-database-name :initarg :source-database-name
                         :initform
                         (common-lisp:error
                          ":source-database-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-source-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-schema-name :initarg :source-schema-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-source-schema-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-table-name :initarg :source-table-name
                         :initform
                         (common-lisp:error ":source-table-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-source-table-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-database-name :initarg :target-database-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-target-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-schema-name :initarg :target-schema-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-target-schema-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-table-name :initarg :new-table-name :initform
                         (common-lisp:error ":new-table-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-new-table-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-case-sensitive-identifier :initarg
                         :enable-case-sensitive-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-message-enable-case-sensitive-identifier
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-table-from-cluster-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-table-from-cluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-cluster-snapshot-message
                    'make-restore-table-from-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "SourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "SourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "SourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "TargetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "TargetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "NewTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-case-sensitive-identifier))
      (common-lisp:list
       (common-lisp:cons "EnableCaseSensitiveIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-table-from-cluster-snapshot-result
                       common-lisp:nil
                       ((table-restore-status :initarg :table-restore-status
                         :initform common-lisp:nil :type
                         (common-lisp:or table-restore-status common-lisp:null)
                         :accessor
                         struct-shape-restore-table-from-cluster-snapshot-result-table-restore-status
                         :shape "TableRestoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-table-from-cluster-snapshot-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-table-from-cluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-cluster-snapshot-result
                    'make-restore-table-from-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status))
      (common-lisp:list
       (common-lisp:cons "TableRestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-cluster-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-resume-cluster-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-cluster-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-cluster-message 'make-resume-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-cluster-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-resume-cluster-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-cluster-result 'make-resume-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revision-target common-lisp:nil
                       ((database-revision :initarg :database-revision
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revision-target-database-revision :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revision-target-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-revision-release-date :initarg
                         :database-revision-release-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-revision-target-database-revision-release-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revision-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revision-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'revision-target 'make-revision-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-revision))
      (common-lisp:list
       (common-lisp:cons "DatabaseRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-revision-release-date))
      (common-lisp:list
       (common-lisp:cons "DatabaseRevisionReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype revision-targets-list ()
   '(trivial-types:proper-list revision-target))
 (common-lisp:defun make-revision-targets-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revision-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass revoke-cluster-security-group-ingress-message
                       common-lisp:nil
                       ((cluster-security-group-name :initarg
                         :cluster-security-group-name :initform
                         (common-lisp:error
                          ":cluster-security-group-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cluster-security-group-ingress-message-cluster-security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrip :initarg :cidrip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cluster-security-group-ingress-message-cidrip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cluster-security-group-ingress-message-ec2security-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-cluster-security-group-ingress-message-ec2security-group-owner-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-cluster-security-group-ingress-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-cluster-security-group-ingress-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-cluster-security-group-ingress-message
                    'make-revoke-cluster-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-cluster-security-group-ingress-result
                       common-lisp:nil
                       ((cluster-security-group :initarg
                         :cluster-security-group :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-security-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-revoke-cluster-security-group-ingress-result-cluster-security-group
                         :shape "ClusterSecurityGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-cluster-security-group-ingress-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-cluster-security-group-ingress-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-cluster-security-group-ingress-result
                    'make-revoke-cluster-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-endpoint-access-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revoke-endpoint-access-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account :initarg :account :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-endpoint-access-message-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-ids :initarg :vpc-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-identifier-list common-lisp:null)
                         :accessor
                         struct-shape-revoke-endpoint-access-message-vpc-ids
                         :shape "VpcIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-revoke-endpoint-access-message-force
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-endpoint-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-endpoint-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-endpoint-access-message
                    'make-revoke-endpoint-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-endpoint-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-endpoint-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-ids))
      (common-lisp:list
       (common-lisp:cons "VpcIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-endpoint-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-snapshot-access-message common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revoke-snapshot-access-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-arn :initarg :snapshot-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revoke-snapshot-access-message-snapshot-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-cluster-identifier :initarg
                         :snapshot-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-snapshot-access-message-snapshot-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-with-restore-access :initarg
                         :account-with-restore-access :initform
                         (common-lisp:error
                          ":account-with-restore-access is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-revoke-snapshot-access-message-account-with-restore-access
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-snapshot-access-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-snapshot-access-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-snapshot-access-message
                    'make-revoke-snapshot-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "AccountWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-snapshot-access-result common-lisp:nil
                       ((snapshot :initarg :snapshot :initform common-lisp:nil
                         :type (common-lisp:or snapshot common-lisp:null)
                         :accessor
                         struct-shape-revoke-snapshot-access-result-snapshot
                         :shape "Snapshot" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-snapshot-access-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-snapshot-access-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-snapshot-access-result
                    'make-revoke-snapshot-access-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rotate-encryption-key-message common-lisp:nil
                       ((cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rotate-encryption-key-message-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rotate-encryption-key-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rotate-encryption-key-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rotate-encryption-key-message
                    'make-rotate-encryption-key-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rotate-encryption-key-result common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-rotate-encryption-key-result-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rotate-encryption-key-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rotate-encryption-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rotate-encryption-key-result
                    'make-rotate-encryption-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsinvalid-topic-fault)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsno-authorization-fault)))
(common-lisp:progn
 (common-lisp:define-condition snstopic-arn-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snstopic-arn-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype schedule-definition-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-schedule-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition schedule-definition-type-unsupported-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'schedule-definition-type-unsupported-fault)))
(common-lisp:deftype schedule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-action common-lisp:nil
                       ((scheduled-action-name :initarg :scheduled-action-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scheduled-action-scheduled-action-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-action :initarg :target-action :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-action-type
                                         common-lisp:null)
                         :accessor struct-shape-scheduled-action-target-action
                         :shape "ScheduledActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-scheduled-action-schedule
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-scheduled-action-iam-role
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-action-description :initarg
                         :scheduled-action-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scheduled-action-scheduled-action-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or scheduled-action-state
                                         common-lisp:null)
                         :accessor struct-shape-scheduled-action-state :shape
                         "ScheduledActionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-invocations :initarg :next-invocations :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-action-time-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-next-invocations :shape
                         "ScheduledActionTimeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-scheduled-action-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor struct-shape-scheduled-action-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-action 'make-scheduled-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduled-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduled-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "TargetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-description))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-invocations))
      (common-lisp:list
       (common-lisp:cons "NextInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduled-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition scheduled-action-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'scheduled-action-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass scheduled-action-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or scheduled-action-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-scheduled-action-filter-name
                         :shape "ScheduledActionFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor struct-shape-scheduled-action-filter-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-action-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-action-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-action-filter 'make-scheduled-action-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-action-filter-list ()
   '(trivial-types:proper-list scheduled-action-filter))
 (common-lisp:defun make-scheduled-action-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-action-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scheduled-action-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scheduled-action-list ()
   '(trivial-types:proper-list scheduled-action))
 (common-lisp:defun make-scheduled-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition scheduled-action-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'scheduled-action-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition scheduled-action-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'scheduled-action-quota-exceeded-fault)))
(common-lisp:deftype scheduled-action-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scheduled-action-time-list ()
   '(trivial-types:proper-list tstamp))
 (common-lisp:defun make-scheduled-action-time-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tstamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scheduled-action-type common-lisp:nil
                       ((resize-cluster :initarg :resize-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or resize-cluster-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-type-resize-cluster
                         :shape "ResizeClusterMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pause-cluster :initarg :pause-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or pause-cluster-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-type-pause-cluster
                         :shape "PauseClusterMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resume-cluster :initarg :resume-cluster :initform
                         common-lisp:nil :type
                         (common-lisp:or resume-cluster-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-action-type-resume-cluster
                         :shape "ResumeClusterMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-action-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-action-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-action-type 'make-scheduled-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-cluster))
      (common-lisp:list
       (common-lisp:cons "ResizeCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pause-cluster))
      (common-lisp:list
       (common-lisp:cons "PauseCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resume-cluster))
      (common-lisp:list
       (common-lisp:cons "ResumeCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition scheduled-action-type-unsupported-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'scheduled-action-type-unsupported-fault)))
(common-lisp:deftype scheduled-action-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-actions-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-scheduled-actions-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scheduled-actions :initarg :scheduled-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-actions-message-scheduled-actions
                         :shape "ScheduledActionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-actions-message
                    'make-scheduled-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-snapshot-time-list ()
   '(trivial-types:proper-list tstamp))
 (common-lisp:defun make-scheduled-snapshot-time-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tstamp))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass secondary-cluster-info common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-secondary-cluster-info-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-nodes :initarg :cluster-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-nodes-list common-lisp:null)
                         :accessor
                         struct-shape-secondary-cluster-info-cluster-nodes
                         :shape "ClusterNodesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-secondary-cluster-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'secondary-cluster-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'secondary-cluster-info 'make-secondary-cluster-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secondary-cluster-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secondary-cluster-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-nodes))
      (common-lisp:list
       (common-lisp:cons "ClusterNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secondary-cluster-info))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:deftype service-authorization () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-integration-list ()
   '(trivial-types:proper-list service-integrations-union))
 (common-lisp:defun make-service-integration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-integrations-union))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-integrations-union common-lisp:nil
                       ((lake-formation :initarg :lake-formation :initform
                         common-lisp:nil :type
                         (common-lisp:or lake-formation-service-integrations
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-integrations-union-lake-formation
                         :shape "LakeFormationServiceIntegrations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-integrations-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-integrations-union
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-integrations-union
                    'make-service-integrations-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-integrations-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-integrations-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lake-formation))
      (common-lisp:list
       (common-lisp:cons "LakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-integrations-union))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-cluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snapshot-port :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-snapshot-cluster-create-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-username :initarg :master-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-master-username :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-version :initarg :cluster-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-cluster-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-full-version :initarg :engine-full-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-engine-full-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-node-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snapshot-number-of-nodes :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dbname :initarg :dbname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-dbname :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-vpc-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-snapshot-encrypted :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encrypted-with-hsm :initarg :encrypted-with-hsm
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-snapshot-encrypted-with-hsm :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (accounts-with-restore-access :initarg
                         :accounts-with-restore-access :initform
                         common-lisp:nil :type
                         (common-lisp:or accounts-with-restore-access-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-snapshot-accounts-with-restore-access
                         :shape "AccountsWithRestoreAccessList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-owner-account :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-backup-size-in-mega-bytes :initarg
                         :total-backup-size-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-snapshot-total-backup-size-in-mega-bytes
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actual-incremental-backup-size-in-mega-bytes :initarg
                         :actual-incremental-backup-size-in-mega-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-snapshot-actual-incremental-backup-size-in-mega-bytes
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backup-progress-in-mega-bytes :initarg
                         :backup-progress-in-mega-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-snapshot-backup-progress-in-mega-bytes
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-backup-rate-in-mega-bytes-per-second :initarg
                         :current-backup-rate-in-mega-bytes-per-second
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-snapshot-current-backup-rate-in-mega-bytes-per-second
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-seconds-to-completion :initarg
                         :estimated-seconds-to-completion :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-snapshot-estimated-seconds-to-completion
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (elapsed-time-in-seconds :initarg
                         :elapsed-time-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-snapshot-elapsed-time-in-seconds :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-source-region :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-snapshot-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (restorable-node-types :initarg :restorable-node-types
                         :initform common-lisp:nil :type
                         (common-lisp:or restorable-node-type-list
                                         common-lisp:null)
                         :accessor struct-shape-snapshot-restorable-node-types
                         :shape "RestorableNodeTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-snapshot-enhanced-vpc-routing :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-snapshot-manual-snapshot-retention-period
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manual-snapshot-remaining-days :initarg
                         :manual-snapshot-remaining-days :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-snapshot-manual-snapshot-remaining-days
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-retention-start-time :initarg
                         :snapshot-retention-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-snapshot-snapshot-retention-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-password-secret-arn :initarg
                         :master-password-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-master-password-secret-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-password-secret-kms-key-id :initarg
                         :master-password-secret-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-master-password-secret-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-full-version))
      (common-lisp:list
       (common-lisp:cons "EngineFullVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-with-hsm))
      (common-lisp:list
       (common-lisp:cons "EncryptedWithHSM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accounts-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "AccountsWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-incremental-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ActualIncrementalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-backup-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentBackupRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-seconds-to-completion))
      (common-lisp:list
       (common-lisp:cons "EstimatedSecondsToCompletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restorable-node-types))
      (common-lisp:list
       (common-lisp:cons "RestorableNodeTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-remaining-days))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRemainingDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-start-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotRetentionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-arn))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:deftype snapshot-attribute-to-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-already-disabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-already-disabled-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-already-enabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-already-enabled-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-disabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-disabled-fault)))
(common-lisp:progn
 (common-lisp:defclass snapshot-copy-grant common-lisp:nil
                       ((snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-copy-grant-snapshot-copy-grant-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-copy-grant-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-snapshot-copy-grant-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-copy-grant
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-copy-grant
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant 'make-snapshot-copy-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-copy-grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-copy-grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-copy-grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-grant-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-copy-grant-list ()
   '(trivial-types:proper-list snapshot-copy-grant))
 (common-lisp:defun make-snapshot-copy-grant-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-copy-grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass snapshot-copy-grant-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-copy-grant-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshot-copy-grants :initarg :snapshot-copy-grants
                         :initform common-lisp:nil :type
                         (common-lisp:or snapshot-copy-grant-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-snapshot-copy-grant-message-snapshot-copy-grants
                         :shape "SnapshotCopyGrantList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-copy-grant-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-copy-grant-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant-message
                    'make-snapshot-copy-grant-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-grant-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-grant-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grants))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-grant-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-grant-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-grant-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-grant-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass snapshot-error-message common-lisp:nil
                       ((snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-error-message-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-cluster-identifier :initarg
                         :snapshot-cluster-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-snapshot-error-message-snapshot-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-error-message-failure-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-error-message-failure-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-error-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-error-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-error-message 'make-snapshot-error-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-error-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-error-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-error-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snapshot-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-snapshot-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun make-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass snapshot-message common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snapshot-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snapshots :initarg :snapshots :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-list common-lisp:null)
                         :accessor struct-shape-snapshot-message-snapshots
                         :shape "SnapshotList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-message 'make-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot-schedule common-lisp:nil
                       ((schedule-definitions :initarg :schedule-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or schedule-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-snapshot-schedule-schedule-definitions
                         :shape "ScheduleDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule-identifier :initarg :schedule-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-schedule-schedule-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-description :initarg :schedule-description
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snapshot-schedule-schedule-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-snapshot-schedule-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-invocations :initarg :next-invocations :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-snapshot-time-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-snapshot-schedule-next-invocations :shape
                         "ScheduledSnapshotTimeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-cluster-count :initarg
                         :associated-cluster-count :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-snapshot-schedule-associated-cluster-count
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-clusters :initarg :associated-clusters
                         :initform common-lisp:nil :type
                         (common-lisp:or associated-cluster-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-snapshot-schedule-associated-clusters
                         :shape "AssociatedClusterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-schedule 'make-snapshot-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-definitions))
      (common-lisp:list
       (common-lisp:cons "ScheduleDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "ScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-description))
      (common-lisp:list
       (common-lisp:cons "ScheduleDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-invocations))
      (common-lisp:list
       (common-lisp:cons "NextInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-cluster-count))
      (common-lisp:list
       (common-lisp:cons "AssociatedClusterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-clusters))
      (common-lisp:list
       (common-lisp:cons "AssociatedClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-schedule-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-schedule-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-schedule-list ()
   '(trivial-types:proper-list snapshot-schedule))
 (common-lisp:defun make-snapshot-schedule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-schedule-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-schedule-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-schedule-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-schedule-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-schedule-update-in-progress-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-schedule-update-in-progress-fault)))
(common-lisp:progn
 (common-lisp:defclass snapshot-sorting-entity common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or snapshot-attribute-to-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-snapshot-sorting-entity-attribute :shape
                         "SnapshotAttributeToSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-by-order common-lisp:null)
                         :accessor
                         struct-shape-snapshot-sorting-entity-sort-order :shape
                         "SortByOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-sorting-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-sorting-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-sorting-entity 'make-snapshot-sorting-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-sorting-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-sorting-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-sorting-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snapshot-sorting-entity-list ()
   '(trivial-types:proper-list snapshot-sorting-entity))
 (common-lisp:defun make-snapshot-sorting-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-sorting-entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-by-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-source-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition source-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-not-found-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((subnet-identifier :initarg :subnet-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor struct-shape-subnet-subnet-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-status :initarg :subnet-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subnet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-already-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subscription-already-exist-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-already-exist-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-category-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-category-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-event-id-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-event-id-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-severity-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-severity-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass supported-operation common-lisp:nil
                       ((operation-name :initarg :operation-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-operation-operation-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supported-operation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supported-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supported-operation 'make-supported-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input supported-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input supported-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-name))
      (common-lisp:list
       (common-lisp:cons "OperationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input supported-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-operation-list ()
   '(trivial-types:proper-list supported-operation))
 (common-lisp:defun make-supported-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass supported-platform common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-platform-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supported-platform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supported-platform
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supported-platform 'make-supported-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input supported-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input supported-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input supported-platform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-platforms-list ()
   '(trivial-types:proper-list supported-platform))
 (common-lisp:defun make-supported-platforms-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-platform))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition table-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'table-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition table-restore-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'table-restore-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass table-restore-status common-lisp:nil
                       ((table-restore-request-id :initarg
                         :table-restore-request-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-table-restore-status-table-restore-request-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or table-restore-status-type
                                         common-lisp:null)
                         :accessor struct-shape-table-restore-status-status
                         :shape "TableRestoreStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-table-restore-status-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-time :initarg :request-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-table-restore-status-request-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress-in-mega-bytes :initarg
                         :progress-in-mega-bytes :initform common-lisp:nil
                         :type (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-table-restore-status-progress-in-mega-bytes
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-data-in-mega-bytes :initarg
                         :total-data-in-mega-bytes :initform common-lisp:nil
                         :type (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-table-restore-status-total-data-in-mega-bytes
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-cluster-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-identifier :initarg :snapshot-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-snapshot-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-database-name :initarg :source-database-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-source-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-schema-name :initarg :source-schema-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-source-schema-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-table-name :initarg :source-table-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-source-table-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-database-name :initarg :target-database-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-target-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-schema-name :initarg :target-schema-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-target-schema-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-table-name :initarg :new-table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-restore-status-new-table-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-restore-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-restore-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-restore-status 'make-table-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-request-id))
      (common-lisp:list
       (common-lisp:cons "TableRestoreRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "RequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-data-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalDataInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "SourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "SourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "SourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "TargetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "TargetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "NewTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-restore-status-list ()
   '(trivial-types:proper-list table-restore-status))
 (common-lisp:defun make-table-restore-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-restore-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-restore-status-message common-lisp:nil
                       ((table-restore-status-details :initarg
                         :table-restore-status-details :initform
                         common-lisp:nil :type
                         (common-lisp:or table-restore-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-table-restore-status-message-table-restore-status-details
                         :shape "TableRestoreStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-table-restore-status-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-restore-status-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-restore-status-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-restore-status-message
                    'make-table-restore-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-restore-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-restore-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status-details))
      (common-lisp:list
       (common-lisp:cons "TableRestoreStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-restore-status-message))
   common-lisp:nil))
(common-lisp:deftype table-restore-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tagged-resource common-lisp:nil
                       ((tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         struct-shape-tagged-resource-tag :shape "Tag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tagged-resource-resource-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tagged-resource-resource-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tagged-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tagged-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tagged-resource 'make-tagged-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagged-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagged-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagged-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tagged-resource-list ()
   '(trivial-types:proper-list tagged-resource))
 (common-lisp:defun make-tagged-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tagged-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tagged-resource-list-message common-lisp:nil
                       ((tagged-resources :initarg :tagged-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or tagged-resource-list common-lisp:null)
                         :accessor
                         struct-shape-tagged-resource-list-message-tagged-resources
                         :shape "TaggedResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-tagged-resource-list-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tagged-resource-list-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tagged-resource-list-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tagged-resource-list-message
                    'make-tagged-resource-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tagged-resource-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tagged-resource-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagged-resources))
      (common-lisp:list
       (common-lisp:cons "TaggedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tagged-resource-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype track-list ()
   '(trivial-types:proper-list maintenance-track))
 (common-lisp:defun make-track-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list maintenance-track))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass track-list-message common-lisp:nil
                       ((maintenance-tracks :initarg :maintenance-tracks
                         :initform common-lisp:nil :type
                         (common-lisp:or track-list common-lisp:null) :accessor
                         struct-shape-track-list-message-maintenance-tracks
                         :shape "TrackList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-track-list-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-track-list-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'track-list-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'track-list-message 'make-track-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input track-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input track-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-tracks))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input track-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-operation
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unauthorized-operation)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-partner-integration-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'unauthorized-partner-integration-fault)))
(common-lisp:progn
 (common-lisp:define-condition unknown-snapshot-copy-region-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unknown-snapshot-copy-region-fault)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-operation-fault)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-option-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-option-fault)))
(common-lisp:progn
 (common-lisp:defclass update-partner-status-input-message common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or partner-integration-account-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partner-status-input-message-account-id
                         :shape "PartnerIntegrationAccountId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform
                         (common-lisp:error ":cluster-identifier is required")
                         :type
                         (common-lisp:or partner-integration-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partner-status-input-message-cluster-identifier
                         :shape "PartnerIntegrationClusterIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or partner-integration-database-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partner-status-input-message-database-name
                         :shape "PartnerIntegrationDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partner-name :initarg :partner-name :initform
                         (common-lisp:error ":partner-name is required") :type
                         (common-lisp:or partner-integration-partner-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partner-status-input-message-partner-name
                         :shape "PartnerIntegrationPartnerName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or partner-integration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partner-status-input-message-status
                         :shape "PartnerIntegrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or partner-integration-status-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partner-status-input-message-status-message
                         :shape "PartnerIntegrationStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-partner-status-input-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-partner-status-input-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-partner-status-input-message
                    'make-update-partner-status-input-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-status-input-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-status-input-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "PartnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-status-input-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-target common-lisp:nil
                       ((maintenance-track-name :initarg
                         :maintenance-track-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-target-maintenance-track-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-version :initarg :database-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-target-database-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-operations :initarg :supported-operations
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-operation-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-target-supported-operations :shape
                         "SupportedOperationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-target 'make-update-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-version))
      (common-lisp:list
       (common-lisp:cons "DatabaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-operations))
      (common-lisp:list
       (common-lisp:cons "SupportedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-limit common-lisp:nil
                       ((usage-limit-id :initarg :usage-limit-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-usage-limit-usage-limit-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-usage-limit-cluster-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (feature-type :initarg :feature-type :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limit-feature-type
                                         common-lisp:null)
                         :accessor struct-shape-usage-limit-feature-type :shape
                         "UsageLimitFeatureType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit-type :initarg :limit-type :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limit-limit-type
                                         common-lisp:null)
                         :accessor struct-shape-usage-limit-limit-type :shape
                         "UsageLimitLimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amount :initarg :amount :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-usage-limit-amount :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or usage-limit-period common-lisp:null)
                         :accessor struct-shape-usage-limit-period :shape
                         "UsageLimitPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (breach-action :initarg :breach-action :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limit-breach-action
                                         common-lisp:null)
                         :accessor struct-shape-usage-limit-breach-action
                         :shape "UsageLimitBreachAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-usage-limit-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-limit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'usage-limit 'make-usage-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "UsageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-type))
      (common-lisp:list
       (common-lisp:cons "FeatureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-type))
      (common-lisp:list
       (common-lisp:cons "LimitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-action))
      (common-lisp:list
       (common-lisp:cons "BreachAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition usage-limit-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'usage-limit-already-exists-fault)))
(common-lisp:deftype usage-limit-breach-action () 'common-lisp:string)
(common-lisp:deftype usage-limit-feature-type () 'common-lisp:string)
(common-lisp:deftype usage-limit-limit-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-limit-list common-lisp:nil
                       ((usage-limits :initarg :usage-limits :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-limits common-lisp:null)
                         :accessor struct-shape-usage-limit-list-usage-limits
                         :shape "UsageLimits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-usage-limit-list-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-limit-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-limit-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-limit-list 'make-usage-limit-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-limit-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-limit-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limits))
      (common-lisp:list
       (common-lisp:cons "UsageLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-limit-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition usage-limit-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'usage-limit-not-found-fault)))
(common-lisp:deftype usage-limit-period () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype usage-limits () '(trivial-types:proper-list usage-limit))
 (common-lisp:defun make-usage-limits
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype value-string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-value-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpc-endpoint-vpc-endpoint-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-vpc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-interfaces :initarg :network-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or network-interface-list
                                         common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-network-interfaces
                         :shape "NetworkInterfaceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-endpoint 'make-vpc-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoints-list ()
   '(trivial-types:proper-list vpc-endpoint))
 (common-lisp:defun make-vpc-endpoints-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-vpc-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-vpc-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-security-group-membership common-lisp:nil
                       ((vpc-security-group-id :initarg :vpc-security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpc-security-group-membership-vpc-security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-vpc-security-group-membership-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-security-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun make-vpc-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype zero-etlintegration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-reserved-node-exchange
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-id
                     target-reserved-node-offering-id)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-id target-reserved-node-offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-reserved-node-exchange-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcceptReservedNodeExchange"))
      common-lisp:nil "AcceptReservedNodeExchangeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'accept-reserved-node-exchange))
(common-lisp:progn
 (common-lisp:defun add-partner
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id cluster-identifier
                     database-name partner-name)
   (common-lisp:declare
    (common-lisp:ignorable account-id cluster-identifier database-name
     partner-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-partner-integration-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddPartner"))
      common-lisp:nil "AddPartnerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'add-partner))
(common-lisp:progn
 (common-lisp:defun associate-data-share-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-share-arn associate-entire-account
                     consumer-arn consumer-region allow-writes)
   (common-lisp:declare
    (common-lisp:ignorable data-share-arn associate-entire-account consumer-arn
     consumer-region allow-writes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-data-share-consumer-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateDataShareConsumer"))
      common-lisp:nil "AssociateDataShareConsumerResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'associate-data-share-consumer))
(common-lisp:progn
 (common-lisp:defun authorize-cluster-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name cidrip
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name cidrip
     ec2security-group-name ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-cluster-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeClusterSecurityGroupIngress"))
      common-lisp:nil "AuthorizeClusterSecurityGroupIngressResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'authorize-cluster-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun authorize-data-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-share-arn consumer-identifier
                     allow-writes)
   (common-lisp:declare
    (common-lisp:ignorable data-share-arn consumer-identifier allow-writes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-authorize-data-share-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeDataShare"))
      common-lisp:nil "AuthorizeDataShareResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'authorize-data-share))
(common-lisp:progn
 (common-lisp:defun authorize-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier account vpc-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier account vpc-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-endpoint-access-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeEndpointAccess"))
      common-lisp:nil "AuthorizeEndpointAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'authorize-endpoint-access))
(common-lisp:progn
 (common-lisp:defun authorize-snapshot-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier snapshot-arn
                     snapshot-cluster-identifier account-with-restore-access)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier snapshot-arn
     snapshot-cluster-identifier account-with-restore-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-snapshot-access-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeSnapshotAccess"))
      common-lisp:nil "AuthorizeSnapshotAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'authorize-snapshot-access))
(common-lisp:progn
 (common-lisp:defun batch-delete-cluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifiers)
   (common-lisp:declare (common-lisp:ignorable identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-cluster-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteClusterSnapshots"))
      common-lisp:nil "BatchDeleteClusterSnapshotsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'batch-delete-cluster-snapshots))
(common-lisp:progn
 (common-lisp:defun batch-modify-cluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier-list
                     manual-snapshot-retention-period force)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier-list
     manual-snapshot-retention-period force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-modify-cluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchModifyClusterSnapshots"))
      common-lisp:nil "BatchModifyClusterSnapshotsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'batch-modify-cluster-snapshots))
(common-lisp:progn
 (common-lisp:defun cancel-resize
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-resize-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelResize"))
      common-lisp:nil "CancelResizeResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'cancel-resize))
(common-lisp:progn
 (common-lisp:defun copy-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-identifier
                     source-snapshot-cluster-identifier
                     target-snapshot-identifier
                     manual-snapshot-retention-period)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-identifier
     source-snapshot-cluster-identifier target-snapshot-identifier
     manual-snapshot-retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyClusterSnapshot"))
      common-lisp:nil "CopyClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'copy-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-authentication-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-profile-name
                     authentication-profile-content)
   (common-lisp:declare
    (common-lisp:ignorable authentication-profile-name
     authentication-profile-content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-authentication-profile-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAuthenticationProfile"))
      common-lisp:nil "CreateAuthenticationProfileResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-authentication-profile))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname cluster-identifier cluster-type
                     node-type master-username master-user-password
                     cluster-security-groups vpc-security-group-ids
                     cluster-subnet-group-name availability-zone
                     preferred-maintenance-window cluster-parameter-group-name
                     automated-snapshot-retention-period
                     manual-snapshot-retention-period port cluster-version
                     allow-version-upgrade number-of-nodes publicly-accessible
                     encrypted hsm-client-certificate-identifier
                     hsm-configuration-identifier elastic-ip tags kms-key-id
                     enhanced-vpc-routing additional-info iam-roles
                     maintenance-track-name snapshot-schedule-identifier
                     availability-zone-relocation aqua-configuration-status
                     default-iam-role-arn load-sample-data
                     manage-master-password master-password-secret-kms-key-id
                     ip-address-type multi-az redshift-idc-application-arn)
   (common-lisp:declare
    (common-lisp:ignorable dbname cluster-identifier cluster-type node-type
     master-username master-user-password cluster-security-groups
     vpc-security-group-ids cluster-subnet-group-name availability-zone
     preferred-maintenance-window cluster-parameter-group-name
     automated-snapshot-retention-period manual-snapshot-retention-period port
     cluster-version allow-version-upgrade number-of-nodes publicly-accessible
     encrypted hsm-client-certificate-identifier hsm-configuration-identifier
     elastic-ip tags kms-key-id enhanced-vpc-routing additional-info iam-roles
     maintenance-track-name snapshot-schedule-identifier
     availability-zone-relocation aqua-configuration-status
     default-iam-role-arn load-sample-data manage-master-password
     master-password-secret-kms-key-id ip-address-type multi-az
     redshift-idc-application-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"))
      common-lisp:nil "CreateClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name
                     parameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameter-group-family
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterParameterGroup"))
      common-lisp:nil "CreateClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-cluster-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cluster-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterSecurityGroup"))
      common-lisp:nil "CreateClusterSecurityGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cluster-security-group))
(common-lisp:progn
 (common-lisp:defun create-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier cluster-identifier
                     manual-snapshot-retention-period tags)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier cluster-identifier
     manual-snapshot-retention-period tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterSnapshot"))
      common-lisp:nil "CreateClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-cluster-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name description
                     subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-subnet-group-name description subnet-ids
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cluster-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterSubnetGroup"))
      common-lisp:nil "CreateClusterSubnetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-cluster-subnet-group))
(common-lisp:progn
 (common-lisp:defun create-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-name
                     custom-domain-certificate-arn cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-name custom-domain-certificate-arn
     cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-domain-association-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomDomainAssociation"))
      common-lisp:nil "CreateCustomDomainAssociationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun create-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier resource-owner
                     endpoint-name subnet-group-name vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier resource-owner endpoint-name
     subnet-group-name vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEndpointAccess"))
      common-lisp:nil "CreateEndpointAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-endpoint-access))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type source-ids event-categories severity enabled
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     source-ids event-categories severity enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventSubscription"))
      common-lisp:nil "CreateEventSubscriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-hsm-client-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-client-certificate-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable hsm-client-certificate-identifier tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-hsm-client-certificate-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHsmClientCertificate"))
      common-lisp:nil "CreateHsmClientCertificateResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-hsm-client-certificate))
(common-lisp:progn
 (common-lisp:defun create-hsm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-configuration-identifier description
                     hsm-ip-address hsm-partition-name hsm-partition-password
                     hsm-server-public-certificate tags)
   (common-lisp:declare
    (common-lisp:ignorable hsm-configuration-identifier description
     hsm-ip-address hsm-partition-name hsm-partition-password
     hsm-server-public-certificate tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hsm-configuration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHsmConfiguration"))
      common-lisp:nil "CreateHsmConfigurationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-hsm-configuration))
(common-lisp:progn
 (common-lisp:defun create-redshift-idc-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key idc-instance-arn
                     redshift-idc-application-name identity-namespace
                     idc-display-name iam-role-arn authorized-token-issuer-list
                     service-integrations)
   (common-lisp:declare
    (common-lisp:ignorable idc-instance-arn redshift-idc-application-name
     identity-namespace idc-display-name iam-role-arn
     authorized-token-issuer-list service-integrations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-redshift-idc-application-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRedshiftIdcApplication"))
      common-lisp:nil "CreateRedshiftIdcApplicationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-redshift-idc-application))
(common-lisp:progn
 (common-lisp:defun create-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-name target-action
                     schedule iam-role scheduled-action-description start-time
                     end-time enable)
   (common-lisp:declare
    (common-lisp:ignorable scheduled-action-name target-action schedule
     iam-role scheduled-action-description start-time end-time enable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scheduled-action-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateScheduledAction"))
      common-lisp:nil "CreateScheduledActionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-scheduled-action))
(common-lisp:progn
 (common-lisp:defun create-snapshot-copy-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-grant-name kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-copy-grant-name kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-snapshot-copy-grant-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSnapshotCopyGrant"))
      common-lisp:nil "CreateSnapshotCopyGrantResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-snapshot-copy-grant))
(common-lisp:progn
 (common-lisp:defun create-snapshot-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schedule-definitions schedule-identifier
                     schedule-description tags dry-run next-invocations)
   (common-lisp:declare
    (common-lisp:ignorable schedule-definitions schedule-identifier
     schedule-description tags dry-run next-invocations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-schedule-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSnapshotSchedule"))
      common-lisp:nil "CreateSnapshotScheduleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-snapshot-schedule))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTags"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun create-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier feature-type
                     limit-type amount period breach-action tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier feature-type limit-type amount
     period breach-action tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-usage-limit-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUsageLimit"))
      common-lisp:nil "CreateUsageLimitResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-usage-limit))
(common-lisp:progn
 (common-lisp:defun deauthorize-data-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-share-arn consumer-identifier)
   (common-lisp:declare
    (common-lisp:ignorable data-share-arn consumer-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deauthorize-data-share-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeauthorizeDataShare"))
      common-lisp:nil "DeauthorizeDataShareResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'deauthorize-data-share))
(common-lisp:progn
 (common-lisp:defun delete-authentication-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-profile-name)
   (common-lisp:declare (common-lisp:ignorable authentication-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-authentication-profile-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAuthenticationProfile"))
      common-lisp:nil "DeleteAuthenticationProfileResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-authentication-profile))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier
                     skip-final-cluster-snapshot
                     final-cluster-snapshot-identifier
                     final-cluster-snapshot-retention-period)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier skip-final-cluster-snapshot
     final-cluster-snapshot-identifier
     final-cluster-snapshot-retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCluster"))
      common-lisp:nil "DeleteClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterParameterGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-cluster-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name)
   (common-lisp:declare (common-lisp:ignorable cluster-security-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cluster-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterSecurityGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cluster-security-group))
(common-lisp:progn
 (common-lisp:defun delete-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier
                     snapshot-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier snapshot-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterSnapshot"))
      common-lisp:nil "DeleteClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-cluster-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable cluster-subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cluster-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-cluster-subnet-group))
(common-lisp:progn
 (common-lisp:defun delete-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier custom-domain-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier custom-domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-domain-association-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun delete-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEndpointAccess"))
      common-lisp:nil "DeleteEndpointAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-endpoint-access))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventSubscription"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-hsm-client-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-client-certificate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable hsm-client-certificate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-hsm-client-certificate-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHsmClientCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-hsm-client-certificate))
(common-lisp:progn
 (common-lisp:defun delete-hsm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-configuration-identifier)
   (common-lisp:declare (common-lisp:ignorable hsm-configuration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hsm-configuration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHsmConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-hsm-configuration))
(common-lisp:progn
 (common-lisp:defun delete-partner
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id cluster-identifier
                     database-name partner-name)
   (common-lisp:declare
    (common-lisp:ignorable account-id cluster-identifier database-name
     partner-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-partner-integration-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePartner"))
      common-lisp:nil "DeletePartnerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-partner))
(common-lisp:progn
 (common-lisp:defun delete-redshift-idc-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key redshift-idc-application-arn)
   (common-lisp:declare (common-lisp:ignorable redshift-idc-application-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-redshift-idc-application-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRedshiftIdcApplication"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-redshift-idc-application))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-action-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun delete-snapshot-copy-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-grant-name)
   (common-lisp:declare (common-lisp:ignorable snapshot-copy-grant-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-snapshot-copy-grant-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSnapshotCopyGrant"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-snapshot-copy-grant))
(common-lisp:progn
 (common-lisp:defun delete-snapshot-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schedule-identifier)
   (common-lisp:declare (common-lisp:ignorable schedule-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-schedule-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSnapshotSchedule"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-snapshot-schedule))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTags"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun delete-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage-limit-id)
   (common-lisp:declare (common-lisp:ignorable usage-limit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-usage-limit-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUsageLimit"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-usage-limit))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute-names)
   (common-lisp:declare (common-lisp:ignorable attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAccountAttributes"))
      common-lisp:nil "DescribeAccountAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-authentication-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-profile-name)
   (common-lisp:declare (common-lisp:ignorable authentication-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-authentication-profiles-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAuthenticationProfiles"))
      common-lisp:nil "DescribeAuthenticationProfilesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-authentication-profiles))
(common-lisp:progn
 (common-lisp:defun describe-cluster-db-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-db-revisions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterDbRevisions"))
      common-lisp:nil "DescribeClusterDbRevisionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-db-revisions))
(common-lisp:progn
 (common-lisp:defun describe-cluster-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name max-records marker
                     tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterParameterGroups"))
      common-lisp:nil "DescribeClusterParameterGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name source max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name source max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterParameters"))
      common-lisp:nil "DescribeClusterParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-cluster-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-security-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterSecurityGroups"))
      common-lisp:nil "DescribeClusterSecurityGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-cluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier snapshot-identifier
                     snapshot-arn snapshot-type start-time end-time max-records
                     marker owner-account tag-keys tag-values cluster-exists
                     sorting-entities)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier snapshot-identifier snapshot-arn
     snapshot-type start-time end-time max-records marker owner-account
     tag-keys tag-values cluster-exists sorting-entities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterSnapshots"))
      common-lisp:nil "DescribeClusterSnapshotsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-cluster-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-subnet-group-name max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-subnet-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterSubnetGroups"))
      common-lisp:nil "DescribeClusterSubnetGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-subnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-cluster-tracks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key maintenance-track-name max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable maintenance-track-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-tracks-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterTracks"))
      common-lisp:nil "DescribeClusterTracksResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-tracks))
(common-lisp:progn
 (common-lisp:defun describe-cluster-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-version
                     cluster-parameter-group-family max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-version cluster-parameter-group-family
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterVersions"))
      common-lisp:nil "DescribeClusterVersionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-cluster-versions))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier max-records marker
                     tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusters"))
      common-lisp:nil "DescribeClustersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-custom-domain-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-name
                     custom-domain-certificate-arn max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-name custom-domain-certificate-arn
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-domain-associations-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCustomDomainAssociations"))
      common-lisp:nil "DescribeCustomDomainAssociationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-custom-domain-associations))
(common-lisp:progn
 (common-lisp:defun describe-data-shares
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-share-arn max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable data-share-arn max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-shares-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataShares"))
      common-lisp:nil "DescribeDataSharesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-data-shares))
(common-lisp:progn
 (common-lisp:defun describe-data-shares-for-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key consumer-arn status max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable consumer-arn status max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-shares-for-consumer-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataSharesForConsumer"))
      common-lisp:nil "DescribeDataSharesForConsumerResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-data-shares-for-consumer))
(common-lisp:progn
 (common-lisp:defun describe-data-shares-for-producer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key producer-arn status max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable producer-arn status max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-shares-for-producer-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataSharesForProducer"))
      common-lisp:nil "DescribeDataSharesForProducerResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-data-shares-for-producer))
(common-lisp:progn
 (common-lisp:defun describe-default-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-family max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-family max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-default-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDefaultClusterParameters"))
      common-lisp:nil "DescribeDefaultClusterParametersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-default-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier resource-owner
                     endpoint-name vpc-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier resource-owner endpoint-name
     vpc-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpointAccess"))
      common-lisp:nil "DescribeEndpointAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-endpoint-access))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier account grantee
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier account grantee max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-endpoint-authorization-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpointAuthorization"))
      common-lisp:nil "DescribeEndpointAuthorizationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-endpoint-authorization))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type)
   (common-lisp:declare (common-lisp:ignorable source-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventCategories"))
      common-lisp:nil "DescribeEventCategoriesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name max-records marker
                     tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventSubscriptions"))
      common-lisp:nil "DescribeEventSubscriptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"))
      common-lisp:nil "DescribeEventsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-hsm-client-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-client-certificate-identifier
                     max-records marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable hsm-client-certificate-identifier max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hsm-client-certificates-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHsmClientCertificates"))
      common-lisp:nil "DescribeHsmClientCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-hsm-client-certificates))
(common-lisp:progn
 (common-lisp:defun describe-hsm-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-configuration-identifier max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable hsm-configuration-identifier max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hsm-configurations-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHsmConfigurations"))
      common-lisp:nil "DescribeHsmConfigurationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-hsm-configurations))
(common-lisp:progn
 (common-lisp:defun describe-inbound-integrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key integration-arn target-arn max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable integration-arn target-arn max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inbound-integrations-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInboundIntegrations"))
      common-lisp:nil "DescribeInboundIntegrationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-inbound-integrations))
(common-lisp:progn
 (common-lisp:defun describe-logging-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-logging-status-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoggingStatus"))
      common-lisp:nil "DescribeLoggingStatusResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-logging-status))
(common-lisp:progn
 (common-lisp:defun describe-node-configuration-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type cluster-identifier
                     snapshot-identifier snapshot-arn owner-account filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable action-type cluster-identifier snapshot-identifier
     snapshot-arn owner-account filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-node-configuration-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNodeConfigurationOptions"))
      common-lisp:nil "DescribeNodeConfigurationOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-node-configuration-options))
(common-lisp:progn
 (common-lisp:defun describe-orderable-cluster-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-version node-type max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-version node-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-cluster-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrderableClusterOptions"))
      common-lisp:nil "DescribeOrderableClusterOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-orderable-cluster-options))
(common-lisp:progn
 (common-lisp:defun describe-partners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id cluster-identifier
                     database-name partner-name)
   (common-lisp:declare
    (common-lisp:ignorable account-id cluster-identifier database-name
     partner-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-partners-input-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePartners"))
      common-lisp:nil "DescribePartnersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-partners))
(common-lisp:progn
 (common-lisp:defun describe-redshift-idc-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key redshift-idc-application-arn max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable redshift-idc-application-arn max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-redshift-idc-applications-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRedshiftIdcApplications"))
      common-lisp:nil "DescribeRedshiftIdcApplicationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-redshift-idc-applications))
(common-lisp:progn
 (common-lisp:defun describe-reserved-node-exchange-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-id
                     reserved-node-exchange-request-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-id reserved-node-exchange-request-id
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-node-exchange-status-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedNodeExchangeStatus"))
      common-lisp:nil "DescribeReservedNodeExchangeStatusResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-node-exchange-status))
(common-lisp:progn
 (common-lisp:defun describe-reserved-node-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-offering-id max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-offering-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-node-offerings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedNodeOfferings"))
      common-lisp:nil "DescribeReservedNodeOfferingsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-node-offerings))
(common-lisp:progn
 (common-lisp:defun describe-reserved-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reserved-nodes-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedNodes"))
      common-lisp:nil "DescribeReservedNodesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-reserved-nodes))
(common-lisp:progn
 (common-lisp:defun describe-resize
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resize-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResize"))
      common-lisp:nil "DescribeResizeResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-resize))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-name target-action-type
                     start-time end-time active filters marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable scheduled-action-name target-action-type start-time
     end-time active filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scheduled-actions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeScheduledActions"))
      common-lisp:nil "DescribeScheduledActionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-scheduled-actions))
(common-lisp:progn
 (common-lisp:defun describe-snapshot-copy-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-grant-name max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-copy-grant-name max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-snapshot-copy-grants-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshotCopyGrants"))
      common-lisp:nil "DescribeSnapshotCopyGrantsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-snapshot-copy-grants))
(common-lisp:progn
 (common-lisp:defun describe-snapshot-schedules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier schedule-identifier
                     tag-keys tag-values marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier schedule-identifier tag-keys
     tag-values marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-snapshot-schedules-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshotSchedules"))
      common-lisp:nil "DescribeSnapshotSchedulesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-snapshot-schedules))
(common-lisp:progn
 (common-lisp:defun describe-storage ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'redshift-request :method "POST" :path "/"
                                :operation "DescribeStorage"))
    common-lisp:nil "DescribeStorageResult" *error-map*))
 (common-lisp:export 'describe-storage))
(common-lisp:progn
 (common-lisp:defun describe-table-restore-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier
                     table-restore-request-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier table-restore-request-id
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-table-restore-status-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTableRestoreStatus"))
      common-lisp:nil "DescribeTableRestoreStatusResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-table-restore-status))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name resource-type max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable resource-name resource-type max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"))
      common-lisp:nil "DescribeTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-usage-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage-limit-id cluster-identifier
                     feature-type max-records marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable usage-limit-id cluster-identifier feature-type
     max-records marker tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-usage-limits-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUsageLimits"))
      common-lisp:nil "DescribeUsageLimitsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-usage-limits))
(common-lisp:progn
 (common-lisp:defun disable-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-logging-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableLogging"))
      common-lisp:nil "DisableLoggingResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'disable-logging))
(common-lisp:progn
 (common-lisp:defun disable-snapshot-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-snapshot-copy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableSnapshotCopy"))
      common-lisp:nil "DisableSnapshotCopyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'disable-snapshot-copy))
(common-lisp:progn
 (common-lisp:defun disassociate-data-share-consumer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-share-arn
                     disassociate-entire-account consumer-arn consumer-region)
   (common-lisp:declare
    (common-lisp:ignorable data-share-arn disassociate-entire-account
     consumer-arn consumer-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-data-share-consumer-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateDataShareConsumer"))
      common-lisp:nil "DisassociateDataShareConsumerResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'disassociate-data-share-consumer))
(common-lisp:progn
 (common-lisp:defun enable-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier bucket-name
                     s3key-prefix log-destination-type log-exports)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier bucket-name s3key-prefix
     log-destination-type log-exports))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-logging-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableLogging"))
      common-lisp:nil "EnableLoggingResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'enable-logging))
(common-lisp:progn
 (common-lisp:defun enable-snapshot-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier destination-region
                     retention-period snapshot-copy-grant-name
                     manual-snapshot-retention-period)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier destination-region
     retention-period snapshot-copy-grant-name
     manual-snapshot-retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-snapshot-copy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableSnapshotCopy"))
      common-lisp:nil "EnableSnapshotCopyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'enable-snapshot-copy))
(common-lisp:progn
 (common-lisp:defun failover-primary-compute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-failover-primary-compute-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverPrimaryCompute"))
      common-lisp:nil "FailoverPrimaryComputeResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'failover-primary-compute))
(common-lisp:progn
 (common-lisp:defun get-cluster-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-user db-name cluster-identifier
                     duration-seconds auto-create db-groups custom-domain-name)
   (common-lisp:declare
    (common-lisp:ignorable db-user db-name cluster-identifier duration-seconds
     auto-create db-groups custom-domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cluster-credentials-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClusterCredentials"))
      common-lisp:nil "GetClusterCredentialsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-cluster-credentials))
(common-lisp:progn
 (common-lisp:defun get-cluster-credentials-with-iam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-name cluster-identifier
                     duration-seconds custom-domain-name)
   (common-lisp:declare
    (common-lisp:ignorable db-name cluster-identifier duration-seconds
     custom-domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cluster-credentials-with-iammessage
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClusterCredentialsWithIAM"))
      common-lisp:nil "GetClusterCredentialsWithIAMResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-cluster-credentials-with-iam))
(common-lisp:progn
 (common-lisp:defun get-reserved-node-exchange-configuration-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type cluster-identifier
                     snapshot-identifier max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable action-type cluster-identifier snapshot-identifier
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reserved-node-exchange-configuration-options-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservedNodeExchangeConfigurationOptions"))
      common-lisp:nil "GetReservedNodeExchangeConfigurationOptionsResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'get-reserved-node-exchange-configuration-options))
(common-lisp:progn
 (common-lisp:defun get-reserved-node-exchange-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reserved-node-exchange-offerings-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservedNodeExchangeOfferings"))
      common-lisp:nil "GetReservedNodeExchangeOfferingsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-reserved-node-exchange-offerings))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicy"))
      common-lisp:nil "GetResourcePolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun list-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier namespace-arn
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier namespace-arn max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommendations-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRecommendations"))
      common-lisp:nil "ListRecommendationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-recommendations))
(common-lisp:progn
 (common-lisp:defun modify-aqua-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier
                     aqua-configuration-status)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier aqua-configuration-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-aqua-input-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyAquaConfiguration"))
      common-lisp:nil "ModifyAquaConfigurationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-aqua-configuration))
(common-lisp:progn
 (common-lisp:defun modify-authentication-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-profile-name
                     authentication-profile-content)
   (common-lisp:declare
    (common-lisp:ignorable authentication-profile-name
     authentication-profile-content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-authentication-profile-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyAuthenticationProfile"))
      common-lisp:nil "ModifyAuthenticationProfileResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-authentication-profile))
(common-lisp:progn
 (common-lisp:defun modify-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier cluster-type node-type
                     number-of-nodes cluster-security-groups
                     vpc-security-group-ids master-user-password
                     cluster-parameter-group-name
                     automated-snapshot-retention-period
                     manual-snapshot-retention-period
                     preferred-maintenance-window cluster-version
                     allow-version-upgrade hsm-client-certificate-identifier
                     hsm-configuration-identifier new-cluster-identifier
                     publicly-accessible elastic-ip enhanced-vpc-routing
                     maintenance-track-name encrypted kms-key-id
                     availability-zone-relocation availability-zone port
                     manage-master-password master-password-secret-kms-key-id
                     ip-address-type multi-az)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier cluster-type node-type
     number-of-nodes cluster-security-groups vpc-security-group-ids
     master-user-password cluster-parameter-group-name
     automated-snapshot-retention-period manual-snapshot-retention-period
     preferred-maintenance-window cluster-version allow-version-upgrade
     hsm-client-certificate-identifier hsm-configuration-identifier
     new-cluster-identifier publicly-accessible elastic-ip enhanced-vpc-routing
     maintenance-track-name encrypted kms-key-id availability-zone-relocation
     availability-zone port manage-master-password
     master-password-secret-kms-key-id ip-address-type multi-az))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCluster"))
      common-lisp:nil "ModifyClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-cluster))
(common-lisp:progn
 (common-lisp:defun modify-cluster-db-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier revision-target)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier revision-target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-db-revision-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterDbRevision"))
      common-lisp:nil "ModifyClusterDbRevisionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cluster-db-revision))
(common-lisp:progn
 (common-lisp:defun modify-cluster-iam-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier add-iam-roles
                     remove-iam-roles default-iam-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier add-iam-roles remove-iam-roles
     default-iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-iam-roles-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterIamRoles"))
      common-lisp:nil "ModifyClusterIamRolesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cluster-iam-roles))
(common-lisp:progn
 (common-lisp:defun modify-cluster-maintenance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier defer-maintenance
                     defer-maintenance-identifier defer-maintenance-start-time
                     defer-maintenance-end-time defer-maintenance-duration)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier defer-maintenance
     defer-maintenance-identifier defer-maintenance-start-time
     defer-maintenance-end-time defer-maintenance-duration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-maintenance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterMaintenance"))
      common-lisp:nil "ModifyClusterMaintenanceResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cluster-maintenance))
(common-lisp:progn
 (common-lisp:defun modify-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterParameterGroup"))
      common-lisp:nil "ModifyClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier
                     manual-snapshot-retention-period force)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier manual-snapshot-retention-period
     force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterSnapshot"))
      common-lisp:nil "ModifyClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun modify-cluster-snapshot-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier schedule-identifier
                     disassociate-schedule)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier schedule-identifier
     disassociate-schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-snapshot-schedule-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterSnapshotSchedule"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-cluster-snapshot-schedule))
(common-lisp:progn
 (common-lisp:defun modify-cluster-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name description
                     subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterSubnetGroup"))
      common-lisp:nil "ModifyClusterSubnetGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-cluster-subnet-group))
(common-lisp:progn
 (common-lisp:defun modify-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-name
                     custom-domain-certificate-arn cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-name custom-domain-certificate-arn
     cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-custom-domain-association-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCustomDomainAssociation"))
      common-lisp:nil "ModifyCustomDomainAssociationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun modify-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-endpoint-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEndpointAccess"))
      common-lisp:nil "ModifyEndpointAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-endpoint-access))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type source-ids event-categories severity enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     source-ids event-categories severity enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEventSubscription"))
      common-lisp:nil "ModifyEventSubscriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-redshift-idc-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key redshift-idc-application-arn
                     identity-namespace iam-role-arn idc-display-name
                     authorized-token-issuer-list service-integrations)
   (common-lisp:declare
    (common-lisp:ignorable redshift-idc-application-arn identity-namespace
     iam-role-arn idc-display-name authorized-token-issuer-list
     service-integrations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-redshift-idc-application-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyRedshiftIdcApplication"))
      common-lisp:nil "ModifyRedshiftIdcApplicationResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-redshift-idc-application))
(common-lisp:progn
 (common-lisp:defun modify-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-name target-action
                     schedule iam-role scheduled-action-description start-time
                     end-time enable)
   (common-lisp:declare
    (common-lisp:ignorable scheduled-action-name target-action schedule
     iam-role scheduled-action-description start-time end-time enable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-scheduled-action-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyScheduledAction"))
      common-lisp:nil "ModifyScheduledActionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-scheduled-action))
(common-lisp:progn
 (common-lisp:defun modify-snapshot-copy-retention-period
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier retention-period
                     manual)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier retention-period manual))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-snapshot-copy-retention-period-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifySnapshotCopyRetentionPeriod"))
      common-lisp:nil "ModifySnapshotCopyRetentionPeriodResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-snapshot-copy-retention-period))
(common-lisp:progn
 (common-lisp:defun modify-snapshot-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schedule-identifier schedule-definitions)
   (common-lisp:declare
    (common-lisp:ignorable schedule-identifier schedule-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-snapshot-schedule-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifySnapshotSchedule"))
      common-lisp:nil "ModifySnapshotScheduleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-snapshot-schedule))
(common-lisp:progn
 (common-lisp:defun modify-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage-limit-id amount breach-action)
   (common-lisp:declare
    (common-lisp:ignorable usage-limit-id amount breach-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-usage-limit-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyUsageLimit"))
      common-lisp:nil "ModifyUsageLimitResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-usage-limit))
(common-lisp:progn
 (common-lisp:defun pause-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-pause-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PauseCluster"))
      common-lisp:nil "PauseClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'pause-cluster))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-node-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-offering-id node-count)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-offering-id node-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-node-offering-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseReservedNodeOffering"))
      common-lisp:nil "PurchaseReservedNodeOfferingResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'purchase-reserved-node-offering))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourcePolicy"))
      common-lisp:nil "PutResourcePolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun reboot-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootCluster"))
      common-lisp:nil "RebootClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'reboot-cluster))
(common-lisp:progn
 (common-lisp:defun reject-data-share
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-share-arn)
   (common-lisp:declare (common-lisp:ignorable data-share-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-data-share-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RejectDataShare"))
      common-lisp:nil "RejectDataShareResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'reject-data-share))
(common-lisp:progn
 (common-lisp:defun reset-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name reset-all-parameters
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetClusterParameterGroup"))
      common-lisp:nil "ResetClusterParameterGroupResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'reset-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun resize-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier cluster-type node-type
                     number-of-nodes classic reserved-node-id
                     target-reserved-node-offering-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier cluster-type node-type
     number-of-nodes classic reserved-node-id
     target-reserved-node-offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resize-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResizeCluster"))
      common-lisp:nil "ResizeClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'resize-cluster))
(common-lisp:progn
 (common-lisp:defun restore-from-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier snapshot-identifier
                     snapshot-arn snapshot-cluster-identifier port
                     availability-zone allow-version-upgrade
                     cluster-subnet-group-name publicly-accessible
                     owner-account hsm-client-certificate-identifier
                     hsm-configuration-identifier elastic-ip
                     cluster-parameter-group-name cluster-security-groups
                     vpc-security-group-ids preferred-maintenance-window
                     automated-snapshot-retention-period
                     manual-snapshot-retention-period kms-key-id node-type
                     enhanced-vpc-routing additional-info iam-roles
                     maintenance-track-name snapshot-schedule-identifier
                     number-of-nodes availability-zone-relocation
                     aqua-configuration-status default-iam-role-arn
                     reserved-node-id target-reserved-node-offering-id
                     encrypted manage-master-password
                     master-password-secret-kms-key-id ip-address-type
                     multi-az)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier snapshot-identifier snapshot-arn
     snapshot-cluster-identifier port availability-zone allow-version-upgrade
     cluster-subnet-group-name publicly-accessible owner-account
     hsm-client-certificate-identifier hsm-configuration-identifier elastic-ip
     cluster-parameter-group-name cluster-security-groups
     vpc-security-group-ids preferred-maintenance-window
     automated-snapshot-retention-period manual-snapshot-retention-period
     kms-key-id node-type enhanced-vpc-routing additional-info iam-roles
     maintenance-track-name snapshot-schedule-identifier number-of-nodes
     availability-zone-relocation aqua-configuration-status
     default-iam-role-arn reserved-node-id target-reserved-node-offering-id
     encrypted manage-master-password master-password-secret-kms-key-id
     ip-address-type multi-az))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-from-cluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreFromClusterSnapshot"))
      common-lisp:nil "RestoreFromClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-from-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-table-from-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier snapshot-identifier
                     source-database-name source-schema-name source-table-name
                     target-database-name target-schema-name new-table-name
                     enable-case-sensitive-identifier)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier snapshot-identifier
     source-database-name source-schema-name source-table-name
     target-database-name target-schema-name new-table-name
     enable-case-sensitive-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-table-from-cluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreTableFromClusterSnapshot"))
      common-lisp:nil "RestoreTableFromClusterSnapshotResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'restore-table-from-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun resume-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResumeCluster"))
      common-lisp:nil "ResumeClusterResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'resume-cluster))
(common-lisp:progn
 (common-lisp:defun revoke-cluster-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name cidrip
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name cidrip
     ec2security-group-name ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-cluster-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeClusterSecurityGroupIngress"))
      common-lisp:nil "RevokeClusterSecurityGroupIngressResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'revoke-cluster-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun revoke-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier account vpc-ids force)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier account vpc-ids force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-endpoint-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeEndpointAccess"))
      common-lisp:nil "RevokeEndpointAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'revoke-endpoint-access))
(common-lisp:progn
 (common-lisp:defun revoke-snapshot-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier snapshot-arn
                     snapshot-cluster-identifier account-with-restore-access)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier snapshot-arn
     snapshot-cluster-identifier account-with-restore-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-snapshot-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeSnapshotAccess"))
      common-lisp:nil "RevokeSnapshotAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'revoke-snapshot-access))
(common-lisp:progn
 (common-lisp:defun rotate-encryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rotate-encryption-key-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RotateEncryptionKey"))
      common-lisp:nil "RotateEncryptionKeyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'rotate-encryption-key))
(common-lisp:progn
 (common-lisp:defun update-partner-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id cluster-identifier
                     database-name partner-name status status-message)
   (common-lisp:declare
    (common-lisp:ignorable account-id cluster-identifier database-name
     partner-name status status-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-partner-status-input-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePartnerStatus"))
      common-lisp:nil "UpdatePartnerStatusResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-partner-status))
