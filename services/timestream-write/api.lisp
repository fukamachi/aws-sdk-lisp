;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/timestream-write/api
  (:use)
  (:nicknames #:aws/timestream-write)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/timestream-write/api)
(common-lisp:progn
 (common-lisp:define-condition timestream-write-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'timestream-write-error))
(common-lisp:progn
 (common-lisp:defclass timestream-write-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "timestream-write"
                        :api-version "2018-11-01" :host-prefix
                        "ingest.timestream" :signing-name "timestream"
                        :global-host common-lisp:nil :target-prefix
                        "Timestream_20181101" :json-version "1.0"))
 (common-lisp:export 'timestream-write-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidEndpointException" . invalid-endpoint-exception)
    ("RejectedRecordsException" . rejected-records-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype batch-load-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-load-progress-report common-lisp:nil
                       ((records-processed :initarg :records-processed
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-batch-load-progress-report-records-processed
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (records-ingested :initarg :records-ingested :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-batch-load-progress-report-records-ingested
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parse-failures :initarg :parse-failures :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-batch-load-progress-report-parse-failures
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (record-ingestion-failures :initarg
                         :record-ingestion-failures :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-batch-load-progress-report-record-ingestion-failures
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-failures :initarg :file-failures :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-batch-load-progress-report-file-failures
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bytes-metered :initarg :bytes-metered :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-batch-load-progress-report-bytes-metered
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-load-progress-report
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-load-progress-report
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-load-progress-report
                    'make-batch-load-progress-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-load-progress-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-load-progress-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-processed))
      (common-lisp:list
       (common-lisp:cons "RecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-ingested))
      (common-lisp:list
       (common-lisp:cons "RecordsIngested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parse-failures))
      (common-lisp:list
       (common-lisp:cons "ParseFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-ingestion-failures))
      (common-lisp:list
       (common-lisp:cons "RecordIngestionFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-failures))
      (common-lisp:list
       (common-lisp:cons "FileFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-metered))
      (common-lisp:list
       (common-lisp:cons "BytesMetered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-load-progress-report))
   common-lisp:nil))
(common-lisp:deftype batch-load-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-load-task common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-load-task-id common-lisp:null)
                         :accessor struct-shape-batch-load-task-task-id :shape
                         "BatchLoadTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-load-status common-lisp:null)
                         :accessor struct-shape-batch-load-task-task-status
                         :shape "BatchLoadStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-batch-load-task-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-batch-load-task-table-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-batch-load-task-creation-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-batch-load-task-last-updated-time :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resumable-until :initarg :resumable-until :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-batch-load-task-resumable-until :shape
                         "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-load-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-load-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'batch-load-task 'make-batch-load-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-load-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-load-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "TaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resumable-until))
      (common-lisp:list
       (common-lisp:cons "ResumableUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-load-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-load-task-description common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-load-task-id common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-task-id
                         :shape "BatchLoadTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-error-message
                         :shape "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source-configuration :initarg
                         :data-source-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-data-source-configuration
                         :shape "DataSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (progress-report :initarg :progress-report :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-load-progress-report
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-progress-report
                         :shape "BatchLoadProgressReport" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (report-configuration :initarg :report-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or report-configuration common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-report-configuration
                         :shape "ReportConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-model-configuration :initarg
                         :data-model-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-model-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-data-model-configuration
                         :shape "DataModelConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-database-name :initarg :target-database-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-target-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table-name :initarg :target-table-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-target-table-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-load-status common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-task-status
                         :shape "BatchLoadStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (record-version :initarg :record-version :initform
                         common-lisp:nil :type
                         (common-lisp:or record-version common-lisp:null)
                         :accessor
                         struct-shape-batch-load-task-description-record-version
                         :shape "RecordVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-batch-load-task-description-creation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-batch-load-task-description-last-updated-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resumable-until :initarg :resumable-until :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-batch-load-task-description-resumable-until
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-load-task-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-load-task-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-load-task-description
                    'make-batch-load-task-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-load-task-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-load-task-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-report))
      (common-lisp:list
       (common-lisp:cons "ProgressReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-configuration))
      (common-lisp:list
       (common-lisp:cons "ReportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-model-configuration))
      (common-lisp:list
       (common-lisp:cons "DataModelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "TargetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table-name))
      (common-lisp:list
       (common-lisp:cons "TargetTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "TaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-version))
      (common-lisp:list
       (common-lisp:cons "RecordVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resumable-until))
      (common-lisp:list
       (common-lisp:cons "ResumableUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-load-task-description))
   common-lisp:nil))
(common-lisp:deftype batch-load-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-load-task-list ()
   '(trivial-types:proper-list batch-load-task))
 (common-lisp:defun make-batch-load-task-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-load-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-batch-load-task-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-client-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-model-configuration :initarg
                         :data-model-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-model-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-data-model-configuration
                         :shape "DataModelConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-source-configuration :initarg
                         :data-source-configuration :initform
                         (common-lisp:error
                          ":data-source-configuration is required")
                         :type
                         (common-lisp:or data-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-data-source-configuration
                         :shape "DataSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (report-configuration :initarg :report-configuration
                         :initform
                         (common-lisp:error
                          ":report-configuration is required")
                         :type
                         (common-lisp:or report-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-report-configuration
                         :shape "ReportConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-database-name :initarg :target-database-name
                         :initform
                         (common-lisp:error
                          ":target-database-name is required")
                         :type
                         (common-lisp:or resource-create-apiname
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-target-database-name
                         :shape "ResourceCreateAPIName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-table-name :initarg :target-table-name
                         :initform
                         (common-lisp:error ":target-table-name is required")
                         :type
                         (common-lisp:or resource-create-apiname
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-target-table-name
                         :shape "ResourceCreateAPIName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (record-version :initarg :record-version :initform
                         common-lisp:nil :type
                         (common-lisp:or record-version common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-request-record-version
                         :shape "RecordVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-batch-load-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-load-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-batch-load-task-request
                    'make-create-batch-load-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-load-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-load-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-model-configuration))
      (common-lisp:list
       (common-lisp:cons "DataModelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "DataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-configuration))
      (common-lisp:list
       (common-lisp:cons "ReportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "TargetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table-name))
      (common-lisp:list
       (common-lisp:cons "TargetTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-version))
      (common-lisp:list
       (common-lisp:cons "RecordVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-load-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-batch-load-task-response common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":task-id is required") :type
                         (common-lisp:or batch-load-task-id common-lisp:null)
                         :accessor
                         struct-shape-create-batch-load-task-response-task-id
                         :shape "BatchLoadTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-batch-load-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-batch-load-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-batch-load-task-response
                    'make-create-batch-load-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-load-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-load-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-batch-load-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-database-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-create-apiname
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-database-request-database-name
                         :shape "ResourceCreateAPIName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor
                         struct-shape-create-database-request-kms-key-id :shape
                         "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-database-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-database-request 'make-create-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-database-response common-lisp:nil
                       ((database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or database common-lisp:null)
                         :accessor
                         struct-shape-create-database-response-database :shape
                         "Database" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-database-response 'make-create-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-create-apiname
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-database-name :shape
                         "ResourceCreateAPIName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or resource-create-apiname
                                         common-lisp:null)
                         :accessor struct-shape-create-table-request-table-name
                         :shape "ResourceCreateAPIName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-properties :initarg :retention-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or retention-properties common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-retention-properties
                         :shape "RetentionProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-table-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (magnetic-store-write-properties :initarg
                         :magnetic-store-write-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or magnetic-store-write-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-magnetic-store-write-properties
                         :shape "MagneticStoreWriteProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor struct-shape-create-table-request-schema
                         :shape "Schema" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-request 'make-create-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-properties))
      (common-lisp:list
       (common-lisp:cons "RetentionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'magnetic-store-write-properties))
      (common-lisp:list
       (common-lisp:cons "MagneticStoreWriteProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-response common-lisp:nil
                       ((table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or table common-lisp:null) :accessor
                         struct-shape-create-table-response-table :shape
                         "Table" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-response 'make-create-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass csv-configuration common-lisp:nil
                       ((column-separator :initarg :column-separator :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value1 common-lisp:null)
                         :accessor
                         struct-shape-csv-configuration-column-separator :shape
                         "StringValue1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (escape-char :initarg :escape-char :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value1 common-lisp:null)
                         :accessor struct-shape-csv-configuration-escape-char
                         :shape "StringValue1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quote-char :initarg :quote-char :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value1 common-lisp:null)
                         :accessor struct-shape-csv-configuration-quote-char
                         :shape "StringValue1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (null-value :initarg :null-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value256 common-lisp:null)
                         :accessor struct-shape-csv-configuration-null-value
                         :shape "StringValue256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trim-white-space :initarg :trim-white-space :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-csv-configuration-trim-white-space :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-csv-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'csv-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'csv-configuration 'make-csv-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csv-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csv-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-separator))
      (common-lisp:list
       (common-lisp:cons "ColumnSeparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'escape-char))
      (common-lisp:list
       (common-lisp:cons "EscapeChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-char))
      (common-lisp:list
       (common-lisp:cons "QuoteChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-value))
      (common-lisp:list
       (common-lisp:cons "NullValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trim-white-space))
      (common-lisp:list
       (common-lisp:cons "TrimWhiteSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csv-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-model common-lisp:nil
                       ((time-column :initarg :time-column :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value256 common-lisp:null)
                         :accessor struct-shape-data-model-time-column :shape
                         "StringValue256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-unit :initarg :time-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or time-unit common-lisp:null) :accessor
                         struct-shape-data-model-time-unit :shape "TimeUnit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dimension-mappings :initarg :dimension-mappings
                         :initform
                         (common-lisp:error ":dimension-mappings is required")
                         :type
                         (common-lisp:or dimension-mappings common-lisp:null)
                         :accessor struct-shape-data-model-dimension-mappings
                         :shape "DimensionMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-measure-mappings :initarg
                         :multi-measure-mappings :initform common-lisp:nil
                         :type
                         (common-lisp:or multi-measure-mappings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-model-multi-measure-mappings :shape
                         "MultiMeasureMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mixed-measure-mappings :initarg
                         :mixed-measure-mappings :initform common-lisp:nil
                         :type
                         (common-lisp:or mixed-measure-mapping-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-model-mixed-measure-mappings :shape
                         "MixedMeasureMappingList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (measure-name-column :initarg :measure-name-column
                         :initform common-lisp:nil :type
                         (common-lisp:or string-value256 common-lisp:null)
                         :accessor struct-shape-data-model-measure-name-column
                         :shape "StringValue256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-model
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-model
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-model 'make-data-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-column))
      (common-lisp:list
       (common-lisp:cons "TimeColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-unit))
      (common-lisp:list
       (common-lisp:cons "TimeUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-mappings))
      (common-lisp:list
       (common-lisp:cons "DimensionMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-measure-mappings))
      (common-lisp:list
       (common-lisp:cons "MultiMeasureMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-measure-mappings))
      (common-lisp:list
       (common-lisp:cons "MixedMeasureMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-name-column))
      (common-lisp:list
       (common-lisp:cons "MeasureNameColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-model-configuration common-lisp:nil
                       ((data-model :initarg :data-model :initform
                         common-lisp:nil :type
                         (common-lisp:or data-model common-lisp:null) :accessor
                         struct-shape-data-model-configuration-data-model
                         :shape "DataModel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-model-s3configuration :initarg
                         :data-model-s3configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-model-s3configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-model-configuration-data-model-s3configuration
                         :shape "DataModelS3Configuration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-model-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-model-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-model-configuration 'make-data-model-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-model-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-model-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-model))
      (common-lisp:list
       (common-lisp:cons "DataModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-model-s3configuration))
      (common-lisp:list
       (common-lisp:cons "DataModelS3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-model-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-model-s3configuration common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-data-model-s3configuration-bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-key :initarg :object-key :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         struct-shape-data-model-s3configuration-object-key
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-model-s3configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-model-s3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-model-s3configuration
                    'make-data-model-s3configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-model-s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-model-s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-model-s3configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-configuration common-lisp:nil
                       ((data-source-s3configuration :initarg
                         :data-source-s3configuration :initform
                         (common-lisp:error
                          ":data-source-s3configuration is required")
                         :type
                         (common-lisp:or data-source-s3configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-data-source-s3configuration
                         :shape "DataSourceS3Configuration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (csv-configuration :initarg :csv-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or csv-configuration common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-csv-configuration
                         :shape "CsvConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         (common-lisp:error ":data-format is required") :type
                         (common-lisp:or batch-load-data-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-data-format
                         :shape "BatchLoadDataFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration
                    'make-data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-s3configuration))
      (common-lisp:list
       (common-lisp:cons "DataSourceS3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-configuration))
      (common-lisp:list
       (common-lisp:cons "CsvConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-s3configuration common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucket-name is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-data-source-s3configuration-bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-key-prefix :initarg :object-key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor
                         struct-shape-data-source-s3configuration-object-key-prefix
                         :shape "S3ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-s3configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-s3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-s3configuration
                    'make-data-source-s3configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key-prefix))
      (common-lisp:list
       (common-lisp:cons "ObjectKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-s3configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-database-database-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-count :initarg :table-count :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-database-table-count :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor struct-shape-database-kms-key-id :shape
                         "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-database-creation-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-database-last-updated-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'database 'make-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-count))
      (common-lisp:list
       (common-lisp:cons "TableCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list database))
 (common-lisp:defun make-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-database-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-database-request-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-database-request 'make-delete-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-table-request-database-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-table-request-table-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-request 'make-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-batch-load-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":task-id is required") :type
                         (common-lisp:or batch-load-task-id common-lisp:null)
                         :accessor
                         struct-shape-describe-batch-load-task-request-task-id
                         :shape "BatchLoadTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-batch-load-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-batch-load-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-batch-load-task-request
                    'make-describe-batch-load-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-load-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-load-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-load-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-batch-load-task-response common-lisp:nil
                       ((batch-load-task-description :initarg
                         :batch-load-task-description :initform
                         (common-lisp:error
                          ":batch-load-task-description is required")
                         :type
                         (common-lisp:or batch-load-task-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-batch-load-task-response-batch-load-task-description
                         :shape "BatchLoadTaskDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-batch-load-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-batch-load-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-batch-load-task-response
                    'make-describe-batch-load-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-load-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-load-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-load-task-description))
      (common-lisp:list
       (common-lisp:cons "BatchLoadTaskDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-load-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-database-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-database-request-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-database-request
                    'make-describe-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-database-response common-lisp:nil
                       ((database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or database common-lisp:null)
                         :accessor
                         struct-shape-describe-database-response-database
                         :shape "Database" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-database-response
                    'make-describe-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-request
                    'make-describe-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-response common-lisp:nil
                       ((endpoints :initarg :endpoints :initform
                         (common-lisp:error ":endpoints is required") :type
                         (common-lisp:or endpoints common-lisp:null) :accessor
                         struct-shape-describe-endpoints-response-endpoints
                         :shape "Endpoints" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-response
                    'make-describe-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-table-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-table-request-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-table-request-table-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-table-request 'make-describe-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-table-response common-lisp:nil
                       ((table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or table common-lisp:null) :accessor
                         struct-shape-describe-table-response-table :shape
                         "Table" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-table-response 'make-describe-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor struct-shape-dimension-name :shape
                         "SchemaName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or schema-value common-lisp:null)
                         :accessor struct-shape-dimension-value :shape
                         "SchemaValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dimension-value-type :initarg :dimension-value-type
                         :initform common-lisp:nil :type
                         (common-lisp:or dimension-value-type common-lisp:null)
                         :accessor struct-shape-dimension-dimension-value-type
                         :shape "DimensionValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dimension 'make-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-type))
      (common-lisp:list
       (common-lisp:cons "DimensionValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension-mapping common-lisp:nil
                       ((source-column :initarg :source-column :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor struct-shape-dimension-mapping-source-column
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-column :initarg :destination-column
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-dimension-mapping-destination-column
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dimension-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dimension-mapping 'make-dimension-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-column))
      (common-lisp:list
       (common-lisp:cons "SourceColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-column))
      (common-lisp:list
       (common-lisp:cons "DestinationColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-mappings ()
   '(trivial-types:proper-list dimension-mapping))
 (common-lisp:defun make-dimension-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimensions () '(trivial-types:proper-list dimension))
 (common-lisp:defun make-dimensions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((address :initarg :address :initform
                         (common-lisp:error ":address is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-address :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cache-period-in-minutes :initarg
                         :cache-period-in-minutes :initform
                         (common-lisp:error
                          ":cache-period-in-minutes is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-endpoint-cache-period-in-minutes :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-period-in-minutes))
      (common-lisp:list
       (common-lisp:cons "CachePeriodInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoints () '(trivial-types:proper-list endpoint))
 (common-lisp:defun make-endpoints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-endpoint-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-endpoint-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-endpoint-exception
                    'invalid-endpoint-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-batch-load-tasks-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-batch-load-tasks-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         struct-shape-list-batch-load-tasks-request-max-results
                         :shape "PageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-load-status common-lisp:null)
                         :accessor
                         struct-shape-list-batch-load-tasks-request-task-status
                         :shape "BatchLoadStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-batch-load-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-batch-load-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-batch-load-tasks-request
                    'make-list-batch-load-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-load-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-load-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "TaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-load-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-batch-load-tasks-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-batch-load-tasks-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-load-tasks :initarg :batch-load-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-load-task-list common-lisp:null)
                         :accessor
                         struct-shape-list-batch-load-tasks-response-batch-load-tasks
                         :shape "BatchLoadTaskList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-batch-load-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-batch-load-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-batch-load-tasks-response
                    'make-list-batch-load-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-load-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-load-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-load-tasks))
      (common-lisp:list
       (common-lisp:cons "BatchLoadTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-batch-load-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-databases-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-databases-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-limit common-lisp:null)
                         :accessor
                         struct-shape-list-databases-request-max-results :shape
                         "PaginationLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-databases-request 'make-list-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-databases-response common-lisp:nil
                       ((databases :initarg :databases :initform
                         common-lisp:nil :type
                         (common-lisp:or database-list common-lisp:null)
                         :accessor
                         struct-shape-list-databases-response-databases :shape
                         "DatabaseList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-databases-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-databases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-databases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-databases-response 'make-list-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "Databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tables-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tables-request-database-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tables-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-limit common-lisp:null)
                         :accessor struct-shape-list-tables-request-max-results
                         :shape "PaginationLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tables-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tables-request 'make-list-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tables-response common-lisp:nil
                       ((tables :initarg :tables :initform common-lisp:nil
                         :type (common-lisp:or table-list common-lisp:null)
                         :accessor struct-shape-list-tables-response-tables
                         :shape "TableList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tables-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tables-response 'make-list-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables))
      (common-lisp:list
       (common-lisp:cons "Tables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass magnetic-store-rejected-data-location common-lisp:nil
                       ((s3configuration :initarg :s3configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or s3configuration common-lisp:null)
                         :accessor
                         struct-shape-magnetic-store-rejected-data-location-s3configuration
                         :shape "S3Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-magnetic-store-rejected-data-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'magnetic-store-rejected-data-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'magnetic-store-rejected-data-location
                    'make-magnetic-store-rejected-data-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          magnetic-store-rejected-data-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          magnetic-store-rejected-data-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3configuration))
      (common-lisp:list
       (common-lisp:cons "S3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          magnetic-store-rejected-data-location))
   common-lisp:nil))
(common-lisp:deftype magnetic-store-retention-period-in-days ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass magnetic-store-write-properties common-lisp:nil
                       ((enable-magnetic-store-writes :initarg
                         :enable-magnetic-store-writes :initform
                         (common-lisp:error
                          ":enable-magnetic-store-writes is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-magnetic-store-write-properties-enable-magnetic-store-writes
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (magnetic-store-rejected-data-location :initarg
                         :magnetic-store-rejected-data-location :initform
                         common-lisp:nil :type
                         (common-lisp:or magnetic-store-rejected-data-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-magnetic-store-write-properties-magnetic-store-rejected-data-location
                         :shape "MagneticStoreRejectedDataLocation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-magnetic-store-write-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'magnetic-store-write-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'magnetic-store-write-properties
                    'make-magnetic-store-write-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          magnetic-store-write-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          magnetic-store-write-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-magnetic-store-writes))
      (common-lisp:list
       (common-lisp:cons "EnableMagneticStoreWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'magnetic-store-rejected-data-location))
      (common-lisp:list
       (common-lisp:cons "MagneticStoreRejectedDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          magnetic-store-write-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass measure-value common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor struct-shape-measure-value-name :shape
                         "SchemaName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor struct-shape-measure-value-value :shape
                         "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or measure-value-type common-lisp:null)
                         :accessor struct-shape-measure-value-type :shape
                         "MeasureValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-measure-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'measure-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'measure-value 'make-measure-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input measure-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input measure-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input measure-value))
   common-lisp:nil))
(common-lisp:deftype measure-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype measure-values ()
   '(trivial-types:proper-list measure-value))
 (common-lisp:defun make-measure-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list measure-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype memory-store-retention-period-in-hours ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mixed-measure-mapping common-lisp:nil
                       ((measure-name :initarg :measure-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-mixed-measure-mapping-measure-name :shape
                         "SchemaName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-column :initarg :source-column :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-mixed-measure-mapping-source-column
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-measure-name :initarg :target-measure-name
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-mixed-measure-mapping-target-measure-name
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (measure-value-type :initarg :measure-value-type
                         :initform
                         (common-lisp:error ":measure-value-type is required")
                         :type
                         (common-lisp:or measure-value-type common-lisp:null)
                         :accessor
                         struct-shape-mixed-measure-mapping-measure-value-type
                         :shape "MeasureValueType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-measure-attribute-mappings :initarg
                         :multi-measure-attribute-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or multi-measure-attribute-mapping-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-mixed-measure-mapping-multi-measure-attribute-mappings
                         :shape "MultiMeasureAttributeMappingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mixed-measure-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mixed-measure-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mixed-measure-mapping 'make-mixed-measure-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mixed-measure-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mixed-measure-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-name))
      (common-lisp:list
       (common-lisp:cons "MeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-column))
      (common-lisp:list
       (common-lisp:cons "SourceColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-measure-name))
      (common-lisp:list
       (common-lisp:cons "TargetMeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-value-type))
      (common-lisp:list
       (common-lisp:cons "MeasureValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-measure-attribute-mappings))
      (common-lisp:list
       (common-lisp:cons "MultiMeasureAttributeMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mixed-measure-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mixed-measure-mapping-list ()
   '(trivial-types:proper-list mixed-measure-mapping))
 (common-lisp:defun make-mixed-measure-mapping-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mixed-measure-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass multi-measure-attribute-mapping common-lisp:nil
                       ((source-column :initarg :source-column :initform
                         (common-lisp:error ":source-column is required") :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-multi-measure-attribute-mapping-source-column
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-multi-measure-attribute-name :initarg
                         :target-multi-measure-attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-multi-measure-attribute-mapping-target-multi-measure-attribute-name
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (measure-value-type :initarg :measure-value-type
                         :initform common-lisp:nil :type
                         (common-lisp:or scalar-measure-value-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-multi-measure-attribute-mapping-measure-value-type
                         :shape "ScalarMeasureValueType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multi-measure-attribute-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'multi-measure-attribute-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multi-measure-attribute-mapping
                    'make-multi-measure-attribute-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-attribute-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-attribute-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-column))
      (common-lisp:list
       (common-lisp:cons "SourceColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-multi-measure-attribute-name))
      (common-lisp:list
       (common-lisp:cons "TargetMultiMeasureAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-value-type))
      (common-lisp:list
       (common-lisp:cons "MeasureValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-attribute-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-measure-attribute-mapping-list ()
   '(trivial-types:proper-list multi-measure-attribute-mapping))
 (common-lisp:defun make-multi-measure-attribute-mapping-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-measure-attribute-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass multi-measure-mappings common-lisp:nil
                       ((target-multi-measure-name :initarg
                         :target-multi-measure-name :initform common-lisp:nil
                         :type (common-lisp:or schema-name common-lisp:null)
                         :accessor
                         struct-shape-multi-measure-mappings-target-multi-measure-name
                         :shape "SchemaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-measure-attribute-mappings :initarg
                         :multi-measure-attribute-mappings :initform
                         (common-lisp:error
                          ":multi-measure-attribute-mappings is required")
                         :type
                         (common-lisp:or multi-measure-attribute-mapping-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-multi-measure-mappings-multi-measure-attribute-mappings
                         :shape "MultiMeasureAttributeMappingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multi-measure-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multi-measure-mappings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multi-measure-mappings 'make-multi-measure-mappings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-mappings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-mappings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-multi-measure-name))
      (common-lisp:list
       (common-lisp:cons "TargetMultiMeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-measure-attribute-mappings))
      (common-lisp:list
       (common-lisp:cons "MultiMeasureAttributeMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-measure-mappings))
   common-lisp:nil))
(common-lisp:deftype page-limit () 'common-lisp:integer)
(common-lisp:deftype pagination-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass partition-key common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or partition-key-type common-lisp:null)
                         :accessor struct-shape-partition-key-type :shape
                         "PartitionKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor struct-shape-partition-key-name :shape
                         "SchemaName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enforcement-in-record :initarg :enforcement-in-record
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-key-enforcement-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-partition-key-enforcement-in-record
                         :shape "PartitionKeyEnforcementLevel" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition-key 'make-partition-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforcement-in-record))
      (common-lisp:list
       (common-lisp:cons "EnforcementInRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-key))
   common-lisp:nil))
(common-lisp:deftype partition-key-enforcement-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partition-key-list ()
   '(trivial-types:proper-list partition-key))
 (common-lisp:defun make-partition-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partition-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or dimensions common-lisp:null) :accessor
                         struct-shape-record-dimensions :shape "Dimensions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (measure-name :initarg :measure-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-name common-lisp:null)
                         :accessor struct-shape-record-measure-name :shape
                         "SchemaName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (measure-value :initarg :measure-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor struct-shape-record-measure-value :shape
                         "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (measure-value-type :initarg :measure-value-type
                         :initform common-lisp:nil :type
                         (common-lisp:or measure-value-type common-lisp:null)
                         :accessor struct-shape-record-measure-value-type
                         :shape "MeasureValueType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time :initarg :time :initform common-lisp:nil :type
                         (common-lisp:or string-value256 common-lisp:null)
                         :accessor struct-shape-record-time :shape
                         "StringValue256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-unit :initarg :time-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or time-unit common-lisp:null) :accessor
                         struct-shape-record-time-unit :shape "TimeUnit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or record-version common-lisp:null)
                         :accessor struct-shape-record-version :shape
                         "RecordVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (measure-values :initarg :measure-values :initform
                         common-lisp:nil :type
                         (common-lisp:or measure-values common-lisp:null)
                         :accessor struct-shape-record-measure-values :shape
                         "MeasureValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-name))
      (common-lisp:list
       (common-lisp:cons "MeasureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-value))
      (common-lisp:list
       (common-lisp:cons "MeasureValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-value-type))
      (common-lisp:list
       (common-lisp:cons "MeasureValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-unit))
      (common-lisp:list
       (common-lisp:cons "TimeUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-values))
      (common-lisp:list
       (common-lisp:cons "MeasureValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:deftype record-index () 'common-lisp:integer)
(common-lisp:deftype record-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun make-records
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass records-ingested common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-records-ingested-total :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory-store :initarg :memory-store :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-records-ingested-memory-store :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (magnetic-store :initarg :magnetic-store :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-records-ingested-magnetic-store :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-records-ingested
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'records-ingested
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'records-ingested 'make-records-ingested))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input records-ingested))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input records-ingested))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-store))
      (common-lisp:list
       (common-lisp:cons "MemoryStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'magnetic-store))
      (common-lisp:list
       (common-lisp:cons "MagneticStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input records-ingested))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rejected-record common-lisp:nil
                       ((record-index :initarg :record-index :initform
                         common-lisp:nil :type
                         (common-lisp:or record-index common-lisp:null)
                         :accessor struct-shape-rejected-record-record-index
                         :shape "RecordIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-rejected-record-reason :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (existing-version :initarg :existing-version :initform
                         common-lisp:nil :type
                         (common-lisp:or record-version common-lisp:null)
                         :accessor
                         struct-shape-rejected-record-existing-version :shape
                         "RecordVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rejected-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rejected-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rejected-record 'make-rejected-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rejected-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rejected-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-index))
      (common-lisp:list
       (common-lisp:cons "RecordIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'existing-version))
      (common-lisp:list
       (common-lisp:cons "ExistingVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rejected-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rejected-records ()
   '(trivial-types:proper-list rejected-record))
 (common-lisp:defun make-rejected-records
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rejected-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition rejected-records-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       rejected-records-exception-message)
      (rejected-records :initarg :rejected-records :initform common-lisp:nil
       :reader rejected-records-exception-rejected-records)))
 (common-lisp:export
  (common-lisp:list 'rejected-records-exception
                    'rejected-records-exception-message
                    'rejected-records-exception-rejected-records)))
(common-lisp:progn
 (common-lisp:defclass report-configuration common-lisp:nil
                       ((report-s3configuration :initarg
                         :report-s3configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or report-s3configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-report-configuration-report-s3configuration
                         :shape "ReportS3Configuration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-report-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'report-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'report-configuration 'make-report-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-s3configuration))
      (common-lisp:list
       (common-lisp:cons "ReportS3Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-s3configuration common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucket-name is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-report-s3configuration-bucket-name :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-key-prefix :initarg :object-key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or s3object-key-prefix common-lisp:null)
                         :accessor
                         struct-shape-report-s3configuration-object-key-prefix
                         :shape "S3ObjectKeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-option :initarg :encryption-option
                         :initform common-lisp:nil :type
                         (common-lisp:or s3encryption-option common-lisp:null)
                         :accessor
                         struct-shape-report-s3configuration-encryption-option
                         :shape "S3EncryptionOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor
                         struct-shape-report-s3configuration-kms-key-id :shape
                         "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-report-s3configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'report-s3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'report-s3configuration 'make-report-s3configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key-prefix))
      (common-lisp:list
       (common-lisp:cons "ObjectKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-s3configuration))
   common-lisp:nil))
(common-lisp:deftype resource-create-apiname () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resume-batch-load-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":task-id is required") :type
                         (common-lisp:or batch-load-task-id common-lisp:null)
                         :accessor
                         struct-shape-resume-batch-load-task-request-task-id
                         :shape "BatchLoadTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-batch-load-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resume-batch-load-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-batch-load-task-request
                    'make-resume-batch-load-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-batch-load-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-batch-load-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-batch-load-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-batch-load-task-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-batch-load-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resume-batch-load-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-batch-load-task-response
                    'make-resume-batch-load-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-batch-load-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-batch-load-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-batch-load-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retention-properties common-lisp:nil
                       ((memory-store-retention-period-in-hours :initarg
                         :memory-store-retention-period-in-hours :initform
                         (common-lisp:error
                          ":memory-store-retention-period-in-hours is required")
                         :type
                         (common-lisp:or memory-store-retention-period-in-hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-retention-properties-memory-store-retention-period-in-hours
                         :shape "MemoryStoreRetentionPeriodInHours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (magnetic-store-retention-period-in-days :initarg
                         :magnetic-store-retention-period-in-days :initform
                         (common-lisp:error
                          ":magnetic-store-retention-period-in-days is required")
                         :type
                         (common-lisp:or
                          magnetic-store-retention-period-in-days
                          common-lisp:null)
                         :accessor
                         struct-shape-retention-properties-magnetic-store-retention-period-in-days
                         :shape "MagneticStoreRetentionPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retention-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retention-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retention-properties 'make-retention-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'memory-store-retention-period-in-hours))
      (common-lisp:list
       (common-lisp:cons "MemoryStoreRetentionPeriodInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'magnetic-store-retention-period-in-days))
      (common-lisp:list
       (common-lisp:cons "MagneticStoreRetentionPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-properties))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3configuration common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3configuration-bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-key-prefix :initarg :object-key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or s3object-key-prefix common-lisp:null)
                         :accessor
                         struct-shape-s3configuration-object-key-prefix :shape
                         "S3ObjectKeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-option :initarg :encryption-option
                         :initform common-lisp:nil :type
                         (common-lisp:or s3encryption-option common-lisp:null)
                         :accessor
                         struct-shape-s3configuration-encryption-option :shape
                         "S3EncryptionOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor struct-shape-s3configuration-kms-key-id
                         :shape "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3configuration 'make-s3configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key-prefix))
      (common-lisp:list
       (common-lisp:cons "ObjectKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3configuration))
   common-lisp:nil))
(common-lisp:deftype s3encryption-option () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype s3object-key-prefix () 'common-lisp:string)
(common-lisp:deftype scalar-measure-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema common-lisp:nil
                       ((composite-partition-key :initarg
                         :composite-partition-key :initform common-lisp:nil
                         :type
                         (common-lisp:or partition-key-list common-lisp:null)
                         :accessor struct-shape-schema-composite-partition-key
                         :shape "PartitionKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema 'make-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-partition-key))
      (common-lisp:list
       (common-lisp:cons "CompositePartitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema))
   common-lisp:nil))
(common-lisp:deftype schema-name () 'common-lisp:string)
(common-lisp:deftype schema-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-value1 () 'common-lisp:string)
(common-lisp:deftype string-value2048 () 'common-lisp:string)
(common-lisp:deftype string-value256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-table-table-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-table-database-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-status :initarg :table-status :initform
                         common-lisp:nil :type
                         (common-lisp:or table-status common-lisp:null)
                         :accessor struct-shape-table-table-status :shape
                         "TableStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retention-properties :initarg :retention-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or retention-properties common-lisp:null)
                         :accessor struct-shape-table-retention-properties
                         :shape "RetentionProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-table-creation-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-table-last-updated-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (magnetic-store-write-properties :initarg
                         :magnetic-store-write-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or magnetic-store-write-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-table-magnetic-store-write-properties
                         :shape "MagneticStoreWriteProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor struct-shape-table-schema :shape "Schema"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table 'make-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-status))
      (common-lisp:list
       (common-lisp:cons "TableStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-properties))
      (common-lisp:list
       (common-lisp:cons "RetentionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'magnetic-store-write-properties))
      (common-lisp:list
       (common-lisp:cons "MagneticStoreWriteProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-list () '(trivial-types:proper-list table))
 (common-lisp:defun make-table-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-database-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-database-request-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         (common-lisp:error ":kms-key-id is required") :type
                         (common-lisp:or string-value2048 common-lisp:null)
                         :accessor
                         struct-shape-update-database-request-kms-key-id :shape
                         "StringValue2048" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-database-request 'make-update-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-database-response common-lisp:nil
                       ((database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or database common-lisp:null)
                         :accessor
                         struct-shape-update-database-response-database :shape
                         "Database" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-database-response 'make-update-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-database-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-table-request-table-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-properties :initarg :retention-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or retention-properties common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-retention-properties
                         :shape "RetentionProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (magnetic-store-write-properties :initarg
                         :magnetic-store-write-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or magnetic-store-write-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-magnetic-store-write-properties
                         :shape "MagneticStoreWriteProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor struct-shape-update-table-request-schema
                         :shape "Schema" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-request 'make-update-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-properties))
      (common-lisp:list
       (common-lisp:cons "RetentionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'magnetic-store-write-properties))
      (common-lisp:list
       (common-lisp:cons "MagneticStoreWriteProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-response common-lisp:nil
                       ((table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or table common-lisp:null) :accessor
                         struct-shape-update-table-response-table :shape
                         "Table" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-response 'make-update-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (timestream-write-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass write-records-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-write-records-request-database-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-write-records-request-table-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (common-attributes :initarg :common-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or record common-lisp:null) :accessor
                         struct-shape-write-records-request-common-attributes
                         :shape "Record" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (records :initarg :records :initform
                         (common-lisp:error ":records is required") :type
                         (common-lisp:or records common-lisp:null) :accessor
                         struct-shape-write-records-request-records :shape
                         "Records" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-write-records-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'write-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'write-records-request 'make-write-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-attributes))
      (common-lisp:list
       (common-lisp:cons "CommonAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass write-records-response common-lisp:nil
                       ((records-ingested :initarg :records-ingested :initform
                         common-lisp:nil :type
                         (common-lisp:or records-ingested common-lisp:null)
                         :accessor
                         struct-shape-write-records-response-records-ingested
                         :shape "RecordsIngested" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-write-records-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'write-records-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'write-records-response 'make-write-records-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-ingested))
      (common-lisp:list
       (common-lisp:cons "RecordsIngested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-records-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-batch-load-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data-model-configuration
                     data-source-configuration report-configuration
                     target-database-name target-table-name record-version)
   (common-lisp:declare
    (common-lisp:ignorable client-token data-model-configuration
     data-source-configuration report-configuration target-database-name
     target-table-name record-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-batch-load-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "CreateBatchLoadTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-batch-load-task))
(common-lisp:progn
 (common-lisp:defun create-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name kms-key-id tags)
   (common-lisp:declare (common-lisp:ignorable database-name kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "CreateDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-database))
(common-lisp:progn
 (common-lisp:defun create-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name
                     retention-properties tags magnetic-store-write-properties
                     schema)
   (common-lisp:declare
    (common-lisp:ignorable database-name table-name retention-properties tags
     magnetic-store-write-properties schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "CreateTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-table))
(common-lisp:progn
 (common-lisp:defun delete-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name)
   (common-lisp:declare (common-lisp:ignorable database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-database))
(common-lisp:progn
 (common-lisp:defun delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name)
   (common-lisp:declare (common-lisp:ignorable database-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-table))
(common-lisp:progn
 (common-lisp:defun describe-batch-load-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-batch-load-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeBatchLoadTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-batch-load-task))
(common-lisp:progn
 (common-lisp:defun describe-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name)
   (common-lisp:declare (common-lisp:ignorable database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-database))
(common-lisp:progn
 (common-lisp:defun describe-endpoints ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'timestream-write-request :method "POST" :path
                                "/" :operation "DescribeEndpoints"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name)
   (common-lisp:declare (common-lisp:ignorable database-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-table))
(common-lisp:progn
 (common-lisp:defun list-batch-load-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results task-status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results task-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-batch-load-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "ListBatchLoadTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-batch-load-tasks))
(common-lisp:progn
 (common-lisp:defun list-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "ListDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-databases))
(common-lisp:progn
 (common-lisp:defun list-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable database-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "ListTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tables))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun resume-batch-load-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-batch-load-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "ResumeBatchLoadTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resume-batch-load-task))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name kms-key-id)
   (common-lisp:declare (common-lisp:ignorable database-name kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-database))
(common-lisp:progn
 (common-lisp:defun update-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name
                     retention-properties magnetic-store-write-properties
                     schema)
   (common-lisp:declare
    (common-lisp:ignorable database-name table-name retention-properties
     magnetic-store-write-properties schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-table))
(common-lisp:progn
 (common-lisp:defun write-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name
                     common-attributes records)
   (common-lisp:declare
    (common-lisp:ignorable database-name table-name common-attributes records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-write-records-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'timestream-write-request aws-sdk/generator/operation::input "POST" "/"
        "WriteRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'write-records))
