;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/amp/api
  (:use)
  (:nicknames #:aws/amp)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/amp/api)
(common-lisp:progn
 (common-lisp:define-condition amp-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'amp-error))
(common-lisp:progn
 (common-lisp:defclass amp-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "amp" :api-version
                        "2020-08-01" :host-prefix "aps" :signing-name "aps"
                        :global-host common-lisp:nil))
 (common-lisp:export 'amp-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (amp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype alert-manager-definition-data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass alert-manager-definition-description common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-alert-manager-definition-description-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or alert-manager-definition-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-alert-manager-definition-description-data
                         :shape "AlertManagerDefinitionData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         (common-lisp:error ":modifiedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-alert-manager-definition-description-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or alert-manager-definition-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-alert-manager-definition-description-status
                         :shape "AlertManagerDefinitionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alert-manager-definition-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'alert-manager-definition-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'alert-manager-definition-description
                    'make-alert-manager-definition-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alert-manager-definition-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alert-manager-definition-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alert-manager-definition-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass alert-manager-definition-status common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         (common-lisp:error ":statuscode is required") :type
                         (common-lisp:or alert-manager-definition-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-alert-manager-definition-status-status-code
                         :shape "AlertManagerDefinitionStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-alert-manager-definition-status-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alert-manager-definition-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'alert-manager-definition-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'alert-manager-definition-status
                    'make-alert-manager-definition-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alert-manager-definition-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alert-manager-definition-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alert-manager-definition-status))
   common-lisp:nil))
(common-lisp:deftype alert-manager-definition-status-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass amp-configuration common-lisp:nil
                       ((workspace-arn :initarg :workspace-arn :initform
                         (common-lisp:error ":workspacearn is required") :type
                         (common-lisp:or workspace-arn common-lisp:null)
                         :accessor struct-shape-amp-configuration-workspace-arn
                         :shape "WorkspaceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amp-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'amp-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amp-configuration 'make-amp-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input amp-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input amp-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-arn))
      (common-lisp:list
       (common-lisp:cons "workspaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input amp-configuration))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype cluster-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (amp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-alert-manager-definition-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-alert-manager-definition-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or alert-manager-definition-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-alert-manager-definition-request-data
                         :shape "AlertManagerDefinitionData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-create-alert-manager-definition-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-alert-manager-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-alert-manager-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-alert-manager-definition-request
                    'make-create-alert-manager-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-manager-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-manager-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-manager-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alert-manager-definition-response common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or alert-manager-definition-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-alert-manager-definition-response-status
                         :shape "AlertManagerDefinitionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-alert-manager-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-alert-manager-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-alert-manager-definition-response
                    'make-create-alert-manager-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-manager-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-manager-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-alert-manager-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-logging-configuration-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-logging-configuration-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn :initarg :log-group-arn :initform
                         (common-lisp:error ":loggrouparn is required") :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor
                         struct-shape-create-logging-configuration-request-log-group-arn
                         :shape "LogGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-create-logging-configuration-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-logging-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-logging-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-logging-configuration-request
                    'make-create-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-logging-configuration-response common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or logging-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-logging-configuration-response-status
                         :shape "LoggingConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-logging-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-logging-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-logging-configuration-response
                    'make-create-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-groups-namespace-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or rule-groups-namespace-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-request-data
                         :shape "RuleGroupsNamespaceData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-request-name
                         :shape "RuleGroupsNamespaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-rule-groups-namespace-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-rule-groups-namespace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-rule-groups-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-rule-groups-namespace-request
                    'make-create-rule-groups-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-groups-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-groups-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-groups-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-groups-namespace-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or rule-groups-namespace-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-response-arn
                         :shape "RuleGroupsNamespaceArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-response-name
                         :shape "RuleGroupsNamespaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or rule-groups-namespace-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-rule-groups-namespace-response-status
                         :shape "RuleGroupsNamespaceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-rule-groups-namespace-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-rule-groups-namespace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-rule-groups-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-rule-groups-namespace-response
                    'make-create-rule-groups-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-groups-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-groups-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-groups-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scraper-request common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or scraper-alias common-lisp:null)
                         :accessor struct-shape-create-scraper-request-alias
                         :shape "ScraperAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-scraper-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor
                         struct-shape-create-scraper-request-destination :shape
                         "Destination" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scrape-configuration :initarg :scrape-configuration
                         :initform
                         (common-lisp:error ":scrapeconfiguration is required")
                         :type
                         (common-lisp:or scrape-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-scraper-request-scrape-configuration
                         :shape "ScrapeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-create-scraper-request-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-scraper-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scraper-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-scraper-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scraper-request 'make-create-scraper-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scraper-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scraper-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scrape-configuration))
      (common-lisp:list
       (common-lisp:cons "scrapeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scraper-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scraper-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or scraper-arn common-lisp:null)
                         :accessor struct-shape-create-scraper-response-arn
                         :shape "ScraperArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scraper-id :initarg :scraper-id :initform
                         (common-lisp:error ":scraperid is required") :type
                         (common-lisp:or scraper-id common-lisp:null) :accessor
                         struct-shape-create-scraper-response-scraper-id :shape
                         "ScraperId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or scraper-status common-lisp:null)
                         :accessor struct-shape-create-scraper-response-status
                         :shape "ScraperStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-scraper-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scraper-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-scraper-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scraper-response 'make-create-scraper-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scraper-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scraper-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scraper-id))
      (common-lisp:list
       (common-lisp:cons "scraperId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scraper-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-request common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or workspace-alias common-lisp:null)
                         :accessor struct-shape-create-workspace-request-alias
                         :shape "WorkspaceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-request-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-workspace-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-request 'make-create-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or workspace-arn common-lisp:null)
                         :accessor struct-shape-create-workspace-response-arn
                         :shape "WorkspaceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-response-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or workspace-status common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-response-status :shape
                         "WorkspaceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-workspace-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-create-workspace-response-workspace-id
                         :shape "WorkspaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workspace-response
                    'make-create-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alert-manager-definition-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-delete-alert-manager-definition-request-client-token
                         :shape "IdempotencyToken" :location "querystring"
                         :location-name "clientToken")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-alert-manager-definition-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alert-manager-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-alert-manager-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alert-manager-definition-request
                    'make-delete-alert-manager-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-alert-manager-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-alert-manager-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-alert-manager-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-logging-configuration-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-delete-logging-configuration-request-client-token
                         :shape "IdempotencyToken" :location "querystring"
                         :location-name "clientToken")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-logging-configuration-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-logging-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-logging-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-logging-configuration-request
                    'make-delete-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-groups-namespace-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-delete-rule-groups-namespace-request-client-token
                         :shape "IdempotencyToken" :location "querystring"
                         :location-name "clientToken")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-rule-groups-namespace-request-name
                         :shape "RuleGroupsNamespaceName" :location "uri"
                         :location-name "name")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-rule-groups-namespace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-rule-groups-namespace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-rule-groups-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-rule-groups-namespace-request
                    'make-delete-rule-groups-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-groups-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-groups-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-groups-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scraper-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-delete-scraper-request-client-token
                         :shape "IdempotencyToken" :location "querystring"
                         :location-name "clientToken")
                        (scraper-id :initarg :scraper-id :initform
                         (common-lisp:error ":scraperid is required") :type
                         (common-lisp:or scraper-id common-lisp:null) :accessor
                         struct-shape-delete-scraper-request-scraper-id :shape
                         "ScraperId" :location "uri" :location-name
                         "scraperId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scraper-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scraper-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scraper-request 'make-delete-scraper-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scraper-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scraper-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scraper-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scraper-response common-lisp:nil
                       ((scraper-id :initarg :scraper-id :initform
                         (common-lisp:error ":scraperid is required") :type
                         (common-lisp:or scraper-id common-lisp:null) :accessor
                         struct-shape-delete-scraper-response-scraper-id :shape
                         "ScraperId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or scraper-status common-lisp:null)
                         :accessor struct-shape-delete-scraper-response-status
                         :shape "ScraperStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scraper-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scraper-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scraper-response 'make-delete-scraper-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scraper-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scraper-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scraper-id))
      (common-lisp:list
       (common-lisp:cons "scraperId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scraper-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-request-client-token
                         :shape "IdempotencyToken" :location "querystring"
                         :location-name "clientToken")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-workspace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-request 'make-delete-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-alert-manager-definition-request
                       common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-alert-manager-definition-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-alert-manager-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-alert-manager-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-alert-manager-definition-request
                    'make-describe-alert-manager-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-manager-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-manager-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-manager-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-alert-manager-definition-response
                       common-lisp:nil
                       ((alert-manager-definition :initarg
                         :alert-manager-definition :initform
                         (common-lisp:error
                          ":alertmanagerdefinition is required")
                         :type
                         (common-lisp:or alert-manager-definition-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-alert-manager-definition-response-alert-manager-definition
                         :shape "AlertManagerDefinitionDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-alert-manager-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-alert-manager-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-alert-manager-definition-response
                    'make-describe-alert-manager-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-manager-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-manager-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alert-manager-definition))
      (common-lisp:list
       (common-lisp:cons "alertManagerDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-alert-manager-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-configuration-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-logging-configuration-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-configuration-request
                    'make-describe-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-configuration-response common-lisp:nil
                       ((logging-configuration :initarg :logging-configuration
                         :initform
                         (common-lisp:error
                          ":loggingconfiguration is required")
                         :type
                         (common-lisp:or logging-configuration-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-logging-configuration-response-logging-configuration
                         :shape "LoggingConfigurationMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-configuration-response
                    'make-describe-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "loggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rule-groups-namespace-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-rule-groups-namespace-request-name
                         :shape "RuleGroupsNamespaceName" :location "uri"
                         :location-name "name")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-rule-groups-namespace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rule-groups-namespace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rule-groups-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rule-groups-namespace-request
                    'make-describe-rule-groups-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-groups-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-groups-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-groups-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rule-groups-namespace-response common-lisp:nil
                       ((rule-groups-namespace :initarg :rule-groups-namespace
                         :initform
                         (common-lisp:error ":rulegroupsnamespace is required")
                         :type
                         (common-lisp:or rule-groups-namespace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-rule-groups-namespace-response-rule-groups-namespace
                         :shape "RuleGroupsNamespaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rule-groups-namespace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rule-groups-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rule-groups-namespace-response
                    'make-describe-rule-groups-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-groups-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-groups-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-groups-namespace))
      (common-lisp:list
       (common-lisp:cons "ruleGroupsNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-groups-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scraper-request common-lisp:nil
                       ((scraper-id :initarg :scraper-id :initform
                         (common-lisp:error ":scraperid is required") :type
                         (common-lisp:or scraper-id common-lisp:null) :accessor
                         struct-shape-describe-scraper-request-scraper-id
                         :shape "ScraperId" :location "uri" :location-name
                         "scraperId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scraper-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-scraper-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scraper-request 'make-describe-scraper-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scraper-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scraper-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scraper-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scraper-response common-lisp:nil
                       ((scraper :initarg :scraper :initform
                         (common-lisp:error ":scraper is required") :type
                         (common-lisp:or scraper-description common-lisp:null)
                         :accessor
                         struct-shape-describe-scraper-response-scraper :shape
                         "ScraperDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scraper-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-scraper-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scraper-response
                    'make-describe-scraper-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scraper-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scraper-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scraper))
      (common-lisp:list
       (common-lisp:cons "scraper"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scraper-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-request
                    'make-describe-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-response common-lisp:nil
                       ((workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-workspace-response-workspace
                         :shape "WorkspaceDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-workspace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-response
                    'make-describe-workspace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((amp-configuration :initarg :amp-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or amp-configuration common-lisp:null)
                         :accessor struct-shape-destination-amp-configuration
                         :shape "AmpConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amp-configuration))
      (common-lisp:list
       (common-lisp:cons "ampConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass eks-configuration common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         (common-lisp:error ":clusterarn is required") :type
                         (common-lisp:or cluster-arn common-lisp:null)
                         :accessor struct-shape-eks-configuration-cluster-arn
                         :shape "ClusterArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-eks-configuration-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         struct-shape-eks-configuration-subnet-ids :shape
                         "SubnetIds" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-eks-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'eks-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'eks-configuration 'make-eks-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eks-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eks-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eks-configuration))
   common-lisp:nil))
(common-lisp:deftype filter-key () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-default-scraper-configuration-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-default-scraper-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-default-scraper-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-default-scraper-configuration-request
                    'make-get-default-scraper-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-scraper-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-scraper-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-scraper-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-default-scraper-configuration-response
                       common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-get-default-scraper-configuration-response-configuration
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-default-scraper-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-default-scraper-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-default-scraper-configuration-response
                    'make-get-default-scraper-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-scraper-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-scraper-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-scraper-configuration-response))
   common-lisp:nil))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (amp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-rule-groups-namespaces-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-rule-groups-namespaces-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-rule-groups-namespaces-request-max-results
                         :shape
                         "ListRuleGroupsNamespacesRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-rule-groups-namespaces-request-name
                         :shape "RuleGroupsNamespaceName" :location
                         "querystring" :location-name "name")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-rule-groups-namespaces-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-list-rule-groups-namespaces-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-rule-groups-namespaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rule-groups-namespaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-rule-groups-namespaces-request
                    'make-list-rule-groups-namespaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-namespaces-request))
   common-lisp:nil))
(common-lisp:deftype list-rule-groups-namespaces-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-rule-groups-namespaces-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-rule-groups-namespaces-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-groups-namespaces :initarg
                         :rule-groups-namespaces :initform
                         (common-lisp:error
                          ":rulegroupsnamespaces is required")
                         :type
                         (common-lisp:or rule-groups-namespace-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-rule-groups-namespaces-response-rule-groups-namespaces
                         :shape "RuleGroupsNamespaceSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-rule-groups-namespaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rule-groups-namespaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-rule-groups-namespaces-response
                    'make-list-rule-groups-namespaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-namespaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-namespaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-groups-namespaces))
      (common-lisp:list
       (common-lisp:cons "ruleGroupsNamespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-namespaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scrapers-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or scraper-filters common-lisp:null)
                         :accessor struct-shape-list-scrapers-request-filters
                         :shape "ScraperFilters" :location "querystring"
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-scrapers-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-scrapers-request-max-results :shape
                         "ListScrapersRequestMaxResultsInteger" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-scrapers-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scrapers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-scrapers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scrapers-request 'make-list-scrapers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scrapers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scrapers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scrapers-request))
   common-lisp:nil))
(common-lisp:deftype list-scrapers-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-scrapers-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-scrapers-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scrapers :initarg :scrapers :initform
                         (common-lisp:error ":scrapers is required") :type
                         (common-lisp:or scraper-summary-list common-lisp:null)
                         :accessor struct-shape-list-scrapers-response-scrapers
                         :shape "ScraperSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scrapers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-scrapers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scrapers-response 'make-list-scrapers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scrapers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scrapers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scrapers))
      (common-lisp:list
       (common-lisp:cons "scrapers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scrapers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workspaces-request common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or workspace-alias common-lisp:null)
                         :accessor struct-shape-list-workspaces-request-alias
                         :shape "WorkspaceAlias" :location "querystring"
                         :location-name "alias")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-workspaces-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-request-max-results
                         :shape "ListWorkspacesRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workspaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-request 'make-list-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   common-lisp:nil))
(common-lisp:deftype list-workspaces-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-workspaces-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspaces :initarg :workspaces :initform
                         (common-lisp:error ":workspaces is required") :type
                         (common-lisp:or workspace-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-workspaces-response-workspaces
                         :shape "WorkspaceSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workspaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-response 'make-list-workspaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspaces))
      (common-lisp:list
       (common-lisp:cons "workspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   common-lisp:nil))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-configuration-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-logging-configuration-metadata-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn :initarg :log-group-arn :initform
                         (common-lisp:error ":loggrouparn is required") :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-metadata-log-group-arn
                         :shape "LogGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         (common-lisp:error ":modifiedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-logging-configuration-metadata-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or logging-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-metadata-status
                         :shape "LoggingConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace :initarg :workspace :initform
                         (common-lisp:error ":workspace is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-metadata-workspace
                         :shape "WorkspaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-configuration-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'logging-configuration-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'logging-configuration-metadata
                    'make-logging-configuration-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace))
      (common-lisp:list
       (common-lisp:cons "workspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-configuration-status common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         (common-lisp:error ":statuscode is required") :type
                         (common-lisp:or logging-configuration-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-configuration-status-status-code
                         :shape "LoggingConfigurationStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-logging-configuration-status-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-configuration-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-configuration-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'logging-configuration-status
                    'make-logging-configuration-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration-status))
   common-lisp:nil))
(common-lisp:deftype logging-configuration-status-code () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-alert-manager-definition-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-put-alert-manager-definition-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or alert-manager-definition-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-alert-manager-definition-request-data
                         :shape "AlertManagerDefinitionData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-put-alert-manager-definition-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-alert-manager-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-alert-manager-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-alert-manager-definition-request
                    'make-put-alert-manager-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-alert-manager-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-alert-manager-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-alert-manager-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-alert-manager-definition-response common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or alert-manager-definition-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-alert-manager-definition-response-status
                         :shape "AlertManagerDefinitionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-alert-manager-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-alert-manager-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-alert-manager-definition-response
                    'make-put-alert-manager-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-alert-manager-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-alert-manager-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-alert-manager-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-rule-groups-namespace-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or rule-groups-namespace-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-request-data
                         :shape "RuleGroupsNamespaceData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-request-name
                         :shape "RuleGroupsNamespaceName" :location "uri"
                         :location-name "name")
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-rule-groups-namespace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-rule-groups-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-rule-groups-namespace-request
                    'make-put-rule-groups-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-rule-groups-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-rule-groups-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-rule-groups-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-rule-groups-namespace-response common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or rule-groups-namespace-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-response-arn
                         :shape "RuleGroupsNamespaceArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-response-name
                         :shape "RuleGroupsNamespaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or rule-groups-namespace-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-rule-groups-namespace-response-status
                         :shape "RuleGroupsNamespaceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-put-rule-groups-namespace-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-rule-groups-namespace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-rule-groups-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-rule-groups-namespace-response
                    'make-put-rule-groups-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-rule-groups-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-rule-groups-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-rule-groups-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (amp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype rule-groups-namespace-arn () 'common-lisp:string)
(common-lisp:deftype rule-groups-namespace-data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass rule-groups-namespace-description common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or rule-groups-namespace-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-description-arn
                         :shape "RuleGroupsNamespaceArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-description-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or rule-groups-namespace-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-description-data
                         :shape "RuleGroupsNamespaceData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         (common-lisp:error ":modifiedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-description-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-description-name
                         :shape "RuleGroupsNamespaceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or rule-groups-namespace-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-description-status
                         :shape "RuleGroupsNamespaceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-description-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-groups-namespace-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-groups-namespace-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-groups-namespace-description
                    'make-rule-groups-namespace-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-description))
   common-lisp:nil))
(common-lisp:deftype rule-groups-namespace-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule-groups-namespace-status common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         (common-lisp:error ":statuscode is required") :type
                         (common-lisp:or rule-groups-namespace-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-status-status-code
                         :shape "RuleGroupsNamespaceStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-status-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-groups-namespace-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule-groups-namespace-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-groups-namespace-status
                    'make-rule-groups-namespace-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-status))
   common-lisp:nil))
(common-lisp:deftype rule-groups-namespace-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule-groups-namespace-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or rule-groups-namespace-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-summary-arn :shape
                         "RuleGroupsNamespaceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         (common-lisp:error ":modifiedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-summary-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or rule-groups-namespace-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-summary-name :shape
                         "RuleGroupsNamespaceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or rule-groups-namespace-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-groups-namespace-summary-status
                         :shape "RuleGroupsNamespaceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-rule-groups-namespace-summary-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-groups-namespace-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-groups-namespace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-groups-namespace-summary
                    'make-rule-groups-namespace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-groups-namespace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-groups-namespace-summary-list ()
   '(trivial-types:proper-list rule-groups-namespace-summary))
 (common-lisp:defun make-rule-groups-namespace-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-groups-namespace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scrape-configuration common-lisp:nil
                       ((configuration-blob :initarg :configuration-blob
                         :initform common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-scrape-configuration-configuration-blob
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scrape-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scrape-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scrape-configuration 'make-scrape-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scrape-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scrape-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-blob))
      (common-lisp:list
       (common-lisp:cons "configurationBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scrape-configuration))
   common-lisp:nil))
(common-lisp:deftype scraper-alias () 'common-lisp:string)
(common-lisp:deftype scraper-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scraper-description common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or scraper-alias common-lisp:null)
                         :accessor struct-shape-scraper-description-alias
                         :shape "ScraperAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or scraper-arn common-lisp:null)
                         :accessor struct-shape-scraper-description-arn :shape
                         "ScraperArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-scraper-description-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor struct-shape-scraper-description-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-scraper-description-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor struct-shape-scraper-description-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scrape-configuration :initarg :scrape-configuration
                         :initform
                         (common-lisp:error ":scrapeconfiguration is required")
                         :type
                         (common-lisp:or scrape-configuration common-lisp:null)
                         :accessor
                         struct-shape-scraper-description-scrape-configuration
                         :shape "ScrapeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scraper-id :initarg :scraper-id :initform
                         (common-lisp:error ":scraperid is required") :type
                         (common-lisp:or scraper-id common-lisp:null) :accessor
                         struct-shape-scraper-description-scraper-id :shape
                         "ScraperId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-scraper-description-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or scraper-status common-lisp:null)
                         :accessor struct-shape-scraper-description-status
                         :shape "ScraperStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor
                         struct-shape-scraper-description-status-reason :shape
                         "StatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-scraper-description-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scraper-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scraper-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scraper-description 'make-scraper-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scraper-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scraper-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scrape-configuration))
      (common-lisp:list
       (common-lisp:cons "scrapeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scraper-id))
      (common-lisp:list
       (common-lisp:cons "scraperId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scraper-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scraper-filters () 'common-lisp:hash-table)
 (common-lisp:defun make-scraper-filters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype scraper-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scraper-status common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         (common-lisp:error ":statuscode is required") :type
                         (common-lisp:or scraper-status-code common-lisp:null)
                         :accessor struct-shape-scraper-status-status-code
                         :shape "ScraperStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scraper-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scraper-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scraper-status 'make-scraper-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scraper-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scraper-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scraper-status))
   common-lisp:nil))
(common-lisp:deftype scraper-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scraper-summary common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or scraper-alias common-lisp:null)
                         :accessor struct-shape-scraper-summary-alias :shape
                         "ScraperAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or scraper-arn common-lisp:null)
                         :accessor struct-shape-scraper-summary-arn :shape
                         "ScraperArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-scraper-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor struct-shape-scraper-summary-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-scraper-summary-last-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor struct-shape-scraper-summary-role-arn :shape
                         "IamRoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scraper-id :initarg :scraper-id :initform
                         (common-lisp:error ":scraperid is required") :type
                         (common-lisp:or scraper-id common-lisp:null) :accessor
                         struct-shape-scraper-summary-scraper-id :shape
                         "ScraperId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-scraper-summary-source :shape "Source"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or scraper-status common-lisp:null)
                         :accessor struct-shape-scraper-summary-status :shape
                         "ScraperStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor struct-shape-scraper-summary-status-reason
                         :shape "StatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-scraper-summary-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scraper-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scraper-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scraper-summary 'make-scraper-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scraper-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scraper-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scraper-id))
      (common-lisp:list
       (common-lisp:cons "scraperId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scraper-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scraper-summary-list ()
   '(trivial-types:proper-list scraper-summary))
 (common-lisp:defun make-scraper-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scraper-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (amp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((eks-configuration :initarg :eks-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or eks-configuration common-lisp:null)
                         :accessor struct-shape-source-eks-configuration :shape
                         "EksConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eks-configuration))
      (common-lisp:list
       (common-lisp:cons "eksConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (amp-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-logging-configuration-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-update-logging-configuration-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-arn :initarg :log-group-arn :initform
                         (common-lisp:error ":loggrouparn is required") :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor
                         struct-shape-update-logging-configuration-request-log-group-arn
                         :shape "LogGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-update-logging-configuration-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-logging-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-logging-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-logging-configuration-request
                    'make-update-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "logGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-logging-configuration-response common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or logging-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-logging-configuration-response-status
                         :shape "LoggingConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-logging-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-logging-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-logging-configuration-response
                    'make-update-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-alias-request common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or workspace-alias common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-alias-request-alias
                         :shape "WorkspaceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-alias-request-client-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-update-workspace-alias-request-workspace-id
                         :shape "WorkspaceId" :location "uri" :location-name
                         "workspaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workspace-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workspace-alias-request
                    'make-update-workspace-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-alias-request))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (amp-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype workspace-alias () 'common-lisp:string)
(common-lisp:deftype workspace-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workspace-description common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or workspace-alias common-lisp:null)
                         :accessor struct-shape-workspace-description-alias
                         :shape "WorkspaceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or workspace-arn common-lisp:null)
                         :accessor struct-shape-workspace-description-arn
                         :shape "WorkspaceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-description-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-kms-key-arn :shape
                         "KmsKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prometheus-endpoint :initarg :prometheus-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-workspace-description-prometheus-endpoint
                         :shape "Uri" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or workspace-status common-lisp:null)
                         :accessor struct-shape-workspace-description-status
                         :shape "WorkspaceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-workspace-description-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         struct-shape-workspace-description-workspace-id :shape
                         "WorkspaceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workspace-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workspace-description 'make-workspace-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workspace-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workspace-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prometheus-endpoint))
      (common-lisp:list
       (common-lisp:cons "prometheusEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workspace-description))
   common-lisp:nil))
(common-lisp:deftype workspace-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workspace-status common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         (common-lisp:error ":statuscode is required") :type
                         (common-lisp:or workspace-status-code
                                         common-lisp:null)
                         :accessor struct-shape-workspace-status-status-code
                         :shape "WorkspaceStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workspace-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workspace-status 'make-workspace-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-status))
   common-lisp:nil))
(common-lisp:deftype workspace-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workspace-summary common-lisp:nil
                       ((alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or workspace-alias common-lisp:null)
                         :accessor struct-shape-workspace-summary-alias :shape
                         "WorkspaceAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or workspace-arn common-lisp:null)
                         :accessor struct-shape-workspace-summary-arn :shape
                         "WorkspaceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-workspace-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-workspace-summary-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or workspace-status common-lisp:null)
                         :accessor struct-shape-workspace-summary-status :shape
                         "WorkspaceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-workspace-summary-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :initform
                         (common-lisp:error ":workspaceid is required") :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor struct-shape-workspace-summary-workspace-id
                         :shape "WorkspaceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workspace-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workspace-summary 'make-workspace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workspace-summary-list ()
   '(trivial-types:proper-list workspace-summary))
 (common-lisp:defun make-workspace-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-alert-manager-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data workspace-id)
   (common-lisp:declare (common-lisp:ignorable client-token data workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-alert-manager-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/alertmanager/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateAlertManagerDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-alert-manager-definition))
(common-lisp:progn
 (common-lisp:defun create-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token log-group-arn workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token log-group-arn workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-logging-configuration))
(common-lisp:progn
 (common-lisp:defun create-rule-groups-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data name tags workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token data name tags workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-rule-groups-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/rulegroupsnamespaces"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateRuleGroupsNamespace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-rule-groups-namespace))
(common-lisp:progn
 (common-lisp:defun create-scraper
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias client-token destination
                     scrape-configuration source tags)
   (common-lisp:declare
    (common-lisp:ignorable alias client-token destination scrape-configuration
     source tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scraper-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/scrapers"
                                                        "CreateScraper"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-scraper))
(common-lisp:progn
 (common-lisp:defun create-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias client-token kms-key-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable alias client-token kms-key-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/workspaces"
                                                        "CreateWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workspace))
(common-lisp:progn
 (common-lisp:defun delete-alert-manager-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token workspace-id)
   (common-lisp:declare (common-lisp:ignorable client-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-alert-manager-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/alertmanager/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DeleteAlertManagerDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-alert-manager-definition))
(common-lisp:progn
 (common-lisp:defun delete-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token workspace-id)
   (common-lisp:declare (common-lisp:ignorable client-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DeleteLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-logging-configuration))
(common-lisp:progn
 (common-lisp:defun delete-rule-groups-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token name workspace-id)
   (common-lisp:declare (common-lisp:ignorable client-token name workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-rule-groups-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/rulegroupsnamespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteRuleGroupsNamespace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-rule-groups-namespace))
(common-lisp:progn
 (common-lisp:defun delete-scraper
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token scraper-id)
   (common-lisp:declare (common-lisp:ignorable client-token scraper-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scraper-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/scrapers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scraper-id))))
                                                        "DeleteScraper"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-scraper))
(common-lisp:progn
 (common-lisp:defun delete-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token workspace-id)
   (common-lisp:declare (common-lisp:ignorable client-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DeleteWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workspace))
(common-lisp:progn
 (common-lisp:defun describe-alert-manager-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-alert-manager-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/alertmanager/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DescribeAlertManagerDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-alert-manager-definition))
(common-lisp:progn
 (common-lisp:defun describe-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DescribeLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-logging-configuration))
(common-lisp:progn
 (common-lisp:defun describe-rule-groups-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name workspace-id)
   (common-lisp:declare (common-lisp:ignorable name workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-rule-groups-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/rulegroupsnamespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeRuleGroupsNamespace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-rule-groups-namespace))
(common-lisp:progn
 (common-lisp:defun describe-scraper
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scraper-id)
   (common-lisp:declare (common-lisp:ignorable scraper-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scraper-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/scrapers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scraper-id))))
                                                        "DescribeScraper"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-scraper))
(common-lisp:progn
 (common-lisp:defun describe-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DescribeWorkspace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-workspace))
(common-lisp:progn
 (common-lisp:defun get-default-scraper-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'amp-request :method "GET" :path
                                "/scraperconfiguration" :operation
                                "GetDefaultScraperConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-default-scraper-configuration))
(common-lisp:progn
 (common-lisp:defun list-rule-groups-namespaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name next-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results name next-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-rule-groups-namespaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/rulegroupsnamespaces"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListRuleGroupsNamespaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-rule-groups-namespaces))
(common-lisp:progn
 (common-lisp:defun list-scrapers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scrapers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/scrapers"
                                                        "ListScrapers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-scrapers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias max-results next-token)
   (common-lisp:declare (common-lisp:ignorable alias max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/workspaces"
                                                        "ListWorkspaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workspaces))
(common-lisp:progn
 (common-lisp:defun put-alert-manager-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data workspace-id)
   (common-lisp:declare (common-lisp:ignorable client-token data workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-alert-manager-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/alertmanager/definition"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "PutAlertManagerDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-alert-manager-definition))
(common-lisp:progn
 (common-lisp:defun put-rule-groups-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token data name workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token data name workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-rule-groups-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/rulegroupsnamespaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutRuleGroupsNamespace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-rule-groups-namespace))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token log-group-arn workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token log-group-arn workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-logging-configuration))
(common-lisp:progn
 (common-lisp:defun update-workspace-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias client-token workspace-id)
   (common-lisp:declare
    (common-lisp:ignorable alias client-token workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workspace-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amp-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/alias"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateWorkspaceAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workspace-alias))
