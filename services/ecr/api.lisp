;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/ecr/api (:use)
                             (:nicknames #:aws/ecr)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ecr/api)
(common-lisp:progn
 (common-lisp:define-condition ecr-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ecr-error))
(common-lisp:progn
 (common-lisp:defclass ecr-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "ecr" :api-version
                        "2015-09-21" :host-prefix "api.ecr" :signing-name "ecr"
                        :global-host common-lisp:nil :target-prefix
                        "AmazonEC2ContainerRegistry_V20150921" :json-version
                        "1.1"))
 (common-lisp:export 'ecr-request))
(common-lisp:defvar *error-map*
  '(("EmptyUploadException" . empty-upload-exception)
    ("ImageAlreadyExistsException" . image-already-exists-exception)
    ("ImageDigestDoesNotMatchException"
     . image-digest-does-not-match-exception)
    ("ImageNotFoundException" . image-not-found-exception)
    ("ImageTagAlreadyExistsException" . image-tag-already-exists-exception)
    ("InvalidLayerException" . invalid-layer-exception)
    ("InvalidLayerPartException" . invalid-layer-part-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidTagParameterException" . invalid-tag-parameter-exception)
    ("KmsException" . kms-exception)
    ("LayerAlreadyExistsException" . layer-already-exists-exception)
    ("LayerInaccessibleException" . layer-inaccessible-exception)
    ("LayerPartTooSmallException" . layer-part-too-small-exception)
    ("LayersNotFoundException" . layers-not-found-exception)
    ("LifecyclePolicyNotFoundException" . lifecycle-policy-not-found-exception)
    ("LifecyclePolicyPreviewInProgressException"
     . lifecycle-policy-preview-in-progress-exception)
    ("LifecyclePolicyPreviewNotFoundException"
     . lifecycle-policy-preview-not-found-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("PullThroughCacheRuleAlreadyExistsException"
     . pull-through-cache-rule-already-exists-exception)
    ("PullThroughCacheRuleNotFoundException"
     . pull-through-cache-rule-not-found-exception)
    ("ReferencedImagesNotFoundException"
     . referenced-images-not-found-exception)
    ("RegistryPolicyNotFoundException" . registry-policy-not-found-exception)
    ("RepositoryAlreadyExistsException" . repository-already-exists-exception)
    ("RepositoryNotEmptyException" . repository-not-empty-exception)
    ("RepositoryNotFoundException" . repository-not-found-exception)
    ("RepositoryPolicyNotFoundException"
     . repository-policy-not-found-exception)
    ("ScanNotFoundException" . scan-not-found-exception)
    ("SecretNotFoundException" . secret-not-found-exception)
    ("ServerException" . server-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnableToAccessSecretException" . unable-to-access-secret-exception)
    ("UnableToDecryptSecretValueException"
     . unable-to-decrypt-secret-value-exception)
    ("UnableToGetUpstreamImageException"
     . unable-to-get-upstream-image-exception)
    ("UnableToGetUpstreamLayerException"
     . unable-to-get-upstream-layer-exception)
    ("UnsupportedImageTypeException" . unsupported-image-type-exception)
    ("UnsupportedUpstreamRegistryException"
     . unsupported-upstream-registry-exception)
    ("UploadNotFoundException" . upload-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arch () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or attribute-key common-lisp:null)
                         :accessor struct-shape-attribute-key :shape
                         "AttributeKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor struct-shape-attribute-value :shape
                         "AttributeValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-list () '(trivial-types:proper-list attribute))
 (common-lisp:defun make-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype author () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorization-data common-lisp:nil
                       ((authorization-token :initarg :authorization-token
                         :initform common-lisp:nil :type
                         (common-lisp:or base64 common-lisp:null) :accessor
                         struct-shape-authorization-data-authorization-token
                         :shape "Base64" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-at :initarg :expires-at :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration-timestamp common-lisp:null)
                         :accessor struct-shape-authorization-data-expires-at
                         :shape "ExpirationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proxy-endpoint :initarg :proxy-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or proxy-endpoint common-lisp:null)
                         :accessor
                         struct-shape-authorization-data-proxy-endpoint :shape
                         "ProxyEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorization-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorization-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorization-data 'make-authorization-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorization-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorization-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-token))
      (common-lisp:list
       (common-lisp:cons "authorizationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "proxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorization-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorization-data-list ()
   '(trivial-types:proper-list authorization-data))
 (common-lisp:defun make-authorization-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authorization-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecr-container-image-details common-lisp:nil
                       ((architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or arch common-lisp:null) :accessor
                         struct-shape-aws-ecr-container-image-details-architecture
                         :shape "Arch" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or author common-lisp:null)
                         :accessor
                         struct-shape-aws-ecr-container-image-details-author
                         :shape "Author" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-hash :initarg :image-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         struct-shape-aws-ecr-container-image-details-image-hash
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tags :initarg :image-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tags-list common-lisp:null)
                         :accessor
                         struct-shape-aws-ecr-container-image-details-image-tags
                         :shape "ImageTagsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or platform common-lisp:null)
                         :accessor
                         struct-shape-aws-ecr-container-image-details-platform
                         :shape "Platform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pushed-at :initarg :pushed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-aws-ecr-container-image-details-pushed-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry :initarg :registry :initform common-lisp:nil
                         :type (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-aws-ecr-container-image-details-registry
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-aws-ecr-container-image-details-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-ecr-container-image-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecr-container-image-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-container-image-details
                    'make-aws-ecr-container-image-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-hash))
      (common-lisp:list
       (common-lisp:cons "imageHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pushed-at))
      (common-lisp:list
       (common-lisp:cons "pushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry))
      (common-lisp:list
       (common-lisp:cons "registry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   common-lisp:nil))
(common-lisp:deftype base64 () 'common-lisp:string)
(common-lisp:deftype base-score () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass batch-check-layer-availability-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digests :initarg :layer-digests :initform
                         (common-lisp:error ":layerdigests is required") :type
                         (common-lisp:or batched-operation-layer-digest-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-request-layer-digests
                         :shape "BatchedOperationLayerDigestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-check-layer-availability-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-check-layer-availability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-check-layer-availability-request
                    'make-batch-check-layer-availability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digests))
      (common-lisp:list
       (common-lisp:cons "layerDigests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-check-layer-availability-response common-lisp:nil
                       ((layers :initarg :layers :initform common-lisp:nil
                         :type (common-lisp:or layer-list common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-response-layers
                         :shape "LayerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or layer-failure-list common-lisp:null)
                         :accessor
                         struct-shape-batch-check-layer-availability-response-failures
                         :shape "LayerFailureList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-check-layer-availability-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-check-layer-availability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-check-layer-availability-response
                    'make-batch-check-layer-availability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-check-layer-availability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-image-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-ids :initarg :image-ids :initform
                         (common-lisp:error ":imageids is required") :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-request-image-ids
                         :shape "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-image-request
                    'make-batch-delete-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-image-response common-lisp:nil
                       ((image-ids :initarg :image-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-response-image-ids
                         :shape "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or image-failure-list common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-image-response-failures
                         :shape "ImageFailureList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-image-response
                    'make-batch-delete-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-image-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-batch-get-image-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-batch-get-image-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-ids :initarg :image-ids :initform
                         (common-lisp:error ":imageids is required") :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-image-request-image-ids :shape
                         "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (accepted-media-types :initarg :accepted-media-types
                         :initform common-lisp:nil :type
                         (common-lisp:or media-type-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-image-request-accepted-media-types
                         :shape "MediaTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-image-request 'make-batch-get-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepted-media-types))
      (common-lisp:list
       (common-lisp:cons "acceptedMediaTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-image-response common-lisp:nil
                       ((images :initarg :images :initform common-lisp:nil
                         :type (common-lisp:or image-list common-lisp:null)
                         :accessor struct-shape-batch-get-image-response-images
                         :shape "ImageList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or image-failure-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-image-response-failures :shape
                         "ImageFailureList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-image-response 'make-batch-get-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'images))
      (common-lisp:list
       (common-lisp:cons "images"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-repository-scanning-configuration-request
                       common-lisp:nil
                       ((repository-names :initarg :repository-names :initform
                         (common-lisp:error ":repositorynames is required")
                         :type
                         (common-lisp:or
                          scanning-configuration-repository-name-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-repository-scanning-configuration-request-repository-names
                         :shape "ScanningConfigurationRepositoryNameList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-repository-scanning-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-repository-scanning-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-repository-scanning-configuration-request
                    'make-batch-get-repository-scanning-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repository-scanning-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repository-scanning-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-names))
      (common-lisp:list
       (common-lisp:cons "repositoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repository-scanning-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-repository-scanning-configuration-response
                       common-lisp:nil
                       ((scanning-configurations :initarg
                         :scanning-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or repository-scanning-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-repository-scanning-configuration-response-scanning-configurations
                         :shape "RepositoryScanningConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          repository-scanning-configuration-failure-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-get-repository-scanning-configuration-response-failures
                         :shape "RepositoryScanningConfigurationFailureList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-repository-scanning-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-repository-scanning-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-repository-scanning-configuration-response
                    'make-batch-get-repository-scanning-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repository-scanning-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repository-scanning-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scanning-configurations))
      (common-lisp:list
       (common-lisp:cons "scanningConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repository-scanning-configuration-response))
   common-lisp:nil))
(common-lisp:deftype batched-operation-layer-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batched-operation-layer-digest-list ()
   '(trivial-types:proper-list batched-operation-layer-digest))
 (common-lisp:defun make-batched-operation-layer-digest-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batched-operation-layer-digest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass complete-layer-upload-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-complete-layer-upload-request-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digests :initarg :layer-digests :initform
                         (common-lisp:error ":layerdigests is required") :type
                         (common-lisp:or layer-digest-list common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-request-layer-digests
                         :shape "LayerDigestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-layer-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-layer-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-layer-upload-request
                    'make-complete-layer-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digests))
      (common-lisp:list
       (common-lisp:cons "layerDigests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-layer-upload-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-complete-layer-upload-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-digest common-lisp:null)
                         :accessor
                         struct-shape-complete-layer-upload-response-layer-digest
                         :shape "LayerDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-layer-upload-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-layer-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-layer-upload-response
                    'make-complete-layer-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-layer-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pull-through-cache-rule-request common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform
                         (common-lisp:error ":ecrrepositoryprefix is required")
                         :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-request-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upstream-registry-url :initarg :upstream-registry-url
                         :initform
                         (common-lisp:error ":upstreamregistryurl is required")
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-create-pull-through-cache-rule-request-upstream-registry-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upstream-registry :initarg :upstream-registry
                         :initform common-lisp:nil :type
                         (common-lisp:or upstream-registry common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-request-upstream-registry
                         :shape "UpstreamRegistry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-request-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pull-through-cache-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-pull-through-cache-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pull-through-cache-rule-request
                    'make-create-pull-through-cache-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pull-through-cache-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pull-through-cache-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upstream-registry-url))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstream-registry))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pull-through-cache-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pull-through-cache-rule-response common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-response-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upstream-registry-url :initarg :upstream-registry-url
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-create-pull-through-cache-rule-response-upstream-registry-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-response-created-at
                         :shape "CreationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upstream-registry :initarg :upstream-registry
                         :initform common-lisp:nil :type
                         (common-lisp:or upstream-registry common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-response-upstream-registry
                         :shape "UpstreamRegistry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-create-pull-through-cache-rule-response-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pull-through-cache-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-pull-through-cache-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pull-through-cache-rule-response
                    'make-create-pull-through-cache-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pull-through-cache-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pull-through-cache-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upstream-registry-url))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstream-registry))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pull-through-cache-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-repository-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-tag-mutability :initarg :image-tag-mutability
                         :initform common-lisp:nil :type
                         (common-lisp:or image-tag-mutability common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-image-tag-mutability
                         :shape "ImageTagMutability" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scanning-configuration :initarg
                         :image-scanning-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-image-scanning-configuration
                         :shape "ImageScanningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-repository-request-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-request
                    'make-create-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tag-mutability))
      (common-lisp:list
       (common-lisp:cons "imageTagMutability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-response common-lisp:nil
                       ((repository :initarg :repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-create-repository-response-repository
                         :shape "Repository" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-response
                    'make-create-repository-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-response))
   common-lisp:nil))
(common-lisp:deftype creation-timestamp () 'common-lisp:string)
(common-lisp:deftype credential-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cvss-score common-lisp:nil
                       ((base-score :initarg :base-score :initform
                         common-lisp:nil :type
                         (common-lisp:or base-score common-lisp:null) :accessor
                         struct-shape-cvss-score-base-score :shape "BaseScore"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scoring-vector :initarg :scoring-vector :initform
                         common-lisp:nil :type
                         (common-lisp:or scoring-vector common-lisp:null)
                         :accessor struct-shape-cvss-score-scoring-vector
                         :shape "ScoringVector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor struct-shape-cvss-score-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-cvss-score-version :shape
                         "Version" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cvss-score
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cvss-score
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cvss-score 'make-cvss-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "baseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cvss-score-adjustment common-lisp:nil
                       ((metric :initarg :metric :initform common-lisp:nil
                         :type (common-lisp:or metric common-lisp:null)
                         :accessor struct-shape-cvss-score-adjustment-metric
                         :shape "Metric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or reason common-lisp:null)
                         :accessor struct-shape-cvss-score-adjustment-reason
                         :shape "Reason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cvss-score-adjustment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cvss-score-adjustment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cvss-score-adjustment 'make-cvss-score-adjustment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-adjustment-list ()
   '(trivial-types:proper-list cvss-score-adjustment))
 (common-lisp:defun make-cvss-score-adjustment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cvss-score-details common-lisp:nil
                       ((adjustments :initarg :adjustments :initform
                         common-lisp:nil :type
                         (common-lisp:or cvss-score-adjustment-list
                                         common-lisp:null)
                         :accessor struct-shape-cvss-score-details-adjustments
                         :shape "CvssScoreAdjustmentList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or score common-lisp:null) :accessor
                         struct-shape-cvss-score-details-score :shape "Score"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score-source :initarg :score-source :initform
                         common-lisp:nil :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-cvss-score-details-score-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scoring-vector :initarg :scoring-vector :initform
                         common-lisp:nil :type
                         (common-lisp:or scoring-vector common-lisp:null)
                         :accessor
                         struct-shape-cvss-score-details-scoring-vector :shape
                         "ScoringVector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-cvss-score-details-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cvss-score-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cvss-score-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cvss-score-details 'make-cvss-score-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustments))
      (common-lisp:list
       (common-lisp:cons "adjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-source))
      (common-lisp:list
       (common-lisp:cons "scoreSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-list ()
   '(trivial-types:proper-list cvss-score))
 (common-lisp:defun make-cvss-score-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-lifecycle-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-lifecycle-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-request
                    'make-delete-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-lifecycle-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-lifecycle-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-lifecycle-policy-response-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-evaluated-at :initarg :last-evaluated-at
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-timestamp common-lisp:null)
                         :accessor
                         struct-shape-delete-lifecycle-policy-response-last-evaluated-at
                         :shape "EvaluationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-response
                    'make-delete-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-at))
      (common-lisp:list
       (common-lisp:cons "lastEvaluatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pull-through-cache-rule-request common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform
                         (common-lisp:error ":ecrrepositoryprefix is required")
                         :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-pull-through-cache-rule-request-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-pull-through-cache-rule-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pull-through-cache-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-pull-through-cache-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pull-through-cache-rule-request
                    'make-delete-pull-through-cache-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pull-through-cache-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pull-through-cache-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pull-through-cache-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pull-through-cache-rule-response common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-pull-through-cache-rule-response-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upstream-registry-url :initarg :upstream-registry-url
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-delete-pull-through-cache-rule-response-upstream-registry-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor
                         struct-shape-delete-pull-through-cache-rule-response-created-at
                         :shape "CreationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-pull-through-cache-rule-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-pull-through-cache-rule-response-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pull-through-cache-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-pull-through-cache-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pull-through-cache-rule-response
                    'make-delete-pull-through-cache-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pull-through-cache-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pull-through-cache-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upstream-registry-url))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pull-through-cache-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-registry-policy-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-registry-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-registry-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-registry-policy-request
                    'make-delete-registry-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-registry-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-registry-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-policy-text common-lisp:null)
                         :accessor
                         struct-shape-delete-registry-policy-response-policy-text
                         :shape "RegistryPolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-registry-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-registry-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-registry-policy-response
                    'make-delete-registry-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-policy-request
                    'make-delete-repository-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-policy-response-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-policy-response
                    'make-delete-repository-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-delete-repository-request-force :shape
                         "ForceFlag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-request
                    'make-delete-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-response common-lisp:nil
                       ((repository :initarg :repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-delete-repository-response-repository
                         :shape "Repository" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-response
                    'make-delete-repository-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-replication-status-request
                       common-lisp:nil
                       ((repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-image-replication-status-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform
                         (common-lisp:error ":imageid is required") :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-image-replication-status-request-image-id
                         :shape "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-image-replication-status-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-image-replication-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-replication-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-image-replication-status-request
                    'make-describe-image-replication-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-replication-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-replication-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-replication-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-replication-status-response
                       common-lisp:nil
                       ((repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-image-replication-status-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-image-replication-status-response-image-id
                         :shape "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-statuses :initarg :replication-statuses
                         :initform common-lisp:nil :type
                         (common-lisp:or image-replication-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-image-replication-status-response-replication-statuses
                         :shape "ImageReplicationStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-image-replication-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-replication-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-image-replication-status-response
                    'make-describe-image-replication-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-replication-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-replication-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-statuses))
      (common-lisp:list
       (common-lisp:cons "replicationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-replication-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-scan-findings-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform
                         (common-lisp:error ":imageid is required") :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-request-image-id
                         :shape "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-image-scan-findings-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-image-scan-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-scan-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-image-scan-findings-request
                    'make-describe-image-scan-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-scan-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-scan-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-scan-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-scan-findings-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-response-image-id
                         :shape "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scan-status :initarg :image-scan-status
                         :initform common-lisp:nil :type
                         (common-lisp:or image-scan-status common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-response-image-scan-status
                         :shape "ImageScanStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scan-findings :initarg :image-scan-findings
                         :initform common-lisp:nil :type
                         (common-lisp:or image-scan-findings common-lisp:null)
                         :accessor
                         struct-shape-describe-image-scan-findings-response-image-scan-findings
                         :shape "ImageScanFindings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-image-scan-findings-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-image-scan-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-scan-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-image-scan-findings-response
                    'make-describe-image-scan-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-scan-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-scan-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scan-status))
      (common-lisp:list
       (common-lisp:cons "imageScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scan-findings))
      (common-lisp:list
       (common-lisp:cons "imageScanFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-scan-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-images-filter common-lisp:nil
                       ((tag-status :initarg :tag-status :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-status common-lisp:null) :accessor
                         struct-shape-describe-images-filter-tag-status :shape
                         "TagStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-images-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-images-filter 'make-describe-images-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-status))
      (common-lisp:list
       (common-lisp:cons "tagStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-images-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-ids :initarg :image-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-image-ids :shape
                         "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-images-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-images-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or describe-images-filter
                                         common-lisp:null)
                         :accessor struct-shape-describe-images-request-filter
                         :shape "DescribeImagesFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-images-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-images-request 'make-describe-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-images-response common-lisp:nil
                       ((image-details :initarg :image-details :initform
                         common-lisp:nil :type
                         (common-lisp:or image-detail-list common-lisp:null)
                         :accessor
                         struct-shape-describe-images-response-image-details
                         :shape "ImageDetailList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-images-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-images-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-images-response 'make-describe-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-details))
      (common-lisp:list
       (common-lisp:cons "imageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pull-through-cache-rules-request
                       common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-pull-through-cache-rules-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ecr-repository-prefixes :initarg
                         :ecr-repository-prefixes :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix-list
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-pull-through-cache-rules-request-ecr-repository-prefixes
                         :shape "PullThroughCacheRuleRepositoryPrefixList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-pull-through-cache-rules-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-pull-through-cache-rules-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pull-through-cache-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pull-through-cache-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pull-through-cache-rules-request
                    'make-describe-pull-through-cache-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pull-through-cache-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pull-through-cache-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefixes))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pull-through-cache-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pull-through-cache-rules-response
                       common-lisp:nil
                       ((pull-through-cache-rules :initarg
                         :pull-through-cache-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or pull-through-cache-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-pull-through-cache-rules-response-pull-through-cache-rules
                         :shape "PullThroughCacheRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-pull-through-cache-rules-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pull-through-cache-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pull-through-cache-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pull-through-cache-rules-response
                    'make-describe-pull-through-cache-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pull-through-cache-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pull-through-cache-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-through-cache-rules))
      (common-lisp:list
       (common-lisp:cons "pullThroughCacheRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pull-through-cache-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-registry-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-registry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-registry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-registry-request
                    'make-describe-registry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-registry-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-registry-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-configuration :initarg
                         :replication-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-registry-response-replication-configuration
                         :shape "ReplicationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-registry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-registry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-registry-response
                    'make-describe-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "replicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repositories-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-names :initarg :repository-names :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-request-repository-names
                         :shape "RepositoryNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-repositories-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-repositories-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-repositories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-repositories-request
                    'make-describe-repositories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-names))
      (common-lisp:list
       (common-lisp:cons "repositoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repositories-response common-lisp:nil
                       ((repositories :initarg :repositories :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-list common-lisp:null)
                         :accessor
                         struct-shape-describe-repositories-response-repositories
                         :shape "RepositoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-repositories-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-repositories-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-repositories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-repositories-response
                    'make-describe-repositories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repositories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition empty-upload-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       empty-upload-exception-message)))
 (common-lisp:export
  (common-lisp:list 'empty-upload-exception 'empty-upload-exception-message)))
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryptiontype is required")
                         :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-encryption-type
                         :shape "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-kms-key :shape
                         "KmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enhanced-image-scan-finding common-lisp:nil
                       ((aws-account-id :initarg :aws-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-aws-account-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-description common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-description
                         :shape "FindingDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (finding-arn :initarg :finding-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-arn common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-finding-arn
                         :shape "FindingArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-observed-at :initarg :first-observed-at
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-enhanced-image-scan-finding-first-observed-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-observed-at :initarg :last-observed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-enhanced-image-scan-finding-last-observed-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (package-vulnerability-details :initarg
                         :package-vulnerability-details :initform
                         common-lisp:nil :type
                         (common-lisp:or package-vulnerability-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-package-vulnerability-details
                         :shape "PackageVulnerabilityDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remediation :initarg :remediation :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-remediation
                         :shape "Remediation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-resources
                         :shape "ResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or score common-lisp:null) :accessor
                         struct-shape-enhanced-image-scan-finding-score :shape
                         "Score" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score-details :initarg :score-details :initform
                         common-lisp:nil :type
                         (common-lisp:or score-details common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-score-details
                         :shape "ScoreDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type (common-lisp:or severity common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-severity
                         :shape "Severity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-enhanced-image-scan-finding-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or title common-lisp:null) :accessor
                         struct-shape-enhanced-image-scan-finding-title :shape
                         "Title" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-enhanced-image-scan-finding-type :shape
                         "Type" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-enhanced-image-scan-finding-updated-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enhanced-image-scan-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enhanced-image-scan-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enhanced-image-scan-finding
                    'make-enhanced-image-scan-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-image-scan-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-image-scan-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arn))
      (common-lisp:list
       (common-lisp:cons "findingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "firstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "lastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-vulnerability-details))
      (common-lisp:list
       (common-lisp:cons "packageVulnerabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-details))
      (common-lisp:list
       (common-lisp:cons "scoreDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enhanced-image-scan-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enhanced-image-scan-finding-list ()
   '(trivial-types:proper-list enhanced-image-scan-finding))
 (common-lisp:defun make-enhanced-image-scan-finding-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enhanced-image-scan-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype epoch () 'common-lisp:integer)
(common-lisp:deftype evaluation-timestamp () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype expiration-timestamp () 'common-lisp:string)
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:deftype finding-arn () 'common-lisp:string)
(common-lisp:deftype finding-description () 'common-lisp:string)
(common-lisp:deftype finding-name () 'common-lisp:string)
(common-lisp:deftype finding-severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-severity-counts () 'common-lisp:hash-table)
 (common-lisp:defun make-finding-severity-counts
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype force-flag () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype get-authorization-token-registry-id-list ()
   '(trivial-types:proper-list registry-id))
 (common-lisp:defun make-get-authorization-token-registry-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registry-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-authorization-token-request common-lisp:nil
                       ((registry-ids :initarg :registry-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          get-authorization-token-registry-id-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-authorization-token-request-registry-ids
                         :shape "GetAuthorizationTokenRegistryIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-authorization-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-authorization-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-request
                    'make-get-authorization-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-ids))
      (common-lisp:list
       (common-lisp:cons "registryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-authorization-token-response common-lisp:nil
                       ((authorization-data :initarg :authorization-data
                         :initform common-lisp:nil :type
                         (common-lisp:or authorization-data-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-authorization-token-response-authorization-data
                         :shape "AuthorizationDataList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-authorization-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-authorization-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-response
                    'make-get-authorization-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-data))
      (common-lisp:list
       (common-lisp:cons "authorizationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-download-url-for-layer-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-download-url-for-layer-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-download-url-for-layer-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-digest :initarg :layer-digest :initform
                         (common-lisp:error ":layerdigest is required") :type
                         (common-lisp:or layer-digest common-lisp:null)
                         :accessor
                         struct-shape-get-download-url-for-layer-request-layer-digest
                         :shape "LayerDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-download-url-for-layer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-download-url-for-layer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-download-url-for-layer-request
                    'make-get-download-url-for-layer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-download-url-for-layer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-download-url-for-layer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-download-url-for-layer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-download-url-for-layer-response common-lisp:nil
                       ((download-url :initarg :download-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-get-download-url-for-layer-response-download-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-digest common-lisp:null)
                         :accessor
                         struct-shape-get-download-url-for-layer-response-layer-digest
                         :shape "LayerDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-download-url-for-layer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-download-url-for-layer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-download-url-for-layer-response
                    'make-get-download-url-for-layer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-download-url-for-layer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-download-url-for-layer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-url))
      (common-lisp:list
       (common-lisp:cons "downloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-download-url-for-layer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-preview-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-ids :initarg :image-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-request-image-ids
                         :shape "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-lifecycle-policy-preview-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-preview-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-request-max-results
                         :shape "LifecyclePreviewMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy-preview-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-request-filter
                         :shape "LifecyclePolicyPreviewFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policy-preview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policy-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-preview-request
                    'make-get-lifecycle-policy-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-preview-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-response-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy-preview-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-response-status
                         :shape "LifecyclePolicyPreviewStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-lifecycle-policy-preview-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preview-results :initarg :preview-results :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-preview-result-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-response-preview-results
                         :shape "LifecyclePolicyPreviewResultList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy-preview-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-preview-response-summary
                         :shape "LifecyclePolicyPreviewSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policy-preview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policy-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-preview-response
                    'make-get-lifecycle-policy-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-results))
      (common-lisp:list
       (common-lisp:cons "previewResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-request
                    'make-get-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-response-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-evaluated-at :initarg :last-evaluated-at
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-response-last-evaluated-at
                         :shape "EvaluationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-response
                    'make-get-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-at))
      (common-lisp:list
       (common-lisp:cons "lastEvaluatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-policy-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-registry-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-policy-request
                    'make-get-registry-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-registry-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-policy-text common-lisp:null)
                         :accessor
                         struct-shape-get-registry-policy-response-policy-text
                         :shape "RegistryPolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-registry-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-policy-response
                    'make-get-registry-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-scanning-configuration-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-scanning-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-registry-scanning-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-scanning-configuration-request
                    'make-get-registry-scanning-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-scanning-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-scanning-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-scanning-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-scanning-configuration-response
                       common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-registry-scanning-configuration-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scanning-configuration :initarg
                         :scanning-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or registry-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-registry-scanning-configuration-response-scanning-configuration
                         :shape "RegistryScanningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-scanning-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-registry-scanning-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-scanning-configuration-response
                    'make-get-registry-scanning-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-scanning-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-scanning-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "scanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-scanning-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-policy-request
                    'make-get-repository-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-repository-policy-response-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-policy-response
                    'make-get-repository-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-image-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-image-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor struct-shape-image-image-id :shape
                         "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest :initarg :image-manifest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-manifest common-lisp:null)
                         :accessor struct-shape-image-image-manifest :shape
                         "ImageManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor struct-shape-image-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-manifest))
      (common-lisp:list
       (common-lisp:cons "imageManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:deftype image-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-already-exists-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-already-exists-exception
                    'image-already-exists-exception-message)))
(common-lisp:deftype image-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass image-detail common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-image-detail-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-image-detail-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor struct-shape-image-detail-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tags :initarg :image-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag-list common-lisp:null)
                         :accessor struct-shape-image-detail-image-tags :shape
                         "ImageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-size-in-bytes :initarg :image-size-in-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or image-size-in-bytes common-lisp:null)
                         :accessor
                         struct-shape-image-detail-image-size-in-bytes :shape
                         "ImageSizeInBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-pushed-at :initarg :image-pushed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or push-timestamp common-lisp:null)
                         :accessor struct-shape-image-detail-image-pushed-at
                         :shape "PushTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scan-status :initarg :image-scan-status
                         :initform common-lisp:nil :type
                         (common-lisp:or image-scan-status common-lisp:null)
                         :accessor struct-shape-image-detail-image-scan-status
                         :shape "ImageScanStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scan-findings-summary :initarg
                         :image-scan-findings-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or image-scan-findings-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-detail-image-scan-findings-summary
                         :shape "ImageScanFindingsSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor
                         struct-shape-image-detail-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (artifact-media-type :initarg :artifact-media-type
                         :initform common-lisp:nil :type
                         (common-lisp:or media-type common-lisp:null) :accessor
                         struct-shape-image-detail-artifact-media-type :shape
                         "MediaType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-recorded-pull-time :initarg
                         :last-recorded-pull-time :initform common-lisp:nil
                         :type
                         (common-lisp:or recorded-pull-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-detail-last-recorded-pull-time
                         :shape "RecordedPullTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-detail 'make-image-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "imageSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pushed-at))
      (common-lisp:list
       (common-lisp:cons "imagePushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scan-status))
      (common-lisp:list
       (common-lisp:cons "imageScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scan-findings-summary))
      (common-lisp:list
       (common-lisp:cons "imageScanFindingsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-media-type))
      (common-lisp:list
       (common-lisp:cons "artifactMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-recorded-pull-time))
      (common-lisp:list
       (common-lisp:cons "lastRecordedPullTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-detail-list ()
   '(trivial-types:proper-list image-detail))
 (common-lisp:defun make-image-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-digest-does-not-match-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-digest-does-not-match-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-digest-does-not-match-exception
                    'image-digest-does-not-match-exception-message)))
(common-lisp:progn
 (common-lisp:defclass image-failure common-lisp:nil
                       ((image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor struct-shape-image-failure-image-id :shape
                         "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or image-failure-code common-lisp:null)
                         :accessor struct-shape-image-failure-failure-code
                         :shape "ImageFailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or image-failure-reason common-lisp:null)
                         :accessor struct-shape-image-failure-failure-reason
                         :shape "ImageFailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'image-failure 'make-image-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-failure))
   common-lisp:nil))
(common-lisp:deftype image-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-failure-list ()
   '(trivial-types:proper-list image-failure))
 (common-lisp:defun make-image-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-identifier common-lisp:nil
                       ((image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor struct-shape-image-identifier-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag :initarg :image-tag :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag common-lisp:null) :accessor
                         struct-shape-image-identifier-image-tag :shape
                         "ImageTag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-identifier 'make-image-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tag))
      (common-lisp:list
       (common-lisp:cons "imageTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-identifier-list ()
   '(trivial-types:proper-list image-identifier))
 (common-lisp:defun make-image-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-list () '(trivial-types:proper-list image))
 (common-lisp:defun make-image-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-manifest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-not-found-exception
                    'image-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass image-replication-status common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-image-replication-status-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-image-replication-status-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor struct-shape-image-replication-status-status
                         :shape "ReplicationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-error common-lisp:null)
                         :accessor
                         struct-shape-image-replication-status-failure-code
                         :shape "ReplicationError" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-replication-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-replication-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-replication-status 'make-image-replication-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-replication-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-replication-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-replication-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-replication-status-list ()
   '(trivial-types:proper-list image-replication-status))
 (common-lisp:defun make-image-replication-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-replication-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-scan-finding common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or finding-name common-lisp:null)
                         :accessor struct-shape-image-scan-finding-name :shape
                         "FindingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-description common-lisp:null)
                         :accessor struct-shape-image-scan-finding-description
                         :shape "FindingDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-image-scan-finding-uri :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-severity common-lisp:null)
                         :accessor struct-shape-image-scan-finding-severity
                         :shape "FindingSeverity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor struct-shape-image-scan-finding-attributes
                         :shape "AttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-scan-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-scan-finding 'make-image-scan-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-scan-finding-list ()
   '(trivial-types:proper-list image-scan-finding))
 (common-lisp:defun make-image-scan-finding-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-scan-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-scan-findings common-lisp:nil
                       ((image-scan-completed-at :initarg
                         :image-scan-completed-at :initform common-lisp:nil
                         :type (common-lisp:or scan-timestamp common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-image-scan-completed-at
                         :shape "ScanTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vulnerability-source-updated-at :initarg
                         :vulnerability-source-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or vulnerability-source-update-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-vulnerability-source-updated-at
                         :shape "VulnerabilitySourceUpdateTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (finding-severity-counts :initarg
                         :finding-severity-counts :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-severity-counts
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-finding-severity-counts
                         :shape "FindingSeverityCounts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (findings :initarg :findings :initform common-lisp:nil
                         :type
                         (common-lisp:or image-scan-finding-list
                                         common-lisp:null)
                         :accessor struct-shape-image-scan-findings-findings
                         :shape "ImageScanFindingList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enhanced-findings :initarg :enhanced-findings
                         :initform common-lisp:nil :type
                         (common-lisp:or enhanced-image-scan-finding-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-enhanced-findings
                         :shape "EnhancedImageScanFindingList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-scan-findings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-findings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-scan-findings 'make-image-scan-findings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-findings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-findings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scan-completed-at))
      (common-lisp:list
       (common-lisp:cons "imageScanCompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vulnerability-source-updated-at))
      (common-lisp:list
       (common-lisp:cons "vulnerabilitySourceUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-severity-counts))
      (common-lisp:list
       (common-lisp:cons "findingSeverityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enhanced-findings))
      (common-lisp:list
       (common-lisp:cons "enhancedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-findings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-scan-findings-summary common-lisp:nil
                       ((image-scan-completed-at :initarg
                         :image-scan-completed-at :initform common-lisp:nil
                         :type (common-lisp:or scan-timestamp common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-summary-image-scan-completed-at
                         :shape "ScanTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vulnerability-source-updated-at :initarg
                         :vulnerability-source-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or vulnerability-source-update-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-summary-vulnerability-source-updated-at
                         :shape "VulnerabilitySourceUpdateTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (finding-severity-counts :initarg
                         :finding-severity-counts :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-severity-counts
                                         common-lisp:null)
                         :accessor
                         struct-shape-image-scan-findings-summary-finding-severity-counts
                         :shape "FindingSeverityCounts" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-scan-findings-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-findings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-scan-findings-summary
                    'make-image-scan-findings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scan-completed-at))
      (common-lisp:list
       (common-lisp:cons "imageScanCompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vulnerability-source-updated-at))
      (common-lisp:list
       (common-lisp:cons "vulnerabilitySourceUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-severity-counts))
      (common-lisp:list
       (common-lisp:cons "findingSeverityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-scan-status common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or scan-status common-lisp:null)
                         :accessor struct-shape-image-scan-status-status :shape
                         "ScanStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-status-description
                                         common-lisp:null)
                         :accessor struct-shape-image-scan-status-description
                         :shape "ScanStatusDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-scan-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-scan-status 'make-image-scan-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-scanning-configuration common-lisp:nil
                       ((scan-on-push :initarg :scan-on-push :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-on-push-flag common-lisp:null)
                         :accessor
                         struct-shape-image-scanning-configuration-scan-on-push
                         :shape "ScanOnPushFlag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-scanning-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-scanning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-scanning-configuration
                    'make-image-scanning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-on-push))
      (common-lisp:list
       (common-lisp:cons "scanOnPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   common-lisp:nil))
(common-lisp:deftype image-size-in-bytes () 'common-lisp:integer)
(common-lisp:deftype image-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition image-tag-already-exists-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       image-tag-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'image-tag-already-exists-exception
                    'image-tag-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:deftype image-tag-list () '(trivial-types:proper-list image-tag))
 (common-lisp:defun make-image-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-tag-mutability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-tags-list ()
   '(trivial-types:proper-list image-tag))
 (common-lisp:defun make-image-tags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass initiate-layer-upload-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-initiate-layer-upload-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-initiate-layer-upload-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiate-layer-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'initiate-layer-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initiate-layer-upload-request
                    'make-initiate-layer-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initiate-layer-upload-response common-lisp:nil
                       ((upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-initiate-layer-upload-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-size :initarg :part-size :initform
                         common-lisp:nil :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-initiate-layer-upload-response-part-size
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiate-layer-upload-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'initiate-layer-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initiate-layer-upload-response
                    'make-initiate-layer-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-size))
      (common-lisp:list
       (common-lisp:cons "partSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initiate-layer-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-layer-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-layer-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-layer-exception 'invalid-layer-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-layer-part-exception
     (ecr-error)
     ((registry-id :initarg :registry-id :initform common-lisp:nil :reader
       invalid-layer-part-exception-registry-id)
      (repository-name :initarg :repository-name :initform common-lisp:nil
       :reader invalid-layer-part-exception-repository-name)
      (upload-id :initarg :upload-id :initform common-lisp:nil :reader
       invalid-layer-part-exception-upload-id)
      (last-valid-byte-received :initarg :last-valid-byte-received :initform
       common-lisp:nil :reader
       invalid-layer-part-exception-last-valid-byte-received)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-layer-part-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-layer-part-exception
                    'invalid-layer-part-exception-registry-id
                    'invalid-layer-part-exception-repository-name
                    'invalid-layer-part-exception-upload-id
                    'invalid-layer-part-exception-last-valid-byte-received
                    'invalid-layer-part-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-parameter-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-parameter-exception
                    'invalid-tag-parameter-exception-message)))
(common-lisp:deftype is-ptcrule-valid () 'common-lisp:boolean)
(common-lisp:deftype kms-error () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition kms-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kms-exception-message)
      (kms-error :initarg :kms-error :initform common-lisp:nil :reader
       kms-exception-kms-error)))
 (common-lisp:export
  (common-lisp:list 'kms-exception 'kms-exception-message
                    'kms-exception-kms-error)))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass layer common-lisp:nil
                       ((layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-digest common-lisp:null)
                         :accessor struct-shape-layer-layer-digest :shape
                         "LayerDigest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-availability :initarg :layer-availability
                         :initform common-lisp:nil :type
                         (common-lisp:or layer-availability common-lisp:null)
                         :accessor struct-shape-layer-layer-availability :shape
                         "LayerAvailability" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-size :initarg :layer-size :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-size-in-bytes common-lisp:null)
                         :accessor struct-shape-layer-layer-size :shape
                         "LayerSizeInBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (media-type :initarg :media-type :initform
                         common-lisp:nil :type
                         (common-lisp:or media-type common-lisp:null) :accessor
                         struct-shape-layer-media-type :shape "MediaType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layer 'make-layer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-availability))
      (common-lisp:list
       (common-lisp:cons "layerAvailability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-size))
      (common-lisp:list
       (common-lisp:cons "layerSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-type))
      (common-lisp:list
       (common-lisp:cons "mediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition layer-already-exists-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layer-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layer-already-exists-exception
                    'layer-already-exists-exception-message)))
(common-lisp:deftype layer-availability () 'common-lisp:string)
(common-lisp:deftype layer-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-digest-list ()
   '(trivial-types:proper-list layer-digest))
 (common-lisp:defun make-layer-digest-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer-digest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass layer-failure common-lisp:nil
                       ((layer-digest :initarg :layer-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or batched-operation-layer-digest
                                         common-lisp:null)
                         :accessor struct-shape-layer-failure-layer-digest
                         :shape "BatchedOperationLayerDigest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-failure-code common-lisp:null)
                         :accessor struct-shape-layer-failure-failure-code
                         :shape "LayerFailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-failure-reason common-lisp:null)
                         :accessor struct-shape-layer-failure-failure-reason
                         :shape "LayerFailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layer-failure 'make-layer-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layer-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layer-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-digest))
      (common-lisp:list
       (common-lisp:cons "layerDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layer-failure))
   common-lisp:nil))
(common-lisp:deftype layer-failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layer-failure-list ()
   '(trivial-types:proper-list layer-failure))
 (common-lisp:defun make-layer-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype layer-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition layer-inaccessible-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layer-inaccessible-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layer-inaccessible-exception
                    'layer-inaccessible-exception-message)))
(common-lisp:progn
 (common-lisp:deftype layer-list () '(trivial-types:proper-list layer))
 (common-lisp:defun make-layer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype layer-part-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition layer-part-too-small-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layer-part-too-small-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layer-part-too-small-exception
                    'layer-part-too-small-exception-message)))
(common-lisp:deftype layer-size-in-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition layers-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       layers-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'layers-not-found-exception
                    'layers-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition lifecycle-policy-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lifecycle-policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-not-found-exception
                    'lifecycle-policy-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy-preview-filter common-lisp:nil
                       ((tag-status :initarg :tag-status :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-status common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-preview-filter-tag-status
                         :shape "TagStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-policy-preview-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lifecycle-policy-preview-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-preview-filter
                    'make-lifecycle-policy-preview-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-status))
      (common-lisp:list
       (common-lisp:cons "tagStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition lifecycle-policy-preview-in-progress-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lifecycle-policy-preview-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-preview-in-progress-exception
                    'lifecycle-policy-preview-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition lifecycle-policy-preview-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lifecycle-policy-preview-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-preview-not-found-exception
                    'lifecycle-policy-preview-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy-preview-result common-lisp:nil
                       ((image-tags :initarg :image-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag-list common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-preview-result-image-tags
                         :shape "ImageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-preview-result-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-pushed-at :initarg :image-pushed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or push-timestamp common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-preview-result-image-pushed-at
                         :shape "PushTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy-rule-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-preview-result-action
                         :shape "LifecyclePolicyRuleAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (applied-rule-priority :initarg :applied-rule-priority
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-rule-priority
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-preview-result-applied-rule-priority
                         :shape "LifecyclePolicyRulePriority" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-policy-preview-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lifecycle-policy-preview-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-preview-result
                    'make-lifecycle-policy-preview-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "imageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pushed-at))
      (common-lisp:list
       (common-lisp:cons "imagePushedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applied-rule-priority))
      (common-lisp:list
       (common-lisp:cons "appliedRulePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-policy-preview-result-list ()
   '(trivial-types:proper-list lifecycle-policy-preview-result))
 (common-lisp:defun make-lifecycle-policy-preview-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lifecycle-policy-preview-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lifecycle-policy-preview-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy-preview-summary common-lisp:nil
                       ((expiring-image-total-count :initarg
                         :expiring-image-total-count :initform common-lisp:nil
                         :type (common-lisp:or image-count common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-preview-summary-expiring-image-total-count
                         :shape "ImageCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-policy-preview-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lifecycle-policy-preview-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-preview-summary
                    'make-lifecycle-policy-preview-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiring-image-total-count))
      (common-lisp:list
       (common-lisp:cons "expiringImageTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-preview-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy-rule-action common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or image-action-type common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-rule-action-type :shape
                         "ImageActionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-policy-rule-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-policy-rule-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-rule-action
                    'make-lifecycle-policy-rule-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-rule-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-rule-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-rule-action))
   common-lisp:nil))
(common-lisp:deftype lifecycle-policy-rule-priority () 'common-lisp:integer)
(common-lisp:deftype lifecycle-policy-text () 'common-lisp:string)
(common-lisp:deftype lifecycle-preview-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-images-filter common-lisp:nil
                       ((tag-status :initarg :tag-status :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-status common-lisp:null) :accessor
                         struct-shape-list-images-filter-tag-status :shape
                         "TagStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-images-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-images-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-images-filter 'make-list-images-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-status))
      (common-lisp:list
       (common-lisp:cons "tagStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-images-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-list-images-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-list-images-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-images-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-images-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or list-images-filter common-lisp:null)
                         :accessor struct-shape-list-images-request-filter
                         :shape "ListImagesFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-images-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-images-request 'make-list-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-images-response common-lisp:nil
                       ((image-ids :initarg :image-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or image-identifier-list
                                         common-lisp:null)
                         :accessor struct-shape-list-images-response-image-ids
                         :shape "ImageIdentifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-images-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-images-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-images-response 'make-list-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "imageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype media-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype media-type-list ()
   '(trivial-types:proper-list media-type))
 (common-lisp:defun make-media-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype ptcvalidate-failure () 'common-lisp:string)
(common-lisp:deftype package-manager () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-vulnerability-details common-lisp:nil
                       ((cvss :initarg :cvss :initform common-lisp:nil :type
                         (common-lisp:or cvss-score-list common-lisp:null)
                         :accessor
                         struct-shape-package-vulnerability-details-cvss :shape
                         "CvssScoreList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-urls :initarg :reference-urls :initform
                         common-lisp:nil :type
                         (common-lisp:or reference-urls-list common-lisp:null)
                         :accessor
                         struct-shape-package-vulnerability-details-reference-urls
                         :shape "ReferenceUrlsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-vulnerabilities :initarg
                         :related-vulnerabilities :initform common-lisp:nil
                         :type
                         (common-lisp:or related-vulnerabilities-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-package-vulnerability-details-related-vulnerabilities
                         :shape "RelatedVulnerabilitiesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor
                         struct-shape-package-vulnerability-details-source
                         :shape "Source" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-url :initarg :source-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-package-vulnerability-details-source-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vendor-created-at :initarg :vendor-created-at
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-package-vulnerability-details-vendor-created-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vendor-severity :initarg :vendor-severity :initform
                         common-lisp:nil :type
                         (common-lisp:or severity common-lisp:null) :accessor
                         struct-shape-package-vulnerability-details-vendor-severity
                         :shape "Severity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vendor-updated-at :initarg :vendor-updated-at
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-package-vulnerability-details-vendor-updated-at
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vulnerability-id :initarg :vulnerability-id :initform
                         common-lisp:nil :type
                         (common-lisp:or vulnerability-id common-lisp:null)
                         :accessor
                         struct-shape-package-vulnerability-details-vulnerability-id
                         :shape "VulnerabilityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vulnerable-packages :initarg :vulnerable-packages
                         :initform common-lisp:nil :type
                         (common-lisp:or vulnerable-packages-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-package-vulnerability-details-vulnerable-packages
                         :shape "VulnerablePackagesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-package-vulnerability-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'package-vulnerability-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'package-vulnerability-details
                    'make-package-vulnerability-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "relatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "sourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "vendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "vendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "vendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "vulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   common-lisp:nil))
(common-lisp:deftype part-size () 'common-lisp:integer)
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:deftype proxy-endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pull-through-cache-rule common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-pull-through-cache-rule-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upstream-registry-url :initarg :upstream-registry-url
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-pull-through-cache-rule-upstream-registry-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor
                         struct-shape-pull-through-cache-rule-created-at :shape
                         "CreationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-pull-through-cache-rule-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-pull-through-cache-rule-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upstream-registry :initarg :upstream-registry
                         :initform common-lisp:nil :type
                         (common-lisp:or upstream-registry common-lisp:null)
                         :accessor
                         struct-shape-pull-through-cache-rule-upstream-registry
                         :shape "UpstreamRegistry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-timestamp common-lisp:null)
                         :accessor
                         struct-shape-pull-through-cache-rule-updated-at :shape
                         "UpdatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pull-through-cache-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pull-through-cache-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pull-through-cache-rule 'make-pull-through-cache-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pull-through-cache-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pull-through-cache-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upstream-registry-url))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstream-registry))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pull-through-cache-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition pull-through-cache-rule-already-exists-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       pull-through-cache-rule-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'pull-through-cache-rule-already-exists-exception
                    'pull-through-cache-rule-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:deftype pull-through-cache-rule-list ()
   '(trivial-types:proper-list pull-through-cache-rule))
 (common-lisp:defun make-pull-through-cache-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pull-through-cache-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition pull-through-cache-rule-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       pull-through-cache-rule-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'pull-through-cache-rule-not-found-exception
                    'pull-through-cache-rule-not-found-exception-message)))
(common-lisp:deftype pull-through-cache-rule-repository-prefix ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pull-through-cache-rule-repository-prefix-list ()
   '(trivial-types:proper-list pull-through-cache-rule-repository-prefix))
 (common-lisp:defun make-pull-through-cache-rule-repository-prefix-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pull-through-cache-rule-repository-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype push-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-image-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-put-image-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-image-request-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest :initarg :image-manifest :initform
                         (common-lisp:error ":imagemanifest is required") :type
                         (common-lisp:or image-manifest common-lisp:null)
                         :accessor
                         struct-shape-put-image-request-image-manifest :shape
                         "ImageManifest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-manifest-media-type :initarg
                         :image-manifest-media-type :initform common-lisp:nil
                         :type (common-lisp:or media-type common-lisp:null)
                         :accessor
                         struct-shape-put-image-request-image-manifest-media-type
                         :shape "MediaType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag :initarg :image-tag :initform
                         common-lisp:nil :type
                         (common-lisp:or image-tag common-lisp:null) :accessor
                         struct-shape-put-image-request-image-tag :shape
                         "ImageTag" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor struct-shape-put-image-request-image-digest
                         :shape "ImageDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-request 'make-put-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-manifest))
      (common-lisp:list
       (common-lisp:cons "imageManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-manifest-media-type))
      (common-lisp:list
       (common-lisp:cons "imageManifestMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tag))
      (common-lisp:list
       (common-lisp:cons "imageTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-response common-lisp:nil
                       ((image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-put-image-response-image :shape "Image"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-response 'make-put-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-scanning-configuration-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-image-scanning-configuration-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-image-scanning-configuration-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scanning-configuration :initarg
                         :image-scanning-configuration :initform
                         (common-lisp:error
                          ":imagescanningconfiguration is required")
                         :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-image-scanning-configuration-request-image-scanning-configuration
                         :shape "ImageScanningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-scanning-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-image-scanning-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-scanning-configuration-request
                    'make-put-image-scanning-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-scanning-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-scanning-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-scanning-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-scanning-configuration-response
                       common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-image-scanning-configuration-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-image-scanning-configuration-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scanning-configuration :initarg
                         :image-scanning-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-image-scanning-configuration-response-image-scanning-configuration
                         :shape "ImageScanningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-scanning-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-image-scanning-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-scanning-configuration-response
                    'make-put-image-scanning-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-scanning-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-scanning-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-scanning-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-tag-mutability-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-image-tag-mutability-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-image-tag-mutability-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag-mutability :initarg :image-tag-mutability
                         :initform
                         (common-lisp:error ":imagetagmutability is required")
                         :type
                         (common-lisp:or image-tag-mutability common-lisp:null)
                         :accessor
                         struct-shape-put-image-tag-mutability-request-image-tag-mutability
                         :shape "ImageTagMutability" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-tag-mutability-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-image-tag-mutability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-tag-mutability-request
                    'make-put-image-tag-mutability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-tag-mutability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-tag-mutability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tag-mutability))
      (common-lisp:list
       (common-lisp:cons "imageTagMutability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-tag-mutability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-tag-mutability-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-image-tag-mutability-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-image-tag-mutability-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag-mutability :initarg :image-tag-mutability
                         :initform common-lisp:nil :type
                         (common-lisp:or image-tag-mutability common-lisp:null)
                         :accessor
                         struct-shape-put-image-tag-mutability-response-image-tag-mutability
                         :shape "ImageTagMutability" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-image-tag-mutability-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-image-tag-mutability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-image-tag-mutability-response
                    'make-put-image-tag-mutability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-tag-mutability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-tag-mutability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tag-mutability))
      (common-lisp:list
       (common-lisp:cons "imageTagMutability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-tag-mutability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-lifecycle-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-lifecycle-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform
                         (common-lisp:error ":lifecyclepolicytext is required")
                         :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-lifecycle-policy-request-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-policy-request
                    'make-put-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-lifecycle-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-put-lifecycle-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-lifecycle-policy-response-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-policy-response
                    'make-put-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-registry-policy-request common-lisp:nil
                       ((policy-text :initarg :policy-text :initform
                         (common-lisp:error ":policytext is required") :type
                         (common-lisp:or registry-policy-text common-lisp:null)
                         :accessor
                         struct-shape-put-registry-policy-request-policy-text
                         :shape "RegistryPolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-registry-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-registry-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-registry-policy-request
                    'make-put-registry-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-registry-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-put-registry-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-policy-text common-lisp:null)
                         :accessor
                         struct-shape-put-registry-policy-response-policy-text
                         :shape "RegistryPolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-registry-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-registry-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-registry-policy-response
                    'make-put-registry-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-registry-scanning-configuration-request
                       common-lisp:nil
                       ((scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-type common-lisp:null) :accessor
                         struct-shape-put-registry-scanning-configuration-request-scan-type
                         :shape "ScanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or registry-scanning-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-registry-scanning-configuration-request-rules
                         :shape "RegistryScanningRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-registry-scanning-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-registry-scanning-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-registry-scanning-configuration-request
                    'make-put-registry-scanning-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-scanning-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-scanning-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "scanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-scanning-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-registry-scanning-configuration-response
                       common-lisp:nil
                       ((registry-scanning-configuration :initarg
                         :registry-scanning-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-registry-scanning-configuration-response-registry-scanning-configuration
                         :shape "RegistryScanningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-registry-scanning-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-registry-scanning-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-registry-scanning-configuration-response
                    'make-put-registry-scanning-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-scanning-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-scanning-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registry-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "registryScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-registry-scanning-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-replication-configuration-request common-lisp:nil
                       ((replication-configuration :initarg
                         :replication-configuration :initform
                         (common-lisp:error
                          ":replicationconfiguration is required")
                         :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-replication-configuration-request-replication-configuration
                         :shape "ReplicationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-replication-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-replication-configuration-request
                    'make-put-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "replicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-replication-configuration-response common-lisp:nil
                       ((replication-configuration :initarg
                         :replication-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-replication-configuration-response-replication-configuration
                         :shape "ReplicationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-replication-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-replication-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-replication-configuration-response
                    'make-put-replication-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-replication-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "replicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-replication-configuration-response))
   common-lisp:nil))
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-recommendation-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or recommendation-text common-lisp:null)
                         :accessor struct-shape-recommendation-text :shape
                         "RecommendationText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:deftype recommendation-text () 'common-lisp:string)
(common-lisp:deftype recorded-pull-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reference-urls-list () '(trivial-types:proper-list url))
 (common-lisp:defun make-reference-urls-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition referenced-images-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       referenced-images-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'referenced-images-not-found-exception
                    'referenced-images-not-found-exception-message)))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype registry-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition registry-policy-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       registry-policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'registry-policy-not-found-exception
                    'registry-policy-not-found-exception-message)))
(common-lisp:deftype registry-policy-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass registry-scanning-configuration common-lisp:nil
                       ((scan-type :initarg :scan-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-type common-lisp:null) :accessor
                         struct-shape-registry-scanning-configuration-scan-type
                         :shape "ScanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or registry-scanning-rule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-registry-scanning-configuration-rules
                         :shape "RegistryScanningRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry-scanning-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'registry-scanning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'registry-scanning-configuration
                    'make-registry-scanning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registry-scanning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registry-scanning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "scanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registry-scanning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registry-scanning-rule common-lisp:nil
                       ((scan-frequency :initarg :scan-frequency :initform
                         (common-lisp:error ":scanfrequency is required") :type
                         (common-lisp:or scan-frequency common-lisp:null)
                         :accessor
                         struct-shape-registry-scanning-rule-scan-frequency
                         :shape "ScanFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-filters :initarg :repository-filters
                         :initform
                         (common-lisp:error ":repositoryfilters is required")
                         :type
                         (common-lisp:or scanning-repository-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-registry-scanning-rule-repository-filters
                         :shape "ScanningRepositoryFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry-scanning-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registry-scanning-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'registry-scanning-rule 'make-registry-scanning-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registry-scanning-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registry-scanning-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-frequency))
      (common-lisp:list
       (common-lisp:cons "scanFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-filters))
      (common-lisp:list
       (common-lisp:cons "repositoryFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registry-scanning-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registry-scanning-rule-list ()
   '(trivial-types:proper-list registry-scanning-rule))
 (common-lisp:defun make-registry-scanning-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registry-scanning-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype related-vulnerabilities-list ()
   '(trivial-types:proper-list related-vulnerability))
 (common-lisp:defun make-related-vulnerabilities-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-vulnerability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype related-vulnerability () 'common-lisp:string)
(common-lisp:deftype release () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remediation common-lisp:nil
                       ((recommendation :initarg :recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation common-lisp:null)
                         :accessor struct-shape-remediation-recommendation
                         :shape "Recommendation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remediation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'remediation 'make-remediation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-configuration common-lisp:nil
                       ((rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or replication-rule-list
                                         common-lisp:null)
                         :accessor struct-shape-replication-configuration-rules
                         :shape "ReplicationRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-destination common-lisp:nil
                       ((region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-replication-destination-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         (common-lisp:error ":registryid is required") :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-replication-destination-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-destination 'make-replication-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-destination-list ()
   '(trivial-types:proper-list replication-destination))
 (common-lisp:defun make-replication-destination-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-error () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-rule common-lisp:nil
                       ((destinations :initarg :destinations :initform
                         (common-lisp:error ":destinations is required") :type
                         (common-lisp:or replication-destination-list
                                         common-lisp:null)
                         :accessor struct-shape-replication-rule-destinations
                         :shape "ReplicationDestinationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (repository-filters :initarg :repository-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or repository-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-rule-repository-filters
                         :shape "RepositoryFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-rule 'make-replication-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-filters))
      (common-lisp:list
       (common-lisp:cons "repositoryFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-rule-list ()
   '(trivial-types:proper-list replication-rule))
 (common-lisp:defun make-replication-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository common-lisp:nil
                       ((repository-arn :initarg :repository-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-repository-repository-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-repository-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-repository-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-uri :initarg :repository-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-repository-repository-uri :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-timestamp common-lisp:null)
                         :accessor struct-shape-repository-created-at :shape
                         "CreationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-tag-mutability :initarg :image-tag-mutability
                         :initform common-lisp:nil :type
                         (common-lisp:or image-tag-mutability common-lisp:null)
                         :accessor struct-shape-repository-image-tag-mutability
                         :shape "ImageTagMutability" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scanning-configuration :initarg
                         :image-scanning-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-image-scanning-configuration
                         :shape "ImageScanningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'repository 'make-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-uri))
      (common-lisp:list
       (common-lisp:cons "repositoryUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tag-mutability))
      (common-lisp:list
       (common-lisp:cons "imageTagMutability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition repository-already-exists-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-already-exists-exception
                    'repository-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass repository-filter common-lisp:nil
                       ((filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or repository-filter-value
                                         common-lisp:null)
                         :accessor struct-shape-repository-filter-filter :shape
                         "RepositoryFilterValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-type :initarg :filter-type :initform
                         (common-lisp:error ":filtertype is required") :type
                         (common-lisp:or repository-filter-type
                                         common-lisp:null)
                         :accessor struct-shape-repository-filter-filter-type
                         :shape "RepositoryFilterType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-filter 'make-repository-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-type))
      (common-lisp:list
       (common-lisp:cons "filterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-filter-list ()
   '(trivial-types:proper-list repository-filter))
 (common-lisp:defun make-repository-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-filter-type () 'common-lisp:string)
(common-lisp:deftype repository-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-list ()
   '(trivial-types:proper-list repository))
 (common-lisp:defun make-repository-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-name-list ()
   '(trivial-types:proper-list repository-name))
 (common-lisp:defun make-repository-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition repository-not-empty-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-not-empty-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-not-empty-exception
                    'repository-not-empty-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition repository-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-not-found-exception
                    'repository-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition repository-policy-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       repository-policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'repository-policy-not-found-exception
                    'repository-policy-not-found-exception-message)))
(common-lisp:deftype repository-policy-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository-scanning-configuration common-lisp:nil
                       ((repository-arn :initarg :repository-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-repository-scanning-configuration-repository-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scan-on-push :initarg :scan-on-push :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-on-push-flag common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-scan-on-push
                         :shape "ScanOnPushFlag" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scan-frequency :initarg :scan-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-frequency common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-scan-frequency
                         :shape "ScanFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (applied-scan-filters :initarg :applied-scan-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or scanning-repository-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-applied-scan-filters
                         :shape "ScanningRepositoryFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-scanning-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'repository-scanning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-scanning-configuration
                    'make-repository-scanning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-scanning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-scanning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-on-push))
      (common-lisp:list
       (common-lisp:cons "scanOnPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-frequency))
      (common-lisp:list
       (common-lisp:cons "scanFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applied-scan-filters))
      (common-lisp:list
       (common-lisp:cons "appliedScanFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-scanning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-scanning-configuration-failure
                       common-lisp:nil
                       ((repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-failure-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or scanning-configuration-failure-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-failure-failure-code
                         :shape "ScanningConfigurationFailureCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or scanning-configuration-failure-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-repository-scanning-configuration-failure-failure-reason
                         :shape "ScanningConfigurationFailureReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-scanning-configuration-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'repository-scanning-configuration-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-scanning-configuration-failure
                    'make-repository-scanning-configuration-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-scanning-configuration-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-scanning-configuration-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-scanning-configuration-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-scanning-configuration-failure-list ()
   '(trivial-types:proper-list repository-scanning-configuration-failure))
 (common-lisp:defun make-repository-scanning-configuration-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-scanning-configuration-failure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype repository-scanning-configuration-list ()
   '(trivial-types:proper-list repository-scanning-configuration))
 (common-lisp:defun make-repository-scanning-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-scanning-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor struct-shape-resource-details :shape
                         "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resource-id :shape "ResourceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-resource-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-resource-type :shape "Type" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-details common-lisp:nil
                       ((aws-ecr-container-image :initarg
                         :aws-ecr-container-image :initform common-lisp:nil
                         :type
                         (common-lisp:or aws-ecr-container-image-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-aws-ecr-container-image
                         :shape "AwsEcrContainerImageDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecr-container-image))
      (common-lisp:list
       (common-lisp:cons "awsEcrContainerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scan-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition scan-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scan-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scan-not-found-exception
                    'scan-not-found-exception-message)))
(common-lisp:deftype scan-on-push-flag () 'common-lisp:boolean)
(common-lisp:deftype scan-status () 'common-lisp:string)
(common-lisp:deftype scan-status-description () 'common-lisp:string)
(common-lisp:deftype scan-timestamp () 'common-lisp:string)
(common-lisp:deftype scan-type () 'common-lisp:string)
(common-lisp:deftype scanning-configuration-failure-code () 'common-lisp:string)
(common-lisp:deftype scanning-configuration-failure-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scanning-configuration-repository-name-list ()
   '(trivial-types:proper-list repository-name))
 (common-lisp:defun make-scanning-configuration-repository-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scanning-repository-filter common-lisp:nil
                       ((filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or scanning-repository-filter-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-scanning-repository-filter-filter :shape
                         "ScanningRepositoryFilterValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter-type :initarg :filter-type :initform
                         (common-lisp:error ":filtertype is required") :type
                         (common-lisp:or scanning-repository-filter-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-scanning-repository-filter-filter-type
                         :shape "ScanningRepositoryFilterType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scanning-repository-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scanning-repository-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scanning-repository-filter
                    'make-scanning-repository-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scanning-repository-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scanning-repository-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-type))
      (common-lisp:list
       (common-lisp:cons "filterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scanning-repository-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scanning-repository-filter-list ()
   '(trivial-types:proper-list scanning-repository-filter))
 (common-lisp:defun make-scanning-repository-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scanning-repository-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scanning-repository-filter-type () 'common-lisp:string)
(common-lisp:deftype scanning-repository-filter-value () 'common-lisp:string)
(common-lisp:deftype score () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass score-details common-lisp:nil
                       ((cvss :initarg :cvss :initform common-lisp:nil :type
                         (common-lisp:or cvss-score-details common-lisp:null)
                         :accessor struct-shape-score-details-cvss :shape
                         "CvssScoreDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-score-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'score-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'score-details 'make-score-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input score-details))
   common-lisp:nil))
(common-lisp:deftype scoring-vector () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition secret-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       secret-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'secret-not-found-exception
                    'secret-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass set-repository-policy-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         (common-lisp:error ":policytext is required") :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-request-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-set-repository-policy-request-force
                         :shape "ForceFlag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-repository-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-repository-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-repository-policy-request
                    'make-set-repository-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-repository-policy-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-repository-policy-response-policy-text
                         :shape "RepositoryPolicyText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-repository-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-repository-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-repository-policy-response
                    'make-set-repository-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "policyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-repository-policy-response))
   common-lisp:nil))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:deftype severity-count () 'common-lisp:integer)
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:deftype source-layer-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-image-scan-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform
                         (common-lisp:error ":imageid is required") :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-request-image-id :shape
                         "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-image-scan-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-image-scan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-image-scan-request 'make-start-image-scan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-scan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-scan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-scan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-image-scan-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-id :initarg :image-id :initform common-lisp:nil
                         :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-response-image-id :shape
                         "ImageIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-scan-status :initarg :image-scan-status
                         :initform common-lisp:nil :type
                         (common-lisp:or image-scan-status common-lisp:null)
                         :accessor
                         struct-shape-start-image-scan-response-image-scan-status
                         :shape "ImageScanStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-image-scan-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-image-scan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-image-scan-response
                    'make-start-image-scan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-scan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-scan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "imageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scan-status))
      (common-lisp:list
       (common-lisp:cons "imageScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-scan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-lifecycle-policy-preview-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-request-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-lifecycle-policy-preview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-lifecycle-policy-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-lifecycle-policy-preview-request
                    'make-start-lifecycle-policy-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-lifecycle-policy-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-lifecycle-policy-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-lifecycle-policy-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-lifecycle-policy-preview-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-policy-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-response-lifecycle-policy-text
                         :shape "LifecyclePolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy-preview-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-lifecycle-policy-preview-response-status
                         :shape "LifecyclePolicyPreviewStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-lifecycle-policy-preview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-lifecycle-policy-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-lifecycle-policy-preview-response
                    'make-start-lifecycle-policy-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-lifecycle-policy-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-lifecycle-policy-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "lifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-lifecycle-policy-preview-response))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-status () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unable-to-access-secret-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-access-secret-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unable-to-access-secret-exception
                    'unable-to-access-secret-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unable-to-decrypt-secret-value-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-decrypt-secret-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unable-to-decrypt-secret-value-exception
                    'unable-to-decrypt-secret-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unable-to-get-upstream-image-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-get-upstream-image-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unable-to-get-upstream-image-exception
                    'unable-to-get-upstream-image-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unable-to-get-upstream-layer-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unable-to-get-upstream-layer-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unable-to-get-upstream-layer-exception
                    'unable-to-get-upstream-layer-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-image-type-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-image-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-image-type-exception
                    'unsupported-image-type-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-upstream-registry-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-upstream-registry-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-upstream-registry-exception
                    'unsupported-upstream-registry-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pull-through-cache-rule-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform
                         (common-lisp:error ":ecrrepositoryprefix is required")
                         :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-request-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         (common-lisp:error ":credentialarn is required") :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-request-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pull-through-cache-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pull-through-cache-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pull-through-cache-rule-request
                    'make-update-pull-through-cache-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pull-through-cache-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pull-through-cache-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pull-through-cache-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pull-through-cache-rule-response common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-response-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-response-updated-at
                         :shape "UpdatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-update-pull-through-cache-rule-response-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pull-through-cache-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pull-through-cache-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pull-through-cache-rule-response
                    'make-update-pull-through-cache-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pull-through-cache-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pull-through-cache-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pull-through-cache-rule-response))
   common-lisp:nil))
(common-lisp:deftype updated-timestamp () 'common-lisp:string)
(common-lisp:deftype upload-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upload-layer-part-request common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-request-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":uploadid is required") :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-upload-layer-part-request-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-first-byte :initarg :part-first-byte :initform
                         (common-lisp:error ":partfirstbyte is required") :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-upload-layer-part-request-part-first-byte
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-last-byte :initarg :part-last-byte :initform
                         (common-lisp:error ":partlastbyte is required") :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-upload-layer-part-request-part-last-byte
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-part-blob :initarg :layer-part-blob :initform
                         (common-lisp:error ":layerpartblob is required") :type
                         (common-lisp:or layer-part-blob common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-request-layer-part-blob
                         :shape "LayerPartBlob" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-layer-part-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-layer-part-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-layer-part-request
                    'make-upload-layer-part-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-first-byte))
      (common-lisp:list
       (common-lisp:cons "partFirstByte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-last-byte))
      (common-lisp:list
       (common-lisp:cons "partLastByte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-part-blob))
      (common-lisp:list
       (common-lisp:cons "layerPartBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-layer-part-response common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-upload-layer-part-response-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id common-lisp:null) :accessor
                         struct-shape-upload-layer-part-response-upload-id
                         :shape "UploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-byte-received :initarg :last-byte-received
                         :initform common-lisp:nil :type
                         (common-lisp:or part-size common-lisp:null) :accessor
                         struct-shape-upload-layer-part-response-last-byte-received
                         :shape "PartSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-layer-part-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-layer-part-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-layer-part-response
                    'make-upload-layer-part-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-byte-received))
      (common-lisp:list
       (common-lisp:cons "lastByteReceived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-layer-part-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition upload-not-found-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       upload-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'upload-not-found-exception
                    'upload-not-found-exception-message)))
(common-lisp:deftype upstream-registry () 'common-lisp:string)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-pull-through-cache-rule-request common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform
                         (common-lisp:error ":ecrrepositoryprefix is required")
                         :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-request-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-request-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-pull-through-cache-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-pull-through-cache-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-pull-through-cache-rule-request
                    'make-validate-pull-through-cache-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-pull-through-cache-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-pull-through-cache-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-pull-through-cache-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-pull-through-cache-rule-response
                       common-lisp:nil
                       ((ecr-repository-prefix :initarg :ecr-repository-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          pull-through-cache-rule-repository-prefix
                          common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-response-ecr-repository-prefix
                         :shape "PullThroughCacheRuleRepositoryPrefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-response-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upstream-registry-url :initarg :upstream-registry-url
                         :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-validate-pull-through-cache-rule-response-upstream-registry-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (credential-arn :initarg :credential-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or credential-arn common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-response-credential-arn
                         :shape "CredentialArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-valid :initarg :is-valid :initform common-lisp:nil
                         :type
                         (common-lisp:or is-ptcrule-valid common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-response-is-valid
                         :shape "IsPTCRuleValid" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure :initarg :failure :initform common-lisp:nil
                         :type
                         (common-lisp:or ptcvalidate-failure common-lisp:null)
                         :accessor
                         struct-shape-validate-pull-through-cache-rule-response-failure
                         :shape "PTCValidateFailure" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-pull-through-cache-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-pull-through-cache-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-pull-through-cache-rule-response
                    'make-validate-pull-through-cache-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-pull-through-cache-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-pull-through-cache-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-repository-prefix))
      (common-lisp:list
       (common-lisp:cons "ecrRepositoryPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "registryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upstream-registry-url))
      (common-lisp:list
       (common-lisp:cons "upstreamRegistryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-arn))
      (common-lisp:list
       (common-lisp:cons "credentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-valid))
      (common-lisp:list
       (common-lisp:cons "isValid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure))
      (common-lisp:list
       (common-lisp:cons "failure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-pull-through-cache-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (ecr-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype vulnerability-id () 'common-lisp:string)
(common-lisp:deftype vulnerability-source-update-timestamp ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vulnerable-package common-lisp:nil
                       ((arch :initarg :arch :initform common-lisp:nil :type
                         (common-lisp:or arch common-lisp:null) :accessor
                         struct-shape-vulnerable-package-arch :shape "Arch"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (epoch :initarg :epoch :initform common-lisp:nil :type
                         (common-lisp:or epoch common-lisp:null) :accessor
                         struct-shape-vulnerable-package-epoch :shape "Epoch"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-path :initarg :file-path :initform
                         common-lisp:nil :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         struct-shape-vulnerable-package-file-path :shape
                         "FilePath" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or vulnerable-package-name
                                         common-lisp:null)
                         :accessor struct-shape-vulnerable-package-name :shape
                         "VulnerablePackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-manager :initarg :package-manager :initform
                         common-lisp:nil :type
                         (common-lisp:or package-manager common-lisp:null)
                         :accessor
                         struct-shape-vulnerable-package-package-manager :shape
                         "PackageManager" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (release :initarg :release :initform common-lisp:nil
                         :type (common-lisp:or release common-lisp:null)
                         :accessor struct-shape-vulnerable-package-release
                         :shape "Release" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-layer-hash :initarg :source-layer-hash
                         :initform common-lisp:nil :type
                         (common-lisp:or source-layer-hash common-lisp:null)
                         :accessor
                         struct-shape-vulnerable-package-source-layer-hash
                         :shape "SourceLayerHash" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-vulnerable-package-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vulnerable-package
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vulnerable-package
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vulnerable-package 'make-vulnerable-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-manager))
      (common-lisp:list
       (common-lisp:cons "packageManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "sourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerable-package))
   common-lisp:nil))
(common-lisp:deftype vulnerable-package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vulnerable-packages-list ()
   '(trivial-types:proper-list vulnerable-package))
 (common-lisp:defun make-vulnerable-packages-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerable-package))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun batch-check-layer-availability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     layer-digests)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name layer-digests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-check-layer-availability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchCheckLayerAvailability"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-check-layer-availability))
(common-lisp:progn
 (common-lisp:defun batch-delete-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-ids)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-image))
(common-lisp:progn
 (common-lisp:defun batch-get-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-ids
                     accepted-media-types)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-ids
     accepted-media-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-image))
(common-lisp:progn
 (common-lisp:defun batch-get-repository-scanning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-names)
   (common-lisp:declare (common-lisp:ignorable repository-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-repository-scanning-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetRepositoryScanningConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-repository-scanning-configuration))
(common-lisp:progn
 (common-lisp:defun complete-layer-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name upload-id
                     layer-digests)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name upload-id
     layer-digests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-layer-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CompleteLayerUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'complete-layer-upload))
(common-lisp:progn
 (common-lisp:defun create-pull-through-cache-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecr-repository-prefix
                     upstream-registry-url registry-id upstream-registry
                     credential-arn)
   (common-lisp:declare
    (common-lisp:ignorable ecr-repository-prefix upstream-registry-url
     registry-id upstream-registry credential-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-pull-through-cache-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePullThroughCacheRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-pull-through-cache-rule))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name tags
                     image-tag-mutability image-scanning-configuration
                     encryption-configuration)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name tags
     image-tag-mutability image-scanning-configuration
     encryption-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun delete-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun delete-pull-through-cache-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecr-repository-prefix registry-id)
   (common-lisp:declare
    (common-lisp:ignorable ecr-repository-prefix registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-pull-through-cache-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePullThroughCacheRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-pull-through-cache-rule))
(common-lisp:progn
 (common-lisp:defun delete-registry-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ecr-request :method "POST" :path "/"
                                :operation "DeleteRegistryPolicy"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-registry-policy))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name force)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun delete-repository-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepositoryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-repository-policy))
(common-lisp:progn
 (common-lisp:defun describe-image-replication-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name image-id registry-id)
   (common-lisp:declare
    (common-lisp:ignorable repository-name image-id registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-image-replication-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImageReplicationStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-image-replication-status))
(common-lisp:progn
 (common-lisp:defun describe-image-scan-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-id
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-image-scan-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImageScanFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-image-scan-findings))
(common-lisp:progn
 (common-lisp:defun describe-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-ids
                     next-token max-results filter)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-ids next-token
     max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-images))
(common-lisp:progn
 (common-lisp:defun describe-pull-through-cache-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id ecr-repository-prefixes
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable registry-id ecr-repository-prefixes next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pull-through-cache-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePullThroughCacheRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-pull-through-cache-rules))
(common-lisp:progn
 (common-lisp:defun describe-registry ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ecr-request :method "POST" :path "/"
                                :operation "DescribeRegistry"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-registry))
(common-lisp:progn
 (common-lisp:defun describe-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-names next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-names next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-repositories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRepositories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-repositories))
(common-lisp:progn
 (common-lisp:defun get-authorization-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-ids)
   (common-lisp:declare (common-lisp:ignorable registry-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-authorization-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAuthorizationToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-authorization-token))
(common-lisp:progn
 (common-lisp:defun get-download-url-for-layer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name layer-digest)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name layer-digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-download-url-for-layer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDownloadUrlForLayer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-download-url-for-layer))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policy-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-ids
                     next-token max-results filter)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-ids next-token
     max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-lifecycle-policy-preview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLifecyclePolicyPreview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lifecycle-policy-preview))
(common-lisp:progn
 (common-lisp:defun get-registry-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ecr-request :method "POST" :path "/"
                                :operation "GetRegistryPolicy"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-registry-policy))
(common-lisp:progn
 (common-lisp:defun get-registry-scanning-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ecr-request :method "POST" :path "/"
                                :operation "GetRegistryScanningConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-registry-scanning-configuration))
(common-lisp:progn
 (common-lisp:defun get-repository-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepositoryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository-policy))
(common-lisp:progn
 (common-lisp:defun initiate-layer-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name)
   (common-lisp:declare (common-lisp:ignorable registry-id repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-initiate-layer-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "InitiateLayerUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'initiate-layer-upload))
(common-lisp:progn
 (common-lisp:defun list-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name next-token
                     max-results filter)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name next-token max-results
     filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-images))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     image-manifest image-manifest-media-type image-tag
                     image-digest)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-manifest
     image-manifest-media-type image-tag image-digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutImage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-image))
(common-lisp:progn
 (common-lisp:defun put-image-scanning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name
     image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-image-scanning-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutImageScanningConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-image-scanning-configuration))
(common-lisp:progn
 (common-lisp:defun put-image-tag-mutability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     image-tag-mutability)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-tag-mutability))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-tag-mutability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutImageTagMutability"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-image-tag-mutability))
(common-lisp:progn
 (common-lisp:defun put-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     lifecycle-policy-text)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name lifecycle-policy-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun put-registry-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-text)
   (common-lisp:declare (common-lisp:ignorable policy-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-registry-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRegistryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-registry-policy))
(common-lisp:progn
 (common-lisp:defun put-registry-scanning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scan-type rules)
   (common-lisp:declare (common-lisp:ignorable scan-type rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-registry-scanning-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRegistryScanningConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-registry-scanning-configuration))
(common-lisp:progn
 (common-lisp:defun put-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-configuration)
   (common-lisp:declare (common-lisp:ignorable replication-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-replication-configuration))
(common-lisp:progn
 (common-lisp:defun set-repository-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name policy-text
                     force)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name policy-text force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-repository-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetRepositoryPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-repository-policy))
(common-lisp:progn
 (common-lisp:defun start-image-scan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name image-id)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name image-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-image-scan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartImageScan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-image-scan))
(common-lisp:progn
 (common-lisp:defun start-lifecycle-policy-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name
                     lifecycle-policy-text)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name lifecycle-policy-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-lifecycle-policy-preview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartLifecyclePolicyPreview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-lifecycle-policy-preview))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-pull-through-cache-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id ecr-repository-prefix
                     credential-arn)
   (common-lisp:declare
    (common-lisp:ignorable registry-id ecr-repository-prefix credential-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-pull-through-cache-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePullThroughCacheRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-pull-through-cache-rule))
(common-lisp:progn
 (common-lisp:defun upload-layer-part
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id repository-name upload-id
                     part-first-byte part-last-byte layer-part-blob)
   (common-lisp:declare
    (common-lisp:ignorable registry-id repository-name upload-id
     part-first-byte part-last-byte layer-part-blob))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-layer-part-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadLayerPart"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upload-layer-part))
(common-lisp:progn
 (common-lisp:defun validate-pull-through-cache-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecr-repository-prefix registry-id)
   (common-lisp:declare
    (common-lisp:ignorable ecr-repository-prefix registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-pull-through-cache-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecr-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ValidatePullThroughCacheRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-pull-through-cache-rule))
