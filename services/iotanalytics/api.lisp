;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/iotanalytics/api (:use)
                             (:nicknames #:aws/iotanalytics)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iotanalytics/api)
(common-lisp:progn
 (common-lisp:define-condition iotanalytics-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iotanalytics-error))
(common-lisp:progn
 (common-lisp:defclass iotanalytics-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "iotanalytics" :api-version
                        "2017-11-27" :host-prefix "iotanalytics" :signing-name
                        "iotanalytics" :global-host common-lisp:nil))
 (common-lisp:export 'iotanalytics-request))
(common-lisp:defvar *error-map*
  '(("InternalFailureException" . internal-failure-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:deftype activity-batch-size () 'common-lisp:integer)
(common-lisp:deftype activity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-attributes-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-add-attributes-activity-name
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attribute-name-mapping
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-attributes-activity-attributes :shape
                         "AttributeNameMapping" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-add-attributes-activity-next
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-attributes-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-attributes-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-attributes-activity 'make-add-attributes-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-activity))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-name-mapping () 'common-lisp:hash-table)
 (common-lisp:defun make-attribute-name-mapping
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype attribute-names ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun make-attribute-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-put-message-error-entries ()
   '(trivial-types:proper-list batch-put-message-error-entry))
 (common-lisp:defun make-batch-put-message-error-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-message-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-put-message-error-entry common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-batch-put-message-error-entry-message-id
                         :shape "MessageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-batch-put-message-error-entry-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-batch-put-message-error-entry-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-message-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-message-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-message-error-entry
                    'make-batch-put-message-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-message-request common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-batch-put-message-request-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (messages :initarg :messages :initform
                         (common-lisp:error ":messages is required") :type
                         (common-lisp:or messages common-lisp:null) :accessor
                         struct-shape-batch-put-message-request-messages :shape
                         "Messages" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-message-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-put-message-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-message-request
                    'make-batch-put-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-message-response common-lisp:nil
                       ((batch-put-message-error-entries :initarg
                         :batch-put-message-error-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-put-message-error-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-put-message-response-batch-put-message-error-entries
                         :shape "BatchPutMessageErrorEntries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-put-message-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-put-message-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-put-message-response
                    'make-batch-put-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-put-message-error-entries))
      (common-lisp:list
       (common-lisp:cons "batchPutMessageErrorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-message-response))
   common-lisp:nil))
(common-lisp:deftype bucket-key-expression () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-pipeline-reprocessing-request common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-pipeline-reprocessing-request-pipeline-name
                         :shape "PipelineName" :location "uri" :location-name
                         "pipelineName")
                        (reprocessing-id :initarg :reprocessing-id :initform
                         (common-lisp:error ":reprocessingid is required")
                         :type
                         (common-lisp:or reprocessing-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-pipeline-reprocessing-request-reprocessing-id
                         :shape "ReprocessingId" :location "uri" :location-name
                         "reprocessingId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-pipeline-reprocessing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-pipeline-reprocessing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-pipeline-reprocessing-request
                    'make-cancel-pipeline-reprocessing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-pipeline-reprocessing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-pipeline-reprocessing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-pipeline-reprocessing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-pipeline-reprocessing-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-pipeline-reprocessing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-pipeline-reprocessing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-pipeline-reprocessing-response
                    'make-cancel-pipeline-reprocessing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-pipeline-reprocessing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-pipeline-reprocessing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-pipeline-reprocessing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor struct-shape-channel-name :shape
                         "ChannelName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage :initarg :storage :initform common-lisp:nil
                         :type
                         (common-lisp:or channel-storage common-lisp:null)
                         :accessor struct-shape-channel-storage :shape
                         "ChannelStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or channel-arn common-lisp:null)
                         :accessor struct-shape-channel-arn :shape "ChannelArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or channel-status common-lisp:null)
                         :accessor struct-shape-channel-status :shape
                         "ChannelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor struct-shape-channel-retention-period :shape
                         "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-channel-creation-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-channel-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-message-arrival-time :initarg
                         :last-message-arrival-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-channel-last-message-arrival-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-message-arrival-time))
      (common-lisp:list
       (common-lisp:cons "lastMessageArrivalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-channel-activity-name :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor struct-shape-channel-activity-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-channel-activity-next :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-activity 'make-channel-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-activity))
   common-lisp:nil))
(common-lisp:deftype channel-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-messages common-lisp:nil
                       ((s3paths :initarg :s3paths :initform common-lisp:nil
                         :type
                         (common-lisp:or s3path-channel-messages
                                         common-lisp:null)
                         :accessor struct-shape-channel-messages-s3paths :shape
                         "S3PathChannelMessages" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-messages
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-messages
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-messages 'make-channel-messages))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-messages))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-messages))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3paths))
      (common-lisp:list
       (common-lisp:cons "s3Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-messages))
   common-lisp:nil))
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-statistics common-lisp:nil
                       ((size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or estimated-resource-size
                                         common-lisp:null)
                         :accessor struct-shape-channel-statistics-size :shape
                         "EstimatedResourceSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-statistics 'make-channel-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-statistics))
   common-lisp:nil))
(common-lisp:deftype channel-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-storage common-lisp:nil
                       ((service-managed-s3 :initarg :service-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or service-managed-channel-s3storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-channel-storage-service-managed-s3 :shape
                         "ServiceManagedChannelS3Storage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (customer-managed-s3 :initarg :customer-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or customer-managed-channel-s3storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-channel-storage-customer-managed-s3
                         :shape "CustomerManagedChannelS3Storage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'channel-storage 'make-channel-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-managed-s3))
      (common-lisp:list
       (common-lisp:cons "serviceManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-managed-s3))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel-storage-summary common-lisp:nil
                       ((service-managed-s3 :initarg :service-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          service-managed-channel-s3storage-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-channel-storage-summary-service-managed-s3
                         :shape "ServiceManagedChannelS3StorageSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-managed-s3 :initarg :customer-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          customer-managed-channel-s3storage-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-channel-storage-summary-customer-managed-s3
                         :shape "CustomerManagedChannelS3StorageSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'channel-storage-summary 'make-channel-storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-storage-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-managed-s3))
      (common-lisp:list
       (common-lisp:cons "serviceManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-managed-s3))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-summaries ()
   '(trivial-types:proper-list channel-summary))
 (common-lisp:defun make-channel-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass channel-summary common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor struct-shape-channel-summary-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-storage :initarg :channel-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-storage-summary
                                         common-lisp:null)
                         :accessor struct-shape-channel-summary-channel-storage
                         :shape "ChannelStorageSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or channel-status common-lisp:null)
                         :accessor struct-shape-channel-summary-status :shape
                         "ChannelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-channel-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-channel-summary-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-message-arrival-time :initarg
                         :last-message-arrival-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-channel-summary-last-message-arrival-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'channel-summary 'make-channel-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-storage))
      (common-lisp:list
       (common-lisp:cons "channelStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-message-arrival-time))
      (common-lisp:list
       (common-lisp:cons "lastMessageArrivalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor struct-shape-column-name :shape "ColumnName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or column-data-type common-lisp:null)
                         :accessor struct-shape-column-type :shape
                         "ColumnDataType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:deftype column-data-type () 'common-lisp:string)
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype columns () '(trivial-types:proper-list column))
 (common-lisp:defun make-columns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-dataset-action common-lisp:nil
                       ((image :initarg :image :initform
                         (common-lisp:error ":image is required") :type
                         (common-lisp:or image common-lisp:null) :accessor
                         struct-shape-container-dataset-action-image :shape
                         "Image" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":executionrolearn is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-container-dataset-action-execution-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-configuration :initarg
                         :resource-configuration :initform
                         (common-lisp:error
                          ":resourceconfiguration is required")
                         :type
                         (common-lisp:or resource-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-dataset-action-resource-configuration
                         :shape "ResourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (variables :initarg :variables :initform
                         common-lisp:nil :type
                         (common-lisp:or variables common-lisp:null) :accessor
                         struct-shape-container-dataset-action-variables :shape
                         "Variables" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-dataset-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-dataset-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-dataset-action 'make-container-dataset-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-dataset-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-dataset-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-configuration))
      (common-lisp:list
       (common-lisp:cons "resourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-dataset-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-request common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-storage :initarg :channel-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-storage common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-channel-storage
                         :shape "ChannelStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-create-channel-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-channel-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-channel-request 'make-create-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-storage))
      (common-lisp:list
       (common-lisp:cons "channelStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-response common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-create-channel-response-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-arn :initarg :channel-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-arn common-lisp:null)
                         :accessor
                         struct-shape-create-channel-response-channel-arn
                         :shape "ChannelArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-create-channel-response-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-channel-response 'make-create-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "channelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-content-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-content-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-content-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-content-request-version-id
                         :shape "DatasetContentVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dataset-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-content-request
                    'make-create-dataset-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-content-response common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-content-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-content-response-version-id
                         :shape "DatasetContentVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dataset-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-content-response
                    'make-create-dataset-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-name
                         :shape "DatasetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or dataset-actions common-lisp:null)
                         :accessor struct-shape-create-dataset-request-actions
                         :shape "DatasetActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (triggers :initarg :triggers :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-triggers common-lisp:null)
                         :accessor struct-shape-create-dataset-request-triggers
                         :shape "DatasetTriggers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-delivery-rules :initarg
                         :content-delivery-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-delivery-rules
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-content-delivery-rules
                         :shape "DatasetContentDeliveryRules" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versioning-configuration :initarg
                         :versioning-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or versioning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-versioning-configuration
                         :shape "VersioningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dataset-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (late-data-rules :initarg :late-data-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or late-data-rules common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-late-data-rules
                         :shape "LateDataRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "datasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-delivery-rules))
      (common-lisp:list
       (common-lisp:cons "contentDeliveryRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "versioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'late-data-rules))
      (common-lisp:list
       (common-lisp:cons "lateDataRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-response common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-response-dataset-name
                         :shape "DatasetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-response-dataset-arn
                         :shape "DatasetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-response-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "datasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "datasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datastore-request common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-datastore-name
                         :shape "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-storage :initarg :datastore-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-storage common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-datastore-storage
                         :shape "DatastoreStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-datastore-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-format-configuration :initarg
                         :file-format-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or file-format-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-file-format-configuration
                         :shape "FileFormatConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (datastore-partitions :initarg :datastore-partitions
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-partitions common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-request-datastore-partitions
                         :shape "DatastorePartitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-datastore-request 'make-create-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-storage))
      (common-lisp:list
       (common-lisp:cons "datastoreStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-format-configuration))
      (common-lisp:list
       (common-lisp:cons "fileFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-partitions))
      (common-lisp:list
       (common-lisp:cons "datastorePartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datastore-response common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-response-datastore-name
                         :shape "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-arn :initarg :datastore-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-arn common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-response-datastore-arn
                         :shape "DatastoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-create-datastore-response-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-datastore-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-datastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-datastore-response
                    'make-create-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "datastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-request common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-create-pipeline-request-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-activities :initarg :pipeline-activities
                         :initform
                         (common-lisp:error ":pipelineactivities is required")
                         :type
                         (common-lisp:or pipeline-activities common-lisp:null)
                         :accessor
                         struct-shape-create-pipeline-request-pipeline-activities
                         :shape "PipelineActivities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-pipeline-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pipeline-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-request 'make-create-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-activities))
      (common-lisp:list
       (common-lisp:cons "pipelineActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-response common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-create-pipeline-response-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-arn :initarg :pipeline-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-arn common-lisp:null)
                         :accessor
                         struct-shape-create-pipeline-response-pipeline-arn
                         :shape "PipelineArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-pipeline-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-response 'make-create-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-managed-channel-s3storage common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-channel-s3storage-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-channel-s3storage-key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-customer-managed-channel-s3storage-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-managed-channel-s3storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-managed-channel-s3storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-managed-channel-s3storage
                    'make-customer-managed-channel-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-channel-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-channel-s3storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-channel-s3storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-managed-channel-s3storage-summary
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-channel-s3storage-summary-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-channel-s3storage-summary-key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-channel-s3storage-summary-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-managed-channel-s3storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-managed-channel-s3storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-managed-channel-s3storage-summary
                    'make-customer-managed-channel-s3storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-channel-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-channel-s3storage-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-channel-s3storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-managed-datastore-s3storage common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-datastore-s3storage-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-datastore-s3storage-key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-customer-managed-datastore-s3storage-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-managed-datastore-s3storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-managed-datastore-s3storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-managed-datastore-s3storage
                    'make-customer-managed-datastore-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-datastore-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-datastore-s3storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-datastore-s3storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-managed-datastore-s3storage-summary
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-datastore-s3storage-summary-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-datastore-s3storage-summary-key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-customer-managed-datastore-s3storage-summary-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-managed-datastore-s3storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-managed-datastore-s3storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-managed-datastore-s3storage-summary
                    'make-customer-managed-datastore-s3storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-datastore-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-datastore-s3storage-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-datastore-s3storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor struct-shape-dataset-name :shape
                         "DatasetName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor struct-shape-dataset-arn :shape "DatasetArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-actions common-lisp:null)
                         :accessor struct-shape-dataset-actions :shape
                         "DatasetActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (triggers :initarg :triggers :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-triggers common-lisp:null)
                         :accessor struct-shape-dataset-triggers :shape
                         "DatasetTriggers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-delivery-rules :initarg
                         :content-delivery-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-delivery-rules
                                         common-lisp:null)
                         :accessor struct-shape-dataset-content-delivery-rules
                         :shape "DatasetContentDeliveryRules" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-dataset-status :shape
                         "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-creation-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor struct-shape-dataset-retention-period :shape
                         "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versioning-configuration :initarg
                         :versioning-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or versioning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-versioning-configuration :shape
                         "VersioningConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (late-data-rules :initarg :late-data-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or late-data-rules common-lisp:null)
                         :accessor struct-shape-dataset-late-data-rules :shape
                         "LateDataRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset 'make-dataset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-delivery-rules))
      (common-lisp:list
       (common-lisp:cons "contentDeliveryRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "versioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'late-data-rules))
      (common-lisp:list
       (common-lisp:cons "lateDataRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-action common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-action-name common-lisp:null)
                         :accessor struct-shape-dataset-action-action-name
                         :shape "DatasetActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-action :initarg :query-action :initform
                         common-lisp:nil :type
                         (common-lisp:or sql-query-dataset-action
                                         common-lisp:null)
                         :accessor struct-shape-dataset-action-query-action
                         :shape "SqlQueryDatasetAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (container-action :initarg :container-action :initform
                         common-lisp:nil :type
                         (common-lisp:or container-dataset-action
                                         common-lisp:null)
                         :accessor struct-shape-dataset-action-container-action
                         :shape "ContainerDatasetAction" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-action 'make-dataset-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-action))
      (common-lisp:list
       (common-lisp:cons "queryAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-action))
      (common-lisp:list
       (common-lisp:cons "containerAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-action))
   common-lisp:nil))
(common-lisp:deftype dataset-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-action-summaries ()
   '(trivial-types:proper-list dataset-action-summary))
 (common-lisp:defun make-dataset-action-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-action-summary common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-action-name common-lisp:null)
                         :accessor
                         struct-shape-dataset-action-summary-action-name :shape
                         "DatasetActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-action-type common-lisp:null)
                         :accessor
                         struct-shape-dataset-action-summary-action-type :shape
                         "DatasetActionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-action-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-action-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-action-summary 'make-dataset-action-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-action-summary))
   common-lisp:nil))
(common-lisp:deftype dataset-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-actions ()
   '(trivial-types:proper-list dataset-action))
 (common-lisp:defun make-dataset-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dataset-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dataset-content-delivery-destination common-lisp:nil
                       ((iot-events-destination-configuration :initarg
                         :iot-events-destination-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or iot-events-destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-content-delivery-destination-iot-events-destination-configuration
                         :shape "IotEventsDestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3destination-configuration :initarg
                         :s3destination-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or s3destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-content-delivery-destination-s3destination-configuration
                         :shape "S3DestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-content-delivery-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dataset-content-delivery-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-content-delivery-destination
                    'make-dataset-content-delivery-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-delivery-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-delivery-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iot-events-destination-configuration))
      (common-lisp:list
       (common-lisp:cons "iotEventsDestinationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3destination-configuration))
      (common-lisp:list
       (common-lisp:cons "s3DestinationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-delivery-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-content-delivery-rule common-lisp:nil
                       ((entry-name :initarg :entry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or entry-name common-lisp:null) :accessor
                         struct-shape-dataset-content-delivery-rule-entry-name
                         :shape "EntryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or dataset-content-delivery-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-dataset-content-delivery-rule-destination
                         :shape "DatasetContentDeliveryDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-content-delivery-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dataset-content-delivery-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-content-delivery-rule
                    'make-dataset-content-delivery-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-delivery-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-delivery-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-name))
      (common-lisp:list
       (common-lisp:cons "entryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-delivery-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-content-delivery-rules ()
   '(trivial-types:proper-list dataset-content-delivery-rule))
 (common-lisp:defun make-dataset-content-delivery-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dataset-content-delivery-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dataset-content-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dataset-content-status common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or dataset-content-state
                                         common-lisp:null)
                         :accessor struct-shape-dataset-content-status-state
                         :shape "DatasetContentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or reason common-lisp:null)
                         :accessor struct-shape-dataset-content-status-reason
                         :shape "Reason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-content-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-content-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-content-status 'make-dataset-content-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-content-summaries ()
   '(trivial-types:proper-list dataset-content-summary))
 (common-lisp:defun make-dataset-content-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-content-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-content-summary common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-version
                                         common-lisp:null)
                         :accessor struct-shape-dataset-content-summary-version
                         :shape "DatasetContentVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-status
                                         common-lisp:null)
                         :accessor struct-shape-dataset-content-summary-status
                         :shape "DatasetContentStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-content-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-time :initarg :schedule-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-content-summary-schedule-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completion-time :initarg :completion-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-content-summary-completion-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-content-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-content-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-content-summary 'make-dataset-content-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-time))
      (common-lisp:list
       (common-lisp:cons "scheduleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-summary))
   common-lisp:nil))
(common-lisp:deftype dataset-content-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dataset-content-version-value common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-dataset-content-version-value-dataset-name
                         :shape "DatasetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-content-version-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dataset-content-version-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-content-version-value
                    'make-dataset-content-version-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-version-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-version-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "datasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-content-version-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-entries ()
   '(trivial-types:proper-list dataset-entry))
 (common-lisp:defun make-dataset-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-entry common-lisp:nil
                       ((entry-name :initarg :entry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or entry-name common-lisp:null) :accessor
                         struct-shape-dataset-entry-entry-name :shape
                         "EntryName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-uri :initarg :data-uri :initform common-lisp:nil
                         :type (common-lisp:or presigned-uri common-lisp:null)
                         :accessor struct-shape-dataset-entry-data-uri :shape
                         "PresignedURI" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-entry 'make-dataset-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-name))
      (common-lisp:list
       (common-lisp:cons "entryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-uri))
      (common-lisp:list
       (common-lisp:cons "dataURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-entry))
   common-lisp:nil))
(common-lisp:deftype dataset-name () 'common-lisp:string)
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-summaries ()
   '(trivial-types:proper-list dataset-summary))
 (common-lisp:defun make-dataset-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-summary common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor struct-shape-dataset-summary-dataset-name
                         :shape "DatasetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-dataset-summary-status :shape
                         "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-summary-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (triggers :initarg :triggers :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-triggers common-lisp:null)
                         :accessor struct-shape-dataset-summary-triggers :shape
                         "DatasetTriggers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-action-summaries
                                         common-lisp:null)
                         :accessor struct-shape-dataset-summary-actions :shape
                         "DatasetActionSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-summary 'make-dataset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "datasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-trigger common-lisp:nil
                       ((schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or schedule common-lisp:null)
                         :accessor struct-shape-dataset-trigger-schedule :shape
                         "Schedule" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset :initarg :dataset :initform common-lisp:nil
                         :type
                         (common-lisp:or triggering-dataset common-lisp:null)
                         :accessor struct-shape-dataset-trigger-dataset :shape
                         "TriggeringDataset" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-trigger 'make-dataset-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset))
      (common-lisp:list
       (common-lisp:cons "dataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-triggers ()
   '(trivial-types:proper-list dataset-trigger))
 (common-lisp:defun make-dataset-triggers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass datastore common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor struct-shape-datastore-name :shape
                         "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage :initarg :storage :initform common-lisp:nil
                         :type
                         (common-lisp:or datastore-storage common-lisp:null)
                         :accessor struct-shape-datastore-storage :shape
                         "DatastoreStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or datastore-arn common-lisp:null)
                         :accessor struct-shape-datastore-arn :shape
                         "DatastoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor struct-shape-datastore-status :shape
                         "DatastoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor struct-shape-datastore-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-datastore-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-datastore-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-message-arrival-time :initarg
                         :last-message-arrival-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-datastore-last-message-arrival-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-format-configuration :initarg
                         :file-format-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or file-format-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-datastore-file-format-configuration
                         :shape "FileFormatConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (datastore-partitions :initarg :datastore-partitions
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-partitions common-lisp:null)
                         :accessor struct-shape-datastore-datastore-partitions
                         :shape "DatastorePartitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'datastore 'make-datastore))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-message-arrival-time))
      (common-lisp:list
       (common-lisp:cons "lastMessageArrivalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-format-configuration))
      (common-lisp:list
       (common-lisp:cons "fileFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-partitions))
      (common-lisp:list
       (common-lisp:cons "datastorePartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datastore-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-datastore-activity-name :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-datastore-activity-datastore-name :shape
                         "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-activity 'make-datastore-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-activity))
   common-lisp:nil))
(common-lisp:deftype datastore-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datastore-iot-site-wise-multi-layer-storage
                       common-lisp:nil
                       ((customer-managed-s3storage :initarg
                         :customer-managed-s3storage :initform
                         (common-lisp:error
                          ":customermanageds3storage is required")
                         :type
                         (common-lisp:or
                          iot-site-wise-customer-managed-datastore-s3storage
                          common-lisp:null)
                         :accessor
                         struct-shape-datastore-iot-site-wise-multi-layer-storage-customer-managed-s3storage
                         :shape "IotSiteWiseCustomerManagedDatastoreS3Storage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-iot-site-wise-multi-layer-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'datastore-iot-site-wise-multi-layer-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-iot-site-wise-multi-layer-storage
                    'make-datastore-iot-site-wise-multi-layer-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datastore-iot-site-wise-multi-layer-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datastore-iot-site-wise-multi-layer-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-s3storage))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datastore-iot-site-wise-multi-layer-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datastore-iot-site-wise-multi-layer-storage-summary
                       common-lisp:nil
                       ((customer-managed-s3storage :initarg
                         :customer-managed-s3storage :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          iot-site-wise-customer-managed-datastore-s3storage-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-datastore-iot-site-wise-multi-layer-storage-summary-customer-managed-s3storage
                         :shape
                         "IotSiteWiseCustomerManagedDatastoreS3StorageSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-iot-site-wise-multi-layer-storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'datastore-iot-site-wise-multi-layer-storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-iot-site-wise-multi-layer-storage-summary
                    'make-datastore-iot-site-wise-multi-layer-storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datastore-iot-site-wise-multi-layer-storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datastore-iot-site-wise-multi-layer-storage-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-s3storage))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datastore-iot-site-wise-multi-layer-storage-summary))
   common-lisp:nil))
(common-lisp:deftype datastore-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datastore-partition common-lisp:nil
                       ((attribute-partition :initarg :attribute-partition
                         :initform common-lisp:nil :type
                         (common-lisp:or partition common-lisp:null) :accessor
                         struct-shape-datastore-partition-attribute-partition
                         :shape "Partition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp-partition :initarg :timestamp-partition
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-partition common-lisp:null)
                         :accessor
                         struct-shape-datastore-partition-timestamp-partition
                         :shape "TimestampPartition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-partition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-partition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-partition 'make-datastore-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-partition))
      (common-lisp:list
       (common-lisp:cons "attributePartition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-partition))
      (common-lisp:list
       (common-lisp:cons "timestampPartition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-partition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datastore-partitions common-lisp:nil
                       ((partitions :initarg :partitions :initform
                         common-lisp:nil :type
                         (common-lisp:or partitions common-lisp:null) :accessor
                         struct-shape-datastore-partitions-partitions :shape
                         "Partitions" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-partitions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-partitions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-partitions 'make-datastore-partitions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-partitions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-partitions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-partitions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datastore-statistics common-lisp:nil
                       ((size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or estimated-resource-size
                                         common-lisp:null)
                         :accessor struct-shape-datastore-statistics-size
                         :shape "EstimatedResourceSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-statistics 'make-datastore-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-statistics))
   common-lisp:nil))
(common-lisp:deftype datastore-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datastore-storage common-lisp:nil
                       ((service-managed-s3 :initarg :service-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or service-managed-datastore-s3storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-datastore-storage-service-managed-s3
                         :shape "ServiceManagedDatastoreS3Storage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (customer-managed-s3 :initarg :customer-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or customer-managed-datastore-s3storage
                                         common-lisp:null)
                         :accessor
                         struct-shape-datastore-storage-customer-managed-s3
                         :shape "CustomerManagedDatastoreS3Storage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iot-site-wise-multi-layer-storage :initarg
                         :iot-site-wise-multi-layer-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          datastore-iot-site-wise-multi-layer-storage
                          common-lisp:null)
                         :accessor
                         struct-shape-datastore-storage-iot-site-wise-multi-layer-storage
                         :shape "DatastoreIotSiteWiseMultiLayerStorage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-storage 'make-datastore-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-managed-s3))
      (common-lisp:list
       (common-lisp:cons "serviceManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-managed-s3))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iot-site-wise-multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "iotSiteWiseMultiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass datastore-storage-summary common-lisp:nil
                       ((service-managed-s3 :initarg :service-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          service-managed-datastore-s3storage-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-datastore-storage-summary-service-managed-s3
                         :shape "ServiceManagedDatastoreS3StorageSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (customer-managed-s3 :initarg :customer-managed-s3
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          customer-managed-datastore-s3storage-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-datastore-storage-summary-customer-managed-s3
                         :shape "CustomerManagedDatastoreS3StorageSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iot-site-wise-multi-layer-storage :initarg
                         :iot-site-wise-multi-layer-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          datastore-iot-site-wise-multi-layer-storage-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-datastore-storage-summary-iot-site-wise-multi-layer-storage
                         :shape "DatastoreIotSiteWiseMultiLayerStorageSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-storage-summary
                    'make-datastore-storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datastore-storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datastore-storage-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-managed-s3))
      (common-lisp:list
       (common-lisp:cons "serviceManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-managed-s3))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iot-site-wise-multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "iotSiteWiseMultiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datastore-storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype datastore-summaries ()
   '(trivial-types:proper-list datastore-summary))
 (common-lisp:defun make-datastore-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datastore-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass datastore-summary common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-datastore-name :shape
                         "DatastoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-storage :initarg :datastore-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-storage-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-datastore-storage
                         :shape "DatastoreStorageSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or datastore-status common-lisp:null)
                         :accessor struct-shape-datastore-summary-status :shape
                         "DatastoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-datastore-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-datastore-summary-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-message-arrival-time :initarg
                         :last-message-arrival-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-last-message-arrival-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-format-type :initarg :file-format-type :initform
                         common-lisp:nil :type
                         (common-lisp:or file-format-type common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-file-format-type :shape
                         "FileFormatType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-partitions :initarg :datastore-partitions
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-partitions common-lisp:null)
                         :accessor
                         struct-shape-datastore-summary-datastore-partitions
                         :shape "DatastorePartitions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datastore-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datastore-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'datastore-summary 'make-datastore-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-storage))
      (common-lisp:list
       (common-lisp:cons "datastoreStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-message-arrival-time))
      (common-lisp:list
       (common-lisp:cons "lastMessageArrivalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format-type))
      (common-lisp:list
       (common-lisp:cons "fileFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-partitions))
      (common-lisp:list
       (common-lisp:cons "datastorePartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-channel-request common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-delete-channel-request-channel-name
                         :shape "ChannelName" :location "uri" :location-name
                         "channelName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-channel-request 'make-delete-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-content-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-content-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-content-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-content-request-version-id
                         :shape "DatasetContentVersion" :location "querystring"
                         :location-name "versionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dataset-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-content-request
                    'make-delete-dataset-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datastore-request common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-delete-datastore-request-datastore-name
                         :shape "DatastoreName" :location "uri" :location-name
                         "datastoreName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-datastore-request 'make-delete-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipeline-request common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-delete-pipeline-request-pipeline-name
                         :shape "PipelineName" :location "uri" :location-name
                         "pipelineName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pipeline-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-request 'make-delete-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delta-time common-lisp:nil
                       ((offset-seconds :initarg :offset-seconds :initform
                         (common-lisp:error ":offsetseconds is required") :type
                         (common-lisp:or offset-seconds common-lisp:null)
                         :accessor struct-shape-delta-time-offset-seconds
                         :shape "OffsetSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-expression :initarg :time-expression :initform
                         (common-lisp:error ":timeexpression is required")
                         :type
                         (common-lisp:or time-expression common-lisp:null)
                         :accessor struct-shape-delta-time-time-expression
                         :shape "TimeExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delta-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delta-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delta-time 'make-delta-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delta-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delta-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-seconds))
      (common-lisp:list
       (common-lisp:cons "offsetSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-expression))
      (common-lisp:list
       (common-lisp:cons "timeExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delta-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delta-time-session-window-configuration common-lisp:nil
                       ((timeout-in-minutes :initarg :timeout-in-minutes
                         :initform
                         (common-lisp:error ":timeoutinminutes is required")
                         :type
                         (common-lisp:or session-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-delta-time-session-window-configuration-timeout-in-minutes
                         :shape "SessionTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delta-time-session-window-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delta-time-session-window-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delta-time-session-window-configuration
                    'make-delta-time-session-window-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delta-time-session-window-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delta-time-session-window-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "timeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delta-time-session-window-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-channel-request common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-request-channel-name
                         :shape "ChannelName" :location "uri" :location-name
                         "channelName")
                        (include-statistics :initarg :include-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or include-statistics-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-request-include-statistics
                         :shape "IncludeStatisticsFlag" :location "querystring"
                         :location-name "includeStatistics"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-channel-request 'make-describe-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-channel-response common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type (common-lisp:or channel common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-channel :shape
                         "Channel" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-statistics common-lisp:null)
                         :accessor
                         struct-shape-describe-channel-response-statistics
                         :shape "ChannelStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-channel-response
                    'make-describe-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-response common-lisp:nil
                       ((dataset :initarg :dataset :initform common-lisp:nil
                         :type (common-lisp:or dataset common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-dataset :shape
                         "Dataset" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset))
      (common-lisp:list
       (common-lisp:cons "dataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-datastore-request common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-describe-datastore-request-datastore-name
                         :shape "DatastoreName" :location "uri" :location-name
                         "datastoreName")
                        (include-statistics :initarg :include-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or include-statistics-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-datastore-request-include-statistics
                         :shape "IncludeStatisticsFlag" :location "querystring"
                         :location-name "includeStatistics"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-datastore-request
                    'make-describe-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-datastore-response common-lisp:nil
                       ((datastore :initarg :datastore :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore common-lisp:null) :accessor
                         struct-shape-describe-datastore-response-datastore
                         :shape "Datastore" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-statistics common-lisp:null)
                         :accessor
                         struct-shape-describe-datastore-response-statistics
                         :shape "DatastoreStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-datastore-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-datastore-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-datastore-response
                    'make-describe-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore))
      (common-lisp:list
       (common-lisp:cons "datastore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-datastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-options-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-options-request
                    'make-describe-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-logging-options-response common-lisp:nil
                       ((logging-options :initarg :logging-options :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-options common-lisp:null)
                         :accessor
                         struct-shape-describe-logging-options-response-logging-options
                         :shape "LoggingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-logging-options-response
                    'make-describe-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-options))
      (common-lisp:list
       (common-lisp:cons "loggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pipeline-request common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-describe-pipeline-request-pipeline-name
                         :shape "PipelineName" :location "uri" :location-name
                         "pipelineName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pipeline-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-request
                    'make-describe-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pipeline-response common-lisp:nil
                       ((pipeline :initarg :pipeline :initform common-lisp:nil
                         :type (common-lisp:or pipeline common-lisp:null)
                         :accessor
                         struct-shape-describe-pipeline-response-pipeline
                         :shape "Pipeline" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pipeline-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-response
                    'make-describe-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-registry-enrich-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor
                         struct-shape-device-registry-enrich-activity-name
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor
                         struct-shape-device-registry-enrich-activity-attribute
                         :shape "AttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor
                         struct-shape-device-registry-enrich-activity-thing-name
                         :shape "AttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-device-registry-enrich-activity-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor
                         struct-shape-device-registry-enrich-activity-next
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-registry-enrich-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-registry-enrich-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-registry-enrich-activity
                    'make-device-registry-enrich-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-registry-enrich-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-registry-enrich-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-registry-enrich-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-shadow-enrich-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor
                         struct-shape-device-shadow-enrich-activity-name :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor
                         struct-shape-device-shadow-enrich-activity-attribute
                         :shape "AttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor
                         struct-shape-device-shadow-enrich-activity-thing-name
                         :shape "AttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-device-shadow-enrich-activity-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor
                         struct-shape-device-shadow-enrich-activity-next :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-shadow-enrich-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-shadow-enrich-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-shadow-enrich-activity
                    'make-device-shadow-enrich-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-shadow-enrich-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-shadow-enrich-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-shadow-enrich-activity))
   common-lisp:nil))
(common-lisp:deftype double-value () 'common-lisp:double-float)
(common-lisp:deftype end-time () 'common-lisp:string)
(common-lisp:deftype entry-name () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass estimated-resource-size common-lisp:nil
                       ((estimated-size-in-bytes :initarg
                         :estimated-size-in-bytes :initform common-lisp:nil
                         :type (common-lisp:or size-in-bytes common-lisp:null)
                         :accessor
                         struct-shape-estimated-resource-size-estimated-size-in-bytes
                         :shape "SizeInBytes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on :initarg :estimated-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-estimated-resource-size-estimated-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-estimated-resource-size
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'estimated-resource-size
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'estimated-resource-size 'make-estimated-resource-size))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          estimated-resource-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          estimated-resource-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "estimatedSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-on))
      (common-lisp:list
       (common-lisp:cons "estimatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          estimated-resource-size))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-format-configuration common-lisp:nil
                       ((json-configuration :initarg :json-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or json-configuration common-lisp:null)
                         :accessor
                         struct-shape-file-format-configuration-json-configuration
                         :shape "JsonConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parquet-configuration :initarg :parquet-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or parquet-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-file-format-configuration-parquet-configuration
                         :shape "ParquetConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-file-format-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'file-format-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'file-format-configuration
                    'make-file-format-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-format-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-format-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-configuration))
      (common-lisp:list
       (common-lisp:cons "jsonConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parquet-configuration))
      (common-lisp:list
       (common-lisp:cons "parquetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-format-configuration))
   common-lisp:nil))
(common-lisp:deftype file-format-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-filter-activity-name :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or filter-expression common-lisp:null)
                         :accessor struct-shape-filter-activity-filter :shape
                         "FilterExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-filter-activity-next :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-activity 'make-filter-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-activity))
   common-lisp:nil))
(common-lisp:deftype filter-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-dataset-content-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-content-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-content-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-content-request-version-id
                         :shape "DatasetContentVersion" :location "querystring"
                         :location-name "versionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dataset-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dataset-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dataset-content-request
                    'make-get-dataset-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataset-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataset-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataset-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataset-content-response common-lisp:nil
                       ((entries :initarg :entries :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-entries common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-content-response-entries
                         :shape "DatasetEntries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-dataset-content-response-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-content-response-status
                         :shape "DatasetContentStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dataset-content-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dataset-content-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dataset-content-response
                    'make-get-dataset-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataset-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataset-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataset-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass glue-configuration common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or glue-table-name common-lisp:null)
                         :accessor struct-shape-glue-configuration-table-name
                         :shape "GlueTableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or glue-database-name common-lisp:null)
                         :accessor
                         struct-shape-glue-configuration-database-name :shape
                         "GlueDatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glue-configuration 'make-glue-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-configuration))
   common-lisp:nil))
(common-lisp:deftype glue-database-name () 'common-lisp:string)
(common-lisp:deftype glue-table-name () 'common-lisp:string)
(common-lisp:deftype image () 'common-lisp:string)
(common-lisp:deftype include-statistics-flag () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass iot-events-destination-configuration common-lisp:nil
                       ((input-name :initarg :input-name :initform
                         (common-lisp:error ":inputname is required") :type
                         (common-lisp:or iot-events-input-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-iot-events-destination-configuration-input-name
                         :shape "IotEventsInputName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-iot-events-destination-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-events-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-events-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-events-destination-configuration
                    'make-iot-events-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-events-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-events-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-name))
      (common-lisp:list
       (common-lisp:cons "inputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-events-destination-configuration))
   common-lisp:nil))
(common-lisp:deftype iot-events-input-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iot-site-wise-customer-managed-datastore-s3storage
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-iot-site-wise-customer-managed-datastore-s3storage-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-prefix :initarg :key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-iot-site-wise-customer-managed-datastore-s3storage-key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-site-wise-customer-managed-datastore-s3storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-site-wise-customer-managed-datastore-s3storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-site-wise-customer-managed-datastore-s3storage
                    'make-iot-site-wise-customer-managed-datastore-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-customer-managed-datastore-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-customer-managed-datastore-s3storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-customer-managed-datastore-s3storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  iot-site-wise-customer-managed-datastore-s3storage-summary common-lisp:nil
  ((bucket :initarg :bucket :initform common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null) :accessor
    struct-shape-iot-site-wise-customer-managed-datastore-s3storage-summary-bucket
    :shape "BucketName" :location common-lisp:nil :location-name
    common-lisp:nil)
   (key-prefix :initarg :key-prefix :initform common-lisp:nil :type
    (common-lisp:or s3key-prefix common-lisp:null) :accessor
    struct-shape-iot-site-wise-customer-managed-datastore-s3storage-summary-key-prefix
    :shape "S3KeyPrefix" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-site-wise-customer-managed-datastore-s3storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'iot-site-wise-customer-managed-datastore-s3storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-site-wise-customer-managed-datastore-s3storage-summary
                    'make-iot-site-wise-customer-managed-datastore-s3storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-customer-managed-datastore-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-customer-managed-datastore-s3storage-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iot-site-wise-customer-managed-datastore-s3storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass json-configuration common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-json-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'json-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'json-configuration 'make-json-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-lambda-activity-name :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-name :initarg :lambda-name :initform
                         (common-lisp:error ":lambdaname is required") :type
                         (common-lisp:or lambda-name common-lisp:null)
                         :accessor struct-shape-lambda-activity-lambda-name
                         :shape "LambdaName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-size :initarg :batch-size :initform
                         (common-lisp:error ":batchsize is required") :type
                         (common-lisp:or activity-batch-size common-lisp:null)
                         :accessor struct-shape-lambda-activity-batch-size
                         :shape "ActivityBatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-lambda-activity-next :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-activity 'make-lambda-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-name))
      (common-lisp:list
       (common-lisp:cons "lambdaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "batchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-activity))
   common-lisp:nil))
(common-lisp:deftype lambda-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass late-data-rule common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or late-data-rule-name common-lisp:null)
                         :accessor struct-shape-late-data-rule-rule-name :shape
                         "LateDataRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-configuration :initarg :rule-configuration
                         :initform
                         (common-lisp:error ":ruleconfiguration is required")
                         :type
                         (common-lisp:or late-data-rule-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-late-data-rule-rule-configuration :shape
                         "LateDataRuleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-late-data-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'late-data-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'late-data-rule 'make-late-data-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input late-data-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input late-data-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-configuration))
      (common-lisp:list
       (common-lisp:cons "ruleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input late-data-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass late-data-rule-configuration common-lisp:nil
                       ((delta-time-session-window-configuration :initarg
                         :delta-time-session-window-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          delta-time-session-window-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-late-data-rule-configuration-delta-time-session-window-configuration
                         :shape "DeltaTimeSessionWindowConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-late-data-rule-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'late-data-rule-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'late-data-rule-configuration
                    'make-late-data-rule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          late-data-rule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          late-data-rule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delta-time-session-window-configuration))
      (common-lisp:list
       (common-lisp:cons "deltaTimeSessionWindowConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          late-data-rule-configuration))
   common-lisp:nil))
(common-lisp:deftype late-data-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype late-data-rules ()
   '(trivial-types:proper-list late-data-rule))
 (common-lisp:defun make-late-data-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list late-data-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-channels-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-channels-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-channels-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-channels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-channels-request 'make-list-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-response common-lisp:nil
                       ((channel-summaries :initarg :channel-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or channel-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-channels-response-channel-summaries
                         :shape "ChannelSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-channels-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-channels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-channels-response 'make-list-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-summaries))
      (common-lisp:list
       (common-lisp:cons "channelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-contents-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-contents-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dataset-contents-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-contents-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (scheduled-on-or-after :initarg :scheduled-on-or-after
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-dataset-contents-request-scheduled-on-or-after
                         :shape "Timestamp" :location "querystring"
                         :location-name "scheduledOnOrAfter")
                        (scheduled-before :initarg :scheduled-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-dataset-contents-request-scheduled-before
                         :shape "Timestamp" :location "querystring"
                         :location-name "scheduledBefore"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-contents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-contents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-contents-request
                    'make-list-dataset-contents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-contents-response common-lisp:nil
                       ((dataset-content-summaries :initarg
                         :dataset-content-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-contents-response-dataset-content-summaries
                         :shape "DatasetContentSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dataset-contents-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-contents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-contents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-contents-response
                    'make-list-dataset-contents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-contents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-contents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-content-summaries))
      (common-lisp:list
       (common-lisp:cons "datasetContentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-contents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datasets-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-datasets-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasets-request 'make-list-datasets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-response common-lisp:nil
                       ((dataset-summaries :initarg :dataset-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-datasets-response-dataset-summaries
                         :shape "DatasetSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datasets-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasets-response 'make-list-datasets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-summaries))
      (common-lisp:list
       (common-lisp:cons "datasetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datastores-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datastores-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-datastores-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datastores-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datastores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datastores-request 'make-list-datastores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datastores-response common-lisp:nil
                       ((datastore-summaries :initarg :datastore-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-datastores-response-datastore-summaries
                         :shape "DatastoreSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datastores-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datastores-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datastores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datastores-response 'make-list-datastores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-summaries))
      (common-lisp:list
       (common-lisp:cons "datastoreSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-pipelines-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-pipelines-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pipelines-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-request 'make-list-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-response common-lisp:nil
                       ((pipeline-summaries :initarg :pipeline-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or pipeline-summaries common-lisp:null)
                         :accessor
                         struct-shape-list-pipelines-response-pipeline-summaries
                         :shape "PipelineSummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-pipelines-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-pipelines-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-response 'make-list-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-summaries))
      (common-lisp:list
       (common-lisp:cons "pipelineSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-result () 'common-lisp:string)
(common-lisp:deftype logging-enabled () 'common-lisp:boolean)
(common-lisp:deftype logging-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-options common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-logging-options-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (level :initarg :level :initform
                         (common-lisp:error ":level is required") :type
                         (common-lisp:or logging-level common-lisp:null)
                         :accessor struct-shape-logging-options-level :shape
                         "LoggingLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor struct-shape-logging-options-enabled :shape
                         "LoggingEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-options 'make-logging-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass math-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-math-activity-name :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor struct-shape-math-activity-attribute :shape
                         "AttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (math :initarg :math :initform
                         (common-lisp:error ":math is required") :type
                         (common-lisp:or math-expression common-lisp:null)
                         :accessor struct-shape-math-activity-math :shape
                         "MathExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-math-activity-next :shape
                         "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-math-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'math-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'math-activity 'make-math-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input math-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input math-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'math))
      (common-lisp:list
       (common-lisp:cons "math"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input math-activity))
   common-lisp:nil))
(common-lisp:deftype math-expression () 'common-lisp:string)
(common-lisp:deftype max-messages () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-versions () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass message common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         (common-lisp:error ":messageid is required") :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-message-message-id :shape "MessageId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (payload :initarg :payload :initform
                         (common-lisp:error ":payload is required") :type
                         (common-lisp:or message-payload common-lisp:null)
                         :accessor struct-shape-message-payload :shape
                         "MessagePayload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:deftype message-payload ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype message-payloads ()
   '(trivial-types:proper-list message-payload))
 (common-lisp:defun make-message-payloads
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-payload))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype messages () '(trivial-types:proper-list message))
 (common-lisp:defun make-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype offset-seconds () 'common-lisp:integer)
(common-lisp:deftype output-file-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-file-uri-value common-lisp:nil
                       ((file-name :initarg :file-name :initform
                         (common-lisp:error ":filename is required") :type
                         (common-lisp:or output-file-name common-lisp:null)
                         :accessor struct-shape-output-file-uri-value-file-name
                         :shape "OutputFileName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-file-uri-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-file-uri-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-file-uri-value 'make-output-file-uri-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-file-uri-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-file-uri-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-file-uri-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parquet-configuration common-lisp:nil
                       ((schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-definition common-lisp:null)
                         :accessor
                         struct-shape-parquet-configuration-schema-definition
                         :shape "SchemaDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parquet-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parquet-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parquet-configuration 'make-parquet-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parquet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parquet-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parquet-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass partition common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attributename is required") :type
                         (common-lisp:or partition-attribute-name
                                         common-lisp:null)
                         :accessor struct-shape-partition-attribute-name :shape
                         "PartitionAttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition 'make-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition))
   common-lisp:nil))
(common-lisp:deftype partition-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partitions ()
   '(trivial-types:proper-list datastore-partition))
 (common-lisp:defun make-partitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datastore-partition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-pipeline-name :shape
                         "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or pipeline-arn common-lisp:null)
                         :accessor struct-shape-pipeline-arn :shape
                         "PipelineArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (activities :initarg :activities :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-activities common-lisp:null)
                         :accessor struct-shape-pipeline-activities :shape
                         "PipelineActivities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reprocessing-summaries :initarg
                         :reprocessing-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or reprocessing-summaries
                                         common-lisp:null)
                         :accessor struct-shape-pipeline-reprocessing-summaries
                         :shape "ReprocessingSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-creation-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pipeline 'make-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reprocessing-summaries))
      (common-lisp:list
       (common-lisp:cons "reprocessingSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-activities ()
   '(trivial-types:proper-list pipeline-activity))
 (common-lisp:defun make-pipeline-activities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-activity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline-activity common-lisp:nil
                       ((channel :initarg :channel :initform common-lisp:nil
                         :type
                         (common-lisp:or channel-activity common-lisp:null)
                         :accessor struct-shape-pipeline-activity-channel
                         :shape "ChannelActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda :initarg :lambda :initform common-lisp:nil
                         :type
                         (common-lisp:or lambda-activity common-lisp:null)
                         :accessor struct-shape-pipeline-activity-lambda :shape
                         "LambdaActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore :initarg :datastore :initform
                         common-lisp:nil :type
                         (common-lisp:or datastore-activity common-lisp:null)
                         :accessor struct-shape-pipeline-activity-datastore
                         :shape "DatastoreActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-attributes :initarg :add-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or add-attributes-activity
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-activity-add-attributes :shape
                         "AddAttributesActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-attributes :initarg :remove-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or remove-attributes-activity
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-activity-remove-attributes
                         :shape "RemoveAttributesActivity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (select-attributes :initarg :select-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or select-attributes-activity
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-activity-select-attributes
                         :shape "SelectAttributesActivity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-activity common-lisp:null)
                         :accessor struct-shape-pipeline-activity-filter :shape
                         "FilterActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (math :initarg :math :initform common-lisp:nil :type
                         (common-lisp:or math-activity common-lisp:null)
                         :accessor struct-shape-pipeline-activity-math :shape
                         "MathActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-registry-enrich :initarg
                         :device-registry-enrich :initform common-lisp:nil
                         :type
                         (common-lisp:or device-registry-enrich-activity
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-activity-device-registry-enrich
                         :shape "DeviceRegistryEnrichActivity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-shadow-enrich :initarg :device-shadow-enrich
                         :initform common-lisp:nil :type
                         (common-lisp:or device-shadow-enrich-activity
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-activity-device-shadow-enrich
                         :shape "DeviceShadowEnrichActivity" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-activity 'make-pipeline-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore))
      (common-lisp:list
       (common-lisp:cons "datastore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-attributes))
      (common-lisp:list
       (common-lisp:cons "addAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-attributes))
      (common-lisp:list
       (common-lisp:cons "removeAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-attributes))
      (common-lisp:list
       (common-lisp:cons "selectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'math))
      (common-lisp:list
       (common-lisp:cons "math"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-registry-enrich))
      (common-lisp:list
       (common-lisp:cons "deviceRegistryEnrich"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-shadow-enrich))
      (common-lisp:list
       (common-lisp:cons "deviceShadowEnrich"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-activity))
   common-lisp:nil))
(common-lisp:deftype pipeline-arn () 'common-lisp:string)
(common-lisp:deftype pipeline-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pipeline-summaries ()
   '(trivial-types:proper-list pipeline-summary))
 (common-lisp:defun make-pipeline-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline-summary common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         common-lisp:nil :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor struct-shape-pipeline-summary-pipeline-name
                         :shape "PipelineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reprocessing-summaries :initarg
                         :reprocessing-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or reprocessing-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-pipeline-summary-reprocessing-summaries
                         :shape "ReprocessingSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-pipeline-summary-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pipeline-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pipeline-summary 'make-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reprocessing-summaries))
      (common-lisp:list
       (common-lisp:cons "reprocessingSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-summary))
   common-lisp:nil))
(common-lisp:deftype presigned-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-logging-options-request common-lisp:nil
                       ((logging-options :initarg :logging-options :initform
                         (common-lisp:error ":loggingoptions is required")
                         :type
                         (common-lisp:or logging-options common-lisp:null)
                         :accessor
                         struct-shape-put-logging-options-request-logging-options
                         :shape "LoggingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-request
                    'make-put-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-options))
      (common-lisp:list
       (common-lisp:cons "loggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-filter common-lisp:nil
                       ((delta-time :initarg :delta-time :initform
                         common-lisp:nil :type
                         (common-lisp:or delta-time common-lisp:null) :accessor
                         struct-shape-query-filter-delta-time :shape
                         "DeltaTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'query-filter 'make-query-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-time))
      (common-lisp:list
       (common-lisp:cons "deltaTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-filters ()
   '(trivial-types:proper-list query-filter))
 (common-lisp:defun make-query-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-attributes-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-remove-attributes-activity-name
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attribute-names common-lisp:null)
                         :accessor
                         struct-shape-remove-attributes-activity-attributes
                         :shape "AttributeNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-remove-attributes-activity-next
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-attributes-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-attributes-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-activity
                    'make-remove-attributes-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-activity))
   common-lisp:nil))
(common-lisp:deftype reprocessing-id () 'common-lisp:string)
(common-lisp:deftype reprocessing-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reprocessing-summaries ()
   '(trivial-types:proper-list reprocessing-summary))
 (common-lisp:defun make-reprocessing-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reprocessing-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reprocessing-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or reprocessing-id common-lisp:null)
                         :accessor struct-shape-reprocessing-summary-id :shape
                         "ReprocessingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or reprocessing-status common-lisp:null)
                         :accessor struct-shape-reprocessing-summary-status
                         :shape "ReprocessingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-reprocessing-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reprocessing-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reprocessing-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reprocessing-summary 'make-reprocessing-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reprocessing-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reprocessing-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reprocessing-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-id
                    'resource-already-exists-exception-resource-arn)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-configuration common-lisp:nil
                       ((compute-type :initarg :compute-type :initform
                         (common-lisp:error ":computetype is required") :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor
                         struct-shape-resource-configuration-compute-type
                         :shape "ComputeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-size-in-gb :initarg :volume-size-in-gb
                         :initform
                         (common-lisp:error ":volumesizeingb is required")
                         :type
                         (common-lisp:or volume-size-in-gb common-lisp:null)
                         :accessor
                         struct-shape-resource-configuration-volume-size-in-gb
                         :shape "VolumeSizeInGB" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-configuration 'make-resource-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "computeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "volumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass retention-period common-lisp:nil
                       ((unlimited :initarg :unlimited :initform
                         common-lisp:nil :type
                         (common-lisp:or unlimited-retention-period
                                         common-lisp:null)
                         :accessor struct-shape-retention-period-unlimited
                         :shape "UnlimitedRetentionPeriod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (number-of-days :initarg :number-of-days :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period-in-days
                                         common-lisp:null)
                         :accessor struct-shape-retention-period-number-of-days
                         :shape "RetentionPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retention-period
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retention-period
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retention-period 'make-retention-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlimited))
      (common-lisp:list
       (common-lisp:cons "unlimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-days))
      (common-lisp:list
       (common-lisp:cons "numberOfDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-period))
   common-lisp:nil))
(common-lisp:deftype retention-period-in-days () 'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass run-pipeline-activity-request common-lisp:nil
                       ((pipeline-activity :initarg :pipeline-activity
                         :initform
                         (common-lisp:error ":pipelineactivity is required")
                         :type
                         (common-lisp:or pipeline-activity common-lisp:null)
                         :accessor
                         struct-shape-run-pipeline-activity-request-pipeline-activity
                         :shape "PipelineActivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payloads :initarg :payloads :initform
                         (common-lisp:error ":payloads is required") :type
                         (common-lisp:or message-payloads common-lisp:null)
                         :accessor
                         struct-shape-run-pipeline-activity-request-payloads
                         :shape "MessagePayloads" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-pipeline-activity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'run-pipeline-activity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-pipeline-activity-request
                    'make-run-pipeline-activity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-pipeline-activity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-pipeline-activity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-activity))
      (common-lisp:list
       (common-lisp:cons "pipelineActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payloads))
      (common-lisp:list
       (common-lisp:cons "payloads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-pipeline-activity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-pipeline-activity-response common-lisp:nil
                       ((payloads :initarg :payloads :initform common-lisp:nil
                         :type
                         (common-lisp:or message-payloads common-lisp:null)
                         :accessor
                         struct-shape-run-pipeline-activity-response-payloads
                         :shape "MessagePayloads" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-result :initarg :log-result :initform
                         common-lisp:nil :type
                         (common-lisp:or log-result common-lisp:null) :accessor
                         struct-shape-run-pipeline-activity-response-log-result
                         :shape "LogResult" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-pipeline-activity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'run-pipeline-activity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-pipeline-activity-response
                    'make-run-pipeline-activity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-pipeline-activity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-pipeline-activity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payloads))
      (common-lisp:list
       (common-lisp:cons "payloads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-result))
      (common-lisp:list
       (common-lisp:cons "logResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-pipeline-activity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3destination-configuration common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-s3destination-configuration-bucket :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or bucket-key-expression
                                         common-lisp:null)
                         :accessor struct-shape-s3destination-configuration-key
                         :shape "BucketKeyExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-configuration :initarg :glue-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or glue-configuration common-lisp:null)
                         :accessor
                         struct-shape-s3destination-configuration-glue-configuration
                         :shape "GlueConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-s3destination-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3destination-configuration
                    'make-s3destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-configuration))
      (common-lisp:list
       (common-lisp:cons "glueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-configuration))
   common-lisp:nil))
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:deftype s3path-channel-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3path-channel-messages ()
   '(trivial-types:proper-list s3path-channel-message))
 (common-lisp:defun make-s3path-channel-messages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3path-channel-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sample-channel-data-request common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-sample-channel-data-request-channel-name
                         :shape "ChannelName" :location "uri" :location-name
                         "channelName")
                        (max-messages :initarg :max-messages :initform
                         common-lisp:nil :type
                         (common-lisp:or max-messages common-lisp:null)
                         :accessor
                         struct-shape-sample-channel-data-request-max-messages
                         :shape "MaxMessages" :location "querystring"
                         :location-name "maxMessages")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         struct-shape-sample-channel-data-request-start-time
                         :shape "StartTime" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or end-time common-lisp:null)
                         :accessor
                         struct-shape-sample-channel-data-request-end-time
                         :shape "EndTime" :location "querystring"
                         :location-name "endTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sample-channel-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sample-channel-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sample-channel-data-request
                    'make-sample-channel-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sample-channel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sample-channel-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sample-channel-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sample-channel-data-response common-lisp:nil
                       ((payloads :initarg :payloads :initform common-lisp:nil
                         :type
                         (common-lisp:or message-payloads common-lisp:null)
                         :accessor
                         struct-shape-sample-channel-data-response-payloads
                         :shape "MessagePayloads" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sample-channel-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sample-channel-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sample-channel-data-response
                    'make-sample-channel-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sample-channel-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sample-channel-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payloads))
      (common-lisp:list
       (common-lisp:cons "payloads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sample-channel-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule common-lisp:nil
                       ((expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor struct-shape-schedule-expression :shape
                         "ScheduleExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema-definition common-lisp:nil
                       ((columns :initarg :columns :initform common-lisp:nil
                         :type (common-lisp:or columns common-lisp:null)
                         :accessor struct-shape-schema-definition-columns
                         :shape "Columns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-definition 'make-schema-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-attributes-activity common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-select-attributes-activity-name
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attribute-names common-lisp:null)
                         :accessor
                         struct-shape-select-attributes-activity-attributes
                         :shape "AttributeNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next :initarg :next :initform common-lisp:nil :type
                         (common-lisp:or activity-name common-lisp:null)
                         :accessor struct-shape-select-attributes-activity-next
                         :shape "ActivityName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-attributes-activity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'select-attributes-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-attributes-activity
                    'make-select-attributes-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-attributes-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-attributes-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-attributes-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-managed-channel-s3storage common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-managed-channel-s3storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-managed-channel-s3storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-managed-channel-s3storage
                    'make-service-managed-channel-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-channel-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-channel-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-channel-s3storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-managed-channel-s3storage-summary
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-managed-channel-s3storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-managed-channel-s3storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-managed-channel-s3storage-summary
                    'make-service-managed-channel-s3storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-channel-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-channel-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-channel-s3storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-managed-datastore-s3storage common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-managed-datastore-s3storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-managed-datastore-s3storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-managed-datastore-s3storage
                    'make-service-managed-datastore-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-datastore-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-datastore-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-datastore-s3storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-managed-datastore-s3storage-summary
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-managed-datastore-s3storage-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-managed-datastore-s3storage-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-managed-datastore-s3storage-summary
                    'make-service-managed-datastore-s3storage-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-datastore-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-datastore-s3storage-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-datastore-s3storage-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype session-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype size-in-bytes () 'common-lisp:double-float)
(common-lisp:deftype sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sql-query-dataset-action common-lisp:nil
                       ((sql-query :initarg :sql-query :initform
                         (common-lisp:error ":sqlquery is required") :type
                         (common-lisp:or sql-query common-lisp:null) :accessor
                         struct-shape-sql-query-dataset-action-sql-query :shape
                         "SqlQuery" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or query-filters common-lisp:null)
                         :accessor
                         struct-shape-sql-query-dataset-action-filters :shape
                         "QueryFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sql-query-dataset-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sql-query-dataset-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sql-query-dataset-action 'make-sql-query-dataset-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-query-dataset-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-query-dataset-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-query))
      (common-lisp:list
       (common-lisp:cons "sqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-query-dataset-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-pipeline-reprocessing-request common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-reprocessing-request-pipeline-name
                         :shape "PipelineName" :location "uri" :location-name
                         "pipelineName")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         struct-shape-start-pipeline-reprocessing-request-start-time
                         :shape "StartTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or end-time common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-reprocessing-request-end-time
                         :shape "EndTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel-messages :initarg :channel-messages :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-messages common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-reprocessing-request-channel-messages
                         :shape "ChannelMessages" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-pipeline-reprocessing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-pipeline-reprocessing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-reprocessing-request
                    'make-start-pipeline-reprocessing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-reprocessing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-reprocessing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-messages))
      (common-lisp:list
       (common-lisp:cons "channelMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-reprocessing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-pipeline-reprocessing-response common-lisp:nil
                       ((reprocessing-id :initarg :reprocessing-id :initform
                         common-lisp:nil :type
                         (common-lisp:or reprocessing-id common-lisp:null)
                         :accessor
                         struct-shape-start-pipeline-reprocessing-response-reprocessing-id
                         :shape "ReprocessingId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-pipeline-reprocessing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-pipeline-reprocessing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-reprocessing-response
                    'make-start-pipeline-reprocessing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-reprocessing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-reprocessing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reprocessing-id))
      (common-lisp:list
       (common-lisp:cons "reprocessingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-reprocessing-response))
   common-lisp:nil))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location "querystring" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iotanalytics-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-expression () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-partition common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attributename is required") :type
                         (common-lisp:or partition-attribute-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-timestamp-partition-attribute-name :shape
                         "PartitionAttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp-format :initarg :timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-format common-lisp:null)
                         :accessor
                         struct-shape-timestamp-partition-timestamp-format
                         :shape "TimestampFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestamp-partition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-partition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestamp-partition 'make-timestamp-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-format))
      (common-lisp:list
       (common-lisp:cons "timestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-partition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass triggering-dataset common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor struct-shape-triggering-dataset-name :shape
                         "DatasetName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-triggering-dataset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'triggering-dataset
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'triggering-dataset 'make-triggering-dataset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input triggering-dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input triggering-dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input triggering-dataset))
   common-lisp:nil))
(common-lisp:deftype unlimited-retention-period () 'common-lisp:boolean)
(common-lisp:deftype unlimited-versioning () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-request common-lisp:nil
                       ((channel-name :initarg :channel-name :initform
                         (common-lisp:error ":channelname is required") :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-channel-name
                         :shape "ChannelName" :location "uri" :location-name
                         "channelName")
                        (channel-storage :initarg :channel-storage :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-storage common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-channel-storage
                         :shape "ChannelStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-update-channel-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-channel-request 'make-update-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-storage))
      (common-lisp:list
       (common-lisp:cons "channelStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":datasetname is required") :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-dataset-name
                         :shape "DatasetName" :location "uri" :location-name
                         "datasetName")
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or dataset-actions common-lisp:null)
                         :accessor struct-shape-update-dataset-request-actions
                         :shape "DatasetActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (triggers :initarg :triggers :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-triggers common-lisp:null)
                         :accessor struct-shape-update-dataset-request-triggers
                         :shape "DatasetTriggers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-delivery-rules :initarg
                         :content-delivery-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or dataset-content-delivery-rules
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-content-delivery-rules
                         :shape "DatasetContentDeliveryRules" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versioning-configuration :initarg
                         :versioning-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or versioning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-versioning-configuration
                         :shape "VersioningConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (late-data-rules :initarg :late-data-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or late-data-rules common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-late-data-rules
                         :shape "LateDataRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-request 'make-update-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-delivery-rules))
      (common-lisp:list
       (common-lisp:cons "contentDeliveryRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "versioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'late-data-rules))
      (common-lisp:list
       (common-lisp:cons "lateDataRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-datastore-request common-lisp:nil
                       ((datastore-name :initarg :datastore-name :initform
                         (common-lisp:error ":datastorename is required") :type
                         (common-lisp:or datastore-name common-lisp:null)
                         :accessor
                         struct-shape-update-datastore-request-datastore-name
                         :shape "DatastoreName" :location "uri" :location-name
                         "datastoreName")
                        (retention-period :initarg :retention-period :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-period common-lisp:null)
                         :accessor
                         struct-shape-update-datastore-request-retention-period
                         :shape "RetentionPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datastore-storage :initarg :datastore-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or datastore-storage common-lisp:null)
                         :accessor
                         struct-shape-update-datastore-request-datastore-storage
                         :shape "DatastoreStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-format-configuration :initarg
                         :file-format-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or file-format-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-datastore-request-file-format-configuration
                         :shape "FileFormatConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-datastore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-datastore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-datastore-request 'make-update-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-storage))
      (common-lisp:list
       (common-lisp:cons "datastoreStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-format-configuration))
      (common-lisp:list
       (common-lisp:cons "fileFormatConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-request common-lisp:nil
                       ((pipeline-name :initarg :pipeline-name :initform
                         (common-lisp:error ":pipelinename is required") :type
                         (common-lisp:or pipeline-name common-lisp:null)
                         :accessor
                         struct-shape-update-pipeline-request-pipeline-name
                         :shape "PipelineName" :location "uri" :location-name
                         "pipelineName")
                        (pipeline-activities :initarg :pipeline-activities
                         :initform
                         (common-lisp:error ":pipelineactivities is required")
                         :type
                         (common-lisp:or pipeline-activities common-lisp:null)
                         :accessor
                         struct-shape-update-pipeline-request-pipeline-activities
                         :shape "PipelineActivities" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-pipeline-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-request 'make-update-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-activities))
      (common-lisp:list
       (common-lisp:cons "pipelineActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass variable common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or variable-name common-lisp:null)
                         :accessor struct-shape-variable-name :shape
                         "VariableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor struct-shape-variable-string-value :shape
                         "StringValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double-value common-lisp:null)
                         :accessor struct-shape-variable-double-value :shape
                         "DoubleValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-content-version-value :initarg
                         :dataset-content-version-value :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-content-version-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-variable-dataset-content-version-value
                         :shape "DatasetContentVersionValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-file-uri-value :initarg :output-file-uri-value
                         :initform common-lisp:nil :type
                         (common-lisp:or output-file-uri-value
                                         common-lisp:null)
                         :accessor struct-shape-variable-output-file-uri-value
                         :shape "OutputFileUriValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-variable
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'variable
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'variable 'make-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-content-version-value))
      (common-lisp:list
       (common-lisp:cons "datasetContentVersionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-file-uri-value))
      (common-lisp:list
       (common-lisp:cons "outputFileUriValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable))
   common-lisp:nil))
(common-lisp:deftype variable-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype variables () '(trivial-types:proper-list variable))
 (common-lisp:defun make-variables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variable))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass versioning-configuration common-lisp:nil
                       ((unlimited :initarg :unlimited :initform
                         common-lisp:nil :type
                         (common-lisp:or unlimited-versioning common-lisp:null)
                         :accessor
                         struct-shape-versioning-configuration-unlimited :shape
                         "UnlimitedVersioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-versions :initarg :max-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or max-versions common-lisp:null)
                         :accessor
                         struct-shape-versioning-configuration-max-versions
                         :shape "MaxVersions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-versioning-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'versioning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'versioning-configuration 'make-versioning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlimited))
      (common-lisp:list
       (common-lisp:cons "unlimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-versions))
      (common-lisp:list
       (common-lisp:cons "maxVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   common-lisp:nil))
(common-lisp:deftype volume-size-in-gb () 'common-lisp:integer)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |resourceArn| () 'common-lisp:string)
(common-lisp:deftype |resourceId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-put-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-name messages)
   (common-lisp:declare (common-lisp:ignorable channel-name messages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-put-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/messages/batch"
                                                        "BatchPutMessage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-put-message))
(common-lisp:progn
 (common-lisp:defun cancel-pipeline-reprocessing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name reprocessing-id)
   (common-lisp:declare (common-lisp:ignorable pipeline-name reprocessing-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-pipeline-reprocessing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/pipelines/~A/reprocessing/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'pipeline-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reprocessing-id))))
                                                        "CancelPipelineReprocessing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-pipeline-reprocessing))
(common-lisp:progn
 (common-lisp:defun create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-name channel-storage
                     retention-period tags)
   (common-lisp:declare
    (common-lisp:ignorable channel-name channel-storage retention-period tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/channels"
                                                        "CreateChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-channel))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name actions triggers
                     content-delivery-rules retention-period
                     versioning-configuration tags late-data-rules)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name actions triggers content-delivery-rules
     retention-period versioning-configuration tags late-data-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/datasets"
                                                        "CreateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-dataset-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name version-id)
   (common-lisp:declare (common-lisp:ignorable dataset-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "CreateDatasetContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset-content))
(common-lisp:progn
 (common-lisp:defun create-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name datastore-storage
                     retention-period tags file-format-configuration
                     datastore-partitions)
   (common-lisp:declare
    (common-lisp:ignorable datastore-name datastore-storage retention-period
     tags file-format-configuration datastore-partitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/datastores"
                                                        "CreateDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-datastore))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-activities tags)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-activities tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/pipelines"
                                                        "CreatePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-name)
   (common-lisp:declare (common-lisp:ignorable channel-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-name))))
                                                        "DeleteChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-channel))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name)
   (common-lisp:declare (common-lisp:ignorable dataset-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "DeleteDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-dataset-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name version-id)
   (common-lisp:declare (common-lisp:ignorable dataset-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "DeleteDatasetContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset-content))
(common-lisp:progn
 (common-lisp:defun delete-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name)
   (common-lisp:declare (common-lisp:ignorable datastore-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datastores/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'datastore-name))))
                                                        "DeleteDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-datastore))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name)
   (common-lisp:declare (common-lisp:ignorable pipeline-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/pipelines/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'pipeline-name))))
                                                        "DeletePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun describe-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-name include-statistics)
   (common-lisp:declare
    (common-lisp:ignorable channel-name include-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-name))))
                                                        "DescribeChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-channel))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name)
   (common-lisp:declare (common-lisp:ignorable dataset-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "DescribeDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name include-statistics)
   (common-lisp:declare
    (common-lisp:ignorable datastore-name include-statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datastores/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'datastore-name))))
                                                        "DescribeDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-datastore))
(common-lisp:progn
 (common-lisp:defun describe-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotanalytics-request :method "GET" :path
                                "/logging" :operation
                                "DescribeLoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-logging-options))
(common-lisp:progn
 (common-lisp:defun describe-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name)
   (common-lisp:declare (common-lisp:ignorable pipeline-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/pipelines/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'pipeline-name))))
                                                        "DescribePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-pipeline))
(common-lisp:progn
 (common-lisp:defun get-dataset-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name version-id)
   (common-lisp:declare (common-lisp:ignorable dataset-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dataset-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "GetDatasetContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dataset-content))
(common-lisp:progn
 (common-lisp:defun list-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/channels"
                                                        "ListChannels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-channels))
(common-lisp:progn
 (common-lisp:defun list-dataset-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name next-token max-results
                     scheduled-on-or-after scheduled-before)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name next-token max-results
     scheduled-on-or-after scheduled-before))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "ListDatasetContents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dataset-contents))
(common-lisp:progn
 (common-lisp:defun list-datasets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/datasets"
                                                        "ListDatasets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-datasets))
(common-lisp:progn
 (common-lisp:defun list-datastores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datastores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/datastores"
                                                        "ListDatastores"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-datastores))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/pipelines"
                                                        "ListPipelines"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options)
   (common-lisp:declare (common-lisp:ignorable logging-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/logging"
                                                        "PutLoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-logging-options))
(common-lisp:progn
 (common-lisp:defun run-pipeline-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-activity payloads)
   (common-lisp:declare (common-lisp:ignorable pipeline-activity payloads))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-pipeline-activity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/pipelineactivities/run"
                                                        "RunPipelineActivity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'run-pipeline-activity))
(common-lisp:progn
 (common-lisp:defun sample-channel-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-name max-messages start-time
                     end-time)
   (common-lisp:declare
    (common-lisp:ignorable channel-name max-messages start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-sample-channel-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/channels/~A/sample"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-name))))
                                                        "SampleChannelData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'sample-channel-data))
(common-lisp:progn
 (common-lisp:defun start-pipeline-reprocessing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name start-time end-time
                     channel-messages)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name start-time end-time channel-messages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-pipeline-reprocessing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/pipelines/~A/reprocessing"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'pipeline-name))))
                                                        "StartPipelineReprocessing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-pipeline-reprocessing))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/tags"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" "/tags"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-name channel-storage
                     retention-period)
   (common-lisp:declare
    (common-lisp:ignorable channel-name channel-storage retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-name))))
                                                        "UpdateChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-channel))
(common-lisp:progn
 (common-lisp:defun update-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name actions triggers
                     content-delivery-rules retention-period
                     versioning-configuration late-data-rules)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name actions triggers content-delivery-rules
     retention-period versioning-configuration late-data-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "UpdateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dataset))
(common-lisp:progn
 (common-lisp:defun update-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name retention-period
                     datastore-storage file-format-configuration)
   (common-lisp:declare
    (common-lisp:ignorable datastore-name retention-period datastore-storage
     file-format-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datastores/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'datastore-name))))
                                                        "UpdateDatastore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-datastore))
(common-lisp:progn
 (common-lisp:defun update-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-activities)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-activities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotanalytics-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/pipelines/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'pipeline-name))))
                                                        "UpdatePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-pipeline))
