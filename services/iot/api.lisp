;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iot/api
  (:use)
  (:nicknames #:aws/iot)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iot/api)
(common-lisp:progn
 (common-lisp:define-condition iot-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iot-error))
(common-lisp:progn
 (common-lisp:defclass iot-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "iot" :api-version
                        "2015-05-28" :host-prefix "iot" :signing-name "iot"
                        :global-host common-lisp:nil))
 (common-lisp:export 'iot-request))
(common-lisp:defvar *error-map*
  '(("CertificateConflictException" . certificate-conflict-exception)
    ("CertificateStateException" . certificate-state-exception)
    ("CertificateValidationException" . certificate-validation-exception)
    ("ConflictException" . conflict-exception)
    ("ConflictingResourceUpdateException"
     . conflicting-resource-update-exception)
    ("DeleteConflictException" . delete-conflict-exception)
    ("IndexNotReadyException" . index-not-ready-exception)
    ("InternalException" . internal-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidAggregationException" . invalid-aggregation-exception)
    ("InvalidQueryException" . invalid-query-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidResponseException" . invalid-response-exception)
    ("InvalidStateTransitionException" . invalid-state-transition-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedPolicyException" . malformed-policy-exception)
    ("NotConfiguredException" . not-configured-exception)
    ("RegistrationCodeValidationException"
     . registration-code-validation-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceRegistrationFailureException"
     . resource-registration-failure-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("SqlParseException" . sql-parse-exception)
    ("TaskAlreadyExistsException" . task-already-exists-exception)
    ("ThrottlingException" . throttling-exception)
    ("TransferAlreadyCompletedException"
     . transfer-already-completed-exception)
    ("TransferConflictException" . transfer-conflict-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("ValidationException" . validation-exception)
    ("VersionConflictException" . version-conflict-exception)
    ("VersionsLimitExceededException" . versions-limit-exceeded-exception)))
(common-lisp:deftype abort-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass abort-config common-lisp:nil
                       ((criteria-list :initarg :criteria-list :initform
                         (common-lisp:error ":criterialist is required") :type
                         (common-lisp:or abort-criteria-list common-lisp:null)
                         :accessor struct-shape-abort-config-criteria-list
                         :shape "AbortCriteriaList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'abort-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'abort-config 'make-abort-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input abort-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input abort-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria-list))
      (common-lisp:list
       (common-lisp:cons "criteriaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input abort-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-criteria common-lisp:nil
                       ((failure-type :initarg :failure-type :initform
                         (common-lisp:error ":failuretype is required") :type
                         (common-lisp:or job-execution-failure-type
                                         common-lisp:null)
                         :accessor struct-shape-abort-criteria-failure-type
                         :shape "JobExecutionFailureType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or abort-action common-lisp:null)
                         :accessor struct-shape-abort-criteria-action :shape
                         "AbortAction" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (threshold-percentage :initarg :threshold-percentage
                         :initform
                         (common-lisp:error ":thresholdpercentage is required")
                         :type
                         (common-lisp:or abort-threshold-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-abort-criteria-threshold-percentage
                         :shape "AbortThresholdPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (min-number-of-executed-things :initarg
                         :min-number-of-executed-things :initform
                         (common-lisp:error
                          ":minnumberofexecutedthings is required")
                         :type
                         (common-lisp:or minimum-number-of-executed-things
                                         common-lisp:null)
                         :accessor
                         struct-shape-abort-criteria-min-number-of-executed-things
                         :shape "MinimumNumberOfExecutedThings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'abort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'abort-criteria 'make-abort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input abort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input abort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "failureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "thresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-number-of-executed-things))
      (common-lisp:list
       (common-lisp:cons "minNumberOfExecutedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input abort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype abort-criteria-list ()
   '(trivial-types:proper-list abort-criteria))
 (common-lisp:defun make-abort-criteria-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list abort-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:deftype abort-threshold-percentage () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass accept-certificate-transfer-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-accept-certificate-transfer-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId")
                        (set-as-active :initarg :set-as-active :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-active common-lisp:null)
                         :accessor
                         struct-shape-accept-certificate-transfer-request-set-as-active
                         :shape "SetAsActive" :location "querystring"
                         :location-name "setAsActive"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-certificate-transfer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-certificate-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-certificate-transfer-request
                    'make-accept-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:deftype acm-certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((dynamo-db :initarg :dynamo-db :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamo-dbaction common-lisp:null)
                         :accessor struct-shape-action-dynamo-db :shape
                         "DynamoDBAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamo-dbv2 :initarg :dynamo-dbv2 :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamo-dbv2action common-lisp:null)
                         :accessor struct-shape-action-dynamo-dbv2 :shape
                         "DynamoDBv2Action" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda :initarg :lambda :initform common-lisp:nil
                         :type (common-lisp:or lambda-action common-lisp:null)
                         :accessor struct-shape-action-lambda :shape
                         "LambdaAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns :initarg :sns :initform common-lisp:nil :type
                         (common-lisp:or sns-action common-lisp:null) :accessor
                         struct-shape-action-sns :shape "SnsAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sqs :initarg :sqs :initform common-lisp:nil :type
                         (common-lisp:or sqs-action common-lisp:null) :accessor
                         struct-shape-action-sqs :shape "SqsAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kinesis :initarg :kinesis :initform common-lisp:nil
                         :type (common-lisp:or kinesis-action common-lisp:null)
                         :accessor struct-shape-action-kinesis :shape
                         "KinesisAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (republish :initarg :republish :initform
                         common-lisp:nil :type
                         (common-lisp:or republish-action common-lisp:null)
                         :accessor struct-shape-action-republish :shape
                         "RepublishAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3action common-lisp:null) :accessor
                         struct-shape-action-s3 :shape "S3Action" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (firehose :initarg :firehose :initform common-lisp:nil
                         :type
                         (common-lisp:or firehose-action common-lisp:null)
                         :accessor struct-shape-action-firehose :shape
                         "FirehoseAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloudwatch-metric :initarg :cloudwatch-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or cloudwatch-metric-action
                                         common-lisp:null)
                         :accessor struct-shape-action-cloudwatch-metric :shape
                         "CloudwatchMetricAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloudwatch-alarm :initarg :cloudwatch-alarm :initform
                         common-lisp:nil :type
                         (common-lisp:or cloudwatch-alarm-action
                                         common-lisp:null)
                         :accessor struct-shape-action-cloudwatch-alarm :shape
                         "CloudwatchAlarmAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloudwatch-logs :initarg :cloudwatch-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or cloudwatch-logs-action
                                         common-lisp:null)
                         :accessor struct-shape-action-cloudwatch-logs :shape
                         "CloudwatchLogsAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch :initarg :elasticsearch :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-action common-lisp:null)
                         :accessor struct-shape-action-elasticsearch :shape
                         "ElasticsearchAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (salesforce :initarg :salesforce :initform
                         common-lisp:nil :type
                         (common-lisp:or salesforce-action common-lisp:null)
                         :accessor struct-shape-action-salesforce :shape
                         "SalesforceAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iot-analytics :initarg :iot-analytics :initform
                         common-lisp:nil :type
                         (common-lisp:or iot-analytics-action common-lisp:null)
                         :accessor struct-shape-action-iot-analytics :shape
                         "IotAnalyticsAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iot-events :initarg :iot-events :initform
                         common-lisp:nil :type
                         (common-lisp:or iot-events-action common-lisp:null)
                         :accessor struct-shape-action-iot-events :shape
                         "IotEventsAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iot-site-wise :initarg :iot-site-wise :initform
                         common-lisp:nil :type
                         (common-lisp:or iot-site-wise-action common-lisp:null)
                         :accessor struct-shape-action-iot-site-wise :shape
                         "IotSiteWiseAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-functions :initarg :step-functions :initform
                         common-lisp:nil :type
                         (common-lisp:or step-functions-action
                                         common-lisp:null)
                         :accessor struct-shape-action-step-functions :shape
                         "StepFunctionsAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream :initarg :timestream :initform
                         common-lisp:nil :type
                         (common-lisp:or timestream-action common-lisp:null)
                         :accessor struct-shape-action-timestream :shape
                         "TimestreamAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http :initarg :http :initform common-lisp:nil :type
                         (common-lisp:or http-action common-lisp:null)
                         :accessor struct-shape-action-http :shape "HttpAction"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kafka :initarg :kafka :initform common-lisp:nil :type
                         (common-lisp:or kafka-action common-lisp:null)
                         :accessor struct-shape-action-kafka :shape
                         "KafkaAction" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (open-search :initarg :open-search :initform
                         common-lisp:nil :type
                         (common-lisp:or open-search-action common-lisp:null)
                         :accessor struct-shape-action-open-search :shape
                         "OpenSearchAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or location-action common-lisp:null)
                         :accessor struct-shape-action-location :shape
                         "LocationAction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db))
      (common-lisp:list
       (common-lisp:cons "dynamoDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-dbv2))
      (common-lisp:list
       (common-lisp:cons "dynamoDBv2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns))
      (common-lisp:list
       (common-lisp:cons "sns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs))
      (common-lisp:list
       (common-lisp:cons "sqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis))
      (common-lisp:list
       (common-lisp:cons "kinesis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'republish))
      (common-lisp:list
       (common-lisp:cons "republish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-metric))
      (common-lisp:list
       (common-lisp:cons "cloudwatchMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-alarm))
      (common-lisp:list
       (common-lisp:cons "cloudwatchAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-logs))
      (common-lisp:list
       (common-lisp:cons "cloudwatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elasticsearch))
      (common-lisp:list
       (common-lisp:cons "elasticsearch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-analytics))
      (common-lisp:list
       (common-lisp:cons "iotAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-events))
      (common-lisp:list
       (common-lisp:cons "iotEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-site-wise))
      (common-lisp:list
       (common-lisp:cons "iotSiteWise"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-functions))
      (common-lisp:list
       (common-lisp:cons "stepFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestream))
      (common-lisp:list
       (common-lisp:cons "timestream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka))
      (common-lisp:list
       (common-lisp:cons "kafka"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-search))
      (common-lisp:list
       (common-lisp:cons "openSearch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass active-violation common-lisp:nil
                       ((violation-id :initarg :violation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-id common-lisp:null)
                         :accessor struct-shape-active-violation-violation-id
                         :shape "ViolationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor struct-shape-active-violation-thing-name
                         :shape "DeviceDefenderThingName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-active-violation-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behavior :initarg :behavior :initform common-lisp:nil
                         :type (common-lisp:or behavior common-lisp:null)
                         :accessor struct-shape-active-violation-behavior
                         :shape "Behavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-violation-value :initarg :last-violation-value
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-active-violation-last-violation-value
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (violation-event-additional-info :initarg
                         :violation-event-additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-event-additional-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-active-violation-violation-event-additional-info
                         :shape "ViolationEventAdditionalInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (verification-state :initarg :verification-state
                         :initform common-lisp:nil :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor
                         struct-shape-active-violation-verification-state
                         :shape "VerificationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verification-state-description :initarg
                         :verification-state-description :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-state-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-active-violation-verification-state-description
                         :shape "VerificationStateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-violation-time :initarg :last-violation-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-active-violation-last-violation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (violation-start-time :initarg :violation-start-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-active-violation-violation-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-active-violation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'active-violation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'active-violation 'make-active-violation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input active-violation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input active-violation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-id))
      (common-lisp:list
       (common-lisp:cons "violationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-violation-value))
      (common-lisp:list
       (common-lisp:cons "lastViolationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-additional-info))
      (common-lisp:list
       (common-lisp:cons "violationEventAdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "verificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-state-description))
      (common-lisp:list
       (common-lisp:cons "verificationStateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-violation-time))
      (common-lisp:list
       (common-lisp:cons "lastViolationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-start-time))
      (common-lisp:list
       (common-lisp:cons "violationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input active-violation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-violations ()
   '(trivial-types:proper-list active-violation))
 (common-lisp:defun make-active-violations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list active-violation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-thing-to-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-add-thing-to-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-arn :initarg :billing-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-add-thing-to-billing-group-request-billing-group-arn
                         :shape "BillingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-add-thing-to-billing-group-request-thing-name
                         :shape "ThingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-add-thing-to-billing-group-request-thing-arn
                         :shape "ThingArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-thing-to-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-thing-to-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-billing-group-request
                    'make-add-thing-to-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-thing-to-billing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-thing-to-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-thing-to-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-billing-group-response
                    'make-add-thing-to-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-thing-to-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-add-thing-to-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-arn :initarg :thing-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-add-thing-to-thing-group-request-thing-group-arn
                         :shape "ThingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-add-thing-to-thing-group-request-thing-name
                         :shape "ThingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-add-thing-to-thing-group-request-thing-arn
                         :shape "ThingArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (override-dynamic-groups :initarg
                         :override-dynamic-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or override-dynamic-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-thing-to-thing-group-request-override-dynamic-groups
                         :shape "OverrideDynamicGroups" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-thing-to-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-thing-to-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-thing-group-request
                    'make-add-thing-to-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-dynamic-groups))
      (common-lisp:list
       (common-lisp:cons "overrideDynamicGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-thing-to-thing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-thing-to-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-thing-to-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-thing-to-thing-group-response
                    'make-add-thing-to-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-thing-to-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-things-to-thing-group-params common-lisp:nil
                       ((thing-group-names :initarg :thing-group-names
                         :initform
                         (common-lisp:error ":thinggroupnames is required")
                         :type
                         (common-lisp:or thing-group-names common-lisp:null)
                         :accessor
                         struct-shape-add-things-to-thing-group-params-thing-group-names
                         :shape "ThingGroupNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (override-dynamic-groups :initarg
                         :override-dynamic-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-add-things-to-thing-group-params-override-dynamic-groups
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-things-to-thing-group-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-things-to-thing-group-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-things-to-thing-group-params
                    'make-add-things-to-thing-group-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-things-to-thing-group-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-things-to-thing-group-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-names))
      (common-lisp:list
       (common-lisp:cons "thingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-dynamic-groups))
      (common-lisp:list
       (common-lisp:cons "overrideDynamicGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-things-to-thing-group-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-metrics-to-retain-list ()
   '(trivial-types:proper-list behavior-metric))
 (common-lisp:defun make-additional-metrics-to-retain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list behavior-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-metrics-to-retain-v2list ()
   '(trivial-types:proper-list metric-to-retain))
 (common-lisp:defun make-additional-metrics-to-retain-v2list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-to-retain))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype aggregation-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregation-type common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or aggregation-type-name
                                         common-lisp:null)
                         :accessor struct-shape-aggregation-type-name :shape
                         "AggregationTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregation-type-values
                                         common-lisp:null)
                         :accessor struct-shape-aggregation-type-values :shape
                         "AggregationTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregation-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregation-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregation-type 'make-aggregation-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-type))
   common-lisp:nil))
(common-lisp:deftype aggregation-type-name () 'common-lisp:string)
(common-lisp:deftype aggregation-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregation-type-values ()
   '(trivial-types:proper-list aggregation-type-value))
 (common-lisp:defun make-aggregation-type-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregation-type-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alert-target common-lisp:nil
                       ((alert-target-arn :initarg :alert-target-arn :initform
                         (common-lisp:error ":alerttargetarn is required")
                         :type
                         (common-lisp:or alert-target-arn common-lisp:null)
                         :accessor struct-shape-alert-target-alert-target-arn
                         :shape "AlertTargetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-alert-target-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alert-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alert-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'alert-target 'make-alert-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alert-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alert-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-target-arn))
      (common-lisp:list
       (common-lisp:cons "alertTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alert-target))
   common-lisp:nil))
(common-lisp:deftype alert-target-arn () 'common-lisp:string)
(common-lisp:deftype alert-target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alert-targets () 'common-lisp:hash-table)
 (common-lisp:defun make-alert-targets (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype allow-authorizer-override () 'common-lisp:boolean)
(common-lisp:deftype allow-auto-registration () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass allowed common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type (common-lisp:or policies common-lisp:null)
                         :accessor struct-shape-allowed-policies :shape
                         "Policies" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allowed
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'allowed
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'allowed 'make-allowed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allowed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allowed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allowed))
   common-lisp:nil))
(common-lisp:deftype approximate-seconds-before-timed-out ()
  'common-lisp:integer)
(common-lisp:deftype ascending-order () 'common-lisp:boolean)
(common-lisp:deftype asset-id () 'common-lisp:string)
(common-lisp:deftype asset-property-alias () 'common-lisp:string)
(common-lisp:deftype asset-property-boolean-value () 'common-lisp:string)
(common-lisp:deftype asset-property-double-value () 'common-lisp:string)
(common-lisp:deftype asset-property-entry-id () 'common-lisp:string)
(common-lisp:deftype asset-property-id () 'common-lisp:string)
(common-lisp:deftype asset-property-integer-value () 'common-lisp:string)
(common-lisp:deftype asset-property-offset-in-nanos () 'common-lisp:string)
(common-lisp:deftype asset-property-quality () 'common-lisp:string)
(common-lisp:deftype asset-property-string-value () 'common-lisp:string)
(common-lisp:deftype asset-property-time-in-seconds () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-property-timestamp common-lisp:nil
                       ((time-in-seconds :initarg :time-in-seconds :initform
                         (common-lisp:error ":timeinseconds is required") :type
                         (common-lisp:or asset-property-time-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-timestamp-time-in-seconds
                         :shape "AssetPropertyTimeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (offset-in-nanos :initarg :offset-in-nanos :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-offset-in-nanos
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-timestamp-offset-in-nanos
                         :shape "AssetPropertyOffsetInNanos" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property-timestamp
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property-timestamp
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-property-timestamp 'make-asset-property-timestamp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-timestamp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-timestamp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-in-nanos))
      (common-lisp:list
       (common-lisp:cons "offsetInNanos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-timestamp))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass asset-property-value common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or asset-property-variant
                                         common-lisp:null)
                         :accessor struct-shape-asset-property-value-value
                         :shape "AssetPropertyVariant" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or asset-property-timestamp
                                         common-lisp:null)
                         :accessor struct-shape-asset-property-value-timestamp
                         :shape "AssetPropertyTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (quality :initarg :quality :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-property-quality
                                         common-lisp:null)
                         :accessor struct-shape-asset-property-value-quality
                         :shape "AssetPropertyQuality" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-property-value 'make-asset-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-property-value-list ()
   '(trivial-types:proper-list asset-property-value))
 (common-lisp:defun make-asset-property-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-property-variant common-lisp:nil
                       ((string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-string-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-variant-string-value
                         :shape "AssetPropertyStringValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-integer-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-variant-integer-value
                         :shape "AssetPropertyIntegerValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-double-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-variant-double-value
                         :shape "AssetPropertyDoubleValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-boolean-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-asset-property-variant-boolean-value
                         :shape "AssetPropertyBooleanValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-property-variant
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-property-variant
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'asset-property-variant 'make-asset-property-variant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-variant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-targets-with-job-request common-lisp:nil
                       ((targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or job-targets common-lisp:null)
                         :accessor
                         struct-shape-associate-targets-with-job-request-targets
                         :shape "JobTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-associate-targets-with-job-request-job-id
                         :shape "JobId" :location "uri" :location-name "jobId")
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment common-lisp:null)
                         :accessor
                         struct-shape-associate-targets-with-job-request-comment
                         :shape "Comment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor
                         struct-shape-associate-targets-with-job-request-namespace-id
                         :shape "NamespaceId" :location "querystring"
                         :location-name "namespaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-targets-with-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-targets-with-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-targets-with-job-request
                    'make-associate-targets-with-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-targets-with-job-response common-lisp:nil
                       ((job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor
                         struct-shape-associate-targets-with-job-response-job-arn
                         :shape "JobArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-associate-targets-with-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor
                         struct-shape-associate-targets-with-job-response-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-targets-with-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-targets-with-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-targets-with-job-response
                    'make-associate-targets-with-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-targets-with-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-attach-policy-request-policy-name :shape
                         "PolicyName" :location "uri" :location-name
                         "policyName")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or policy-target common-lisp:null)
                         :accessor struct-shape-attach-policy-request-target
                         :shape "PolicyTarget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-policy-request 'make-attach-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-principal-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-attach-principal-policy-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-attach-principal-policy-request-principal
                         :shape "Principal" :location "header" :location-name
                         "x-amzn-iot-principal"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-principal-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-principal-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-principal-policy-request
                    'make-attach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-security-profile-request common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-attach-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName")
                        (security-profile-target-arn :initarg
                         :security-profile-target-arn :initform
                         (common-lisp:error
                          ":securityprofiletargetarn is required")
                         :type
                         (common-lisp:or security-profile-target-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-attach-security-profile-request-security-profile-target-arn
                         :shape "SecurityProfileTargetArn" :location
                         "querystring" :location-name
                         "securityProfileTargetArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-security-profile-request
                    'make-attach-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-security-profile-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-security-profile-response
                    'make-attach-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-thing-principal-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-attach-thing-principal-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-attach-thing-principal-request-principal
                         :shape "Principal" :location "header" :location-name
                         "x-amzn-principal"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-thing-principal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-thing-principal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-request
                    'make-attach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-thing-principal-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-thing-principal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-thing-principal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-response
                    'make-attach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   common-lisp:nil))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute-payload common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-attribute-payload-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (merge :initarg :merge :initform common-lisp:nil :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         struct-shape-attribute-payload-merge :shape "Flag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-payload 'make-attribute-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge))
      (common-lisp:list
       (common-lisp:cons "merge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-payload))
   common-lisp:nil))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype attributes-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass audit-check-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-audit-check-configuration-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-check-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-check-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-check-configuration
                    'make-audit-check-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-check-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-check-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-check-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-check-configurations () 'common-lisp:hash-table)
 (common-lisp:defun make-audit-check-configurations
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass audit-check-details common-lisp:nil
                       ((check-run-status :initarg :check-run-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-run-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-check-details-check-run-status
                         :shape "AuditCheckRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (check-compliant :initarg :check-compliant :initform
                         common-lisp:nil :type
                         (common-lisp:or check-compliant common-lisp:null)
                         :accessor
                         struct-shape-audit-check-details-check-compliant
                         :shape "CheckCompliant" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-resources-count :initarg :total-resources-count
                         :initform common-lisp:nil :type
                         (common-lisp:or total-resources-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-check-details-total-resources-count
                         :shape "TotalResourcesCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-compliant-resources-count :initarg
                         :non-compliant-resources-count :initform
                         common-lisp:nil :type
                         (common-lisp:or non-compliant-resources-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-check-details-non-compliant-resources-count
                         :shape "NonCompliantResourcesCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (suppressed-non-compliant-resources-count :initarg
                         :suppressed-non-compliant-resources-count :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          suppressed-non-compliant-resources-count
                          common-lisp:null)
                         :accessor
                         struct-shape-audit-check-details-suppressed-non-compliant-resources-count
                         :shape "SuppressedNonCompliantResourcesCount"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-audit-check-details-error-code :shape
                         "ErrorCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-audit-check-details-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-check-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-check-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-check-details 'make-audit-check-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-check-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-check-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-run-status))
      (common-lisp:list
       (common-lisp:cons "checkRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-compliant))
      (common-lisp:list
       (common-lisp:cons "checkCompliant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-resources-count))
      (common-lisp:list
       (common-lisp:cons "totalResourcesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-resources-count))
      (common-lisp:list
       (common-lisp:cons "nonCompliantResourcesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-non-compliant-resources-count))
      (common-lisp:list
       (common-lisp:cons "suppressedNonCompliantResourcesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-check-details))
   common-lisp:nil))
(common-lisp:deftype audit-check-name () 'common-lisp:string)
(common-lisp:deftype audit-check-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-check-to-actions-mapping ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-check-to-actions-mapping
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype audit-check-to-reason-code-filter ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-check-to-reason-code-filter
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype audit-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-details () 'common-lisp:hash-table)
 (common-lisp:defun make-audit-details (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass audit-finding common-lisp:nil
                       ((finding-id :initarg :finding-id :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-audit-finding-finding-id :shape
                         "FindingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or audit-task-id common-lisp:null)
                         :accessor struct-shape-audit-finding-task-id :shape
                         "AuditTaskId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (check-name :initarg :check-name :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor struct-shape-audit-finding-check-name :shape
                         "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-start-time :initarg :task-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-audit-finding-task-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (finding-time :initarg :finding-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-audit-finding-finding-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type
                         (common-lisp:or audit-finding-severity
                                         common-lisp:null)
                         :accessor struct-shape-audit-finding-severity :shape
                         "AuditFindingSeverity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-compliant-resource :initarg
                         :non-compliant-resource :initform common-lisp:nil
                         :type
                         (common-lisp:or non-compliant-resource
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-finding-non-compliant-resource
                         :shape "NonCompliantResource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (related-resources :initarg :related-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or related-resources common-lisp:null)
                         :accessor struct-shape-audit-finding-related-resources
                         :shape "RelatedResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason-for-non-compliance :initarg
                         :reason-for-non-compliance :initform common-lisp:nil
                         :type
                         (common-lisp:or reason-for-non-compliance
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-finding-reason-for-non-compliance
                         :shape "ReasonForNonCompliance" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason-for-non-compliance-code :initarg
                         :reason-for-non-compliance-code :initform
                         common-lisp:nil :type
                         (common-lisp:or reason-for-non-compliance-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-finding-reason-for-non-compliance-code
                         :shape "ReasonForNonComplianceCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-suppressed :initarg :is-suppressed :initform
                         common-lisp:nil :type
                         (common-lisp:or is-suppressed common-lisp:null)
                         :accessor struct-shape-audit-finding-is-suppressed
                         :shape "IsSuppressed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audit-finding 'make-audit-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-id))
      (common-lisp:list
       (common-lisp:cons "findingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-time))
      (common-lisp:list
       (common-lisp:cons "findingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-resource))
      (common-lisp:list
       (common-lisp:cons "nonCompliantResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-resources))
      (common-lisp:list
       (common-lisp:cons "relatedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reason-for-non-compliance))
      (common-lisp:list
       (common-lisp:cons "reasonForNonCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reason-for-non-compliance-code))
      (common-lisp:list
       (common-lisp:cons "reasonForNonComplianceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-suppressed))
      (common-lisp:list
       (common-lisp:cons "isSuppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-finding))
   common-lisp:nil))
(common-lisp:deftype audit-finding-severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype audit-findings ()
   '(trivial-types:proper-list audit-finding))
 (common-lisp:defun make-audit-findings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-mitigation-action-execution-metadata
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-task-id
                         :shape "MitigationActionsTaskId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (finding-id :initarg :finding-id :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-finding-id
                         :shape "FindingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-action-name
                         :shape "MitigationActionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-id common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-action-id
                         :shape "MitigationActionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          audit-mitigation-actions-execution-status
                          common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-status
                         :shape "AuditMitigationActionsExecutionStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-action-execution-metadata-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-mitigation-action-execution-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audit-mitigation-action-execution-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-mitigation-action-execution-metadata
                    'make-audit-mitigation-action-execution-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-action-execution-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-action-execution-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-id))
      (common-lisp:list
       (common-lisp:cons "findingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-action-execution-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-mitigation-action-execution-metadata-list ()
   '(trivial-types:proper-list audit-mitigation-action-execution-metadata))
 (common-lisp:defun make-audit-mitigation-action-execution-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            audit-mitigation-action-execution-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-mitigation-actions-execution-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-mitigation-actions-task-metadata common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-actions-task-metadata-task-id
                         :shape "MitigationActionsTaskId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-audit-mitigation-actions-task-metadata-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-mitigation-actions-task-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-actions-task-metadata-task-status
                         :shape "AuditMitigationActionsTaskStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-mitigation-actions-task-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audit-mitigation-actions-task-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-mitigation-actions-task-metadata
                    'make-audit-mitigation-actions-task-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-mitigation-actions-task-metadata-list ()
   '(trivial-types:proper-list audit-mitigation-actions-task-metadata))
 (common-lisp:defun make-audit-mitigation-actions-task-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            audit-mitigation-actions-task-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype audit-mitigation-actions-task-statistics ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-mitigation-actions-task-statistics
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype audit-mitigation-actions-task-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-mitigation-actions-task-target common-lisp:nil
                       ((audit-task-id :initarg :audit-task-id :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-id common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-actions-task-target-audit-task-id
                         :shape "AuditTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (finding-ids :initarg :finding-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-ids common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-actions-task-target-finding-ids
                         :shape "FindingIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-check-to-reason-code-filter :initarg
                         :audit-check-to-reason-code-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-to-reason-code-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-mitigation-actions-task-target-audit-check-to-reason-code-filter
                         :shape "AuditCheckToReasonCodeFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-mitigation-actions-task-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audit-mitigation-actions-task-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-mitigation-actions-task-target
                    'make-audit-mitigation-actions-task-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-task-id))
      (common-lisp:list
       (common-lisp:cons "auditTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-to-reason-code-filter))
      (common-lisp:list
       (common-lisp:cons "auditCheckToReasonCodeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-mitigation-actions-task-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audit-notification-target common-lisp:nil
                       ((target-arn :initarg :target-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         struct-shape-audit-notification-target-target-arn
                         :shape "TargetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-audit-notification-target-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-audit-notification-target-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-notification-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-notification-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-notification-target
                    'make-audit-notification-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audit-notification-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audit-notification-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audit-notification-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-notification-target-configurations ()
   'common-lisp:hash-table)
 (common-lisp:defun make-audit-notification-target-configurations
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype audit-notification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-suppression common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         (common-lisp:error ":checkname is required") :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor struct-shape-audit-suppression-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resourceidentifier is required")
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-audit-suppression-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-audit-suppression-expiration-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suppress-indefinitely :initarg :suppress-indefinitely
                         :initform common-lisp:nil :type
                         (common-lisp:or suppress-indefinitely
                                         common-lisp:null)
                         :accessor
                         struct-shape-audit-suppression-suppress-indefinitely
                         :shape "SuppressIndefinitely" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-description common-lisp:null)
                         :accessor struct-shape-audit-suppression-description
                         :shape "AuditDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-suppression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-suppression
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-suppression 'make-audit-suppression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-suppression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-suppression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-suppression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-suppression-list ()
   '(trivial-types:proper-list audit-suppression))
 (common-lisp:defun make-audit-suppression-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-suppression))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audit-task-metadata common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or audit-task-id common-lisp:null)
                         :accessor struct-shape-audit-task-metadata-task-id
                         :shape "AuditTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-status common-lisp:null)
                         :accessor struct-shape-audit-task-metadata-task-status
                         :shape "AuditTaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-type :initarg :task-type :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-type common-lisp:null)
                         :accessor struct-shape-audit-task-metadata-task-type
                         :shape "AuditTaskType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-task-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-task-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audit-task-metadata 'make-audit-task-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-task-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-task-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "taskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-task-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audit-task-metadata-list ()
   '(trivial-types:proper-list audit-task-metadata))
 (common-lisp:defun make-audit-task-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-task-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-task-status () 'common-lisp:string)
(common-lisp:deftype audit-task-type () 'common-lisp:string)
(common-lisp:deftype auth-decision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auth-info common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor struct-shape-auth-info-action-type :shape
                         "ActionType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resources :initarg :resources :initform
                         (common-lisp:error ":resources is required") :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-auth-info-resources :shape "Resources"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auth-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auth-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'auth-info 'make-auth-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auth-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auth-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auth-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auth-infos () '(trivial-types:proper-list auth-info))
 (common-lisp:defun make-auth-infos
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auth-result common-lisp:nil
                       ((auth-info :initarg :auth-info :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-info common-lisp:null) :accessor
                         struct-shape-auth-result-auth-info :shape "AuthInfo"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed :initarg :allowed :initform common-lisp:nil
                         :type (common-lisp:or allowed common-lisp:null)
                         :accessor struct-shape-auth-result-allowed :shape
                         "Allowed" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (denied :initarg :denied :initform common-lisp:nil
                         :type (common-lisp:or denied common-lisp:null)
                         :accessor struct-shape-auth-result-denied :shape
                         "Denied" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-decision :initarg :auth-decision :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-decision common-lisp:null)
                         :accessor struct-shape-auth-result-auth-decision
                         :shape "AuthDecision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (missing-context-values :initarg
                         :missing-context-values :initform common-lisp:nil
                         :type
                         (common-lisp:or missing-context-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-auth-result-missing-context-values :shape
                         "MissingContextValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auth-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auth-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'auth-result 'make-auth-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auth-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auth-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-info))
      (common-lisp:list
       (common-lisp:cons "authInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed))
      (common-lisp:list
       (common-lisp:cons "allowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denied))
      (common-lisp:list
       (common-lisp:cons "denied"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-decision))
      (common-lisp:list
       (common-lisp:cons "authDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-context-values))
      (common-lisp:list
       (common-lisp:cons "missingContextValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auth-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auth-results () '(trivial-types:proper-list auth-result))
 (common-lisp:defun make-auth-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype authorizer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorizer-config common-lisp:nil
                       ((default-authorizer-name :initarg
                         :default-authorizer-name :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-authorizer-config-default-authorizer-name
                         :shape "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-authorizer-override :initarg
                         :allow-authorizer-override :initform common-lisp:nil
                         :type
                         (common-lisp:or allow-authorizer-override
                                         common-lisp:null)
                         :accessor
                         struct-shape-authorizer-config-allow-authorizer-override
                         :shape "AllowAuthorizerOverride" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorizer-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorizer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorizer-config 'make-authorizer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorizer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorizer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authorizer-name))
      (common-lisp:list
       (common-lisp:cons "defaultAuthorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-authorizer-override))
      (common-lisp:list
       (common-lisp:cons "allowAuthorizerOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorizer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorizer-description common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-authorizer-name
                         :shape "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-arn :initarg :authorizer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-arn common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-authorizer-arn
                         :shape "AuthorizerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-function-arn :initarg
                         :authorizer-function-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-authorizer-function-arn
                         :shape "AuthorizerFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (token-key-name :initarg :token-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or token-key-name common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-token-key-name
                         :shape "TokenKeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-signing-public-keys :initarg
                         :token-signing-public-keys :initform common-lisp:nil
                         :type (common-lisp:or public-key-map common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-token-signing-public-keys
                         :shape "PublicKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-status common-lisp:null)
                         :accessor struct-shape-authorizer-description-status
                         :shape "AuthorizerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-authorizer-description-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-authorizer-description-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-disabled :initarg :signing-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-key common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-signing-disabled
                         :shape "BooleanKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-caching-for-http :initarg
                         :enable-caching-for-http :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-caching-for-http
                                         common-lisp:null)
                         :accessor
                         struct-shape-authorizer-description-enable-caching-for-http
                         :shape "EnableCachingForHttp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorizer-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorizer-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorizer-description 'make-authorizer-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorizer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorizer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-function-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-name))
      (common-lisp:list
       (common-lisp:cons "tokenKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-signing-public-keys))
      (common-lisp:list
       (common-lisp:cons "tokenSigningPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-disabled))
      (common-lisp:list
       (common-lisp:cons "signingDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-caching-for-http))
      (common-lisp:list
       (common-lisp:cons "enableCachingForHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorizer-description))
   common-lisp:nil))
(common-lisp:deftype authorizer-function-arn () 'common-lisp:string)
(common-lisp:deftype authorizer-name () 'common-lisp:string)
(common-lisp:deftype authorizer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorizer-summary common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-authorizer-summary-authorizer-name :shape
                         "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-arn :initarg :authorizer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-arn common-lisp:null)
                         :accessor
                         struct-shape-authorizer-summary-authorizer-arn :shape
                         "AuthorizerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorizer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorizer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorizer-summary 'make-authorizer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorizer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorizer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorizer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorizers ()
   '(trivial-types:proper-list authorizer-summary))
 (common-lisp:defun make-authorizers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authorizer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-registration-status () 'common-lisp:string)
(common-lisp:deftype average () 'common-lisp:double-float)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-arn () 'common-lisp:string)
(common-lisp:deftype aws-iot-job-arn () 'common-lisp:string)
(common-lisp:deftype aws-iot-job-id () 'common-lisp:string)
(common-lisp:deftype aws-iot-sql-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-job-abort-config common-lisp:nil
                       ((abort-criteria-list :initarg :abort-criteria-list
                         :initform
                         (common-lisp:error ":abortcriterialist is required")
                         :type
                         (common-lisp:or aws-job-abort-criteria-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-job-abort-config-abort-criteria-list
                         :shape "AwsJobAbortCriteriaList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-abort-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-job-abort-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-abort-config 'make-aws-job-abort-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-job-abort-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-job-abort-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-criteria-list))
      (common-lisp:list
       (common-lisp:cons "abortCriteriaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-job-abort-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-job-abort-criteria common-lisp:nil
                       ((failure-type :initarg :failure-type :initform
                         (common-lisp:error ":failuretype is required") :type
                         (common-lisp:or aws-job-abort-criteria-failure-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-job-abort-criteria-failure-type
                         :shape "AwsJobAbortCriteriaFailureType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or aws-job-abort-criteria-abort-action
                                         common-lisp:null)
                         :accessor struct-shape-aws-job-abort-criteria-action
                         :shape "AwsJobAbortCriteriaAbortAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (threshold-percentage :initarg :threshold-percentage
                         :initform
                         (common-lisp:error ":thresholdpercentage is required")
                         :type
                         (common-lisp:or
                          aws-job-abort-criteria-abort-threshold-percentage
                          common-lisp:null)
                         :accessor
                         struct-shape-aws-job-abort-criteria-threshold-percentage
                         :shape "AwsJobAbortCriteriaAbortThresholdPercentage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-number-of-executed-things :initarg
                         :min-number-of-executed-things :initform
                         (common-lisp:error
                          ":minnumberofexecutedthings is required")
                         :type
                         (common-lisp:or
                          aws-job-abort-criteria-minimum-number-of-executed-things
                          common-lisp:null)
                         :accessor
                         struct-shape-aws-job-abort-criteria-min-number-of-executed-things
                         :shape
                         "AwsJobAbortCriteriaMinimumNumberOfExecutedThings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-abort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-job-abort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-abort-criteria 'make-aws-job-abort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-abort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-abort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "failureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "thresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-number-of-executed-things))
      (common-lisp:list
       (common-lisp:cons "minNumberOfExecutedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-abort-criteria))
   common-lisp:nil))
(common-lisp:deftype aws-job-abort-criteria-abort-action () 'common-lisp:string)
(common-lisp:deftype aws-job-abort-criteria-abort-threshold-percentage ()
  'common-lisp:double-float)
(common-lisp:deftype aws-job-abort-criteria-failure-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-job-abort-criteria-list ()
   '(trivial-types:proper-list aws-job-abort-criteria))
 (common-lisp:defun make-aws-job-abort-criteria-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-job-abort-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-job-abort-criteria-minimum-number-of-executed-things
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass aws-job-executions-rollout-config common-lisp:nil
                       ((maximum-per-minute :initarg :maximum-per-minute
                         :initform common-lisp:nil :type
                         (common-lisp:or maximum-per-minute common-lisp:null)
                         :accessor
                         struct-shape-aws-job-executions-rollout-config-maximum-per-minute
                         :shape "MaximumPerMinute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exponential-rate :initarg :exponential-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-job-exponential-rollout-rate
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-job-executions-rollout-config-exponential-rate
                         :shape "AwsJobExponentialRolloutRate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-executions-rollout-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-job-executions-rollout-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-executions-rollout-config
                    'make-aws-job-executions-rollout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-executions-rollout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-executions-rollout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-per-minute))
      (common-lisp:list
       (common-lisp:cons "maximumPerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exponential-rate))
      (common-lisp:list
       (common-lisp:cons "exponentialRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-executions-rollout-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-job-exponential-rollout-rate common-lisp:nil
                       ((base-rate-per-minute :initarg :base-rate-per-minute
                         :initform
                         (common-lisp:error ":baserateperminute is required")
                         :type
                         (common-lisp:or aws-job-rollout-rate-per-minute
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-job-exponential-rollout-rate-base-rate-per-minute
                         :shape "AwsJobRolloutRatePerMinute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (increment-factor :initarg :increment-factor :initform
                         (common-lisp:error ":incrementfactor is required")
                         :type
                         (common-lisp:or aws-job-rollout-increment-factor
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-job-exponential-rollout-rate-increment-factor
                         :shape "AwsJobRolloutIncrementFactor" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rate-increase-criteria :initarg
                         :rate-increase-criteria :initform
                         (common-lisp:error
                          ":rateincreasecriteria is required")
                         :type
                         (common-lisp:or aws-job-rate-increase-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-job-exponential-rollout-rate-rate-increase-criteria
                         :shape "AwsJobRateIncreaseCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-exponential-rollout-rate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-job-exponential-rollout-rate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-exponential-rollout-rate
                    'make-aws-job-exponential-rollout-rate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-exponential-rollout-rate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-exponential-rollout-rate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-rate-per-minute))
      (common-lisp:list
       (common-lisp:cons "baseRatePerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'increment-factor))
      (common-lisp:list
       (common-lisp:cons "incrementFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rate-increase-criteria))
      (common-lisp:list
       (common-lisp:cons "rateIncreaseCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-exponential-rollout-rate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-job-presigned-url-config common-lisp:nil
                       ((expires-in-sec :initarg :expires-in-sec :initform
                         common-lisp:nil :type
                         (common-lisp:or expires-in-seconds common-lisp:null)
                         :accessor
                         struct-shape-aws-job-presigned-url-config-expires-in-sec
                         :shape "ExpiresInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-presigned-url-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-job-presigned-url-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-presigned-url-config
                    'make-aws-job-presigned-url-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-presigned-url-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-presigned-url-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-sec))
      (common-lisp:list
       (common-lisp:cons "expiresInSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-presigned-url-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-job-rate-increase-criteria common-lisp:nil
                       ((number-of-notified-things :initarg
                         :number-of-notified-things :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          aws-job-rate-increase-criteria-number-of-things
                          common-lisp:null)
                         :accessor
                         struct-shape-aws-job-rate-increase-criteria-number-of-notified-things
                         :shape "AwsJobRateIncreaseCriteriaNumberOfThings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-succeeded-things :initarg
                         :number-of-succeeded-things :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          aws-job-rate-increase-criteria-number-of-things
                          common-lisp:null)
                         :accessor
                         struct-shape-aws-job-rate-increase-criteria-number-of-succeeded-things
                         :shape "AwsJobRateIncreaseCriteriaNumberOfThings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-rate-increase-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-job-rate-increase-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-rate-increase-criteria
                    'make-aws-job-rate-increase-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-rate-increase-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-rate-increase-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-notified-things))
      (common-lisp:list
       (common-lisp:cons "numberOfNotifiedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-succeeded-things))
      (common-lisp:list
       (common-lisp:cons "numberOfSucceededThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-rate-increase-criteria))
   common-lisp:nil))
(common-lisp:deftype aws-job-rate-increase-criteria-number-of-things ()
  'common-lisp:integer)
(common-lisp:deftype aws-job-rollout-increment-factor ()
  'common-lisp:double-float)
(common-lisp:deftype aws-job-rollout-rate-per-minute () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass aws-job-timeout-config common-lisp:nil
                       ((in-progress-timeout-in-minutes :initarg
                         :in-progress-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          aws-job-timeout-in-progress-timeout-in-minutes
                          common-lisp:null)
                         :accessor
                         struct-shape-aws-job-timeout-config-in-progress-timeout-in-minutes
                         :shape "AwsJobTimeoutInProgressTimeoutInMinutes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-job-timeout-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-job-timeout-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-job-timeout-config 'make-aws-job-timeout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-timeout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-timeout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-progress-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "inProgressTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-job-timeout-config))
   common-lisp:nil))
(common-lisp:deftype aws-job-timeout-in-progress-timeout-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype batch-mode () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass behavior common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or behavior-name common-lisp:null)
                         :accessor struct-shape-behavior-name :shape
                         "BehaviorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric :initarg :metric :initform common-lisp:nil
                         :type
                         (common-lisp:or behavior-metric common-lisp:null)
                         :accessor struct-shape-behavior-metric :shape
                         "BehaviorMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-dimension :initarg :metric-dimension :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-dimension common-lisp:null)
                         :accessor struct-shape-behavior-metric-dimension
                         :shape "MetricDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (criteria :initarg :criteria :initform common-lisp:nil
                         :type
                         (common-lisp:or behavior-criteria common-lisp:null)
                         :accessor struct-shape-behavior-criteria :shape
                         "BehaviorCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppress-alerts :initarg :suppress-alerts :initform
                         common-lisp:nil :type
                         (common-lisp:or suppress-alerts common-lisp:null)
                         :accessor struct-shape-behavior-suppress-alerts :shape
                         "SuppressAlerts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-metric :initarg :export-metric :initform
                         common-lisp:nil :type
                         (common-lisp:or export-metric common-lisp:null)
                         :accessor struct-shape-behavior-export-metric :shape
                         "ExportMetric" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-behavior
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'behavior 'make-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-dimension))
      (common-lisp:list
       (common-lisp:cons "metricDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppress-alerts))
      (common-lisp:list
       (common-lisp:cons "suppressAlerts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-metric))
      (common-lisp:list
       (common-lisp:cons "exportMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass behavior-criteria common-lisp:nil
                       ((comparison-operator :initarg :comparison-operator
                         :initform common-lisp:nil :type
                         (common-lisp:or comparison-operator common-lisp:null)
                         :accessor
                         struct-shape-behavior-criteria-comparison-operator
                         :shape "ComparisonOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor struct-shape-behavior-criteria-value :shape
                         "MetricValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or duration-seconds common-lisp:null)
                         :accessor
                         struct-shape-behavior-criteria-duration-seconds :shape
                         "DurationSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consecutive-datapoints-to-alarm :initarg
                         :consecutive-datapoints-to-alarm :initform
                         common-lisp:nil :type
                         (common-lisp:or consecutive-datapoints-to-alarm
                                         common-lisp:null)
                         :accessor
                         struct-shape-behavior-criteria-consecutive-datapoints-to-alarm
                         :shape "ConsecutiveDatapointsToAlarm" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (consecutive-datapoints-to-clear :initarg
                         :consecutive-datapoints-to-clear :initform
                         common-lisp:nil :type
                         (common-lisp:or consecutive-datapoints-to-clear
                                         common-lisp:null)
                         :accessor
                         struct-shape-behavior-criteria-consecutive-datapoints-to-clear
                         :shape "ConsecutiveDatapointsToClear" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistical-threshold :initarg :statistical-threshold
                         :initform common-lisp:nil :type
                         (common-lisp:or statistical-threshold
                                         common-lisp:null)
                         :accessor
                         struct-shape-behavior-criteria-statistical-threshold
                         :shape "StatisticalThreshold" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ml-detection-config :initarg :ml-detection-config
                         :initform common-lisp:nil :type
                         (common-lisp:or machine-learning-detection-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-behavior-criteria-ml-detection-config
                         :shape "MachineLearningDetectionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-behavior-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'behavior-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'behavior-criteria 'make-behavior-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input behavior-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input behavior-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "durationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consecutive-datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "consecutiveDatapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consecutive-datapoints-to-clear))
      (common-lisp:list
       (common-lisp:cons "consecutiveDatapointsToClear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'statistical-threshold))
      (common-lisp:list
       (common-lisp:cons "statisticalThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ml-detection-config))
      (common-lisp:list
       (common-lisp:cons "mlDetectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input behavior-criteria))
   common-lisp:nil))
(common-lisp:deftype behavior-criteria-type () 'common-lisp:string)
(common-lisp:deftype behavior-metric () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype behavior-model-training-summaries ()
   '(trivial-types:proper-list behavior-model-training-summary))
 (common-lisp:defun make-behavior-model-training-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            behavior-model-training-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass behavior-model-training-summary common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-behavior-model-training-summary-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behavior-name :initarg :behavior-name :initform
                         common-lisp:nil :type
                         (common-lisp:or behavior-name common-lisp:null)
                         :accessor
                         struct-shape-behavior-model-training-summary-behavior-name
                         :shape "BehaviorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-data-collection-start-date :initarg
                         :training-data-collection-start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-behavior-model-training-summary-training-data-collection-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-status :initarg :model-status :initform
                         common-lisp:nil :type
                         (common-lisp:or model-status common-lisp:null)
                         :accessor
                         struct-shape-behavior-model-training-summary-model-status
                         :shape "ModelStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datapoints-collection-percentage :initarg
                         :datapoints-collection-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or data-collection-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-behavior-model-training-summary-datapoints-collection-percentage
                         :shape "DataCollectionPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-model-refresh-date :initarg
                         :last-model-refresh-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-behavior-model-training-summary-last-model-refresh-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-behavior-model-training-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'behavior-model-training-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'behavior-model-training-summary
                    'make-behavior-model-training-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          behavior-model-training-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          behavior-model-training-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior-name))
      (common-lisp:list
       (common-lisp:cons "behaviorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-collection-start-date))
      (common-lisp:list
       (common-lisp:cons "trainingDataCollectionStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-status))
      (common-lisp:list
       (common-lisp:cons "modelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datapoints-collection-percentage))
      (common-lisp:list
       (common-lisp:cons "datapointsCollectionPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-model-refresh-date))
      (common-lisp:list
       (common-lisp:cons "lastModelRefreshDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          behavior-model-training-summary))
   common-lisp:nil))
(common-lisp:deftype behavior-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype behaviors () '(trivial-types:proper-list behavior))
 (common-lisp:defun make-behaviors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list behavior))
   aws-sdk/generator/shape::members))
(common-lisp:deftype billing-group-arn () 'common-lisp:string)
(common-lisp:deftype billing-group-description () 'common-lisp:string)
(common-lisp:deftype billing-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass billing-group-metadata common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-billing-group-metadata-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-billing-group-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'billing-group-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'billing-group-metadata 'make-billing-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-metadata))
   common-lisp:nil))
(common-lisp:deftype billing-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype billing-group-name-and-arn-list ()
   '(trivial-types:proper-list group-name-and-arn))
 (common-lisp:defun make-billing-group-name-and-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-name-and-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass billing-group-properties common-lisp:nil
                       ((billing-group-description :initarg
                         :billing-group-description :initform common-lisp:nil
                         :type
                         (common-lisp:or billing-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-billing-group-properties-billing-group-description
                         :shape "BillingGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-billing-group-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'billing-group-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'billing-group-properties 'make-billing-group-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-description))
      (common-lisp:list
       (common-lisp:cons "billingGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          billing-group-properties))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-key () 'common-lisp:boolean)
(common-lisp:deftype boolean-wrapper-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bucket common-lisp:nil
                       ((key-value :initarg :key-value :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-key-value common-lisp:null)
                         :accessor struct-shape-bucket-key-value :shape
                         "BucketKeyValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-bucket-count :shape "Count" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-value))
      (common-lisp:list
       (common-lisp:cons "keyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:deftype bucket-key-value () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-buckets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass buckets-aggregation-type common-lisp:nil
                       ((terms-aggregation :initarg :terms-aggregation
                         :initform common-lisp:nil :type
                         (common-lisp:or terms-aggregation common-lisp:null)
                         :accessor
                         struct-shape-buckets-aggregation-type-terms-aggregation
                         :shape "TermsAggregation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-buckets-aggregation-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'buckets-aggregation-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'buckets-aggregation-type 'make-buckets-aggregation-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          buckets-aggregation-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          buckets-aggregation-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terms-aggregation))
      (common-lisp:list
       (common-lisp:cons "termsAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          buckets-aggregation-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cacertificate common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor struct-shape-cacertificate-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor struct-shape-cacertificate-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or cacertificate-status common-lisp:null)
                         :accessor struct-shape-cacertificate-status :shape
                         "CACertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-cacertificate-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cacertificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cacertificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cacertificate 'make-cacertificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cacertificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cacertificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cacertificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cacertificate-description common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or cacertificate-status common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-status :shape
                         "CACertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-owned-by :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-cacertificate-description-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-registration-status :initarg
                         :auto-registration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-registration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-auto-registration-status
                         :shape "AutoRegistrationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-cacertificate-description-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-version :initarg :customer-version :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-version common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-customer-version
                         :shape "CustomerVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generation-id common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-generation-id
                         :shape "GenerationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validity :initarg :validity :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-validity common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-validity :shape
                         "CertificateValidity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-mode :initarg :certificate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-mode common-lisp:null)
                         :accessor
                         struct-shape-cacertificate-description-certificate-mode
                         :shape "CertificateMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cacertificate-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cacertificate-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cacertificate-description
                    'make-cacertificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-registration-status))
      (common-lisp:list
       (common-lisp:cons "autoRegistrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-version))
      (common-lisp:list
       (common-lisp:cons "customerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   common-lisp:nil))
(common-lisp:deftype cacertificate-status () 'common-lisp:string)
(common-lisp:deftype cacertificate-update-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cacertificates ()
   '(trivial-types:proper-list cacertificate))
 (common-lisp:defun make-cacertificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cacertificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-audit-mitigation-actions-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-audit-mitigation-actions-task-request-task-id
                         :shape "MitigationActionsTaskId" :location "uri"
                         :location-name "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-audit-mitigation-actions-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-audit-mitigation-actions-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-mitigation-actions-task-request
                    'make-cancel-audit-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-audit-mitigation-actions-task-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-audit-mitigation-actions-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-audit-mitigation-actions-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-mitigation-actions-task-response
                    'make-cancel-audit-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-audit-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or audit-task-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-audit-task-request-task-id :shape
                         "AuditTaskId" :location "uri" :location-name
                         "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-audit-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-audit-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-task-request
                    'make-cancel-audit-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-audit-task-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-audit-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-audit-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-audit-task-response
                    'make-cancel-audit-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-audit-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-certificate-transfer-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-certificate-transfer-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-certificate-transfer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-certificate-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-certificate-transfer-request
                    'make-cancel-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-detect-mitigation-actions-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-detect-mitigation-actions-task-request-task-id
                         :shape "MitigationActionsTaskId" :location "uri"
                         :location-name "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-detect-mitigation-actions-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-detect-mitigation-actions-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-detect-mitigation-actions-task-request
                    'make-cancel-detect-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-detect-mitigation-actions-task-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-detect-mitigation-actions-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-detect-mitigation-actions-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-detect-mitigation-actions-task-response
                    'make-cancel-detect-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-detect-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-execution-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-cancel-job-execution-request-job-id
                         :shape "JobId" :location "uri" :location-name "jobId")
                        (thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-cancel-job-execution-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-cancel-job-execution-request-force :shape
                         "ForceFlag" :location "querystring" :location-name
                         "force")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or expected-version common-lisp:null)
                         :accessor
                         struct-shape-cancel-job-execution-request-expected-version
                         :shape "ExpectedVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-details :initarg :status-details :initform
                         common-lisp:nil :type
                         (common-lisp:or details-map common-lisp:null)
                         :accessor
                         struct-shape-cancel-job-execution-request-status-details
                         :shape "DetailsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-execution-request
                    'make-cancel-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "statusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-cancel-job-request-job-id :shape "JobId"
                         :location "uri" :location-name "jobId")
                        (reason-code :initarg :reason-code :initform
                         common-lisp:nil :type
                         (common-lisp:or reason-code common-lisp:null)
                         :accessor struct-shape-cancel-job-request-reason-code
                         :shape "ReasonCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment common-lisp:null)
                         :accessor struct-shape-cancel-job-request-comment
                         :shape "Comment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-cancel-job-request-force :shape
                         "ForceFlag" :location "querystring" :location-name
                         "force"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "reasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-response common-lisp:nil
                       ((job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor struct-shape-cancel-job-response-job-arn
                         :shape "JobArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-cancel-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor struct-shape-cancel-job-response-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:deftype canceled-checks-count () 'common-lisp:integer)
(common-lisp:deftype canceled-findings-count () 'common-lisp:integer)
(common-lisp:deftype canceled-things () 'common-lisp:integer)
(common-lisp:deftype canned-access-control-list () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor struct-shape-certificate-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor struct-shape-certificate-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-status common-lisp:null)
                         :accessor struct-shape-certificate-status :shape
                         "CertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-mode :initarg :certificate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-mode common-lisp:null)
                         :accessor struct-shape-certificate-certificate-mode
                         :shape "CertificateMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-certificate-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-conflict-exception
                    'certificate-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass certificate-description common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificate-id :initarg :ca-certificate-id
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-ca-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-status common-lisp:null)
                         :accessor struct-shape-certificate-description-status
                         :shape "CertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owned-by :initarg :owned-by :initform common-lisp:nil
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-owned-by :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-owned-by :initarg :previous-owned-by
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-previous-owned-by
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-certificate-description-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-certificate-description-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-version :initarg :customer-version :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-version common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-customer-version
                         :shape "CustomerVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transfer-data :initarg :transfer-data :initform
                         common-lisp:nil :type
                         (common-lisp:or transfer-data common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-transfer-data
                         :shape "TransferData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generation-id common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-generation-id
                         :shape "GenerationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validity :initarg :validity :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-validity common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-validity :shape
                         "CertificateValidity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-mode :initarg :certificate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-mode common-lisp:null)
                         :accessor
                         struct-shape-certificate-description-certificate-mode
                         :shape "CertificateMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-description 'make-certificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-id))
      (common-lisp:list
       (common-lisp:cons "caCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-owned-by))
      (common-lisp:list
       (common-lisp:cons "previousOwnedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-version))
      (common-lisp:list
       (common-lisp:cons "customerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-data))
      (common-lisp:list
       (common-lisp:cons "transferData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   common-lisp:nil))
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:deftype certificate-mode () 'common-lisp:string)
(common-lisp:deftype certificate-name () 'common-lisp:string)
(common-lisp:deftype certificate-path-on-device () 'common-lisp:string)
(common-lisp:deftype certificate-pem () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-provider-account-default-for-operations ()
   '(trivial-types:proper-list certificate-provider-operation))
 (common-lisp:defun make-certificate-provider-account-default-for-operations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-provider-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-provider-arn () 'common-lisp:string)
(common-lisp:deftype certificate-provider-function-arn () 'common-lisp:string)
(common-lisp:deftype certificate-provider-name () 'common-lisp:string)
(common-lisp:deftype certificate-provider-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-provider-summary common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-provider-summary-certificate-provider-name
                         :shape "CertificateProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-provider-arn :initarg
                         :certificate-provider-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-provider-summary-certificate-provider-arn
                         :shape "CertificateProviderArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-provider-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-provider-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-provider-summary
                    'make-certificate-provider-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-provider-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-provider-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-provider-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-providers ()
   '(trivial-types:proper-list certificate-provider-summary))
 (common-lisp:defun make-certificate-providers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-provider-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-signing-request () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-state-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-state-exception
                    'certificate-state-exception-message)))
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-validation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-validation-exception
                    'certificate-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass certificate-validity common-lisp:nil
                       ((not-before :initarg :not-before :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-certificate-validity-not-before :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not-after :initarg :not-after :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-certificate-validity-not-after :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-validity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-validity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-validity 'make-certificate-validity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "notBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "notAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-validity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificates () '(trivial-types:proper-list certificate))
 (common-lisp:defun make-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:deftype check-compliant () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cidrs () '(trivial-types:proper-list cidr))
 (common-lisp:defun make-cidrs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass clear-default-authorizer-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clear-default-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'clear-default-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clear-default-authorizer-request
                    'make-clear-default-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clear-default-authorizer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clear-default-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'clear-default-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clear-default-authorizer-response
                    'make-clear-default-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clear-default-authorizer-response))
   common-lisp:nil))
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype client-properties () 'common-lisp:hash-table)
 (common-lisp:defun make-client-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloudwatch-alarm-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-cloudwatch-alarm-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alarm-name :initarg :alarm-name :initform
                         (common-lisp:error ":alarmname is required") :type
                         (common-lisp:or alarm-name common-lisp:null) :accessor
                         struct-shape-cloudwatch-alarm-action-alarm-name :shape
                         "AlarmName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :initform
                         (common-lisp:error ":statereason is required") :type
                         (common-lisp:or state-reason common-lisp:null)
                         :accessor
                         struct-shape-cloudwatch-alarm-action-state-reason
                         :shape "StateReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-value :initarg :state-value :initform
                         (common-lisp:error ":statevalue is required") :type
                         (common-lisp:or state-value common-lisp:null)
                         :accessor
                         struct-shape-cloudwatch-alarm-action-state-value
                         :shape "StateValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloudwatch-alarm-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloudwatch-alarm-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-alarm-action 'make-cloudwatch-alarm-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "stateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-value))
      (common-lisp:list
       (common-lisp:cons "stateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloudwatch-logs-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-cloudwatch-logs-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         (common-lisp:error ":loggroupname is required") :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         struct-shape-cloudwatch-logs-action-log-group-name
                         :shape "LogGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-mode :initarg :batch-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-mode common-lisp:null) :accessor
                         struct-shape-cloudwatch-logs-action-batch-mode :shape
                         "BatchMode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloudwatch-logs-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloudwatch-logs-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-logs-action 'make-cloudwatch-logs-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloudwatch-metric-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-cloudwatch-metric-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric-namespace :initarg :metric-namespace :initform
                         (common-lisp:error ":metricnamespace is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cloudwatch-metric-action-metric-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloudwatch-metric-action-metric-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-value :initarg :metric-value :initform
                         (common-lisp:error ":metricvalue is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloudwatch-metric-action-metric-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-unit :initarg :metric-unit :initform
                         (common-lisp:error ":metricunit is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloudwatch-metric-action-metric-unit
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-timestamp :initarg :metric-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloudwatch-metric-action-metric-timestamp
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloudwatch-metric-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloudwatch-metric-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-metric-action 'make-cloudwatch-metric-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-unit))
      (common-lisp:list
       (common-lisp:cons "metricUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-timestamp))
      (common-lisp:list
       (common-lisp:cons "metricTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   common-lisp:nil))
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-signing common-lisp:nil
                       ((aws-signer-job-id :initarg :aws-signer-job-id
                         :initform common-lisp:nil :type
                         (common-lisp:or signing-job-id common-lisp:null)
                         :accessor struct-shape-code-signing-aws-signer-job-id
                         :shape "SigningJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-signing-job-parameter :initarg
                         :start-signing-job-parameter :initform common-lisp:nil
                         :type
                         (common-lisp:or start-signing-job-parameter
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-signing-start-signing-job-parameter
                         :shape "StartSigningJobParameter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-code-signing :initarg :custom-code-signing
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-code-signing common-lisp:null)
                         :accessor
                         struct-shape-code-signing-custom-code-signing :shape
                         "CustomCodeSigning" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-signing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-signing
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'code-signing 'make-code-signing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-signing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-signing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-signer-job-id))
      (common-lisp:list
       (common-lisp:cons "awsSignerJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-signing-job-parameter))
      (common-lisp:list
       (common-lisp:cons "startSigningJobParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-code-signing))
      (common-lisp:list
       (common-lisp:cons "customCodeSigning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-signing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-signing-certificate-chain common-lisp:nil
                       ((certificate-name :initarg :certificate-name :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-name common-lisp:null)
                         :accessor
                         struct-shape-code-signing-certificate-chain-certificate-name
                         :shape "CertificateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inline-document :initarg :inline-document :initform
                         common-lisp:nil :type
                         (common-lisp:or inline-document common-lisp:null)
                         :accessor
                         struct-shape-code-signing-certificate-chain-inline-document
                         :shape "InlineDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-signing-certificate-chain
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'code-signing-certificate-chain
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-signing-certificate-chain
                    'make-code-signing-certificate-chain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-certificate-chain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-certificate-chain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inline-document))
      (common-lisp:list
       (common-lisp:cons "inlineDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-certificate-chain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-signing-signature common-lisp:nil
                       ((inline-document :initarg :inline-document :initform
                         common-lisp:nil :type
                         (common-lisp:or signature common-lisp:null) :accessor
                         struct-shape-code-signing-signature-inline-document
                         :shape "Signature" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-signing-signature
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-signing-signature
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-signing-signature 'make-code-signing-signature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-signature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-signature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inline-document))
      (common-lisp:list
       (common-lisp:cons "inlineDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-signing-signature))
   common-lisp:nil))
(common-lisp:deftype cognito-identity-pool-id () 'common-lisp:string)
(common-lisp:deftype comment () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:deftype compliant-checks-count () 'common-lisp:integer)
(common-lisp:deftype confidence-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor struct-shape-configuration-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-topic-rule-destination-request common-lisp:nil
                       ((confirmation-token :initarg :confirmation-token
                         :initform
                         (common-lisp:error ":confirmationtoken is required")
                         :type
                         (common-lisp:or confirmation-token common-lisp:null)
                         :accessor
                         struct-shape-confirm-topic-rule-destination-request-confirmation-token
                         :shape "ConfirmationToken" :location "uri"
                         :location-name "confirmationToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-topic-rule-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-topic-rule-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-topic-rule-destination-request
                    'make-confirm-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass confirm-topic-rule-destination-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confirm-topic-rule-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'confirm-topic-rule-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confirm-topic-rule-destination-response
                    'make-confirm-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:deftype confirmation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id)))
(common-lisp:progn
 (common-lisp:define-condition conflicting-resource-update-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-resource-update-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflicting-resource-update-exception
                    'conflicting-resource-update-exception-message)))
(common-lisp:deftype connectivity-timestamp () 'common-lisp:integer)
(common-lisp:deftype consecutive-datapoints-to-alarm () 'common-lisp:integer)
(common-lisp:deftype consecutive-datapoints-to-clear () 'common-lisp:integer)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype correlation-data () 'common-lisp:string)
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-audit-suppression-request common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         (common-lisp:error ":checkname is required") :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-create-audit-suppression-request-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resourceidentifier is required")
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-audit-suppression-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-audit-suppression-request-expiration-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppress-indefinitely :initarg :suppress-indefinitely
                         :initform common-lisp:nil :type
                         (common-lisp:or suppress-indefinitely
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-audit-suppression-request-suppress-indefinitely
                         :shape "SuppressIndefinitely" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-description common-lisp:null)
                         :accessor
                         struct-shape-create-audit-suppression-request-description
                         :shape "AuditDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error ":clientrequesttoken is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-audit-suppression-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-audit-suppression-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-audit-suppression-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-audit-suppression-request
                    'make-create-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-audit-suppression-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-audit-suppression-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-audit-suppression-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-audit-suppression-response
                    'make-create-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-authorizer-request common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         (common-lisp:error ":authorizername is required")
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-authorizer-name
                         :shape "AuthorizerName" :location "uri" :location-name
                         "authorizerName")
                        (authorizer-function-arn :initarg
                         :authorizer-function-arn :initform
                         (common-lisp:error
                          ":authorizerfunctionarn is required")
                         :type
                         (common-lisp:or authorizer-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-authorizer-function-arn
                         :shape "AuthorizerFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (token-key-name :initarg :token-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or token-key-name common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-token-key-name
                         :shape "TokenKeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-signing-public-keys :initarg
                         :token-signing-public-keys :initform common-lisp:nil
                         :type (common-lisp:or public-key-map common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-token-signing-public-keys
                         :shape "PublicKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-status common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-status :shape
                         "AuthorizerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-authorizer-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-disabled :initarg :signing-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-key common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-signing-disabled
                         :shape "BooleanKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-caching-for-http :initarg
                         :enable-caching-for-http :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-caching-for-http
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-request-enable-caching-for-http
                         :shape "EnableCachingForHttp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-authorizer-request
                    'make-create-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-function-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-name))
      (common-lisp:list
       (common-lisp:cons "tokenKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-signing-public-keys))
      (common-lisp:list
       (common-lisp:cons "tokenSigningPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-disabled))
      (common-lisp:list
       (common-lisp:cons "signingDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-caching-for-http))
      (common-lisp:list
       (common-lisp:cons "enableCachingForHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-authorizer-response common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-response-authorizer-name
                         :shape "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-arn :initarg :authorizer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-arn common-lisp:null)
                         :accessor
                         struct-shape-create-authorizer-response-authorizer-arn
                         :shape "AuthorizerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-authorizer-response
                    'make-create-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform
                         (common-lisp:error ":billinggroupname is required")
                         :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location "uri"
                         :location-name "billingGroupName")
                        (billing-group-properties :initarg
                         :billing-group-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or billing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-billing-group-request-billing-group-properties
                         :shape "BillingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-billing-group-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-billing-group-request
                    'make-create-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-properties))
      (common-lisp:list
       (common-lisp:cons "billingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-billing-group-response common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-billing-group-response-billing-group-name
                         :shape "BillingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-arn :initarg :billing-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-create-billing-group-response-billing-group-arn
                         :shape "BillingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-id :initarg :billing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-group-id common-lisp:null)
                         :accessor
                         struct-shape-create-billing-group-response-billing-group-id
                         :shape "BillingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-billing-group-response
                    'make-create-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-id))
      (common-lisp:list
       (common-lisp:cons "billingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-from-csr-request common-lisp:nil
                       ((certificate-signing-request :initarg
                         :certificate-signing-request :initform
                         (common-lisp:error
                          ":certificatesigningrequest is required")
                         :type
                         (common-lisp:or certificate-signing-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-from-csr-request-certificate-signing-request
                         :shape "CertificateSigningRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (set-as-active :initarg :set-as-active :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-active common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-from-csr-request-set-as-active
                         :shape "SetAsActive" :location "querystring"
                         :location-name "setAsActive"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-from-csr-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-from-csr-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-request
                    'make-create-certificate-from-csr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-signing-request))
      (common-lisp:list
       (common-lisp:cons "certificateSigningRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-from-csr-response common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-from-csr-response-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-from-csr-response-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-from-csr-response-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-from-csr-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-from-csr-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-response
                    'make-create-certificate-from-csr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-provider-request common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform
                         (common-lisp:error
                          ":certificateprovidername is required")
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-provider-request-certificate-provider-name
                         :shape "CertificateProviderName" :location "uri"
                         :location-name "certificateProviderName")
                        (lambda-function-arn :initarg :lambda-function-arn
                         :initform
                         (common-lisp:error ":lambdafunctionarn is required")
                         :type
                         (common-lisp:or certificate-provider-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-provider-request-lambda-function-arn
                         :shape "CertificateProviderFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-default-for-operations :initarg
                         :account-default-for-operations :initform
                         (common-lisp:error
                          ":accountdefaultforoperations is required")
                         :type
                         (common-lisp:or
                          certificate-provider-account-default-for-operations
                          common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-provider-request-account-default-for-operations
                         :shape
                         "CertificateProviderAccountDefaultForOperations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-provider-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-certificate-provider-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-provider-request
                    'make-create-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-default-for-operations))
      (common-lisp:list
       (common-lisp:cons "accountDefaultForOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-provider-response common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-provider-response-certificate-provider-name
                         :shape "CertificateProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-provider-arn :initarg
                         :certificate-provider-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-provider-response-certificate-provider-arn
                         :shape "CertificateProviderArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-provider-response
                    'make-create-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-create-custom-metric-request-metric-name
                         :shape "MetricName" :location "uri" :location-name
                         "metricName")
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-metric-request-display-name
                         :shape "CustomMetricDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-type :initarg :metric-type :initform
                         (common-lisp:error ":metrictype is required") :type
                         (common-lisp:or custom-metric-type common-lisp:null)
                         :accessor
                         struct-shape-create-custom-metric-request-metric-type
                         :shape "CustomMetricType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-custom-metric-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error ":clientrequesttoken is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-custom-metric-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-custom-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-metric-request
                    'make-create-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "metricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-metric-response common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-create-custom-metric-response-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-arn :initarg :metric-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-arn common-lisp:null)
                         :accessor
                         struct-shape-create-custom-metric-response-metric-arn
                         :shape "CustomMetricArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-metric-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-metric-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-metric-response
                    'make-create-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dimension-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-create-dimension-request-name
                         :shape "DimensionName" :location "uri" :location-name
                         "name")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or dimension-type common-lisp:null)
                         :accessor struct-shape-create-dimension-request-type
                         :shape "DimensionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-values :initarg :string-values :initform
                         (common-lisp:error ":stringvalues is required") :type
                         (common-lisp:or dimension-string-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dimension-request-string-values
                         :shape "DimensionStringValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dimension-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error ":clientrequesttoken is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-dimension-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dimension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dimension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dimension-request 'make-create-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dimension-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-create-dimension-response-name
                         :shape "DimensionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or dimension-arn common-lisp:null)
                         :accessor struct-shape-create-dimension-response-arn
                         :shape "DimensionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dimension-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dimension-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dimension-response
                    'make-create-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-configuration-request common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform
                         (common-lisp:error
                          ":domainconfigurationname is required")
                         :type
                         (common-lisp:or domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-domain-configuration-name
                         :shape "DomainConfigurationName" :location "uri"
                         :location-name "domainConfigurationName")
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificate-arns :initarg
                         :server-certificate-arns :initform common-lisp:nil
                         :type
                         (common-lisp:or server-certificate-arns
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-server-certificate-arns
                         :shape "ServerCertificateArns" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (validation-certificate-arn :initarg
                         :validation-certificate-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or acm-certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-validation-certificate-arn
                         :shape "AcmCertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-config :initarg :authorizer-config
                         :initform common-lisp:nil :type
                         (common-lisp:or authorizer-config common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-authorizer-config
                         :shape "AuthorizerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-type :initarg :service-type :initform
                         common-lisp:nil :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-service-type
                         :shape "ServiceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-domain-configuration-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls-config :initarg :tls-config :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-config common-lisp:null) :accessor
                         struct-shape-create-domain-configuration-request-tls-config
                         :shape "TlsConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificate-config :initarg
                         :server-certificate-config :initform common-lisp:nil
                         :type
                         (common-lisp:or server-certificate-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-request-server-certificate-config
                         :shape "ServerCertificateConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-domain-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-configuration-request
                    'make-create-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-arns))
      (common-lisp:list
       (common-lisp:cons "serverCertificateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "validationCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-config))
      (common-lisp:list
       (common-lisp:cons "authorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-config))
      (common-lisp:list
       (common-lisp:cons "tlsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-config))
      (common-lisp:list
       (common-lisp:cons "serverCertificateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-configuration-response common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-response-domain-configuration-name
                         :shape "DomainConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-configuration-arn :initarg
                         :domain-configuration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-domain-configuration-response-domain-configuration-arn
                         :shape "DomainConfigurationArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-domain-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-domain-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-domain-configuration-response
                    'make-create-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dynamic-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (thing-group-properties :initarg
                         :thing-group-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-request-thing-group-properties
                         :shape "ThingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-create-dynamic-thing-group-request-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-dynamic-thing-group-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dynamic-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dynamic-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dynamic-thing-group-request
                    'make-create-dynamic-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dynamic-thing-group-response common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-response-thing-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-arn :initarg :thing-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-response-thing-group-arn
                         :shape "ThingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-id :initarg :thing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-id common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-response-thing-group-id
                         :shape "ThingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-create-dynamic-thing-group-response-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-response-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-create-dynamic-thing-group-response-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dynamic-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dynamic-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dynamic-thing-group-response
                    'make-create-dynamic-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dynamic-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-metric-name
                         :shape "FleetMetricName" :location "uri"
                         :location-name "metricName")
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-type :initarg :aggregation-type :initform
                         (common-lisp:error ":aggregationtype is required")
                         :type
                         (common-lisp:or aggregation-type common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-aggregation-type
                         :shape "AggregationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or fleet-metric-period common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-period :shape
                         "FleetMetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform
                         (common-lisp:error ":aggregationfield is required")
                         :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-description
                         :shape "FleetMetricDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-create-fleet-metric-request-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or fleet-metric-unit common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-request-unit :shape
                         "FleetMetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-fleet-metric-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fleet-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fleet-metric-request
                    'make-create-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-metric-response common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-response-metric-name
                         :shape "FleetMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-arn :initarg :metric-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-arn common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-metric-response-metric-arn
                         :shape "FleetMetricArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fleet-metric-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-metric-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fleet-metric-response
                    'make-create-fleet-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-create-job-request-job-id :shape "JobId"
                         :location "uri" :location-name "jobId")
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or job-targets common-lisp:null)
                         :accessor struct-shape-create-job-request-targets
                         :shape "JobTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-source :initarg :document-source :initform
                         common-lisp:nil :type
                         (common-lisp:or job-document-source common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-document-source :shape
                         "JobDocumentSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document :initarg :document :initform common-lisp:nil
                         :type (common-lisp:or job-document common-lisp:null)
                         :accessor struct-shape-create-job-request-document
                         :shape "JobDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor struct-shape-create-job-request-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (presigned-url-config :initarg :presigned-url-config
                         :initform common-lisp:nil :type
                         (common-lisp:or presigned-url-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-presigned-url-config
                         :shape "PresignedUrlConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-selection :initarg :target-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or target-selection common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-target-selection
                         :shape "TargetSelection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-rollout-config :initarg
                         :job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-job-executions-rollout-config
                         :shape "JobExecutionsRolloutConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-config :initarg :abort-config :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-config common-lisp:null)
                         :accessor struct-shape-create-job-request-abort-config
                         :shape "AbortConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-config :initarg :timeout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or timeout-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-timeout-config :shape
                         "TimeoutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-job-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor struct-shape-create-job-request-namespace-id
                         :shape "NamespaceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-template-arn :initarg :job-template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-job-template-arn
                         :shape "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-retry-config :initarg
                         :job-executions-retry-config :initform common-lisp:nil
                         :type
                         (common-lisp:or job-executions-retry-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-job-executions-retry-config
                         :shape "JobExecutionsRetryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (document-parameters :initarg :document-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or parameter-map common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-document-parameters
                         :shape "ParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduling-config :initarg :scheduling-config
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduling-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-scheduling-config
                         :shape "SchedulingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-package-versions :initarg
                         :destination-package-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-package-versions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-destination-package-versions
                         :shape "DestinationPackageVersions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "namespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-parameters))
      (common-lisp:list
       (common-lisp:cons "documentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-config))
      (common-lisp:list
       (common-lisp:cons "schedulingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor struct-shape-create-job-response-job-arn
                         :shape "JobArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-create-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor struct-shape-create-job-response-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-template-request common-lisp:nil
                       ((job-template-id :initarg :job-template-id :initform
                         (common-lisp:error ":jobtemplateid is required") :type
                         (common-lisp:or job-template-id common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-job-template-id
                         :shape "JobTemplateId" :location "uri" :location-name
                         "jobTemplateId")
                        (job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-job-arn
                         :shape "JobArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-source :initarg :document-source :initform
                         common-lisp:nil :type
                         (common-lisp:or job-document-source common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-document-source
                         :shape "JobDocumentSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document :initarg :document :initform common-lisp:nil
                         :type (common-lisp:or job-document common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-document
                         :shape "JobDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (presigned-url-config :initarg :presigned-url-config
                         :initform common-lisp:nil :type
                         (common-lisp:or presigned-url-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-presigned-url-config
                         :shape "PresignedUrlConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-rollout-config :initarg
                         :job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-job-executions-rollout-config
                         :shape "JobExecutionsRolloutConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-config :initarg :abort-config :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-abort-config
                         :shape "AbortConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-config :initarg :timeout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or timeout-config common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-timeout-config
                         :shape "TimeoutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-job-template-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-executions-retry-config :initarg
                         :job-executions-retry-config :initform common-lisp:nil
                         :type
                         (common-lisp:or job-executions-retry-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-job-executions-retry-config
                         :shape "JobExecutionsRetryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maintenance-windows :initarg :maintenance-windows
                         :initform common-lisp:nil :type
                         (common-lisp:or maintenance-windows common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-maintenance-windows
                         :shape "MaintenanceWindows" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-package-versions :initarg
                         :destination-package-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-package-versions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-request-destination-package-versions
                         :shape "DestinationPackageVersions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-template-request
                    'make-create-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "maintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-template-response common-lisp:nil
                       ((job-template-arn :initarg :job-template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-response-job-template-arn
                         :shape "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-template-id :initarg :job-template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-id common-lisp:null)
                         :accessor
                         struct-shape-create-job-template-response-job-template-id
                         :shape "JobTemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-template-response
                    'make-create-job-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-id))
      (common-lisp:list
       (common-lisp:cons "jobTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-keys-and-certificate-request common-lisp:nil
                       ((set-as-active :initarg :set-as-active :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-active common-lisp:null)
                         :accessor
                         struct-shape-create-keys-and-certificate-request-set-as-active
                         :shape "SetAsActive" :location "querystring"
                         :location-name "setAsActive"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-keys-and-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-keys-and-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-request
                    'make-create-keys-and-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-keys-and-certificate-response common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-create-keys-and-certificate-response-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-create-keys-and-certificate-response-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-create-keys-and-certificate-response-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair :initarg :key-pair :initform common-lisp:nil
                         :type (common-lisp:or key-pair common-lisp:null)
                         :accessor
                         struct-shape-create-keys-and-certificate-response-key-pair
                         :shape "KeyPair" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-keys-and-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-keys-and-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-response
                    'make-create-keys-and-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mitigation-action-request common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mitigation-action-request-action-name
                         :shape "MitigationActionName" :location "uri"
                         :location-name "actionName")
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-mitigation-action-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-params :initarg :action-params :initform
                         (common-lisp:error ":actionparams is required") :type
                         (common-lisp:or mitigation-action-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mitigation-action-request-action-params
                         :shape "MitigationActionParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-mitigation-action-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mitigation-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-mitigation-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mitigation-action-request
                    'make-create-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mitigation-action-response common-lisp:nil
                       ((action-arn :initarg :action-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-mitigation-action-response-action-arn
                         :shape "MitigationActionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-id common-lisp:null)
                         :accessor
                         struct-shape-create-mitigation-action-response-action-id
                         :shape "MitigationActionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mitigation-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-mitigation-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mitigation-action-response
                    'make-create-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-otaupdate-request common-lisp:nil
                       ((ota-update-id :initarg :ota-update-id :initform
                         (common-lisp:error ":otaupdateid is required") :type
                         (common-lisp:or otaupdate-id common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-ota-update-id
                         :shape "OTAUpdateId" :location "uri" :location-name
                         "otaUpdateId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-description
                         :shape "OTAUpdateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         struct-shape-create-otaupdate-request-targets :shape
                         "Targets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or protocols common-lisp:null) :accessor
                         struct-shape-create-otaupdate-request-protocols :shape
                         "Protocols" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-selection :initarg :target-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or target-selection common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-target-selection
                         :shape "TargetSelection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-job-executions-rollout-config :initarg
                         :aws-job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-aws-job-executions-rollout-config
                         :shape "AwsJobExecutionsRolloutConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aws-job-presigned-url-config :initarg
                         :aws-job-presigned-url-config :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-job-presigned-url-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-aws-job-presigned-url-config
                         :shape "AwsJobPresignedUrlConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aws-job-abort-config :initarg :aws-job-abort-config
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-job-abort-config common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-aws-job-abort-config
                         :shape "AwsJobAbortConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-job-timeout-config :initarg
                         :aws-job-timeout-config :initform common-lisp:nil
                         :type
                         (common-lisp:or aws-job-timeout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-aws-job-timeout-config
                         :shape "AwsJobTimeoutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (files :initarg :files :initform
                         (common-lisp:error ":files is required") :type
                         (common-lisp:or otaupdate-files common-lisp:null)
                         :accessor struct-shape-create-otaupdate-request-files
                         :shape "OTAUpdateFiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-otaupdate-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-parameters :initarg :additional-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-request-additional-parameters
                         :shape "AdditionalParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-otaupdate-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-otaupdate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-otaupdate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-otaupdate-request 'make-create-otaupdate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "awsJobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "awsJobPresignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-abort-config))
      (common-lisp:list
       (common-lisp:cons "awsJobAbortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-timeout-config))
      (common-lisp:list
       (common-lisp:cons "awsJobTimeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-parameters))
      (common-lisp:list
       (common-lisp:cons "additionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-otaupdate-response common-lisp:nil
                       ((ota-update-id :initarg :ota-update-id :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-id common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-response-ota-update-id
                         :shape "OTAUpdateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-iot-job-id :initarg :aws-iot-job-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-iot-job-id common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-response-aws-iot-job-id
                         :shape "AwsIotJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ota-update-arn :initarg :ota-update-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-arn common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-response-ota-update-arn
                         :shape "OTAUpdateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-iot-job-arn :initarg :aws-iot-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-iot-job-arn common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-response-aws-iot-job-arn
                         :shape "AwsIotJobArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ota-update-status :initarg :ota-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or otaupdate-status common-lisp:null)
                         :accessor
                         struct-shape-create-otaupdate-response-ota-update-status
                         :shape "OTAUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-otaupdate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-otaupdate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-otaupdate-response
                    'make-create-otaupdate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-id))
      (common-lisp:list
       (common-lisp:cons "otaUpdateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-id))
      (common-lisp:list
       (common-lisp:cons "awsIotJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-arn))
      (common-lisp:list
       (common-lisp:cons "otaUpdateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-arn))
      (common-lisp:list
       (common-lisp:cons "awsIotJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-status))
      (common-lisp:list
       (common-lisp:cons "otaUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-otaupdate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-description :shape
                         "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-package-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-package-request 'make-create-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-response common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-response-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-arn :initarg :package-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or package-arn common-lisp:null)
                         :accessor
                         struct-shape-create-package-response-package-arn
                         :shape "PackageArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-package-response-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-package-response 'make-create-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "packageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-version-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (version-name :initarg :version-name :initform
                         (common-lisp:error ":versionname is required") :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-request-version-name
                         :shape "VersionName" :location "uri" :location-name
                         "versionName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-request-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-attributes common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-request-attributes
                         :shape "ResourceAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-package-version-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-package-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-package-version-request
                    'make-create-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-version-response common-lisp:nil
                       ((package-version-arn :initarg :package-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or package-version-arn common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-package-version-arn
                         :shape "PackageVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-name :initarg :version-name :initform
                         common-lisp:nil :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-attributes common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-attributes
                         :shape "ResourceAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-status
                         :shape "PackageVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-reason :initarg :error-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or package-version-error-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-package-version-response-error-reason
                         :shape "PackageVersionErrorReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-package-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-package-version-response
                    'make-create-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version-arn))
      (common-lisp:list
       (common-lisp:cons "packageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "versionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "errorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-create-policy-request-policy-name :shape
                         "PolicyName" :location "uri" :location-name
                         "policyName")
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-create-policy-request-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-policy-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-response common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-create-policy-response-policy-name :shape
                         "PolicyName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-create-policy-response-policy-arn :shape
                         "PolicyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-create-policy-response-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-create-policy-response-policy-version-id
                         :shape "PolicyVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-version-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-request-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (set-as-default :initarg :set-as-default :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-default common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-request-set-as-default
                         :shape "SetAsDefault" :location "querystring"
                         :location-name "setAsDefault"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-version-response common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-create-policy-version-response-policy-arn
                         :shape "PolicyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-response-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-response-policy-version-id
                         :shape "PolicyVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-response-is-default-version
                         :shape "IsDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-policy-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-claim-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-claim-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-provisioning-claim-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-claim-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-claim-request
                    'make-create-provisioning-claim-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-claim-response common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-claim-response-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-claim-response-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair :initarg :key-pair :initform common-lisp:nil
                         :type (common-lisp:or key-pair common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-claim-response-key-pair
                         :shape "KeyPair" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-create-provisioning-claim-response-expiration
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-provisioning-claim-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-claim-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-claim-response
                    'make-create-provisioning-claim-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-claim-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-body :initarg :template-body :initform
                         (common-lisp:error ":templatebody is required") :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform
                         (common-lisp:error ":provisioningrolearn is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-provisioning-hook :initarg :pre-provisioning-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioning-hook common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-pre-provisioning-hook
                         :shape "ProvisioningHook" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-provisioning-template-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-request-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-provisioning-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-request
                    'make-create-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "preProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-template-response common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-response-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-response-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-id :initarg :default-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-response-default-version-id
                         :shape "TemplateVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-provisioning-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-response
                    'make-create-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-template-version-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName")
                        (template-body :initarg :template-body :initform
                         (common-lisp:error ":templatebody is required") :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-request-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (set-as-default :initarg :set-as-default :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-default common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-request-set-as-default
                         :shape "SetAsDefault" :location "querystring"
                         :location-name "setAsDefault"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-provisioning-template-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-template-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-version-request
                    'make-create-provisioning-template-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-provisioning-template-version-response
                       common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-response-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-response-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-response-version-id
                         :shape "TemplateVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor
                         struct-shape-create-provisioning-template-version-response-is-default-version
                         :shape "IsDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-provisioning-template-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-provisioning-template-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-provisioning-template-version-response
                    'make-create-provisioning-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-provisioning-template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-role-alias-request common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         (common-lisp:error ":rolealias is required") :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-create-role-alias-request-role-alias
                         :shape "RoleAlias" :location "uri" :location-name
                         "roleAlias")
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-role-alias-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (credential-duration-seconds :initarg
                         :credential-duration-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or credential-duration-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-role-alias-request-credential-duration-seconds
                         :shape "CredentialDurationSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-role-alias-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-role-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-role-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-role-alias-request
                    'make-create-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credential-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "credentialDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-role-alias-response common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-create-role-alias-response-role-alias
                         :shape "RoleAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-alias-arn :initarg :role-alias-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias-arn common-lisp:null)
                         :accessor
                         struct-shape-create-role-alias-response-role-alias-arn
                         :shape "RoleAliasArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-role-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-role-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-role-alias-response
                    'make-create-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias))
      (common-lisp:list
       (common-lisp:cons "roleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scheduled-audit-request common-lisp:nil
                       ((frequency :initarg :frequency :initform
                         (common-lisp:error ":frequency is required") :type
                         (common-lisp:or audit-frequency common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-audit-request-frequency
                         :shape "AuditFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-month :initarg :day-of-month :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-audit-request-day-of-month
                         :shape "DayOfMonth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-week :initarg :day-of-week :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-audit-request-day-of-week
                         :shape "DayOfWeek" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-check-names :initarg :target-check-names
                         :initform
                         (common-lisp:error ":targetchecknames is required")
                         :type
                         (common-lisp:or target-audit-check-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-audit-request-target-check-names
                         :shape "TargetAuditCheckNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scheduled-audit-name :initarg :scheduled-audit-name
                         :initform
                         (common-lisp:error ":scheduledauditname is required")
                         :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-audit-request-scheduled-audit-name
                         :shape "ScheduledAuditName" :location "uri"
                         :location-name "scheduledAuditName")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-scheduled-audit-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scheduled-audit-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-scheduled-audit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-audit-request
                    'make-create-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scheduled-audit-response common-lisp:nil
                       ((scheduled-audit-arn :initarg :scheduled-audit-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-arn common-lisp:null)
                         :accessor
                         struct-shape-create-scheduled-audit-response-scheduled-audit-arn
                         :shape "ScheduledAuditArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-scheduled-audit-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-scheduled-audit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-audit-response
                    'make-create-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-security-profile-request common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName")
                        (security-profile-description :initarg
                         :security-profile-description :initform
                         common-lisp:nil :type
                         (common-lisp:or security-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-request-security-profile-description
                         :shape "SecurityProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (behaviors :initarg :behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or behaviors common-lisp:null) :accessor
                         struct-shape-create-security-profile-request-behaviors
                         :shape "Behaviors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alert-targets :initarg :alert-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or alert-targets common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-request-alert-targets
                         :shape "AlertTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-metrics-to-retain :initarg
                         :additional-metrics-to-retain :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-request-additional-metrics-to-retain
                         :shape "AdditionalMetricsToRetainList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-metrics-to-retain-v2 :initarg
                         :additional-metrics-to-retain-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-v2list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-request-additional-metrics-to-retain-v2
                         :shape "AdditionalMetricsToRetainV2List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-security-profile-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics-export-config :initarg :metrics-export-config
                         :initform common-lisp:nil :type
                         (common-lisp:or metrics-export-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-request-metrics-export-config
                         :shape "MetricsExportConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-security-profile-request
                    'make-create-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-security-profile-response common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-response-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-profile-arn :initarg :security-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-arn common-lisp:null)
                         :accessor
                         struct-shape-create-security-profile-response-security-profile-arn
                         :shape "SecurityProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-security-profile-response
                    'make-create-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "securityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stream-request common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         (common-lisp:error ":streamid is required") :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-create-stream-request-stream-id :shape
                         "StreamId" :location "uri" :location-name "streamId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor
                         struct-shape-create-stream-request-description :shape
                         "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (files :initarg :files :initform
                         (common-lisp:error ":files is required") :type
                         (common-lisp:or stream-files common-lisp:null)
                         :accessor struct-shape-create-stream-request-files
                         :shape "StreamFiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-stream-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-stream-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stream-request 'make-create-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stream-response common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-create-stream-response-stream-id :shape
                         "StreamId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-create-stream-response-stream-arn :shape
                         "StreamArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor
                         struct-shape-create-stream-response-description :shape
                         "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-version :initarg :stream-version :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-version common-lisp:null)
                         :accessor
                         struct-shape-create-stream-response-stream-version
                         :shape "StreamVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stream-response 'make-create-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (parent-group-name :initarg :parent-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-group-request-parent-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-properties :initarg
                         :thing-group-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-thing-group-request-thing-group-properties
                         :shape "ThingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-thing-group-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-thing-group-request
                    'make-create-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-name))
      (common-lisp:list
       (common-lisp:cons "parentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-thing-group-response common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-group-response-thing-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-arn :initarg :thing-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-create-thing-group-response-thing-group-arn
                         :shape "ThingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-id :initarg :thing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-id common-lisp:null)
                         :accessor
                         struct-shape-create-thing-group-response-thing-group-id
                         :shape "ThingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-thing-group-response
                    'make-create-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-create-thing-request-thing-name :shape
                         "ThingName" :location "uri" :location-name
                         "thingName")
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-request-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-payload :initarg :attribute-payload
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-payload common-lisp:null)
                         :accessor
                         struct-shape-create-thing-request-attribute-payload
                         :shape "AttributePayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-name :initarg :billing-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-request-billing-group-name
                         :shape "BillingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-thing-request 'make-create-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-thing-response common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-create-thing-response-thing-name :shape
                         "ThingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-create-thing-response-thing-arn :shape
                         "ThingArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-id :initarg :thing-id :initform common-lisp:nil
                         :type (common-lisp:or thing-id common-lisp:null)
                         :accessor struct-shape-create-thing-response-thing-id
                         :shape "ThingId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-thing-response 'make-create-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-id))
      (common-lisp:list
       (common-lisp:cons "thingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-thing-type-request common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         (common-lisp:error ":thingtypename is required") :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-type-request-thing-type-name
                         :shape "ThingTypeName" :location "uri" :location-name
                         "thingTypeName")
                        (thing-type-properties :initarg :thing-type-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-type-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-thing-type-request-thing-type-properties
                         :shape "ThingTypeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-thing-type-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-thing-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-thing-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-request
                    'make-create-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-thing-type-response common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-create-thing-type-response-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-arn :initarg :thing-type-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-arn common-lisp:null)
                         :accessor
                         struct-shape-create-thing-type-response-thing-type-arn
                         :shape "ThingTypeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-id :initarg :thing-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-id common-lisp:null)
                         :accessor
                         struct-shape-create-thing-type-response-thing-type-id
                         :shape "ThingTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-thing-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-thing-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-response
                    'make-create-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-id))
      (common-lisp:list
       (common-lisp:cons "thingTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-topic-rule-destination-request common-lisp:nil
                       ((destination-configuration :initarg
                         :destination-configuration :initform
                         (common-lisp:error
                          ":destinationconfiguration is required")
                         :type
                         (common-lisp:or topic-rule-destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-topic-rule-destination-request-destination-configuration
                         :shape "TopicRuleDestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-topic-rule-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-topic-rule-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-destination-request
                    'make-create-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configuration))
      (common-lisp:list
       (common-lisp:cons "destinationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-topic-rule-destination-response common-lisp:nil
                       ((topic-rule-destination :initarg
                         :topic-rule-destination :initform common-lisp:nil
                         :type
                         (common-lisp:or topic-rule-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-topic-rule-destination-response-topic-rule-destination
                         :shape "TopicRuleDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-topic-rule-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-topic-rule-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-destination-response
                    'make-create-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-rule-destination))
      (common-lisp:list
       (common-lisp:cons "topicRuleDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-topic-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-create-topic-rule-request-rule-name
                         :shape "RuleName" :location "uri" :location-name
                         "ruleName")
                        (topic-rule-payload :initarg :topic-rule-payload
                         :initform
                         (common-lisp:error ":topicrulepayload is required")
                         :type
                         (common-lisp:or topic-rule-payload common-lisp:null)
                         :accessor
                         struct-shape-create-topic-rule-request-topic-rule-payload
                         :shape "TopicRulePayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-topic-rule-request-tags :shape
                         "String" :location "header" :location-name
                         "x-amz-tagging"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-topic-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-topic-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-request
                    'make-create-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-rule-payload))
      (common-lisp:list
       (common-lisp:cons "topicRulePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'topic-rule-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype created-at-date () 'common-lisp:string)
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype credential-duration-seconds () 'common-lisp:integer)
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-code-signing common-lisp:nil
                       ((signature :initarg :signature :initform
                         common-lisp:nil :type
                         (common-lisp:or code-signing-signature
                                         common-lisp:null)
                         :accessor struct-shape-custom-code-signing-signature
                         :shape "CodeSigningSignature" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain
                         :initform common-lisp:nil :type
                         (common-lisp:or code-signing-certificate-chain
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-code-signing-certificate-chain
                         :shape "CodeSigningCertificateChain" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hash-algorithm :initarg :hash-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-algorithm common-lisp:null)
                         :accessor
                         struct-shape-custom-code-signing-hash-algorithm :shape
                         "HashAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature-algorithm :initarg :signature-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or signature-algorithm common-lisp:null)
                         :accessor
                         struct-shape-custom-code-signing-signature-algorithm
                         :shape "SignatureAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-code-signing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-code-signing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-code-signing 'make-custom-code-signing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-code-signing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-code-signing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-algorithm))
      (common-lisp:list
       (common-lisp:cons "hashAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "signatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-code-signing))
   common-lisp:nil))
(common-lisp:deftype custom-metric-arn () 'common-lisp:string)
(common-lisp:deftype custom-metric-display-name () 'common-lisp:string)
(common-lisp:deftype custom-metric-type () 'common-lisp:string)
(common-lisp:deftype customer-version () 'common-lisp:integer)
(common-lisp:deftype data-collection-percentage () 'common-lisp:double-float)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:deftype day-of-month () 'common-lisp:string)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-account-audit-configuration-request
                       common-lisp:nil
                       ((delete-scheduled-audits :initarg
                         :delete-scheduled-audits :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-scheduled-audits
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-account-audit-configuration-request-delete-scheduled-audits
                         :shape "DeleteScheduledAudits" :location "querystring"
                         :location-name "deleteScheduledAudits"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-account-audit-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-audit-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-account-audit-configuration-request
                    'make-delete-account-audit-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-audit-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-account-audit-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-audit-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-account-audit-configuration-response
                    'make-delete-account-audit-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-audit-configuration-response))
   common-lisp:nil))
(common-lisp:deftype delete-additional-metrics-to-retain ()
  'common-lisp:boolean)
(common-lisp:deftype delete-alert-targets () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-audit-suppression-request common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         (common-lisp:error ":checkname is required") :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-delete-audit-suppression-request-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resourceidentifier is required")
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-delete-audit-suppression-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-audit-suppression-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-audit-suppression-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-audit-suppression-request
                    'make-delete-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-audit-suppression-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-audit-suppression-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-audit-suppression-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-audit-suppression-response
                    'make-delete-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-authorizer-request common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         (common-lisp:error ":authorizername is required")
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-delete-authorizer-request-authorizer-name
                         :shape "AuthorizerName" :location "uri" :location-name
                         "authorizerName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-authorizer-request
                    'make-delete-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-authorizer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-authorizer-response
                    'make-delete-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-authorizer-response))
   common-lisp:nil))
(common-lisp:deftype delete-behaviors () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform
                         (common-lisp:error ":billinggroupname is required")
                         :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location "uri"
                         :location-name "billingGroupName")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-delete-billing-group-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-billing-group-request
                    'make-delete-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-billing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-billing-group-response
                    'make-delete-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cacertificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-delete-cacertificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "caCertificateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cacertificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cacertificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-request
                    'make-delete-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cacertificate-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cacertificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cacertificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-response
                    'make-delete-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-provider-request common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform
                         (common-lisp:error
                          ":certificateprovidername is required")
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-provider-request-certificate-provider-name
                         :shape "CertificateProviderName" :location "uri"
                         :location-name "certificateProviderName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-certificate-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-provider-request
                    'make-delete-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-provider-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-certificate-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-provider-response
                    'make-delete-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId")
                        (force-delete :initarg :force-delete :initform
                         common-lisp:nil :type
                         (common-lisp:or force-delete common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-request-force-delete
                         :shape "ForceDelete" :location "querystring"
                         :location-name "forceDelete"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition delete-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delete-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'delete-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass delete-custom-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-metric-request-metric-name
                         :shape "MetricName" :location "uri" :location-name
                         "metricName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-custom-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metric-request
                    'make-delete-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-metric-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-metric-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-metric-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-metric-response
                    'make-delete-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dimension-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-delete-dimension-request-name
                         :shape "DimensionName" :location "uri" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dimension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dimension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dimension-request 'make-delete-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dimension-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dimension-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dimension-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dimension-response
                    'make-delete-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-configuration-request common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform
                         (common-lisp:error
                          ":domainconfigurationname is required")
                         :type
                         (common-lisp:or domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-domain-configuration-request-domain-configuration-name
                         :shape "DomainConfigurationName" :location "uri"
                         :location-name "domainConfigurationName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-domain-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-configuration-request
                    'make-delete-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-domain-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-domain-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-domain-configuration-response
                    'make-delete-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dynamic-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-dynamic-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-delete-dynamic-thing-group-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dynamic-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dynamic-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dynamic-thing-group-request
                    'make-delete-dynamic-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dynamic-thing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dynamic-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dynamic-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dynamic-thing-group-response
                    'make-delete-dynamic-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dynamic-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-delete-fleet-metric-request-metric-name
                         :shape "FleetMetricName" :location "uri"
                         :location-name "metricName")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-delete-fleet-metric-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fleet-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-metric-request
                    'make-delete-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-execution-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-delete-job-execution-request-job-id
                         :shape "JobId" :location "uri" :location-name "jobId")
                        (thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-delete-job-execution-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (execution-number :initarg :execution-number :initform
                         (common-lisp:error ":executionnumber is required")
                         :type
                         (common-lisp:or execution-number common-lisp:null)
                         :accessor
                         struct-shape-delete-job-execution-request-execution-number
                         :shape "ExecutionNumber" :location "uri"
                         :location-name "executionNumber")
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-delete-job-execution-request-force :shape
                         "ForceFlag" :location "querystring" :location-name
                         "force")
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor
                         struct-shape-delete-job-execution-request-namespace-id
                         :shape "NamespaceId" :location "querystring"
                         :location-name "namespaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-execution-request
                    'make-delete-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-delete-job-request-job-id :shape "JobId"
                         :location "uri" :location-name "jobId")
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or force-flag common-lisp:null) :accessor
                         struct-shape-delete-job-request-force :shape
                         "ForceFlag" :location "querystring" :location-name
                         "force")
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor struct-shape-delete-job-request-namespace-id
                         :shape "NamespaceId" :location "querystring"
                         :location-name "namespaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-template-request common-lisp:nil
                       ((job-template-id :initarg :job-template-id :initform
                         (common-lisp:error ":jobtemplateid is required") :type
                         (common-lisp:or job-template-id common-lisp:null)
                         :accessor
                         struct-shape-delete-job-template-request-job-template-id
                         :shape "JobTemplateId" :location "uri" :location-name
                         "jobTemplateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-template-request
                    'make-delete-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   common-lisp:nil))
(common-lisp:deftype delete-metrics-export-config () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-mitigation-action-request common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-mitigation-action-request-action-name
                         :shape "MitigationActionName" :location "uri"
                         :location-name "actionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mitigation-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mitigation-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mitigation-action-request
                    'make-delete-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mitigation-action-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mitigation-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mitigation-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mitigation-action-response
                    'make-delete-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-otaupdate-request common-lisp:nil
                       ((ota-update-id :initarg :ota-update-id :initform
                         (common-lisp:error ":otaupdateid is required") :type
                         (common-lisp:or otaupdate-id common-lisp:null)
                         :accessor
                         struct-shape-delete-otaupdate-request-ota-update-id
                         :shape "OTAUpdateId" :location "uri" :location-name
                         "otaUpdateId")
                        (delete-stream :initarg :delete-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-stream common-lisp:null)
                         :accessor
                         struct-shape-delete-otaupdate-request-delete-stream
                         :shape "DeleteStream" :location "querystring"
                         :location-name "deleteStream")
                        (force-delete-awsjob :initarg :force-delete-awsjob
                         :initform common-lisp:nil :type
                         (common-lisp:or force-delete-awsjob common-lisp:null)
                         :accessor
                         struct-shape-delete-otaupdate-request-force-delete-awsjob
                         :shape "ForceDeleteAWSJob" :location "querystring"
                         :location-name "forceDeleteAWSJob"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-otaupdate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-otaupdate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-otaupdate-request 'make-delete-otaupdate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-otaupdate-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-otaupdate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-otaupdate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-otaupdate-response
                    'make-delete-otaupdate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-otaupdate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-delete-package-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-package-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-package-response 'make-delete-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-version-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-delete-package-version-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (version-name :initarg :version-name :initform
                         (common-lisp:error ":versionname is required") :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-delete-package-version-request-version-name
                         :shape "VersionName" :location "uri" :location-name
                         "versionName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-package-version-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-package-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-package-version-request
                    'make-delete-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-version-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-package-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-package-version-response
                    'make-delete-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-policy-request-policy-name :shape
                         "PolicyName" :location "uri" :location-name
                         "policyName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-version-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-policy-version-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policyversionid is required")
                         :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-delete-policy-version-request-policy-version-id
                         :shape "PolicyVersionId" :location "uri"
                         :location-name "policyVersionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioning-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-delete-provisioning-template-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-provisioning-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioning-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-request
                    'make-delete-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioning-template-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-provisioning-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioning-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-response
                    'make-delete-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioning-template-version-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-delete-provisioning-template-version-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName")
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":versionid is required") :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-delete-provisioning-template-version-request-version-id
                         :shape "TemplateVersionId" :location "uri"
                         :location-name "versionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-provisioning-template-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioning-template-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-version-request
                    'make-delete-provisioning-template-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-provisioning-template-version-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-provisioning-template-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-provisioning-template-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-provisioning-template-version-response
                    'make-delete-provisioning-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-provisioning-template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-registration-code-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-registration-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-registration-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-request
                    'make-delete-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-registration-code-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-registration-code-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-registration-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-response
                    'make-delete-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-role-alias-request common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         (common-lisp:error ":rolealias is required") :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-delete-role-alias-request-role-alias
                         :shape "RoleAlias" :location "uri" :location-name
                         "roleAlias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-role-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-role-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-role-alias-request
                    'make-delete-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-role-alias-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-role-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-role-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-role-alias-response
                    'make-delete-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-audit-request common-lisp:nil
                       ((scheduled-audit-name :initarg :scheduled-audit-name
                         :initform
                         (common-lisp:error ":scheduledauditname is required")
                         :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-delete-scheduled-audit-request-scheduled-audit-name
                         :shape "ScheduledAuditName" :location "uri"
                         :location-name "scheduledAuditName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scheduled-audit-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scheduled-audit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-audit-request
                    'make-delete-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scheduled-audit-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-scheduled-audit-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-scheduled-audit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-audit-response
                    'make-delete-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:deftype delete-scheduled-audits () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-security-profile-request common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-delete-security-profile-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-security-profile-request
                    'make-delete-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-security-profile-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-security-profile-response
                    'make-delete-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-profile-response))
   common-lisp:nil))
(common-lisp:deftype delete-stream () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-stream-request common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         (common-lisp:error ":streamid is required") :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-delete-stream-request-stream-id :shape
                         "StreamId" :location "uri" :location-name "streamId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stream-request 'make-delete-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stream-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stream-response 'make-delete-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-delete-thing-group-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-thing-group-request
                    'make-delete-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-thing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-thing-group-response
                    'make-delete-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-delete-thing-request-thing-name :shape
                         "ThingName" :location "uri" :location-name
                         "thingName")
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-delete-thing-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-thing-request 'make-delete-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-thing-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-thing-response 'make-delete-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-thing-type-request common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         (common-lisp:error ":thingtypename is required") :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-delete-thing-type-request-thing-type-name
                         :shape "ThingTypeName" :location "uri" :location-name
                         "thingTypeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-thing-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-thing-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-request
                    'make-delete-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-thing-type-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-thing-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-thing-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-response
                    'make-delete-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-topic-rule-destination-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-delete-topic-rule-destination-request-arn
                         :shape "AwsArn" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-topic-rule-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-topic-rule-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-destination-request
                    'make-delete-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-topic-rule-destination-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-topic-rule-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-topic-rule-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-destination-response
                    'make-delete-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-topic-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-delete-topic-rule-request-rule-name
                         :shape "RuleName" :location "uri" :location-name
                         "ruleName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-topic-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-topic-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-request
                    'make-delete-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-v2logging-level-request common-lisp:nil
                       ((target-type :initarg :target-type :initform
                         (common-lisp:error ":targettype is required") :type
                         (common-lisp:or log-target-type common-lisp:null)
                         :accessor
                         struct-shape-delete-v2logging-level-request-target-type
                         :shape "LogTargetType" :location "querystring"
                         :location-name "targetType")
                        (target-name :initarg :target-name :initform
                         (common-lisp:error ":targetname is required") :type
                         (common-lisp:or log-target-name common-lisp:null)
                         :accessor
                         struct-shape-delete-v2logging-level-request-target-name
                         :shape "LogTargetName" :location "querystring"
                         :location-name "targetName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-v2logging-level-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-v2logging-level-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-v2logging-level-request
                    'make-delete-v2logging-level-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-v2logging-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-v2logging-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-v2logging-level-request))
   common-lisp:nil))
(common-lisp:deftype delivery-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass denied common-lisp:nil
                       ((implicit-deny :initarg :implicit-deny :initform
                         common-lisp:nil :type
                         (common-lisp:or implicit-deny common-lisp:null)
                         :accessor struct-shape-denied-implicit-deny :shape
                         "ImplicitDeny" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (explicit-deny :initarg :explicit-deny :initform
                         common-lisp:nil :type
                         (common-lisp:or explicit-deny common-lisp:null)
                         :accessor struct-shape-denied-explicit-deny :shape
                         "ExplicitDeny" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-denied
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'denied
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'denied 'make-denied))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input denied))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input denied))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'implicit-deny))
      (common-lisp:list
       (common-lisp:cons "implicitDeny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-deny))
      (common-lisp:list
       (common-lisp:cons "explicitDeny"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input denied))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprecate-thing-type-request common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         (common-lisp:error ":thingtypename is required") :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-deprecate-thing-type-request-thing-type-name
                         :shape "ThingTypeName" :location "uri" :location-name
                         "thingTypeName")
                        (undo-deprecate :initarg :undo-deprecate :initform
                         common-lisp:nil :type
                         (common-lisp:or undo-deprecate common-lisp:null)
                         :accessor
                         struct-shape-deprecate-thing-type-request-undo-deprecate
                         :shape "UndoDeprecate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deprecate-thing-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deprecate-thing-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-request
                    'make-deprecate-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'undo-deprecate))
      (common-lisp:list
       (common-lisp:cons "undoDeprecate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprecate-thing-type-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deprecate-thing-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deprecate-thing-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-response
                    'make-deprecate-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   common-lisp:nil))
(common-lisp:deftype deprecation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-account-audit-configuration-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-audit-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-audit-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-audit-configuration-request
                    'make-describe-account-audit-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-audit-configuration-response
                       common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-account-audit-configuration-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-notification-target-configurations :initarg
                         :audit-notification-target-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          audit-notification-target-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-account-audit-configuration-response-audit-notification-target-configurations
                         :shape "AuditNotificationTargetConfigurations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (audit-check-configurations :initarg
                         :audit-check-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or audit-check-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-account-audit-configuration-response-audit-check-configurations
                         :shape "AuditCheckConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-audit-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-audit-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-audit-configuration-response
                    'make-describe-account-audit-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-notification-target-configurations))
      (common-lisp:list
       (common-lisp:cons "auditNotificationTargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-configurations))
      (common-lisp:list
       (common-lisp:cons "auditCheckConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-audit-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-finding-request common-lisp:nil
                       ((finding-id :initarg :finding-id :initform
                         (common-lisp:error ":findingid is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-describe-audit-finding-request-finding-id
                         :shape "FindingId" :location "uri" :location-name
                         "findingId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-finding-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-audit-finding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-finding-request
                    'make-describe-audit-finding-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-finding-response common-lisp:nil
                       ((finding :initarg :finding :initform common-lisp:nil
                         :type (common-lisp:or audit-finding common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-finding-response-finding
                         :shape "AuditFinding" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-finding-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-audit-finding-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-finding-response
                    'make-describe-audit-finding-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding))
      (common-lisp:list
       (common-lisp:cons "finding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-mitigation-actions-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-request-task-id
                         :shape "MitigationActionsTaskId" :location "uri"
                         :location-name "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-mitigation-actions-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-audit-mitigation-actions-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-mitigation-actions-task-request
                    'make-describe-audit-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-mitigation-actions-task-response
                       common-lisp:nil
                       ((task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-mitigation-actions-task-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-task-status
                         :shape "AuditMitigationActionsTaskStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-statistics :initarg :task-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          audit-mitigation-actions-task-statistics
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-task-statistics
                         :shape "AuditMitigationActionsTaskStatistics"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or audit-mitigation-actions-task-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-target
                         :shape "AuditMitigationActionsTaskTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (audit-check-to-actions-mapping :initarg
                         :audit-check-to-actions-mapping :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-to-actions-mapping
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-audit-check-to-actions-mapping
                         :shape "AuditCheckToActionsMapping" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (actions-definition :initarg :actions-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or mitigation-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-mitigation-actions-task-response-actions-definition
                         :shape "MitigationActionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-mitigation-actions-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-audit-mitigation-actions-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-mitigation-actions-task-response
                    'make-describe-audit-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-statistics))
      (common-lisp:list
       (common-lisp:cons "taskStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-to-actions-mapping))
      (common-lisp:list
       (common-lisp:cons "auditCheckToActionsMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-definition))
      (common-lisp:list
       (common-lisp:cons "actionsDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-suppression-request common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         (common-lisp:error ":checkname is required") :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-suppression-request-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resourceidentifier is required")
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-suppression-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-suppression-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-audit-suppression-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-suppression-request
                    'make-describe-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-suppression-response common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-suppression-response-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-suppression-response-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-audit-suppression-response-expiration-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppress-indefinitely :initarg :suppress-indefinitely
                         :initform common-lisp:nil :type
                         (common-lisp:or suppress-indefinitely
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-suppression-response-suppress-indefinitely
                         :shape "SuppressIndefinitely" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-description common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-suppression-response-description
                         :shape "AuditDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-suppression-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-audit-suppression-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-suppression-response
                    'make-describe-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or audit-task-id common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-task-request-task-id
                         :shape "AuditTaskId" :location "uri" :location-name
                         "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-audit-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-task-request
                    'make-describe-audit-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-audit-task-response common-lisp:nil
                       ((task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-status common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-task-response-task-status
                         :shape "AuditTaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-type :initarg :task-type :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-type common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-task-response-task-type
                         :shape "AuditTaskType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-start-time :initarg :task-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-audit-task-response-task-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-statistics :initarg :task-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or task-statistics common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-task-response-task-statistics
                         :shape "TaskStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-audit-name :initarg :scheduled-audit-name
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-task-response-scheduled-audit-name
                         :shape "ScheduledAuditName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-details :initarg :audit-details :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-details common-lisp:null)
                         :accessor
                         struct-shape-describe-audit-task-response-audit-details
                         :shape "AuditDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-audit-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-audit-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-audit-task-response
                    'make-describe-audit-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "taskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-statistics))
      (common-lisp:list
       (common-lisp:cons "taskStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-audit-name))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-details))
      (common-lisp:list
       (common-lisp:cons "auditDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-audit-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-authorizer-request common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         (common-lisp:error ":authorizername is required")
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-describe-authorizer-request-authorizer-name
                         :shape "AuthorizerName" :location "uri" :location-name
                         "authorizerName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-authorizer-request
                    'make-describe-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-authorizer-response common-lisp:nil
                       ((authorizer-description :initarg
                         :authorizer-description :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-authorizer-response-authorizer-description
                         :shape "AuthorizerDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-authorizer-response
                    'make-describe-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-description))
      (common-lisp:list
       (common-lisp:cons "authorizerDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform
                         (common-lisp:error ":billinggroupname is required")
                         :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location "uri"
                         :location-name "billingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-billing-group-request
                    'make-describe-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-billing-group-response common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-response-billing-group-name
                         :shape "BillingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-id :initarg :billing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-group-id common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-response-billing-group-id
                         :shape "BillingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-arn :initarg :billing-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-response-billing-group-arn
                         :shape "BillingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-properties :initarg
                         :billing-group-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or billing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-response-billing-group-properties
                         :shape "BillingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (billing-group-metadata :initarg
                         :billing-group-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or billing-group-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-billing-group-response-billing-group-metadata
                         :shape "BillingGroupMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-billing-group-response
                    'make-describe-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-id))
      (common-lisp:list
       (common-lisp:cons "billingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-properties))
      (common-lisp:list
       (common-lisp:cons "billingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-metadata))
      (common-lisp:list
       (common-lisp:cons "billingGroupMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cacertificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-describe-cacertificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "caCertificateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cacertificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cacertificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-request
                    'make-describe-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cacertificate-response common-lisp:nil
                       ((certificate-description :initarg
                         :certificate-description :initform common-lisp:nil
                         :type
                         (common-lisp:or cacertificate-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-cacertificate-response-certificate-description
                         :shape "CACertificateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registration-config :initarg :registration-config
                         :initform common-lisp:nil :type
                         (common-lisp:or registration-config common-lisp:null)
                         :accessor
                         struct-shape-describe-cacertificate-response-registration-config
                         :shape "RegistrationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cacertificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cacertificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-response
                    'make-describe-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-description))
      (common-lisp:list
       (common-lisp:cons "certificateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "registrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-provider-request common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform
                         (common-lisp:error
                          ":certificateprovidername is required")
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-provider-request-certificate-provider-name
                         :shape "CertificateProviderName" :location "uri"
                         :location-name "certificateProviderName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-provider-request
                    'make-describe-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-provider-response common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-provider-response-certificate-provider-name
                         :shape "CertificateProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-provider-arn :initarg
                         :certificate-provider-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-provider-response-certificate-provider-arn
                         :shape "CertificateProviderArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function-arn :initarg :lambda-function-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-provider-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-provider-response-lambda-function-arn
                         :shape "CertificateProviderFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-default-for-operations :initarg
                         :account-default-for-operations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          certificate-provider-account-default-for-operations
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-provider-response-account-default-for-operations
                         :shape
                         "CertificateProviderAccountDefaultForOperations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-describe-certificate-provider-response-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-describe-certificate-provider-response-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-provider-response
                    'make-describe-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-default-for-operations))
      (common-lisp:list
       (common-lisp:cons "accountDefaultForOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-response common-lisp:nil
                       ((certificate-description :initarg
                         :certificate-description :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-response-certificate-description
                         :shape "CertificateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-description))
      (common-lisp:list
       (common-lisp:cons "certificateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-metric-request-metric-name
                         :shape "MetricName" :location "uri" :location-name
                         "metricName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-metric-request
                    'make-describe-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-metric-response common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-metric-response-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-arn :initarg :metric-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-metric-response-metric-arn
                         :shape "CustomMetricArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-type :initarg :metric-type :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-type common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-metric-response-metric-type
                         :shape "CustomMetricType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-metric-response-display-name
                         :shape "CustomMetricDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-custom-metric-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-custom-metric-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-metric-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-metric-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-metric-response
                    'make-describe-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "metricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-authorizer-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-default-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-default-authorizer-request
                    'make-describe-default-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-default-authorizer-response common-lisp:nil
                       ((authorizer-description :initarg
                         :authorizer-description :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-default-authorizer-response-authorizer-description
                         :shape "AuthorizerDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-default-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-default-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-default-authorizer-response
                    'make-describe-default-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-description))
      (common-lisp:list
       (common-lisp:cons "authorizerDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-detect-mitigation-actions-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-detect-mitigation-actions-task-request-task-id
                         :shape "MitigationActionsTaskId" :location "uri"
                         :location-name "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-detect-mitigation-actions-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-detect-mitigation-actions-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-detect-mitigation-actions-task-request
                    'make-describe-detect-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-detect-mitigation-actions-task-response
                       common-lisp:nil
                       ((task-summary :initarg :task-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or detect-mitigation-actions-task-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-detect-mitigation-actions-task-response-task-summary
                         :shape "DetectMitigationActionsTaskSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-detect-mitigation-actions-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-detect-mitigation-actions-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-detect-mitigation-actions-task-response
                    'make-describe-detect-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-summary))
      (common-lisp:list
       (common-lisp:cons "taskSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-detect-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dimension-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-describe-dimension-request-name
                         :shape "DimensionName" :location "uri" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dimension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dimension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dimension-request
                    'make-describe-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dimension-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor
                         struct-shape-describe-dimension-response-name :shape
                         "DimensionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or dimension-arn common-lisp:null)
                         :accessor struct-shape-describe-dimension-response-arn
                         :shape "DimensionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or dimension-type common-lisp:null)
                         :accessor
                         struct-shape-describe-dimension-response-type :shape
                         "DimensionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-values :initarg :string-values :initform
                         common-lisp:nil :type
                         (common-lisp:or dimension-string-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dimension-response-string-values
                         :shape "DimensionStringValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-dimension-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-dimension-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dimension-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dimension-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dimension-response
                    'make-describe-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-configuration-request common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform
                         (common-lisp:error
                          ":domainconfigurationname is required")
                         :type
                         (common-lisp:or reserved-domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-request-domain-configuration-name
                         :shape "ReservedDomainConfigurationName" :location
                         "uri" :location-name "domainConfigurationName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-configuration-request
                    'make-describe-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-configuration-response common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-domain-configuration-name
                         :shape "ReservedDomainConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-configuration-arn :initarg
                         :domain-configuration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-domain-configuration-arn
                         :shape "DomainConfigurationArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificates :initarg :server-certificates
                         :initform common-lisp:nil :type
                         (common-lisp:or server-certificates common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-server-certificates
                         :shape "ServerCertificates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-config :initarg :authorizer-config
                         :initform common-lisp:nil :type
                         (common-lisp:or authorizer-config common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-authorizer-config
                         :shape "AuthorizerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-configuration-status :initarg
                         :domain-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-domain-configuration-status
                         :shape "DomainConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-type :initarg :service-type :initform
                         common-lisp:nil :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-service-type
                         :shape "ServiceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-type :initarg :domain-type :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-type common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-domain-type
                         :shape "DomainType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-status-change-date :initarg
                         :last-status-change-date :initform common-lisp:nil
                         :type (common-lisp:or date-type common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-last-status-change-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls-config :initarg :tls-config :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-config common-lisp:null) :accessor
                         struct-shape-describe-domain-configuration-response-tls-config
                         :shape "TlsConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificate-config :initarg
                         :server-certificate-config :initform common-lisp:nil
                         :type
                         (common-lisp:or server-certificate-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-configuration-response-server-certificate-config
                         :shape "ServerCertificateConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-configuration-response
                    'make-describe-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-certificates))
      (common-lisp:list
       (common-lisp:cons "serverCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-config))
      (common-lisp:list
       (common-lisp:cons "authorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-status))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-type))
      (common-lisp:list
       (common-lisp:cons "domainType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-status-change-date))
      (common-lisp:list
       (common-lisp:cons "lastStatusChangeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-config))
      (common-lisp:list
       (common-lisp:cons "tlsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-config))
      (common-lisp:list
       (common-lisp:cons "serverCertificateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-request common-lisp:nil
                       ((endpoint-type :initarg :endpoint-type :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-type common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-request-endpoint-type
                         :shape "EndpointType" :location "querystring"
                         :location-name "endpointType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-request
                    'make-describe-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-response common-lisp:nil
                       ((endpoint-address :initarg :endpoint-address :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-address common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-response-endpoint-address
                         :shape "EndpointAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-response
                    'make-describe-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-address))
      (common-lisp:list
       (common-lisp:cons "endpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-configurations-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-configurations-request
                    'make-describe-event-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-configurations-response common-lisp:nil
                       ((event-configurations :initarg :event-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or event-configurations common-lisp:null)
                         :accessor
                         struct-shape-describe-event-configurations-response-event-configurations
                         :shape "EventConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-describe-event-configurations-response-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-describe-event-configurations-response-last-modified-date
                         :shape "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-configurations-response
                    'make-describe-event-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-configurations))
      (common-lisp:list
       (common-lisp:cons "eventConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-request-metric-name
                         :shape "FleetMetricName" :location "uri"
                         :location-name "metricName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-metric-request
                    'make-describe-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-metric-response common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-metric-name
                         :shape "FleetMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-type :initarg :aggregation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregation-type common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-aggregation-type
                         :shape "AggregationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or fleet-metric-period common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-period
                         :shape "FleetMetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-description
                         :shape "FleetMetricDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-describe-fleet-metric-response-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-last-modified-date
                         :shape "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or fleet-metric-unit common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-unit
                         :shape "FleetMetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-arn :initarg :metric-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-metric-response-metric-arn
                         :shape "FleetMetricArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-metric-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-metric-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-metric-response
                    'make-describe-fleet-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-index-request common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         (common-lisp:error ":indexname is required") :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-describe-index-request-index-name :shape
                         "IndexName" :location "uri" :location-name
                         "indexName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-index-request 'make-describe-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-index-response common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-describe-index-response-index-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-status :initarg :index-status :initform
                         common-lisp:nil :type
                         (common-lisp:or index-status common-lisp:null)
                         :accessor
                         struct-shape-describe-index-response-index-status
                         :shape "IndexStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or index-schema common-lisp:null)
                         :accessor struct-shape-describe-index-response-schema
                         :shape "IndexSchema" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-index-response 'make-describe-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "indexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-execution-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-job-execution-request-job-id
                         :shape "JobId" :location "uri" :location-name "jobId")
                        (thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-describe-job-execution-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (execution-number :initarg :execution-number :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-number common-lisp:null)
                         :accessor
                         struct-shape-describe-job-execution-request-execution-number
                         :shape "ExecutionNumber" :location "querystring"
                         :location-name "executionNumber"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-job-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-execution-request
                    'make-describe-job-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-execution-response common-lisp:nil
                       ((execution :initarg :execution :initform
                         common-lisp:nil :type
                         (common-lisp:or job-execution common-lisp:null)
                         :accessor
                         struct-shape-describe-job-execution-response-execution
                         :shape "JobExecution" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-job-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-execution-response
                    'make-describe-job-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-job-request-job-id :shape
                         "JobId" :location "uri" :location-name "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-response common-lisp:nil
                       ((document-source :initarg :document-source :initform
                         common-lisp:nil :type
                         (common-lisp:or job-document-source common-lisp:null)
                         :accessor
                         struct-shape-describe-job-response-document-source
                         :shape "JobDocumentSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-describe-job-response-job :shape "Job"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-response 'make-describe-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-template-request common-lisp:nil
                       ((job-template-id :initarg :job-template-id :initform
                         (common-lisp:error ":jobtemplateid is required") :type
                         (common-lisp:or job-template-id common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-request-job-template-id
                         :shape "JobTemplateId" :location "uri" :location-name
                         "jobTemplateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-template-request
                    'make-describe-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-template-response common-lisp:nil
                       ((job-template-arn :initarg :job-template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-job-template-arn
                         :shape "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-template-id :initarg :job-template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-id common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-job-template-id
                         :shape "JobTemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-source :initarg :document-source :initform
                         common-lisp:nil :type
                         (common-lisp:or job-document-source common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-document-source
                         :shape "JobDocumentSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document :initarg :document :initform common-lisp:nil
                         :type (common-lisp:or job-document common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-document
                         :shape "JobDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-describe-job-template-response-created-at
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (presigned-url-config :initarg :presigned-url-config
                         :initform common-lisp:nil :type
                         (common-lisp:or presigned-url-config common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-presigned-url-config
                         :shape "PresignedUrlConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-rollout-config :initarg
                         :job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-job-executions-rollout-config
                         :shape "JobExecutionsRolloutConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-config :initarg :abort-config :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-config common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-abort-config
                         :shape "AbortConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-config :initarg :timeout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or timeout-config common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-timeout-config
                         :shape "TimeoutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-retry-config :initarg
                         :job-executions-retry-config :initform common-lisp:nil
                         :type
                         (common-lisp:or job-executions-retry-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-job-executions-retry-config
                         :shape "JobExecutionsRetryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maintenance-windows :initarg :maintenance-windows
                         :initform common-lisp:nil :type
                         (common-lisp:or maintenance-windows common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-maintenance-windows
                         :shape "MaintenanceWindows" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-package-versions :initarg
                         :destination-package-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-package-versions
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-job-template-response-destination-package-versions
                         :shape "DestinationPackageVersions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-template-response
                    'make-describe-job-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-id))
      (common-lisp:list
       (common-lisp:cons "jobTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-source))
      (common-lisp:list
       (common-lisp:cons "documentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "maintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-managed-job-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or managed-job-template-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-request-template-name
                         :shape "ManagedJobTemplateName" :location "uri"
                         :location-name "templateName")
                        (template-version :initarg :template-version :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-request-template-version
                         :shape "ManagedTemplateVersion" :location
                         "querystring" :location-name "templateVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-managed-job-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-managed-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-managed-job-template-request
                    'make-describe-managed-job-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-managed-job-template-response common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-job-template-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-template-name
                         :shape "ManagedJobTemplateName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-template-arn
                         :shape "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-version :initarg :template-version :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-template-version
                         :shape "ManagedTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environments :initarg :environments :initform
                         common-lisp:nil :type
                         (common-lisp:or environments common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-environments
                         :shape "Environments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-parameters :initarg :document-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or document-parameters common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-document-parameters
                         :shape "DocumentParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document :initarg :document :initform common-lisp:nil
                         :type (common-lisp:or job-document common-lisp:null)
                         :accessor
                         struct-shape-describe-managed-job-template-response-document
                         :shape "JobDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-managed-job-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-managed-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-managed-job-template-response
                    'make-describe-managed-job-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "templateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-parameters))
      (common-lisp:list
       (common-lisp:cons "documentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mitigation-action-request common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-request-action-name
                         :shape "MitigationActionName" :location "uri"
                         :location-name "actionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-mitigation-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mitigation-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-mitigation-action-request
                    'make-describe-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mitigation-action-response common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-response-action-name
                         :shape "MitigationActionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-response-action-type
                         :shape "MitigationActionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-arn :initarg :action-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-response-action-arn
                         :shape "MitigationActionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-id common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-response-action-id
                         :shape "MitigationActionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-params :initarg :action-params :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-mitigation-action-response-action-params
                         :shape "MitigationActionParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-mitigation-action-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-mitigation-action-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-mitigation-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-mitigation-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-mitigation-action-response
                    'make-describe-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-provisioning-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-request
                    'make-describe-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-template-response common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-describe-provisioning-template-response-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-describe-provisioning-template-response-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-id :initarg :default-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-default-version-id
                         :shape "TemplateVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-describe-provisioning-template-response-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-provisioning-hook :initarg :pre-provisioning-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioning-hook common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-pre-provisioning-hook
                         :shape "ProvisioningHook" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-response-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-provisioning-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-response
                    'make-describe-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "preProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-template-version-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-version-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName")
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":versionid is required") :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-version-request-version-id
                         :shape "TemplateVersionId" :location "uri"
                         :location-name "versionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-provisioning-template-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-template-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-version-request
                    'make-describe-provisioning-template-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-provisioning-template-version-response
                       common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-version-response-version-id
                         :shape "TemplateVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-describe-provisioning-template-version-response-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-version-response-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor
                         struct-shape-describe-provisioning-template-version-response-is-default-version
                         :shape "IsDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-provisioning-template-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-provisioning-template-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-provisioning-template-version-response
                    'make-describe-provisioning-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-provisioning-template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-role-alias-request common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         (common-lisp:error ":rolealias is required") :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-describe-role-alias-request-role-alias
                         :shape "RoleAlias" :location "uri" :location-name
                         "roleAlias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-role-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-role-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-role-alias-request
                    'make-describe-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-role-alias-response common-lisp:nil
                       ((role-alias-description :initarg
                         :role-alias-description :initform common-lisp:nil
                         :type
                         (common-lisp:or role-alias-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-role-alias-response-role-alias-description
                         :shape "RoleAliasDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-role-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-role-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-role-alias-response
                    'make-describe-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'role-alias-description))
      (common-lisp:list
       (common-lisp:cons "roleAliasDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-audit-request common-lisp:nil
                       ((scheduled-audit-name :initarg :scheduled-audit-name
                         :initform
                         (common-lisp:error ":scheduledauditname is required")
                         :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-request-scheduled-audit-name
                         :shape "ScheduledAuditName" :location "uri"
                         :location-name "scheduledAuditName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scheduled-audit-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-audit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-audit-request
                    'make-describe-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scheduled-audit-response common-lisp:nil
                       ((frequency :initarg :frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-frequency common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-response-frequency
                         :shape "AuditFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-month :initarg :day-of-month :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-response-day-of-month
                         :shape "DayOfMonth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-week :initarg :day-of-week :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-response-day-of-week
                         :shape "DayOfWeek" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-check-names :initarg :target-check-names
                         :initform common-lisp:nil :type
                         (common-lisp:or target-audit-check-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-response-target-check-names
                         :shape "TargetAuditCheckNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scheduled-audit-name :initarg :scheduled-audit-name
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-response-scheduled-audit-name
                         :shape "ScheduledAuditName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-audit-arn :initarg :scheduled-audit-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-scheduled-audit-response-scheduled-audit-arn
                         :shape "ScheduledAuditArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-scheduled-audit-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scheduled-audit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-audit-response
                    'make-describe-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-audit-name))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-security-profile-request common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-security-profile-request
                    'make-describe-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-security-profile-response common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-profile-arn :initarg :security-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-security-profile-arn
                         :shape "SecurityProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-profile-description :initarg
                         :security-profile-description :initform
                         common-lisp:nil :type
                         (common-lisp:or security-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-security-profile-description
                         :shape "SecurityProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (behaviors :initarg :behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or behaviors common-lisp:null) :accessor
                         struct-shape-describe-security-profile-response-behaviors
                         :shape "Behaviors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alert-targets :initarg :alert-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or alert-targets common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-alert-targets
                         :shape "AlertTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-metrics-to-retain :initarg
                         :additional-metrics-to-retain :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-additional-metrics-to-retain
                         :shape "AdditionalMetricsToRetainList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-metrics-to-retain-v2 :initarg
                         :additional-metrics-to-retain-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-v2list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-additional-metrics-to-retain-v2
                         :shape "AdditionalMetricsToRetainV2List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-security-profile-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-security-profile-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics-export-config :initarg :metrics-export-config
                         :initform common-lisp:nil :type
                         (common-lisp:or metrics-export-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-security-profile-response-metrics-export-config
                         :shape "MetricsExportConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-security-profile-response
                    'make-describe-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "securityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-request common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         (common-lisp:error ":streamid is required") :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-describe-stream-request-stream-id :shape
                         "StreamId" :location "uri" :location-name "streamId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-request 'make-describe-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stream-response common-lisp:nil
                       ((stream-info :initarg :stream-info :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-info common-lisp:null)
                         :accessor
                         struct-shape-describe-stream-response-stream-info
                         :shape "StreamInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stream-response 'make-describe-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-info))
      (common-lisp:list
       (common-lisp:cons "streamInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-group-request
                    'make-describe-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-group-response common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-thing-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-id :initarg :thing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-id common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-thing-group-id
                         :shape "ThingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-arn :initarg :thing-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-thing-group-arn
                         :shape "ThingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-properties :initarg
                         :thing-group-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-thing-group-properties
                         :shape "ThingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thing-group-metadata :initarg :thing-group-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-metadata common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-thing-group-metadata
                         :shape "ThingGroupMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-describe-thing-group-response-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or dynamic-group-status common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-group-response-status
                         :shape "DynamicGroupStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-group-response
                    'make-describe-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-metadata))
      (common-lisp:list
       (common-lisp:cons "thingGroupMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-registration-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         struct-shape-describe-thing-registration-task-request-task-id
                         :shape "TaskId" :location "uri" :location-name
                         "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-registration-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-thing-registration-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-registration-task-request
                    'make-describe-thing-registration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-registration-task-response
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or task-id common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-task-id
                         :shape "TaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-last-modified-date
                         :shape "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-file-bucket :initarg :input-file-bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or registry-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-input-file-bucket
                         :shape "RegistryS3BucketName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-file-key :initarg :input-file-key :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-s3key-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-input-file-key
                         :shape "RegistryS3KeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-registration-task-response-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-count :initarg :success-count :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-describe-thing-registration-task-response-success-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-count :initarg :failure-count :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-describe-thing-registration-task-response-failure-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percentage-progress :initarg :percentage-progress
                         :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-describe-thing-registration-task-response-percentage-progress
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-registration-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-thing-registration-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-registration-task-response
                    'make-describe-thing-registration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-bucket))
      (common-lisp:list
       (common-lisp:cons "inputFileBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-key))
      (common-lisp:list
       (common-lisp:cons "inputFileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-count))
      (common-lisp:list
       (common-lisp:cons "successCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-count))
      (common-lisp:list
       (common-lisp:cons "failureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-progress))
      (common-lisp:list
       (common-lisp:cons "percentageProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-registration-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-describe-thing-request-thing-name :shape
                         "ThingName" :location "uri" :location-name
                         "thingName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-request 'make-describe-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-response common-lisp:nil
                       ((default-client-id :initarg :default-client-id
                         :initform common-lisp:nil :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-describe-thing-response-default-client-id
                         :shape "ClientId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-describe-thing-response-thing-name :shape
                         "ThingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-id :initarg :thing-id :initform common-lisp:nil
                         :type (common-lisp:or thing-id common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-response-thing-id :shape
                         "ThingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-describe-thing-response-thing-arn :shape
                         "ThingArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-response-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-describe-thing-response-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-describe-thing-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-name :initarg :billing-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-response-billing-group-name
                         :shape "BillingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-response 'make-describe-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-client-id))
      (common-lisp:list
       (common-lisp:cons "defaultClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-id))
      (common-lisp:list
       (common-lisp:cons "thingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-type-request common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         (common-lisp:error ":thingtypename is required") :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-type-request-thing-type-name
                         :shape "ThingTypeName" :location "uri" :location-name
                         "thingTypeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thing-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-request
                    'make-describe-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-thing-type-response common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-type-response-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-id :initarg :thing-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-id common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-type-response-thing-type-id
                         :shape "ThingTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-arn :initarg :thing-type-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-type-response-thing-type-arn
                         :shape "ThingTypeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-properties :initarg :thing-type-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-type-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-type-response-thing-type-properties
                         :shape "ThingTypeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-metadata :initarg :thing-type-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-type-metadata common-lisp:null)
                         :accessor
                         struct-shape-describe-thing-type-response-thing-type-metadata
                         :shape "ThingTypeMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-thing-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-thing-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-response
                    'make-describe-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-id))
      (common-lisp:list
       (common-lisp:cons "thingTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-metadata))
      (common-lisp:list
       (common-lisp:cons "thingTypeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((s3destination :initarg :s3destination :initform
                         common-lisp:nil :type
                         (common-lisp:or s3destination common-lisp:null)
                         :accessor struct-shape-destination-s3destination
                         :shape "S3Destination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "s3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-package-versions ()
   '(trivial-types:proper-list package-version-arn))
 (common-lisp:defun make-destination-package-versions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass detach-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-detach-policy-request-policy-name :shape
                         "PolicyName" :location "uri" :location-name
                         "policyName")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or policy-target common-lisp:null)
                         :accessor struct-shape-detach-policy-request-target
                         :shape "PolicyTarget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-policy-request 'make-detach-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-principal-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-detach-principal-policy-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-detach-principal-policy-request-principal
                         :shape "Principal" :location "header" :location-name
                         "x-amzn-iot-principal"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-principal-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-principal-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-principal-policy-request
                    'make-detach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-security-profile-request common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-detach-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName")
                        (security-profile-target-arn :initarg
                         :security-profile-target-arn :initform
                         (common-lisp:error
                          ":securityprofiletargetarn is required")
                         :type
                         (common-lisp:or security-profile-target-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-detach-security-profile-request-security-profile-target-arn
                         :shape "SecurityProfileTargetArn" :location
                         "querystring" :location-name
                         "securityProfileTargetArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-security-profile-request
                    'make-detach-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-security-profile-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-security-profile-response
                    'make-detach-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-thing-principal-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-detach-thing-principal-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-detach-thing-principal-request-principal
                         :shape "Principal" :location "header" :location-name
                         "x-amzn-principal"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-thing-principal-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-thing-principal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-request
                    'make-detach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-thing-principal-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-thing-principal-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-thing-principal-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-response
                    'make-detach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   common-lisp:nil))
(common-lisp:deftype details-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype details-map () 'common-lisp:hash-table)
 (common-lisp:defun make-details-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype details-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detect-mitigation-action-execution common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-task-id
                         :shape "MitigationActionsTaskId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (violation-id :initarg :violation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-id common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-violation-id
                         :shape "ViolationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-action-name
                         :shape "MitigationActionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-thing-name
                         :shape "DeviceDefenderThingName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-start-date :initarg :execution-start-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-detect-mitigation-action-execution-execution-start-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-end-date :initarg :execution-end-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-detect-mitigation-action-execution-execution-end-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          detect-mitigation-action-execution-status
                          common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-status
                         :shape "DetectMitigationActionExecutionStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          detect-mitigation-action-execution-error-code
                          common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-error-code
                         :shape "DetectMitigationActionExecutionErrorCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-action-execution-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-mitigation-action-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-mitigation-action-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-action-execution
                    'make-detect-mitigation-action-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-action-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-action-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-id))
      (common-lisp:list
       (common-lisp:cons "violationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-date))
      (common-lisp:list
       (common-lisp:cons "executionStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-end-date))
      (common-lisp:list
       (common-lisp:cons "executionEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-action-execution))
   common-lisp:nil))
(common-lisp:deftype detect-mitigation-action-execution-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype detect-mitigation-action-execution-list ()
   '(trivial-types:proper-list detect-mitigation-action-execution))
 (common-lisp:defun make-detect-mitigation-action-execution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detect-mitigation-action-execution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype detect-mitigation-action-execution-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detect-mitigation-actions-task-statistics
                       common-lisp:nil
                       ((actions-executed :initarg :actions-executed :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-long-value common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-statistics-actions-executed
                         :shape "GenericLongValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions-skipped :initarg :actions-skipped :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-long-value common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-statistics-actions-skipped
                         :shape "GenericLongValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions-failed :initarg :actions-failed :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-long-value common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-statistics-actions-failed
                         :shape "GenericLongValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-mitigation-actions-task-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-mitigation-actions-task-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-actions-task-statistics
                    'make-detect-mitigation-actions-task-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-executed))
      (common-lisp:list
       (common-lisp:cons "actionsExecuted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-skipped))
      (common-lisp:list
       (common-lisp:cons "actionsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-failed))
      (common-lisp:list
       (common-lisp:cons "actionsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-statistics))
   common-lisp:nil))
(common-lisp:deftype detect-mitigation-actions-task-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detect-mitigation-actions-task-summary common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-task-id
                         :shape "MitigationActionsTaskId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or detect-mitigation-actions-task-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-task-status
                         :shape "DetectMitigationActionsTaskStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-start-time :initarg :task-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-detect-mitigation-actions-task-summary-task-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-end-time :initarg :task-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-detect-mitigation-actions-task-summary-task-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or detect-mitigation-actions-task-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-target
                         :shape "DetectMitigationActionsTaskTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (violation-event-occurrence-range :initarg
                         :violation-event-occurrence-range :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-event-occurrence-range
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-violation-event-occurrence-range
                         :shape "ViolationEventOccurrenceRange" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (only-active-violations-included :initarg
                         :only-active-violations-included :initform
                         common-lisp:nil :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-only-active-violations-included
                         :shape "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppressed-alerts-included :initarg
                         :suppressed-alerts-included :initform common-lisp:nil
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-suppressed-alerts-included
                         :shape "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions-definition :initarg :actions-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or mitigation-action-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-actions-definition
                         :shape "MitigationActionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-statistics :initarg :task-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          detect-mitigation-actions-task-statistics
                          common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-summary-task-statistics
                         :shape "DetectMitigationActionsTaskStatistics"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-mitigation-actions-task-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-mitigation-actions-task-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-actions-task-summary
                    'make-detect-mitigation-actions-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-end-time))
      (common-lisp:list
       (common-lisp:cons "taskEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-occurrence-range))
      (common-lisp:list
       (common-lisp:cons "violationEventOccurrenceRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'only-active-violations-included))
      (common-lisp:list
       (common-lisp:cons "onlyActiveViolationsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-alerts-included))
      (common-lisp:list
       (common-lisp:cons "suppressedAlertsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-definition))
      (common-lisp:list
       (common-lisp:cons "actionsDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-statistics))
      (common-lisp:list
       (common-lisp:cons "taskStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detect-mitigation-actions-task-summary-list ()
   '(trivial-types:proper-list detect-mitigation-actions-task-summary))
 (common-lisp:defun make-detect-mitigation-actions-task-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            detect-mitigation-actions-task-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass detect-mitigation-actions-task-target common-lisp:nil
                       ((violation-ids :initarg :violation-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-violation-ids-for-detect-mitigation-actions
                          common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-target-violation-ids
                         :shape "TargetViolationIdsForDetectMitigationActions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-target-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behavior-name :initarg :behavior-name :initform
                         common-lisp:nil :type
                         (common-lisp:or behavior-name common-lisp:null)
                         :accessor
                         struct-shape-detect-mitigation-actions-task-target-behavior-name
                         :shape "BehaviorName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-mitigation-actions-task-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-mitigation-actions-task-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-mitigation-actions-task-target
                    'make-detect-mitigation-actions-task-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-ids))
      (common-lisp:list
       (common-lisp:cons "violationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior-name))
      (common-lisp:list
       (common-lisp:cons "behaviorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-mitigation-actions-task-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detect-mitigation-actions-to-execute-list ()
   '(trivial-types:proper-list mitigation-action-name))
 (common-lisp:defun make-detect-mitigation-actions-to-execute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mitigation-action-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-certificate-update-action () 'common-lisp:string)
(common-lisp:deftype device-defender-indexing-mode () 'common-lisp:string)
(common-lisp:deftype device-defender-thing-name () 'common-lisp:string)
(common-lisp:deftype dimension-arn () 'common-lisp:string)
(common-lisp:deftype dimension-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-names ()
   '(trivial-types:proper-list dimension-name))
 (common-lisp:defun make-dimension-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-string-values ()
   '(trivial-types:proper-list dimension-string-value))
 (common-lisp:defun make-dimension-string-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension-string-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dimension-type () 'common-lisp:string)
(common-lisp:deftype dimension-value-operator () 'common-lisp:string)
(common-lisp:deftype disable-all-logs () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass disable-topic-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-disable-topic-rule-request-rule-name
                         :shape "RuleName" :location "uri" :location-name
                         "ruleName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-topic-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-topic-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-topic-rule-request
                    'make-disable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   common-lisp:nil))
(common-lisp:deftype disconnect-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-parameter common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor struct-shape-document-parameter-key :shape
                         "ParameterKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor struct-shape-document-parameter-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regex :initarg :regex :initform common-lisp:nil :type
                         (common-lisp:or regex common-lisp:null) :accessor
                         struct-shape-document-parameter-regex :shape "Regex"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (example :initarg :example :initform common-lisp:nil
                         :type (common-lisp:or example common-lisp:null)
                         :accessor struct-shape-document-parameter-example
                         :shape "Example" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optional :initarg :optional :initform common-lisp:nil
                         :type (common-lisp:or optional common-lisp:null)
                         :accessor struct-shape-document-parameter-optional
                         :shape "Optional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-document-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'document-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'document-parameter 'make-document-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'example))
      (common-lisp:list
       (common-lisp:cons "example"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-parameters ()
   '(trivial-types:proper-list document-parameter))
 (common-lisp:defun make-document-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-configuration-arn () 'common-lisp:string)
(common-lisp:deftype domain-configuration-name () 'common-lisp:string)
(common-lisp:deftype domain-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-configuration-summary common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-configuration-summary-domain-configuration-name
                         :shape "ReservedDomainConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-configuration-arn :initarg
                         :domain-configuration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-configuration-summary-domain-configuration-arn
                         :shape "DomainConfigurationArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-type :initarg :service-type :initform
                         common-lisp:nil :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         struct-shape-domain-configuration-summary-service-type
                         :shape "ServiceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-configuration-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-configuration-summary
                    'make-domain-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "serviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-configurations ()
   '(trivial-types:proper-list domain-configuration-summary))
 (common-lisp:defun make-domain-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            domain-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-type () 'common-lisp:string)
(common-lisp:deftype duration-in-minutes () 'common-lisp:integer)
(common-lisp:deftype duration-seconds () 'common-lisp:integer)
(common-lisp:deftype dynamic-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dynamo-dbaction common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-dynamo-dbaction-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-dynamo-dbaction-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamo-operation common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-operation
                         :shape "DynamoOperation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-key-field :initarg :hash-key-field :initform
                         (common-lisp:error ":hashkeyfield is required") :type
                         (common-lisp:or hash-key-field common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-hash-key-field
                         :shape "HashKeyField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-key-value :initarg :hash-key-value :initform
                         (common-lisp:error ":hashkeyvalue is required") :type
                         (common-lisp:or hash-key-value common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-hash-key-value
                         :shape "HashKeyValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hash-key-type :initarg :hash-key-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamo-key-type common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-hash-key-type
                         :shape "DynamoKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (range-key-field :initarg :range-key-field :initform
                         common-lisp:nil :type
                         (common-lisp:or range-key-field common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-range-key-field
                         :shape "RangeKeyField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (range-key-value :initarg :range-key-value :initform
                         common-lisp:nil :type
                         (common-lisp:or range-key-value common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-range-key-value
                         :shape "RangeKeyValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (range-key-type :initarg :range-key-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamo-key-type common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-range-key-type
                         :shape "DynamoKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payload-field :initarg :payload-field :initform
                         common-lisp:nil :type
                         (common-lisp:or payload-field common-lisp:null)
                         :accessor struct-shape-dynamo-dbaction-payload-field
                         :shape "PayloadField" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamo-dbaction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamo-dbaction
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dynamo-dbaction 'make-dynamo-dbaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-field))
      (common-lisp:list
       (common-lisp:cons "hashKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-value))
      (common-lisp:list
       (common-lisp:cons "hashKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-type))
      (common-lisp:list
       (common-lisp:cons "hashKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-field))
      (common-lisp:list
       (common-lisp:cons "rangeKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-value))
      (common-lisp:list
       (common-lisp:cons "rangeKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-type))
      (common-lisp:list
       (common-lisp:cons "rangeKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-field))
      (common-lisp:list
       (common-lisp:cons "payloadField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dynamo-dbv2action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-dynamo-dbv2action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (put-item :initarg :put-item :initform
                         (common-lisp:error ":putitem is required") :type
                         (common-lisp:or put-item-input common-lisp:null)
                         :accessor struct-shape-dynamo-dbv2action-put-item
                         :shape "PutItemInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamo-dbv2action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamo-dbv2action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dynamo-dbv2action 'make-dynamo-dbv2action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'put-item))
      (common-lisp:list
       (common-lisp:cons "putItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   common-lisp:nil))
(common-lisp:deftype dynamo-key-type () 'common-lisp:string)
(common-lisp:deftype dynamo-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype effective-policies ()
   '(trivial-types:proper-list effective-policy))
 (common-lisp:defun make-effective-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list effective-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass effective-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-effective-policy-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-effective-policy-policy-arn :shape
                         "PolicyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-effective-policy-policy-document :shape
                         "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-effective-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'effective-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'effective-policy 'make-effective-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input effective-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input effective-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input effective-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-elasticsearch-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or elasticsearch-endpoint
                                         common-lisp:null)
                         :accessor struct-shape-elasticsearch-action-endpoint
                         :shape "ElasticsearchEndpoint" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index :initarg :index :initform
                         (common-lisp:error ":index is required") :type
                         (common-lisp:or elasticsearch-index common-lisp:null)
                         :accessor struct-shape-elasticsearch-action-index
                         :shape "ElasticsearchIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or elasticsearch-type common-lisp:null)
                         :accessor struct-shape-elasticsearch-action-type
                         :shape "ElasticsearchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or elasticsearch-id common-lisp:null)
                         :accessor struct-shape-elasticsearch-action-id :shape
                         "ElasticsearchId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elasticsearch-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-action 'make-elasticsearch-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   common-lisp:nil))
(common-lisp:deftype elasticsearch-endpoint () 'common-lisp:string)
(common-lisp:deftype elasticsearch-id () 'common-lisp:string)
(common-lisp:deftype elasticsearch-index () 'common-lisp:string)
(common-lisp:deftype elasticsearch-type () 'common-lisp:string)
(common-lisp:deftype enable-caching-for-http () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass enable-io-tlogging-params common-lisp:nil
                       ((role-arn-for-logging :initarg :role-arn-for-logging
                         :initform
                         (common-lisp:error ":rolearnforlogging is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-enable-io-tlogging-params-role-arn-for-logging
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         (common-lisp:error ":loglevel is required") :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-enable-io-tlogging-params-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-io-tlogging-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-io-tlogging-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-io-tlogging-params
                    'make-enable-io-tlogging-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-io-tlogging-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-io-tlogging-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'role-arn-for-logging))
      (common-lisp:list
       (common-lisp:cons "roleArnForLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-io-tlogging-params))
   common-lisp:nil))
(common-lisp:deftype enable-ocspcheck () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass enable-topic-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-enable-topic-rule-request-rule-name
                         :shape "RuleName" :location "uri" :location-name
                         "ruleName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-topic-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-topic-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-topic-rule-request
                    'make-enable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   common-lisp:nil))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype enabled-boolean () 'common-lisp:boolean)
(common-lisp:deftype endpoint-address () 'common-lisp:string)
(common-lisp:deftype endpoint-type () 'common-lisp:string)
(common-lisp:deftype environment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environments () '(trivial-types:proper-list environment))
 (common-lisp:defun make-environments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-info common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-error-info-code :shape "Code" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or otaupdate-error-message
                                         common-lisp:null)
                         :accessor struct-shape-error-info-message :shape
                         "OTAUpdateErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype evaluation-statistic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-configurations () 'common-lisp:hash-table)
 (common-lisp:defun make-event-configurations
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:deftype example () 'common-lisp:string)
(common-lisp:deftype execution-name-prefix () 'common-lisp:string)
(common-lisp:deftype execution-number () 'common-lisp:integer)
(common-lisp:deftype expected-version () 'common-lisp:integer)
(common-lisp:deftype expires-in-sec () 'common-lisp:integer)
(common-lisp:deftype expires-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass explicit-deny common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type (common-lisp:or policies common-lisp:null)
                         :accessor struct-shape-explicit-deny-policies :shape
                         "Policies" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-explicit-deny
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'explicit-deny
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'explicit-deny 'make-explicit-deny))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explicit-deny))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explicit-deny))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explicit-deny))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exponential-rollout-rate common-lisp:nil
                       ((base-rate-per-minute :initarg :base-rate-per-minute
                         :initform
                         (common-lisp:error ":baserateperminute is required")
                         :type
                         (common-lisp:or rollout-rate-per-minute
                                         common-lisp:null)
                         :accessor
                         struct-shape-exponential-rollout-rate-base-rate-per-minute
                         :shape "RolloutRatePerMinute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (increment-factor :initarg :increment-factor :initform
                         (common-lisp:error ":incrementfactor is required")
                         :type
                         (common-lisp:or increment-factor common-lisp:null)
                         :accessor
                         struct-shape-exponential-rollout-rate-increment-factor
                         :shape "IncrementFactor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rate-increase-criteria :initarg
                         :rate-increase-criteria :initform
                         (common-lisp:error
                          ":rateincreasecriteria is required")
                         :type
                         (common-lisp:or rate-increase-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-exponential-rollout-rate-rate-increase-criteria
                         :shape "RateIncreaseCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-exponential-rollout-rate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'exponential-rollout-rate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'exponential-rollout-rate 'make-exponential-rollout-rate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exponential-rollout-rate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exponential-rollout-rate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-rate-per-minute))
      (common-lisp:list
       (common-lisp:cons "baseRatePerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'increment-factor))
      (common-lisp:list
       (common-lisp:cons "incrementFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rate-increase-criteria))
      (common-lisp:list
       (common-lisp:cons "rateIncreaseCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exponential-rollout-rate))
   common-lisp:nil))
(common-lisp:deftype export-metric () 'common-lisp:boolean)
(common-lisp:deftype failed-checks-count () 'common-lisp:integer)
(common-lisp:deftype failed-findings-count () 'common-lisp:integer)
(common-lisp:deftype failed-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass field common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-field-name :shape "FieldName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or field-type common-lisp:null) :accessor
                         struct-shape-field-type :shape "FieldType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field))
   common-lisp:nil))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fields () '(trivial-types:proper-list field))
 (common-lisp:defun make-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass file-location common-lisp:nil
                       ((stream :initarg :stream :initform common-lisp:nil
                         :type (common-lisp:or stream common-lisp:null)
                         :accessor struct-shape-file-location-stream :shape
                         "Stream" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-file-location-s3location :shape
                         "S3Location" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-file-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'file-location 'make-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-location))
   common-lisp:nil))
(common-lisp:deftype file-name () 'common-lisp:string)
(common-lisp:deftype file-type () 'common-lisp:integer)
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-ids () '(trivial-types:proper-list finding-id))
 (common-lisp:defun make-finding-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firehose-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-firehose-action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delivery-stream-name :initarg :delivery-stream-name
                         :initform
                         (common-lisp:error ":deliverystreamname is required")
                         :type
                         (common-lisp:or delivery-stream-name common-lisp:null)
                         :accessor
                         struct-shape-firehose-action-delivery-stream-name
                         :shape "DeliveryStreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (separator :initarg :separator :initform
                         common-lisp:nil :type
                         (common-lisp:or firehose-separator common-lisp:null)
                         :accessor struct-shape-firehose-action-separator
                         :shape "FirehoseSeparator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-mode :initarg :batch-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-mode common-lisp:null) :accessor
                         struct-shape-firehose-action-batch-mode :shape
                         "BatchMode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firehose-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firehose-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'firehose-action 'make-firehose-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firehose-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firehose-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-stream-name))
      (common-lisp:list
       (common-lisp:cons "deliveryStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'separator))
      (common-lisp:list
       (common-lisp:cons "separator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firehose-action))
   common-lisp:nil))
(common-lisp:deftype firehose-separator () 'common-lisp:string)
(common-lisp:deftype flag () 'common-lisp:boolean)
(common-lisp:deftype fleet-metric-arn () 'common-lisp:string)
(common-lisp:deftype fleet-metric-description () 'common-lisp:string)
(common-lisp:deftype fleet-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fleet-metric-name-and-arn common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-fleet-metric-name-and-arn-metric-name
                         :shape "FleetMetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-arn :initarg :metric-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-arn common-lisp:null)
                         :accessor
                         struct-shape-fleet-metric-name-and-arn-metric-arn
                         :shape "FleetMetricArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fleet-metric-name-and-arn
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-metric-name-and-arn
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fleet-metric-name-and-arn
                    'make-fleet-metric-name-and-arn))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fleet-metric-name-and-arn))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fleet-metric-name-and-arn))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fleet-metric-name-and-arn))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fleet-metric-name-and-arn-list ()
   '(trivial-types:proper-list fleet-metric-name-and-arn))
 (common-lisp:defun make-fleet-metric-name-and-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fleet-metric-name-and-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-metric-period () 'common-lisp:integer)
(common-lisp:deftype fleet-metric-unit () 'common-lisp:string)
(common-lisp:deftype force-delete () 'common-lisp:boolean)
(common-lisp:deftype force-delete-awsjob () 'common-lisp:boolean)
(common-lisp:deftype force-flag () 'common-lisp:boolean)
(common-lisp:deftype forced () 'common-lisp:boolean)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:deftype generation-id () 'common-lisp:string)
(common-lisp:deftype generic-long-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass geo-location-target common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or target-field-name common-lisp:null)
                         :accessor struct-shape-geo-location-target-name :shape
                         "TargetFieldName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or target-field-order common-lisp:null)
                         :accessor struct-shape-geo-location-target-order
                         :shape "TargetFieldOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-geo-location-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'geo-location-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'geo-location-target 'make-geo-location-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype geo-locations-filter ()
   '(trivial-types:proper-list geo-location-target))
 (common-lisp:defun make-geo-locations-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-location-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-behavior-model-training-summaries-request
                       common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-behavior-model-training-summaries-request-security-profile-name
                         :shape "SecurityProfileName" :location "querystring"
                         :location-name "securityProfileName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or tiny-max-results common-lisp:null)
                         :accessor
                         struct-shape-get-behavior-model-training-summaries-request-max-results
                         :shape "TinyMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-behavior-model-training-summaries-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-behavior-model-training-summaries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-behavior-model-training-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-behavior-model-training-summaries-request
                    'make-get-behavior-model-training-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-behavior-model-training-summaries-response
                       common-lisp:nil
                       ((summaries :initarg :summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or behavior-model-training-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-behavior-model-training-summaries-response-summaries
                         :shape "BehaviorModelTrainingSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-behavior-model-training-summaries-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-behavior-model-training-summaries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-behavior-model-training-summaries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-behavior-model-training-summaries-response
                    'make-get-behavior-model-training-summaries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-behavior-model-training-summaries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-buckets-aggregation-request common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-get-buckets-aggregation-request-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-aggregation-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform
                         (common-lisp:error ":aggregationfield is required")
                         :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-aggregation-request-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-aggregation-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (buckets-aggregation-type :initarg
                         :buckets-aggregation-type :initform
                         (common-lisp:error
                          ":bucketsaggregationtype is required")
                         :type
                         (common-lisp:or buckets-aggregation-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-aggregation-request-buckets-aggregation-type
                         :shape "BucketsAggregationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-buckets-aggregation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-buckets-aggregation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-buckets-aggregation-request
                    'make-get-buckets-aggregation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'buckets-aggregation-type))
      (common-lisp:list
       (common-lisp:cons "bucketsAggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-buckets-aggregation-response common-lisp:nil
                       ((total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-get-buckets-aggregation-response-total-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (buckets :initarg :buckets :initform common-lisp:nil
                         :type (common-lisp:or buckets common-lisp:null)
                         :accessor
                         struct-shape-get-buckets-aggregation-response-buckets
                         :shape "Buckets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-buckets-aggregation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-buckets-aggregation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-buckets-aggregation-response
                    'make-get-buckets-aggregation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "totalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-buckets-aggregation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cardinality-request common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-get-cardinality-request-index-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-get-cardinality-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-get-cardinality-request-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-get-cardinality-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cardinality-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cardinality-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cardinality-request 'make-get-cardinality-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cardinality-response common-lisp:nil
                       ((cardinality :initarg :cardinality :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-get-cardinality-response-cardinality
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cardinality-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cardinality-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cardinality-response 'make-get-cardinality-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cardinality))
      (common-lisp:list
       (common-lisp:cons "cardinality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cardinality-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-effective-policies-request common-lisp:nil
                       ((principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-get-effective-policies-request-principal
                         :shape "Principal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-identity-pool-id :initarg
                         :cognito-identity-pool-id :initform common-lisp:nil
                         :type
                         (common-lisp:or cognito-identity-pool-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-effective-policies-request-cognito-identity-pool-id
                         :shape "CognitoIdentityPoolId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-get-effective-policies-request-thing-name
                         :shape "ThingName" :location "querystring"
                         :location-name "thingName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-effective-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-effective-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-effective-policies-request
                    'make-get-effective-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "cognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-effective-policies-response common-lisp:nil
                       ((effective-policies :initarg :effective-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or effective-policies common-lisp:null)
                         :accessor
                         struct-shape-get-effective-policies-response-effective-policies
                         :shape "EffectivePolicies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-effective-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-effective-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-effective-policies-response
                    'make-get-effective-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-policies))
      (common-lisp:list
       (common-lisp:cons "effectivePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-effective-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-indexing-configuration-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-indexing-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-indexing-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-indexing-configuration-request
                    'make-get-indexing-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-indexing-configuration-response common-lisp:nil
                       ((thing-indexing-configuration :initarg
                         :thing-indexing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-indexing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-indexing-configuration-response-thing-indexing-configuration
                         :shape "ThingIndexingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thing-group-indexing-configuration :initarg
                         :thing-group-indexing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-indexing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-indexing-configuration-response-thing-group-indexing-configuration
                         :shape "ThingGroupIndexingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-indexing-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-indexing-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-indexing-configuration-response
                    'make-get-indexing-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingGroupIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-indexing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-document-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-job-document-request-job-id :shape
                         "JobId" :location "uri" :location-name "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-document-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-document-request 'make-get-job-document-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-document-response common-lisp:nil
                       ((document :initarg :document :initform common-lisp:nil
                         :type (common-lisp:or job-document common-lisp:null)
                         :accessor
                         struct-shape-get-job-document-response-document :shape
                         "JobDocument" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-document-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-document-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-document-response
                    'make-get-job-document-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-document-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-logging-options-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-request
                    'make-get-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-logging-options-response common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor
                         struct-shape-get-logging-options-response-role-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-get-logging-options-response-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-response
                    'make-get-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-otaupdate-request common-lisp:nil
                       ((ota-update-id :initarg :ota-update-id :initform
                         (common-lisp:error ":otaupdateid is required") :type
                         (common-lisp:or otaupdate-id common-lisp:null)
                         :accessor
                         struct-shape-get-otaupdate-request-ota-update-id
                         :shape "OTAUpdateId" :location "uri" :location-name
                         "otaUpdateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-otaupdate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-otaupdate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-otaupdate-request 'make-get-otaupdate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-otaupdate-response common-lisp:nil
                       ((ota-update-info :initarg :ota-update-info :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-info common-lisp:null)
                         :accessor
                         struct-shape-get-otaupdate-response-ota-update-info
                         :shape "OTAUpdateInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-otaupdate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-otaupdate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-otaupdate-response 'make-get-otaupdate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-info))
      (common-lisp:list
       (common-lisp:cons "otaUpdateInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-otaupdate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-configuration-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-configuration-request
                    'make-get-package-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-configuration-response common-lisp:nil
                       ((version-update-by-jobs-config :initarg
                         :version-update-by-jobs-config :initform
                         common-lisp:nil :type
                         (common-lisp:or version-update-by-jobs-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-package-configuration-response-version-update-by-jobs-config
                         :shape "VersionUpdateByJobsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-configuration-response
                    'make-get-package-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-update-by-jobs-config))
      (common-lisp:list
       (common-lisp:cons "versionUpdateByJobsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-request-package-name :shape
                         "PackageName" :location "uri" :location-name
                         "packageName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-request 'make-get-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-response common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-response-package-name :shape
                         "PackageName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (package-arn :initarg :package-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or package-arn common-lisp:null)
                         :accessor
                         struct-shape-get-package-response-package-arn :shape
                         "PackageArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-get-package-response-description :shape
                         "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-name :initarg :default-version-name
                         :initform common-lisp:nil :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-response-default-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-get-package-response-creation-date :shape
                         "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-get-package-response-last-modified-date
                         :shape "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-response 'make-get-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-arn))
      (common-lisp:list
       (common-lisp:cons "packageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "defaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (version-name :initarg :version-name :initform
                         (common-lisp:error ":versionname is required") :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-request-version-name
                         :shape "VersionName" :location "uri" :location-name
                         "versionName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-version-request
                    'make-get-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-response common-lisp:nil
                       ((package-version-arn :initarg :package-version-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or package-version-arn common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-package-version-arn
                         :shape "PackageVersionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-name :initarg :version-name :initform
                         common-lisp:nil :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-attributes common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-attributes
                         :shape "ResourceAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-status
                         :shape "PackageVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-reason :initarg :error-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or package-version-error-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-error-reason
                         :shape "PackageVersionErrorReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-response-last-modified-date
                         :shape "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-version-response
                    'make-get-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version-arn))
      (common-lisp:list
       (common-lisp:cons "packageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "versionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "errorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-percentiles-request common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-get-percentiles-request-index-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-get-percentiles-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-get-percentiles-request-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-get-percentiles-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percents :initarg :percents :initform common-lisp:nil
                         :type (common-lisp:or percent-list common-lisp:null)
                         :accessor
                         struct-shape-get-percentiles-request-percents :shape
                         "PercentList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-percentiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-percentiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-percentiles-request 'make-get-percentiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percents))
      (common-lisp:list
       (common-lisp:cons "percents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-percentiles-response common-lisp:nil
                       ((percentiles :initarg :percentiles :initform
                         common-lisp:nil :type
                         (common-lisp:or percentiles common-lisp:null)
                         :accessor
                         struct-shape-get-percentiles-response-percentiles
                         :shape "Percentiles" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-percentiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-percentiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-percentiles-response 'make-get-percentiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentiles))
      (common-lisp:list
       (common-lisp:cons "percentiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-percentiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-get-policy-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-get-policy-response-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-get-policy-response-policy-arn :shape
                         "PolicyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-get-policy-response-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-id :initarg :default-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-policy-response-default-version-id
                         :shape "PolicyVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-get-policy-response-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-get-policy-response-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generation-id common-lisp:null)
                         :accessor
                         struct-shape-get-policy-response-generation-id :shape
                         "GenerationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-version-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policyversionid is required")
                         :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-request-policy-version-id
                         :shape "PolicyVersionId" :location "uri"
                         :location-name "policyVersionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-version-response common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-get-policy-version-response-policy-arn
                         :shape "PolicyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-response-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-response-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-response-policy-version-id
                         :shape "PolicyVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-response-is-default-version
                         :shape "IsDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-get-policy-version-response-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-get-policy-version-response-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generation-id common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-response-generation-id
                         :shape "GenerationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registration-code-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registration-code-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-registration-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-request
                    'make-get-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registration-code-response common-lisp:nil
                       ((registration-code :initarg :registration-code
                         :initform common-lisp:nil :type
                         (common-lisp:or registration-code common-lisp:null)
                         :accessor
                         struct-shape-get-registration-code-response-registration-code
                         :shape "RegistrationCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registration-code-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-registration-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-response
                    'make-get-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-code))
      (common-lisp:list
       (common-lisp:cons "registrationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-statistics-request common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-get-statistics-request-index-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-get-statistics-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-get-statistics-request-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-get-statistics-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-statistics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-statistics-request 'make-get-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-statistics-response common-lisp:nil
                       ((statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or statistics common-lisp:null) :accessor
                         struct-shape-get-statistics-response-statistics :shape
                         "Statistics" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-statistics-response 'make-get-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-topic-rule-destination-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-get-topic-rule-destination-request-arn
                         :shape "AwsArn" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-topic-rule-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-topic-rule-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-destination-request
                    'make-get-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-topic-rule-destination-response common-lisp:nil
                       ((topic-rule-destination :initarg
                         :topic-rule-destination :initform common-lisp:nil
                         :type
                         (common-lisp:or topic-rule-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-topic-rule-destination-response-topic-rule-destination
                         :shape "TopicRuleDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-topic-rule-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-topic-rule-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-destination-response
                    'make-get-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-rule-destination))
      (common-lisp:list
       (common-lisp:cons "topicRuleDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-topic-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-get-topic-rule-request-rule-name :shape
                         "RuleName" :location "uri" :location-name "ruleName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-topic-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-topic-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-request 'make-get-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-topic-rule-response common-lisp:nil
                       ((rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or rule-arn common-lisp:null)
                         :accessor
                         struct-shape-get-topic-rule-response-rule-arn :shape
                         "RuleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule :initarg :rule :initform common-lisp:nil :type
                         (common-lisp:or topic-rule common-lisp:null) :accessor
                         struct-shape-get-topic-rule-response-rule :shape
                         "TopicRule" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-topic-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-topic-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-response 'make-get-topic-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "ruleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-v2logging-options-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-v2logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-v2logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-v2logging-options-request
                    'make-get-v2logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-v2logging-options-response common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor
                         struct-shape-get-v2logging-options-response-role-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-log-level :initarg :default-log-level
                         :initform common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-get-v2logging-options-response-default-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-all-logs :initarg :disable-all-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or disable-all-logs common-lisp:null)
                         :accessor
                         struct-shape-get-v2logging-options-response-disable-all-logs
                         :shape "DisableAllLogs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-v2logging-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-v2logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-v2logging-options-response
                    'make-get-v2logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-log-level))
      (common-lisp:list
       (common-lisp:cons "defaultLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-all-logs))
      (common-lisp:list
       (common-lisp:cons "disableAllLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-v2logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-name-and-arn common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor struct-shape-group-name-and-arn-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-arn common-lisp:null)
                         :accessor struct-shape-group-name-and-arn-group-arn
                         :shape "ThingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-name-and-arn
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-name-and-arn
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'group-name-and-arn 'make-group-name-and-arn))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-name-and-arn))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-name-and-arn))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "groupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-name-and-arn))
   common-lisp:nil))
(common-lisp:deftype hash-algorithm () 'common-lisp:string)
(common-lisp:deftype hash-key-field () 'common-lisp:string)
(common-lisp:deftype hash-key-value () 'common-lisp:string)
(common-lisp:deftype header-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-list ()
   '(trivial-types:proper-list http-action-header))
 (common-lisp:defun make-header-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-action-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-action common-lisp:nil
                       ((url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-http-action-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confirmation-url :initarg :confirmation-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-http-action-confirmation-url :shape "Url"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (headers :initarg :headers :initform common-lisp:nil
                         :type (common-lisp:or header-list common-lisp:null)
                         :accessor struct-shape-http-action-headers :shape
                         "HeaderList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth :initarg :auth :initform common-lisp:nil :type
                         (common-lisp:or http-authorization common-lisp:null)
                         :accessor struct-shape-http-action-auth :shape
                         "HttpAuthorization" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http-action 'make-http-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-action-header common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or header-key common-lisp:null) :accessor
                         struct-shape-http-action-header-key :shape "HeaderKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or header-value common-lisp:null)
                         :accessor struct-shape-http-action-header-value :shape
                         "HeaderValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-action-header
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-action-header
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-action-header 'make-http-action-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-action-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-action-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-action-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-authorization common-lisp:nil
                       ((sigv4 :initarg :sigv4 :initform common-lisp:nil :type
                         (common-lisp:or sig-v4authorization common-lisp:null)
                         :accessor struct-shape-http-authorization-sigv4 :shape
                         "SigV4Authorization" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-authorization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-authorization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-authorization 'make-http-authorization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sigv4))
      (common-lisp:list
       (common-lisp:cons "sigv4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-authorization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-context common-lisp:nil
                       ((headers :initarg :headers :initform common-lisp:nil
                         :type (common-lisp:or http-headers common-lisp:null)
                         :accessor struct-shape-http-context-headers :shape
                         "HttpHeaders" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or http-query-string common-lisp:null)
                         :accessor struct-shape-http-context-query-string
                         :shape "HttpQueryString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http-context 'make-http-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-context))
   common-lisp:nil))
(common-lisp:deftype http-header-name () 'common-lisp:string)
(common-lisp:deftype http-header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype http-headers () 'common-lisp:hash-table)
 (common-lisp:defun make-http-headers (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype http-query-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-url-destination-configuration common-lisp:nil
                       ((confirmation-url :initarg :confirmation-url :initform
                         (common-lisp:error ":confirmationurl is required")
                         :type (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-http-url-destination-configuration-confirmation-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-url-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-url-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-url-destination-configuration
                    'make-http-url-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-url-destination-properties common-lisp:nil
                       ((confirmation-url :initarg :confirmation-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-http-url-destination-properties-confirmation-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-url-destination-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-url-destination-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-url-destination-properties
                    'make-http-url-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-url-destination-summary common-lisp:nil
                       ((confirmation-url :initarg :confirmation-url :initform
                         common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-http-url-destination-summary-confirmation-url
                         :shape "Url" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-url-destination-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-url-destination-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-url-destination-summary
                    'make-http-url-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-url))
      (common-lisp:list
       (common-lisp:cons "confirmationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-url-destination-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass implicit-deny common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type (common-lisp:or policies common-lisp:null)
                         :accessor struct-shape-implicit-deny-policies :shape
                         "Policies" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-implicit-deny
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'implicit-deny
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'implicit-deny 'make-implicit-deny))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input implicit-deny))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input implicit-deny))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input implicit-deny))
   common-lisp:nil))
(common-lisp:deftype in-progress-checks-count () 'common-lisp:integer)
(common-lisp:deftype in-progress-things () 'common-lisp:integer)
(common-lisp:deftype in-progress-timeout-in-minutes () 'common-lisp:integer)
(common-lisp:deftype increment-factor () 'common-lisp:double-float)
(common-lisp:deftype index-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype index-names-list ()
   '(trivial-types:proper-list index-name))
 (common-lisp:defun make-index-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list index-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition index-not-ready-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       index-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'index-not-ready-exception
                    'index-not-ready-exception-message)))
(common-lisp:deftype index-schema () 'common-lisp:string)
(common-lisp:deftype index-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass indexing-filter common-lisp:nil
                       ((named-shadow-names :initarg :named-shadow-names
                         :initform common-lisp:nil :type
                         (common-lisp:or named-shadow-names-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-indexing-filter-named-shadow-names :shape
                         "NamedShadowNamesFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (geo-locations :initarg :geo-locations :initform
                         common-lisp:nil :type
                         (common-lisp:or geo-locations-filter common-lisp:null)
                         :accessor struct-shape-indexing-filter-geo-locations
                         :shape "GeoLocationsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-indexing-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'indexing-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'indexing-filter 'make-indexing-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input indexing-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input indexing-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'named-shadow-names))
      (common-lisp:list
       (common-lisp:cons "namedShadowNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-locations))
      (common-lisp:list
       (common-lisp:cons "geoLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input indexing-filter))
   common-lisp:nil))
(common-lisp:deftype inline-document () 'common-lisp:string)
(common-lisp:deftype input-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-aggregation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-aggregation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-aggregation-exception
                    'invalid-aggregation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-query-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-query-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-query-exception 'invalid-query-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-response-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-response-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-response-exception
                    'invalid-response-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-transition-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-transition-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-transition-exception
                    'invalid-state-transition-exception-message)))
(common-lisp:progn
 (common-lisp:defclass iot-analytics-action common-lisp:nil
                       ((channel-arn :initarg :channel-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-iot-analytics-action-channel-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (channel-name :initarg :channel-name :initform
                         common-lisp:nil :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-iot-analytics-action-channel-name :shape
                         "ChannelName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (batch-mode :initarg :batch-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-mode common-lisp:null) :accessor
                         struct-shape-iot-analytics-action-batch-mode :shape
                         "BatchMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor struct-shape-iot-analytics-action-role-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-analytics-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iot-analytics-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-analytics-action 'make-iot-analytics-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iot-analytics-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iot-analytics-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "channelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iot-analytics-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iot-events-action common-lisp:nil
                       ((input-name :initarg :input-name :initform
                         (common-lisp:error ":inputname is required") :type
                         (common-lisp:or input-name common-lisp:null) :accessor
                         struct-shape-iot-events-action-input-name :shape
                         "InputName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-id :initarg :message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-iot-events-action-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (batch-mode :initarg :batch-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-mode common-lisp:null) :accessor
                         struct-shape-iot-events-action-batch-mode :shape
                         "BatchMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-iot-events-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-events-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iot-events-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-events-action 'make-iot-events-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iot-events-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iot-events-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-name))
      (common-lisp:list
       (common-lisp:cons "inputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-mode))
      (common-lisp:list
       (common-lisp:cons "batchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iot-events-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iot-site-wise-action common-lisp:nil
                       ((put-asset-property-value-entries :initarg
                         :put-asset-property-value-entries :initform
                         (common-lisp:error
                          ":putassetpropertyvalueentries is required")
                         :type
                         (common-lisp:or put-asset-property-value-entry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-iot-site-wise-action-put-asset-property-value-entries
                         :shape "PutAssetPropertyValueEntryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-iot-site-wise-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iot-site-wise-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iot-site-wise-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iot-site-wise-action 'make-iot-site-wise-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iot-site-wise-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iot-site-wise-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'put-asset-property-value-entries))
      (common-lisp:list
       (common-lisp:cons "putAssetPropertyValueEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iot-site-wise-action))
   common-lisp:nil))
(common-lisp:deftype is-authenticated () 'common-lisp:boolean)
(common-lisp:deftype is-default-version () 'common-lisp:boolean)
(common-lisp:deftype is-disabled () 'common-lisp:boolean)
(common-lisp:deftype is-suppressed () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass issuer-certificate-identifier common-lisp:nil
                       ((issuer-certificate-subject :initarg
                         :issuer-certificate-subject :initform common-lisp:nil
                         :type
                         (common-lisp:or issuer-certificate-subject
                                         common-lisp:null)
                         :accessor
                         struct-shape-issuer-certificate-identifier-issuer-certificate-subject
                         :shape "IssuerCertificateSubject" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (issuer-id :initarg :issuer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or issuer-id common-lisp:null) :accessor
                         struct-shape-issuer-certificate-identifier-issuer-id
                         :shape "IssuerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuer-certificate-serial-number :initarg
                         :issuer-certificate-serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or issuer-certificate-serial-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-issuer-certificate-identifier-issuer-certificate-serial-number
                         :shape "IssuerCertificateSerialNumber" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-issuer-certificate-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'issuer-certificate-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'issuer-certificate-identifier
                    'make-issuer-certificate-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          issuer-certificate-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          issuer-certificate-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-subject))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-id))
      (common-lisp:list
       (common-lisp:cons "issuerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-serial-number))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateSerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          issuer-certificate-identifier))
   common-lisp:nil))
(common-lisp:deftype issuer-certificate-serial-number () 'common-lisp:string)
(common-lisp:deftype issuer-certificate-subject () 'common-lisp:string)
(common-lisp:deftype issuer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor struct-shape-job-job-arn :shape "JobArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-job-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-selection :initarg :target-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or target-selection common-lisp:null)
                         :accessor struct-shape-job-target-selection :shape
                         "TargetSelection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or job-status common-lisp:null)
                         :accessor struct-shape-job-status :shape "JobStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force-canceled :initarg :force-canceled :initform
                         common-lisp:nil :type
                         (common-lisp:or forced common-lisp:null) :accessor
                         struct-shape-job-force-canceled :shape "Forced"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason-code :initarg :reason-code :initform
                         common-lisp:nil :type
                         (common-lisp:or reason-code common-lisp:null)
                         :accessor struct-shape-job-reason-code :shape
                         "ReasonCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment common-lisp:null)
                         :accessor struct-shape-job-comment :shape "Comment"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (targets :initarg :targets :initform common-lisp:nil
                         :type (common-lisp:or job-targets common-lisp:null)
                         :accessor struct-shape-job-targets :shape "JobTargets"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor struct-shape-job-description :shape
                         "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (presigned-url-config :initarg :presigned-url-config
                         :initform common-lisp:nil :type
                         (common-lisp:or presigned-url-config common-lisp:null)
                         :accessor struct-shape-job-presigned-url-config :shape
                         "PresignedUrlConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-rollout-config :initarg
                         :job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-job-executions-rollout-config :shape
                         "JobExecutionsRolloutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (abort-config :initarg :abort-config :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-config common-lisp:null)
                         :accessor struct-shape-job-abort-config :shape
                         "AbortConfig" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-created-at :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-last-updated-at :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-completed-at :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-process-details :initarg :job-process-details
                         :initform common-lisp:nil :type
                         (common-lisp:or job-process-details common-lisp:null)
                         :accessor struct-shape-job-job-process-details :shape
                         "JobProcessDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-config :initarg :timeout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or timeout-config common-lisp:null)
                         :accessor struct-shape-job-timeout-config :shape
                         "TimeoutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor struct-shape-job-namespace-id :shape
                         "NamespaceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-template-arn :initarg :job-template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor struct-shape-job-job-template-arn :shape
                         "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-retry-config :initarg
                         :job-executions-retry-config :initform common-lisp:nil
                         :type
                         (common-lisp:or job-executions-retry-config
                                         common-lisp:null)
                         :accessor struct-shape-job-job-executions-retry-config
                         :shape "JobExecutionsRetryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (document-parameters :initarg :document-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or parameter-map common-lisp:null)
                         :accessor struct-shape-job-document-parameters :shape
                         "ParameterMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-concurrent :initarg :is-concurrent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-wrapper-object
                                         common-lisp:null)
                         :accessor struct-shape-job-is-concurrent :shape
                         "BooleanWrapperObject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduling-config :initarg :scheduling-config
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduling-config common-lisp:null)
                         :accessor struct-shape-job-scheduling-config :shape
                         "SchedulingConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-job-rollouts :initarg
                         :scheduled-job-rollouts :initform common-lisp:nil
                         :type
                         (common-lisp:or scheduled-job-rollout-list
                                         common-lisp:null)
                         :accessor struct-shape-job-scheduled-job-rollouts
                         :shape "ScheduledJobRolloutList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-package-versions :initarg
                         :destination-package-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-package-versions
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-destination-package-versions :shape
                         "DestinationPackageVersions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-canceled))
      (common-lisp:list
       (common-lisp:cons "forceCanceled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "reasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-process-details))
      (common-lisp:list
       (common-lisp:cons "jobProcessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "namespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-parameters))
      (common-lisp:list
       (common-lisp:cons "documentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-concurrent))
      (common-lisp:list
       (common-lisp:cons "isConcurrent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-config))
      (common-lisp:list
       (common-lisp:cons "schedulingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-job-rollouts))
      (common-lisp:list
       (common-lisp:cons "scheduledJobRollouts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-package-versions))
      (common-lisp:list
       (common-lisp:cons "destinationPackageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:deftype job-description () 'common-lisp:string)
(common-lisp:deftype job-document () 'common-lisp:string)
(common-lisp:deftype job-document-source () 'common-lisp:string)
(common-lisp:deftype job-end-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-execution common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-job-execution-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or job-execution-status common-lisp:null)
                         :accessor struct-shape-job-execution-status :shape
                         "JobExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-canceled :initarg :force-canceled :initform
                         common-lisp:nil :type
                         (common-lisp:or forced common-lisp:null) :accessor
                         struct-shape-job-execution-force-canceled :shape
                         "Forced" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-details :initarg :status-details :initform
                         common-lisp:nil :type
                         (common-lisp:or job-execution-status-details
                                         common-lisp:null)
                         :accessor struct-shape-job-execution-status-details
                         :shape "JobExecutionStatusDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-job-execution-thing-arn :shape "ThingArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queued-at :initarg :queued-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-execution-queued-at :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-execution-started-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-execution-last-updated-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-number :initarg :execution-number :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-number common-lisp:null)
                         :accessor struct-shape-job-execution-execution-number
                         :shape "ExecutionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor struct-shape-job-execution-version-number
                         :shape "VersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (approximate-seconds-before-timed-out :initarg
                         :approximate-seconds-before-timed-out :initform
                         common-lisp:nil :type
                         (common-lisp:or approximate-seconds-before-timed-out
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-execution-approximate-seconds-before-timed-out
                         :shape "ApproximateSecondsBeforeTimedOut" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-execution 'make-job-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-canceled))
      (common-lisp:list
       (common-lisp:cons "forceCanceled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "statusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-at))
      (common-lisp:list
       (common-lisp:cons "queuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-number))
      (common-lisp:list
       (common-lisp:cons "executionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "versionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximate-seconds-before-timed-out))
      (common-lisp:list
       (common-lisp:cons "approximateSecondsBeforeTimedOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-execution))
   common-lisp:nil))
(common-lisp:deftype job-execution-failure-type () 'common-lisp:string)
(common-lisp:deftype job-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-execution-status-details common-lisp:nil
                       ((details-map :initarg :details-map :initform
                         common-lisp:nil :type
                         (common-lisp:or details-map common-lisp:null)
                         :accessor
                         struct-shape-job-execution-status-details-details-map
                         :shape "DetailsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-execution-status-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-execution-status-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-execution-status-details
                    'make-job-execution-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details-map))
      (common-lisp:list
       (common-lisp:cons "detailsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-execution-summary common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or job-execution-status common-lisp:null)
                         :accessor struct-shape-job-execution-summary-status
                         :shape "JobExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queued-at :initarg :queued-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-execution-summary-queued-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-execution-summary-started-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-execution-summary-last-updated-at
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-number :initarg :execution-number :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-number common-lisp:null)
                         :accessor
                         struct-shape-job-execution-summary-execution-number
                         :shape "ExecutionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-attempt :initarg :retry-attempt :initform
                         common-lisp:nil :type
                         (common-lisp:or retry-attempt common-lisp:null)
                         :accessor
                         struct-shape-job-execution-summary-retry-attempt
                         :shape "RetryAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-execution-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-execution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-execution-summary 'make-job-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queued-at))
      (common-lisp:list
       (common-lisp:cons "queuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-number))
      (common-lisp:list
       (common-lisp:cons "executionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-attempt))
      (common-lisp:list
       (common-lisp:cons "retryAttempt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-execution-summary-for-job common-lisp:nil
                       ((thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-job-execution-summary-for-job-thing-arn
                         :shape "ThingArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-execution-summary :initarg :job-execution-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or job-execution-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-execution-summary-for-job-job-execution-summary
                         :shape "JobExecutionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-execution-summary-for-job
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-execution-summary-for-job
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-execution-summary-for-job
                    'make-job-execution-summary-for-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-summary))
      (common-lisp:list
       (common-lisp:cons "jobExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-execution-summary-for-job-list ()
   '(trivial-types:proper-list job-execution-summary-for-job))
 (common-lisp:defun make-job-execution-summary-for-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            job-execution-summary-for-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-execution-summary-for-thing common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-job-execution-summary-for-thing-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-execution-summary :initarg :job-execution-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or job-execution-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-execution-summary-for-thing-job-execution-summary
                         :shape "JobExecutionSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-execution-summary-for-thing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-execution-summary-for-thing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-execution-summary-for-thing
                    'make-job-execution-summary-for-thing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-thing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-thing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-summary))
      (common-lisp:list
       (common-lisp:cons "jobExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-summary-for-thing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-execution-summary-for-thing-list ()
   '(trivial-types:proper-list job-execution-summary-for-thing))
 (common-lisp:defun make-job-execution-summary-for-thing-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            job-execution-summary-for-thing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-executions-retry-config common-lisp:nil
                       ((criteria-list :initarg :criteria-list :initform
                         (common-lisp:error ":criterialist is required") :type
                         (common-lisp:or retry-criteria-list common-lisp:null)
                         :accessor
                         struct-shape-job-executions-retry-config-criteria-list
                         :shape "RetryCriteriaList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-executions-retry-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-executions-retry-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-executions-retry-config
                    'make-job-executions-retry-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-retry-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-retry-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria-list))
      (common-lisp:list
       (common-lisp:cons "criteriaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-retry-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-executions-rollout-config common-lisp:nil
                       ((maximum-per-minute :initarg :maximum-per-minute
                         :initform common-lisp:nil :type
                         (common-lisp:or max-job-executions-per-min
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-executions-rollout-config-maximum-per-minute
                         :shape "MaxJobExecutionsPerMin" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exponential-rate :initarg :exponential-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or exponential-rollout-rate
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-executions-rollout-config-exponential-rate
                         :shape "ExponentialRolloutRate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-executions-rollout-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-executions-rollout-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-executions-rollout-config
                    'make-job-executions-rollout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-rollout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-rollout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-per-minute))
      (common-lisp:list
       (common-lisp:cons "maximumPerMinute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exponential-rate))
      (common-lisp:list
       (common-lisp:cons "exponentialRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-executions-rollout-config))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-process-details common-lisp:nil
                       ((processing-targets :initarg :processing-targets
                         :initform common-lisp:nil :type
                         (common-lisp:or processing-target-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-processing-targets
                         :shape "ProcessingTargetNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (number-of-canceled-things :initarg
                         :number-of-canceled-things :initform common-lisp:nil
                         :type
                         (common-lisp:or canceled-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-canceled-things
                         :shape "CanceledThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-succeeded-things :initarg
                         :number-of-succeeded-things :initform common-lisp:nil
                         :type
                         (common-lisp:or succeeded-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-succeeded-things
                         :shape "SucceededThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-failed-things :initarg
                         :number-of-failed-things :initform common-lisp:nil
                         :type (common-lisp:or failed-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-failed-things
                         :shape "FailedThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-rejected-things :initarg
                         :number-of-rejected-things :initform common-lisp:nil
                         :type
                         (common-lisp:or rejected-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-rejected-things
                         :shape "RejectedThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-queued-things :initarg
                         :number-of-queued-things :initform common-lisp:nil
                         :type (common-lisp:or queued-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-queued-things
                         :shape "QueuedThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-in-progress-things :initarg
                         :number-of-in-progress-things :initform
                         common-lisp:nil :type
                         (common-lisp:or in-progress-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-in-progress-things
                         :shape "InProgressThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-removed-things :initarg
                         :number-of-removed-things :initform common-lisp:nil
                         :type (common-lisp:or removed-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-removed-things
                         :shape "RemovedThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-timed-out-things :initarg
                         :number-of-timed-out-things :initform common-lisp:nil
                         :type
                         (common-lisp:or timed-out-things common-lisp:null)
                         :accessor
                         struct-shape-job-process-details-number-of-timed-out-things
                         :shape "TimedOutThings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-process-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-process-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-process-details 'make-job-process-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-process-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-process-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-targets))
      (common-lisp:list
       (common-lisp:cons "processingTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-canceled-things))
      (common-lisp:list
       (common-lisp:cons "numberOfCanceledThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-succeeded-things))
      (common-lisp:list
       (common-lisp:cons "numberOfSucceededThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-failed-things))
      (common-lisp:list
       (common-lisp:cons "numberOfFailedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-rejected-things))
      (common-lisp:list
       (common-lisp:cons "numberOfRejectedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-queued-things))
      (common-lisp:list
       (common-lisp:cons "numberOfQueuedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-in-progress-things))
      (common-lisp:list
       (common-lisp:cons "numberOfInProgressThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-removed-things))
      (common-lisp:list
       (common-lisp:cons "numberOfRemovedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-timed-out-things))
      (common-lisp:list
       (common-lisp:cons "numberOfTimedOutThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-process-details))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-summary common-lisp:nil
                       ((job-arn :initarg :job-arn :initform common-lisp:nil
                         :type (common-lisp:or job-arn common-lisp:null)
                         :accessor struct-shape-job-summary-job-arn :shape
                         "JobArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-job-summary-job-id :shape
                         "JobId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-group-id :initarg :thing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-id common-lisp:null)
                         :accessor struct-shape-job-summary-thing-group-id
                         :shape "ThingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-selection :initarg :target-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or target-selection common-lisp:null)
                         :accessor struct-shape-job-summary-target-selection
                         :shape "TargetSelection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or job-status common-lisp:null)
                         :accessor struct-shape-job-summary-status :shape
                         "JobStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-summary-created-at :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-summary-last-updated-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-summary-completed-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-concurrent :initarg :is-concurrent :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-wrapper-object
                                         common-lisp:null)
                         :accessor struct-shape-job-summary-is-concurrent
                         :shape "BooleanWrapperObject" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-concurrent))
      (common-lisp:list
       (common-lisp:cons "isConcurrent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-summary-list ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun make-job-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype job-targets () '(trivial-types:proper-list target-arn))
 (common-lisp:defun make-job-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-template-arn () 'common-lisp:string)
(common-lisp:deftype job-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-template-summary common-lisp:nil
                       ((job-template-arn :initarg :job-template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor
                         struct-shape-job-template-summary-job-template-arn
                         :shape "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-template-id :initarg :job-template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-id common-lisp:null)
                         :accessor
                         struct-shape-job-template-summary-job-template-id
                         :shape "JobTemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor
                         struct-shape-job-template-summary-description :shape
                         "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-job-template-summary-created-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-template-summary 'make-job-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-arn))
      (common-lisp:list
       (common-lisp:cons "jobTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template-id))
      (common-lisp:list
       (common-lisp:cons "jobTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-template-summary-list ()
   '(trivial-types:proper-list job-template-summary))
 (common-lisp:defun make-job-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype json-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kafka-action common-lisp:nil
                       ((destination-arn :initarg :destination-arn :initform
                         (common-lisp:error ":destinationarn is required")
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor struct-shape-kafka-action-destination-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic :initarg :topic :initform
                         (common-lisp:error ":topic is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kafka-action-topic :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kafka-action-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition :initarg :partition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kafka-action-partition :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-properties :initarg :client-properties
                         :initform
                         (common-lisp:error ":clientproperties is required")
                         :type
                         (common-lisp:or client-properties common-lisp:null)
                         :accessor struct-shape-kafka-action-client-properties
                         :shape "ClientProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (headers :initarg :headers :initform common-lisp:nil
                         :type (common-lisp:or kafka-headers common-lisp:null)
                         :accessor struct-shape-kafka-action-headers :shape
                         "KafkaHeaders" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kafka-action 'make-kafka-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-properties))
      (common-lisp:list
       (common-lisp:cons "clientProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kafka-action-header common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or kafka-header-key common-lisp:null)
                         :accessor struct-shape-kafka-action-header-key :shape
                         "KafkaHeaderKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or kafka-header-value common-lisp:null)
                         :accessor struct-shape-kafka-action-header-value
                         :shape "KafkaHeaderValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-action-header
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-action-header
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kafka-action-header 'make-kafka-action-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-action-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-action-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-action-header))
   common-lisp:nil))
(common-lisp:deftype kafka-header-key () 'common-lisp:string)
(common-lisp:deftype kafka-header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kafka-headers ()
   '(trivial-types:proper-list kafka-action-header))
 (common-lisp:defun make-kafka-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kafka-action-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype key-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass key-pair common-lisp:nil
                       ((public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or public-key common-lisp:null) :accessor
                         struct-shape-key-pair-public-key :shape "PublicKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-key :initarg :private-key :initform
                         common-lisp:nil :type
                         (common-lisp:or private-key common-lisp:null)
                         :accessor struct-shape-key-pair-private-key :shape
                         "PrivateKey" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair))
   common-lisp:nil))
(common-lisp:deftype key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-kinesis-action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-name :initarg :stream-name :initform
                         (common-lisp:error ":streamname is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor struct-shape-kinesis-action-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-key :initarg :partition-key :initform
                         common-lisp:nil :type
                         (common-lisp:or partition-key common-lisp:null)
                         :accessor struct-shape-kinesis-action-partition-key
                         :shape "PartitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kinesis-action 'make-kinesis-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "streamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "partitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-action common-lisp:nil
                       ((function-arn :initarg :function-arn :initform
                         (common-lisp:error ":functionarn is required") :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor struct-shape-lambda-action-function-arn
                         :shape "FunctionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-action 'make-lambda-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "functionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-action))
   common-lisp:nil))
(common-lisp:deftype laser-max-results () 'common-lisp:integer)
(common-lisp:deftype last-modified-date () 'common-lisp:string)
(common-lisp:deftype last-updated-at-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-active-violations-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-request-thing-name
                         :shape "DeviceDefenderThingName" :location
                         "querystring" :location-name "thingName")
                        (security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-request-security-profile-name
                         :shape "SecurityProfileName" :location "querystring"
                         :location-name "securityProfileName")
                        (behavior-criteria-type :initarg
                         :behavior-criteria-type :initform common-lisp:nil
                         :type
                         (common-lisp:or behavior-criteria-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-request-behavior-criteria-type
                         :shape "BehaviorCriteriaType" :location "querystring"
                         :location-name "behaviorCriteriaType")
                        (list-suppressed-alerts :initarg
                         :list-suppressed-alerts :initform common-lisp:nil
                         :type
                         (common-lisp:or list-suppressed-alerts
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-request-list-suppressed-alerts
                         :shape "ListSuppressedAlerts" :location "querystring"
                         :location-name "listSuppressedAlerts")
                        (verification-state :initarg :verification-state
                         :initform common-lisp:nil :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-request-verification-state
                         :shape "VerificationState" :location "querystring"
                         :location-name "verificationState")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-active-violations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-active-violations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-active-violations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-active-violations-request
                    'make-list-active-violations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-active-violations-response common-lisp:nil
                       ((active-violations :initarg :active-violations
                         :initform common-lisp:nil :type
                         (common-lisp:or active-violations common-lisp:null)
                         :accessor
                         struct-shape-list-active-violations-response-active-violations
                         :shape "ActiveViolations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-active-violations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-active-violations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-active-violations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-active-violations-response
                    'make-list-active-violations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-violations))
      (common-lisp:list
       (common-lisp:cons "activeViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-active-violations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-policies-request common-lisp:nil
                       ((target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or policy-target common-lisp:null)
                         :accessor
                         struct-shape-list-attached-policies-request-target
                         :shape "PolicyTarget" :location "uri" :location-name
                         "target")
                        (recursive :initarg :recursive :initform
                         common-lisp:nil :type
                         (common-lisp:or recursive common-lisp:null) :accessor
                         struct-shape-list-attached-policies-request-recursive
                         :shape "Recursive" :location "querystring"
                         :location-name "recursive")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-attached-policies-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-attached-policies-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-policies-request
                    'make-list-attached-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-policies-response common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type (common-lisp:or policies common-lisp:null)
                         :accessor
                         struct-shape-list-attached-policies-response-policies
                         :shape "Policies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-attached-policies-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-policies-response
                    'make-list-attached-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-findings-request common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or audit-task-id common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-request-task-id
                         :shape "AuditTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (check-name :initarg :check-name :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-request-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-findings-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-audit-findings-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-request-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (list-suppressed-findings :initarg
                         :list-suppressed-findings :initform common-lisp:nil
                         :type
                         (common-lisp:or list-suppressed-findings
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-request-list-suppressed-findings
                         :shape "ListSuppressedFindings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-audit-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-findings-request
                    'make-list-audit-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-suppressed-findings))
      (common-lisp:list
       (common-lisp:cons "listSuppressedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-findings-response common-lisp:nil
                       ((findings :initarg :findings :initform common-lisp:nil
                         :type (common-lisp:or audit-findings common-lisp:null)
                         :accessor
                         struct-shape-list-audit-findings-response-findings
                         :shape "AuditFindings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-findings-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-audit-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-findings-response
                    'make-list-audit-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-mitigation-actions-executions-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-executions-request-task-id
                         :shape "MitigationActionsTaskId" :location
                         "querystring" :location-name "taskId")
                        (action-status :initarg :action-status :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          audit-mitigation-actions-execution-status
                          common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-executions-request-action-status
                         :shape "AuditMitigationActionsExecutionStatus"
                         :location "querystring" :location-name "actionStatus")
                        (finding-id :initarg :finding-id :initform
                         (common-lisp:error ":findingid is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-executions-request-finding-id
                         :shape "FindingId" :location "querystring"
                         :location-name "findingId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-executions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-executions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-mitigation-actions-executions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-audit-mitigation-actions-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-executions-request
                    'make-list-audit-mitigation-actions-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-mitigation-actions-executions-response
                       common-lisp:nil
                       ((actions-executions :initarg :actions-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          audit-mitigation-action-execution-metadata-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-executions-response-actions-executions
                         :shape "AuditMitigationActionExecutionMetadataList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-executions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-mitigation-actions-executions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-audit-mitigation-actions-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-executions-response
                    'make-list-audit-mitigation-actions-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-executions))
      (common-lisp:list
       (common-lisp:cons "actionsExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-mitigation-actions-tasks-request
                       common-lisp:nil
                       ((audit-task-id :initarg :audit-task-id :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-id common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-audit-task-id
                         :shape "AuditTaskId" :location "querystring"
                         :location-name "auditTaskId")
                        (finding-id :initarg :finding-id :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-finding-id
                         :shape "FindingId" :location "querystring"
                         :location-name "findingId")
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-mitigation-actions-task-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-task-status
                         :shape "AuditMitigationActionsTaskStatus" :location
                         "querystring" :location-name "taskStatus")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-mitigation-actions-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-audit-mitigation-actions-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-tasks-request
                    'make-list-audit-mitigation-actions-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-mitigation-actions-tasks-response
                       common-lisp:nil
                       ((tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or
                          audit-mitigation-actions-task-metadata-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-response-tasks
                         :shape "AuditMitigationActionsTaskMetadataList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-mitigation-actions-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-mitigation-actions-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-audit-mitigation-actions-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-mitigation-actions-tasks-response
                    'make-list-audit-mitigation-actions-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-mitigation-actions-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-suppressions-request common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-list-audit-suppressions-request-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-audit-suppressions-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-audit-suppressions-request-ascending-order
                         :shape "AscendingOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-suppressions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-audit-suppressions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-suppressions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-audit-suppressions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-suppressions-request
                    'make-list-audit-suppressions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ascending-order))
      (common-lisp:list
       (common-lisp:cons "ascendingOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-suppressions-response common-lisp:nil
                       ((suppressions :initarg :suppressions :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-suppression-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-audit-suppressions-response-suppressions
                         :shape "AuditSuppressionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-suppressions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-suppressions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-audit-suppressions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-suppressions-response
                    'make-list-audit-suppressions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suppressions))
      (common-lisp:list
       (common-lisp:cons "suppressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-suppressions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-tasks-request common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-audit-tasks-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-audit-tasks-request-end-time :shape
                         "Timestamp" :location "querystring" :location-name
                         "endTime")
                        (task-type :initarg :task-type :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-type common-lisp:null)
                         :accessor
                         struct-shape-list-audit-tasks-request-task-type :shape
                         "AuditTaskType" :location "querystring" :location-name
                         "taskType")
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-task-status common-lisp:null)
                         :accessor
                         struct-shape-list-audit-tasks-request-task-status
                         :shape "AuditTaskStatus" :location "querystring"
                         :location-name "taskStatus")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-tasks-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-audit-tasks-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-audit-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-tasks-request 'make-list-audit-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-audit-tasks-response common-lisp:nil
                       ((tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or audit-task-metadata-list
                                         common-lisp:null)
                         :accessor struct-shape-list-audit-tasks-response-tasks
                         :shape "AuditTaskMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-audit-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-audit-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-audit-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-audit-tasks-response
                    'make-list-audit-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-audit-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-authorizers-request common-lisp:nil
                       ((page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-authorizers-request-page-size :shape
                         "PageSize" :location "querystring" :location-name
                         "pageSize")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-authorizers-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-authorizers-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-status common-lisp:null)
                         :accessor struct-shape-list-authorizers-request-status
                         :shape "AuthorizerStatus" :location "querystring"
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-authorizers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-authorizers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-authorizers-request 'make-list-authorizers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-authorizers-response common-lisp:nil
                       ((authorizers :initarg :authorizers :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizers common-lisp:null)
                         :accessor
                         struct-shape-list-authorizers-response-authorizers
                         :shape "Authorizers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-authorizers-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-authorizers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-authorizers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-authorizers-response
                    'make-list-authorizers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizers))
      (common-lisp:list
       (common-lisp:cons "authorizers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-authorizers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-billing-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-billing-groups-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-billing-groups-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (name-prefix-filter :initarg :name-prefix-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-billing-groups-request-name-prefix-filter
                         :shape "BillingGroupName" :location "querystring"
                         :location-name "namePrefixFilter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-billing-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-billing-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-billing-groups-request
                    'make-list-billing-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-billing-groups-response common-lisp:nil
                       ((billing-groups :initarg :billing-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or billing-group-name-and-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-billing-groups-response-billing-groups
                         :shape "BillingGroupNameAndArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-billing-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-billing-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-billing-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-billing-groups-response
                    'make-list-billing-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-groups))
      (common-lisp:list
       (common-lisp:cons "billingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-billing-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cacertificates-request common-lisp:nil
                       ((page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-cacertificates-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-cacertificates-request-marker :shape
                         "Marker" :location "querystring" :location-name
                         "marker")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-cacertificates-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder")
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-list-cacertificates-request-template-name
                         :shape "TemplateName" :location "querystring"
                         :location-name "templateName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cacertificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-cacertificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-request
                    'make-list-cacertificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cacertificates-response common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or cacertificates common-lisp:null)
                         :accessor
                         struct-shape-list-cacertificates-response-certificates
                         :shape "CACertificates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-cacertificates-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cacertificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-cacertificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-response
                    'make-list-cacertificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificate-providers-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-certificate-providers-request-next-token
                         :shape "Marker" :location "querystring" :location-name
                         "nextToken")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-certificate-providers-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificate-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-certificate-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificate-providers-request
                    'make-list-certificate-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificate-providers-response common-lisp:nil
                       ((certificate-providers :initarg :certificate-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-providers
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-certificate-providers-response-certificate-providers
                         :shape "CertificateProviders" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-certificate-providers-response-next-token
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificate-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-certificate-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificate-providers-response
                    'make-list-certificate-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-providers))
      (common-lisp:list
       (common-lisp:cons "certificateProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-by-carequest common-lisp:nil
                       ((ca-certificate-id :initarg :ca-certificate-id
                         :initform
                         (common-lisp:error ":cacertificateid is required")
                         :type (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-by-carequest-ca-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "caCertificateId")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-certificates-by-carequest-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-by-carequest-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-by-carequest-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificates-by-carequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-certificates-by-carequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-carequest
                    'make-list-certificates-by-carequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-by-caresponse common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificates common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-by-caresponse-certificates
                         :shape "Certificates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-certificates-by-caresponse-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificates-by-caresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-certificates-by-caresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-caresponse
                    'make-list-certificates-by-caresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-request common-lisp:nil
                       ((page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-certificates-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-request-marker :shape
                         "Marker" :location "querystring" :location-name
                         "marker")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-response common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificates common-lisp:null)
                         :accessor
                         struct-shape-list-certificates-response-certificates
                         :shape "Certificates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-certificates-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-metrics-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-custom-metrics-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-custom-metrics-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-custom-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-metrics-request
                    'make-list-custom-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-metrics-response common-lisp:nil
                       ((metric-names :initarg :metric-names :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-names common-lisp:null)
                         :accessor
                         struct-shape-list-custom-metrics-response-metric-names
                         :shape "MetricNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-custom-metrics-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-custom-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-metrics-response
                    'make-list-custom-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-names))
      (common-lisp:list
       (common-lisp:cons "metricNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-detect-mitigation-actions-executions-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-task-id
                         :shape "MitigationActionsTaskId" :location
                         "querystring" :location-name "taskId")
                        (violation-id :initarg :violation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-id common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-violation-id
                         :shape "ViolationId" :location "querystring"
                         :location-name "violationId")
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-thing-name
                         :shape "DeviceDefenderThingName" :location
                         "querystring" :location-name "thingName")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-executions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-detect-mitigation-actions-executions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-detect-mitigation-actions-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-executions-request
                    'make-list-detect-mitigation-actions-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-detect-mitigation-actions-executions-response
                       common-lisp:nil
                       ((actions-executions :initarg :actions-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          detect-mitigation-action-execution-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-executions-response-actions-executions
                         :shape "DetectMitigationActionExecutionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-executions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-detect-mitigation-actions-executions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-detect-mitigation-actions-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-executions-response
                    'make-list-detect-mitigation-actions-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-executions))
      (common-lisp:list
       (common-lisp:cons "actionsExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-detect-mitigation-actions-tasks-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-tasks-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-tasks-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-tasks-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-tasks-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-detect-mitigation-actions-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-detect-mitigation-actions-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-tasks-request
                    'make-list-detect-mitigation-actions-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-detect-mitigation-actions-tasks-response
                       common-lisp:nil
                       ((tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or
                          detect-mitigation-actions-task-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-detect-mitigation-actions-tasks-response-tasks
                         :shape "DetectMitigationActionsTaskSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-detect-mitigation-actions-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-detect-mitigation-actions-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-detect-mitigation-actions-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-detect-mitigation-actions-tasks-response
                    'make-list-detect-mitigation-actions-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-detect-mitigation-actions-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dimensions-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dimensions-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-dimensions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dimensions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dimensions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dimensions-request 'make-list-dimensions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dimensions-response common-lisp:nil
                       ((dimension-names :initarg :dimension-names :initform
                         common-lisp:nil :type
                         (common-lisp:or dimension-names common-lisp:null)
                         :accessor
                         struct-shape-list-dimensions-response-dimension-names
                         :shape "DimensionNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dimensions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dimensions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dimensions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dimensions-response 'make-list-dimensions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-names))
      (common-lisp:list
       (common-lisp:cons "dimensionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dimensions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-configurations-request common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-domain-configurations-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-domain-configurations-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (service-type :initarg :service-type :initform
                         common-lisp:nil :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         struct-shape-list-domain-configurations-request-service-type
                         :shape "ServiceType" :location "querystring"
                         :location-name "serviceType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-domain-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-configurations-request
                    'make-list-domain-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-configurations-response common-lisp:nil
                       ((domain-configurations :initarg :domain-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-domain-configurations-response-domain-configurations
                         :shape "DomainConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-domain-configurations-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-domain-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-configurations-response
                    'make-list-domain-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configurations))
      (common-lisp:list
       (common-lisp:cons "domainConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleet-metrics-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-fleet-metrics-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-fleet-metrics-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fleet-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleet-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fleet-metrics-request
                    'make-list-fleet-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleet-metrics-response common-lisp:nil
                       ((fleet-metrics :initarg :fleet-metrics :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-name-and-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-fleet-metrics-response-fleet-metrics
                         :shape "FleetMetricNameAndArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-fleet-metrics-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-fleet-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleet-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-fleet-metrics-response
                    'make-list-fleet-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-metrics))
      (common-lisp:list
       (common-lisp:cons "fleetMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleet-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-indices-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-indices-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or query-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-indices-request-max-results :shape
                         "QueryMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-indices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-indices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-indices-request 'make-list-indices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-indices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-indices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-indices-response common-lisp:nil
                       ((index-names :initarg :index-names :initform
                         common-lisp:nil :type
                         (common-lisp:or index-names-list common-lisp:null)
                         :accessor
                         struct-shape-list-indices-response-index-names :shape
                         "IndexNamesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-indices-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-indices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-indices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-indices-response 'make-list-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-names))
      (common-lisp:list
       (common-lisp:cons "indexNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-executions-for-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-list-job-executions-for-job-request-job-id
                         :shape "JobId" :location "uri" :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or job-execution-status common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-job-request-status
                         :shape "JobExecutionStatus" :location "querystring"
                         :location-name "status")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or laser-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-job-request-max-results
                         :shape "LaserMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-job-executions-for-job-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-job-executions-for-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-job-executions-for-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-job-request
                    'make-list-job-executions-for-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-executions-for-job-response common-lisp:nil
                       ((execution-summaries :initarg :execution-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or job-execution-summary-for-job-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-job-response-execution-summaries
                         :shape "JobExecutionSummaryForJobList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-job-executions-for-job-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-job-executions-for-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-job-executions-for-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-job-response
                    'make-list-job-executions-for-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summaries))
      (common-lisp:list
       (common-lisp:cons "executionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-executions-for-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-list-job-executions-for-thing-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or job-execution-status common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-thing-request-status
                         :shape "JobExecutionStatus" :location "querystring"
                         :location-name "status")
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-thing-request-namespace-id
                         :shape "NamespaceId" :location "querystring"
                         :location-name "namespaceId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or laser-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-thing-request-max-results
                         :shape "LaserMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-job-executions-for-thing-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-thing-request-job-id
                         :shape "JobId" :location "querystring" :location-name
                         "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-job-executions-for-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-job-executions-for-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-thing-request
                    'make-list-job-executions-for-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-executions-for-thing-response common-lisp:nil
                       ((execution-summaries :initarg :execution-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or job-execution-summary-for-thing-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-job-executions-for-thing-response-execution-summaries
                         :shape "JobExecutionSummaryForThingList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-job-executions-for-thing-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-job-executions-for-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-job-executions-for-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-job-executions-for-thing-response
                    'make-list-job-executions-for-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summaries))
      (common-lisp:list
       (common-lisp:cons "executionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-executions-for-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-templates-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or laser-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-job-templates-request-max-results
                         :shape "LaserMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-job-templates-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-job-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-job-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-job-templates-request
                    'make-list-job-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-templates-response common-lisp:nil
                       ((job-templates :initarg :job-templates :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-job-templates-response-job-templates
                         :shape "JobTemplateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-job-templates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-job-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-job-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-job-templates-response
                    'make-list-job-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-templates))
      (common-lisp:list
       (common-lisp:cons "jobTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or job-status common-lisp:null)
                         :accessor struct-shape-list-jobs-request-status :shape
                         "JobStatus" :location "querystring" :location-name
                         "status")
                        (target-selection :initarg :target-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or target-selection common-lisp:null)
                         :accessor
                         struct-shape-list-jobs-request-target-selection :shape
                         "TargetSelection" :location "querystring"
                         :location-name "targetSelection")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or laser-max-results common-lisp:null)
                         :accessor struct-shape-list-jobs-request-max-results
                         :shape "LaserMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-jobs-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-jobs-request-thing-group-name :shape
                         "ThingGroupName" :location "querystring"
                         :location-name "thingGroupName")
                        (thing-group-id :initarg :thing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-id common-lisp:null)
                         :accessor
                         struct-shape-list-jobs-request-thing-group-id :shape
                         "ThingGroupId" :location "querystring" :location-name
                         "thingGroupId")
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor struct-shape-list-jobs-request-namespace-id
                         :shape "NamespaceId" :location "querystring"
                         :location-name "namespaceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-response common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or job-summary-list common-lisp:null)
                         :accessor struct-shape-list-jobs-response-jobs :shape
                         "JobSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-jobs-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-response 'make-list-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-managed-job-templates-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-job-template-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-managed-job-templates-request-template-name
                         :shape "ManagedJobTemplateName" :location
                         "querystring" :location-name "templateName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or laser-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-managed-job-templates-request-max-results
                         :shape "LaserMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-managed-job-templates-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-managed-job-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-managed-job-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-managed-job-templates-request
                    'make-list-managed-job-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-managed-job-templates-response common-lisp:nil
                       ((managed-job-templates :initarg :managed-job-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or managed-job-templates-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-managed-job-templates-response-managed-job-templates
                         :shape "ManagedJobTemplatesSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-managed-job-templates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-managed-job-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-managed-job-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-managed-job-templates-response
                    'make-list-managed-job-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-job-templates))
      (common-lisp:list
       (common-lisp:cons "managedJobTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-job-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-metric-values-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-metric-values-request-thing-name
                         :shape "DeviceDefenderThingName" :location
                         "querystring" :location-name "thingName")
                        (metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or behavior-metric common-lisp:null)
                         :accessor
                         struct-shape-list-metric-values-request-metric-name
                         :shape "BehaviorMetric" :location "querystring"
                         :location-name "metricName")
                        (dimension-name :initarg :dimension-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor
                         struct-shape-list-metric-values-request-dimension-name
                         :shape "DimensionName" :location "querystring"
                         :location-name "dimensionName")
                        (dimension-value-operator :initarg
                         :dimension-value-operator :initform common-lisp:nil
                         :type
                         (common-lisp:or dimension-value-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-metric-values-request-dimension-value-operator
                         :shape "DimensionValueOperator" :location
                         "querystring" :location-name "dimensionValueOperator")
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-metric-values-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-metric-values-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-metric-values-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-metric-values-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-metric-values-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-metric-values-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-metric-values-request
                    'make-list-metric-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-metric-values-response common-lisp:nil
                       ((metric-datum-list :initarg :metric-datum-list
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-datum-list common-lisp:null)
                         :accessor
                         struct-shape-list-metric-values-response-metric-datum-list
                         :shape "MetricDatumList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-metric-values-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-metric-values-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-metric-values-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-metric-values-response
                    'make-list-metric-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-datum-list))
      (common-lisp:list
       (common-lisp:cons "metricDatumList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-metric-values-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mitigation-actions-request common-lisp:nil
                       ((action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-mitigation-actions-request-action-type
                         :shape "MitigationActionType" :location "querystring"
                         :location-name "actionType")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-mitigation-actions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mitigation-actions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mitigation-actions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mitigation-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mitigation-actions-request
                    'make-list-mitigation-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mitigation-actions-response common-lisp:nil
                       ((action-identifiers :initarg :action-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or mitigation-action-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-mitigation-actions-response-action-identifiers
                         :shape "MitigationActionIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-mitigation-actions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mitigation-actions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mitigation-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mitigation-actions-response
                    'make-list-mitigation-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-identifiers))
      (common-lisp:list
       (common-lisp:cons "actionIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mitigation-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-otaupdates-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-otaupdates-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-otaupdates-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (ota-update-status :initarg :ota-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or otaupdate-status common-lisp:null)
                         :accessor
                         struct-shape-list-otaupdates-request-ota-update-status
                         :shape "OTAUpdateStatus" :location "querystring"
                         :location-name "otaUpdateStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-otaupdates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-otaupdates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-otaupdates-request 'make-list-otaupdates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-otaupdates-response common-lisp:nil
                       ((ota-updates :initarg :ota-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdates-summary common-lisp:null)
                         :accessor
                         struct-shape-list-otaupdates-response-ota-updates
                         :shape "OTAUpdatesSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-otaupdates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-otaupdates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-otaupdates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-otaupdates-response 'make-list-otaupdates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-updates))
      (common-lisp:list
       (common-lisp:cons "otaUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-otaupdates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-outgoing-certificates-request common-lisp:nil
                       ((page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-outgoing-certificates-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-outgoing-certificates-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-outgoing-certificates-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-outgoing-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-outgoing-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-request
                    'make-list-outgoing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-outgoing-certificates-response common-lisp:nil
                       ((outgoing-certificates :initarg :outgoing-certificates
                         :initform common-lisp:nil :type
                         (common-lisp:or outgoing-certificates
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-outgoing-certificates-response-outgoing-certificates
                         :shape "OutgoingCertificates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-outgoing-certificates-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-outgoing-certificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-outgoing-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-response
                    'make-list-outgoing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-certificates))
      (common-lisp:list
       (common-lisp:cons "outgoingCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-versions-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-list-package-versions-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-package-versions-request-status
                         :shape "PackageVersionStatus" :location "querystring"
                         :location-name "status")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or package-catalog-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-package-versions-request-max-results
                         :shape "PackageCatalogMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-package-versions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-package-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-request
                    'make-list-package-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-versions-response common-lisp:nil
                       ((package-version-summaries :initarg
                         :package-version-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-package-versions-response-package-version-summaries
                         :shape "PackageVersionSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-package-versions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-package-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-response
                    'make-list-package-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-summaries))
      (common-lisp:list
       (common-lisp:cons "packageVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or package-catalog-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-packages-request-max-results :shape
                         "PackageCatalogMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-packages-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-packages-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-packages-request 'make-list-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-response common-lisp:nil
                       ((package-summaries :initarg :package-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or package-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-packages-response-package-summaries
                         :shape "PackageSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-packages-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-packages-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-packages-response 'make-list-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-summaries))
      (common-lisp:list
       (common-lisp:cons "packageSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-request common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-policies-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-policies-request-page-size :shape
                         "PageSize" :location "querystring" :location-name
                         "pageSize")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-policies-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-response common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type (common-lisp:or policies common-lisp:null)
                         :accessor struct-shape-list-policies-response-policies
                         :shape "Policies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-policies-response-next-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-principals-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-list-policy-principals-request-policy-name
                         :shape "PolicyName" :location "header" :location-name
                         "x-amzn-iot-policy")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-policy-principals-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-policy-principals-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-policy-principals-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-principals-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-principals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-request
                    'make-list-policy-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:cons "x-amzn-iot-policy" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-principals-response common-lisp:nil
                       ((principals :initarg :principals :initform
                         common-lisp:nil :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-list-policy-principals-response-principals
                         :shape "Principals" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-policy-principals-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-principals-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-principals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-response
                    'make-list-policy-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-versions-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policy-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-versions-response common-lisp:nil
                       ((policy-versions :initarg :policy-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-versions common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-response-policy-versions
                         :shape "PolicyVersions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-versions))
      (common-lisp:list
       (common-lisp:cons "policyVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-principal-policies-request common-lisp:nil
                       ((principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-list-principal-policies-request-principal
                         :shape "Principal" :location "header" :location-name
                         "x-amzn-iot-principal")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-principal-policies-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-principal-policies-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-principal-policies-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-principal-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-principal-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-request
                    'make-list-principal-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-principal-policies-response common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type (common-lisp:or policies common-lisp:null)
                         :accessor
                         struct-shape-list-principal-policies-response-policies
                         :shape "Policies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-principal-policies-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-principal-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-principal-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-response
                    'make-list-principal-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-principal-things-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-principal-things-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-principal-things-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-list-principal-things-request-principal
                         :shape "Principal" :location "header" :location-name
                         "x-amzn-principal"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-principal-things-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-principal-things-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-request
                    'make-list-principal-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-principal-things-response common-lisp:nil
                       ((things :initarg :things :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-principal-things-response-things
                         :shape "ThingNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-principal-things-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-principal-things-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-principal-things-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-response
                    'make-list-principal-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-template-versions-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-list-provisioning-template-versions-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-provisioning-template-versions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-provisioning-template-versions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-provisioning-template-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-template-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-template-versions-request
                    'make-list-provisioning-template-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-template-versions-response
                       common-lisp:nil
                       ((versions :initarg :versions :initform common-lisp:nil
                         :type
                         (common-lisp:or provisioning-template-version-listing
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-provisioning-template-versions-response-versions
                         :shape "ProvisioningTemplateVersionListing" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-provisioning-template-versions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-provisioning-template-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-template-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-template-versions-response
                    'make-list-provisioning-template-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-template-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-templates-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-provisioning-templates-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-provisioning-templates-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-provisioning-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-templates-request
                    'make-list-provisioning-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-provisioning-templates-response common-lisp:nil
                       ((templates :initarg :templates :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioning-template-listing
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-provisioning-templates-response-templates
                         :shape "ProvisioningTemplateListing" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-provisioning-templates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-provisioning-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-provisioning-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-provisioning-templates-response
                    'make-list-provisioning-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provisioning-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-related-resources-for-audit-finding-request
                       common-lisp:nil
                       ((finding-id :initarg :finding-id :initform
                         (common-lisp:error ":findingid is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-list-related-resources-for-audit-finding-request-finding-id
                         :shape "FindingId" :location "querystring"
                         :location-name "findingId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-related-resources-for-audit-finding-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-related-resources-for-audit-finding-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-related-resources-for-audit-finding-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-related-resources-for-audit-finding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-related-resources-for-audit-finding-request
                    'make-list-related-resources-for-audit-finding-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-related-resources-for-audit-finding-response
                       common-lisp:nil
                       ((related-resources :initarg :related-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or related-resources common-lisp:null)
                         :accessor
                         struct-shape-list-related-resources-for-audit-finding-response-related-resources
                         :shape "RelatedResources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-related-resources-for-audit-finding-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-related-resources-for-audit-finding-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-related-resources-for-audit-finding-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-related-resources-for-audit-finding-response
                    'make-list-related-resources-for-audit-finding-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-resources))
      (common-lisp:list
       (common-lisp:cons "relatedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-related-resources-for-audit-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-role-aliases-request common-lisp:nil
                       ((page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-role-aliases-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-role-aliases-request-marker :shape
                         "Marker" :location "querystring" :location-name
                         "marker")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-role-aliases-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-role-aliases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-role-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-role-aliases-request
                    'make-list-role-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-role-aliases-response common-lisp:nil
                       ((role-aliases :initarg :role-aliases :initform
                         common-lisp:nil :type
                         (common-lisp:or role-aliases common-lisp:null)
                         :accessor
                         struct-shape-list-role-aliases-response-role-aliases
                         :shape "RoleAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-role-aliases-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-role-aliases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-role-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-role-aliases-response
                    'make-list-role-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-aliases))
      (common-lisp:list
       (common-lisp:cons "roleAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scheduled-audits-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-scheduled-audits-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-scheduled-audits-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scheduled-audits-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-scheduled-audits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-audits-request
                    'make-list-scheduled-audits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scheduled-audits-response common-lisp:nil
                       ((scheduled-audits :initarg :scheduled-audits :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-audit-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-scheduled-audits-response-scheduled-audits
                         :shape "ScheduledAuditMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-scheduled-audits-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-scheduled-audits-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-scheduled-audits-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-audits-response
                    'make-list-scheduled-audits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audits))
      (common-lisp:list
       (common-lisp:cons "scheduledAudits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-audits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-profiles-for-target-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-security-profiles-for-target-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-for-target-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (recursive :initarg :recursive :initform
                         common-lisp:nil :type
                         (common-lisp:or recursive common-lisp:null) :accessor
                         struct-shape-list-security-profiles-for-target-request-recursive
                         :shape "Recursive" :location "querystring"
                         :location-name "recursive")
                        (security-profile-target-arn :initarg
                         :security-profile-target-arn :initform
                         (common-lisp:error
                          ":securityprofiletargetarn is required")
                         :type
                         (common-lisp:or security-profile-target-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-for-target-request-security-profile-target-arn
                         :shape "SecurityProfileTargetArn" :location
                         "querystring" :location-name
                         "securityProfileTargetArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-security-profiles-for-target-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-profiles-for-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-for-target-request
                    'make-list-security-profiles-for-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-profiles-for-target-response
                       common-lisp:nil
                       ((security-profile-target-mappings :initarg
                         :security-profile-target-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or security-profile-target-mappings
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-for-target-response-security-profile-target-mappings
                         :shape "SecurityProfileTargetMappings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-security-profiles-for-target-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-security-profiles-for-target-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-profiles-for-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-for-target-response
                    'make-list-security-profiles-for-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-target-mappings))
      (common-lisp:list
       (common-lisp:cons "securityProfileTargetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-for-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-profiles-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-security-profiles-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (dimension-name :initarg :dimension-name :initform
                         common-lisp:nil :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-request-dimension-name
                         :shape "DimensionName" :location "querystring"
                         :location-name "dimensionName")
                        (metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-request-metric-name
                         :shape "MetricName" :location "querystring"
                         :location-name "metricName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-security-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-request
                    'make-list-security-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-profiles-response common-lisp:nil
                       ((security-profile-identifiers :initarg
                         :security-profile-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or security-profile-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-security-profiles-response-security-profile-identifiers
                         :shape "SecurityProfileIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-security-profiles-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-security-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-security-profiles-response
                    'make-list-security-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-identifiers))
      (common-lisp:list
       (common-lisp:cons "securityProfileIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streams-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-streams-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-streams-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (ascending-order :initarg :ascending-order :initform
                         common-lisp:nil :type
                         (common-lisp:or ascending-order common-lisp:null)
                         :accessor
                         struct-shape-list-streams-request-ascending-order
                         :shape "AscendingOrder" :location "querystring"
                         :location-name "isAscendingOrder"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streams-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-streams-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streams-request 'make-list-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streams-response common-lisp:nil
                       ((streams :initarg :streams :initform common-lisp:nil
                         :type
                         (common-lisp:or streams-summary common-lisp:null)
                         :accessor struct-shape-list-streams-response-streams
                         :shape "StreamsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-streams-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-streams-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-streams-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-streams-response 'make-list-streams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streams-response))
   common-lisp:nil))
(common-lisp:deftype list-suppressed-alerts () 'common-lisp:boolean)
(common-lisp:deftype list-suppressed-findings () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-for-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-list-targets-for-policy-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-list-targets-for-policy-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-targets-for-policy-request-page-size
                         :shape "PageSize" :location "querystring"
                         :location-name "pageSize"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-targets-for-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-for-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-policy-request
                    'make-list-targets-for-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-for-policy-response common-lisp:nil
                       ((targets :initarg :targets :initform common-lisp:nil
                         :type (common-lisp:or policy-targets common-lisp:null)
                         :accessor
                         struct-shape-list-targets-for-policy-response-targets
                         :shape "PolicyTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-list-targets-for-policy-response-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-targets-for-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-for-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-policy-response
                    'make-list-targets-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-for-security-profile-request
                       common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-targets-for-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-targets-for-security-profile-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-targets-for-security-profile-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-targets-for-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-for-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-security-profile-request
                    'make-list-targets-for-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-for-security-profile-response
                       common-lisp:nil
                       ((security-profile-targets :initarg
                         :security-profile-targets :initform common-lisp:nil
                         :type
                         (common-lisp:or security-profile-targets
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-targets-for-security-profile-response-security-profile-targets
                         :shape "SecurityProfileTargets" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-targets-for-security-profile-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-targets-for-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-for-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-security-profile-response
                    'make-list-targets-for-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-targets))
      (common-lisp:list
       (common-lisp:cons "securityProfileTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-groups-for-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-list-thing-groups-for-thing-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-groups-for-thing-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-for-thing-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-groups-for-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-groups-for-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-for-thing-request
                    'make-list-thing-groups-for-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-groups-for-thing-response common-lisp:nil
                       ((thing-groups :initarg :thing-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name-and-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-for-thing-response-thing-groups
                         :shape "ThingGroupNameAndArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-groups-for-thing-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-groups-for-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-groups-for-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-for-thing-response
                    'make-list-thing-groups-for-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups))
      (common-lisp:list
       (common-lisp:cons "thingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-for-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-groups-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (parent-group :initarg :parent-group :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-request-parent-group
                         :shape "ThingGroupName" :location "querystring"
                         :location-name "parentGroup")
                        (name-prefix-filter :initarg :name-prefix-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-request-name-prefix-filter
                         :shape "ThingGroupName" :location "querystring"
                         :location-name "namePrefixFilter")
                        (recursive :initarg :recursive :initform
                         common-lisp:nil :type
                         (common-lisp:or recursive-without-default
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-request-recursive
                         :shape "RecursiveWithoutDefault" :location
                         "querystring" :location-name "recursive"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-thing-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-request
                    'make-list-thing-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-groups-response common-lisp:nil
                       ((thing-groups :initarg :thing-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name-and-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-thing-groups-response-thing-groups
                         :shape "ThingGroupNameAndArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-thing-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-groups-response
                    'make-list-thing-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups))
      (common-lisp:list
       (common-lisp:cons "thingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-principals-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-principals-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-thing-principals-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-list-thing-principals-request-thing-name
                         :shape "ThingName" :location "uri" :location-name
                         "thingName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-principals-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-principals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-request
                    'make-list-thing-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-principals-response common-lisp:nil
                       ((principals :initarg :principals :initform
                         common-lisp:nil :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-list-thing-principals-response-principals
                         :shape "Principals" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-principals-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-principals-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-principals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-response
                    'make-list-thing-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-registration-task-reports-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         struct-shape-list-thing-registration-task-reports-request-task-id
                         :shape "TaskId" :location "uri" :location-name
                         "taskId")
                        (report-type :initarg :report-type :initform
                         (common-lisp:error ":reporttype is required") :type
                         (common-lisp:or report-type common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-task-reports-request-report-type
                         :shape "ReportType" :location "querystring"
                         :location-name "reportType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-registration-task-reports-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-task-reports-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-registration-task-reports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-registration-task-reports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-task-reports-request
                    'make-list-thing-registration-task-reports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-registration-task-reports-response
                       common-lisp:nil
                       ((resource-links :initarg :resource-links :initform
                         common-lisp:nil :type
                         (common-lisp:or s3file-url-list common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-task-reports-response-resource-links
                         :shape "S3FileUrlList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-type :initarg :report-type :initform
                         common-lisp:nil :type
                         (common-lisp:or report-type common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-task-reports-response-report-type
                         :shape "ReportType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-registration-task-reports-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-registration-task-reports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-registration-task-reports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-task-reports-response
                    'make-list-thing-registration-task-reports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-links))
      (common-lisp:list
       (common-lisp:cons "resourceLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-type))
      (common-lisp:list
       (common-lisp:cons "reportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-task-reports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-registration-tasks-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-registration-tasks-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-tasks-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-tasks-request-status
                         :shape "Status" :location "querystring" :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-registration-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-registration-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-tasks-request
                    'make-list-thing-registration-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-registration-tasks-response common-lisp:nil
                       ((task-ids :initarg :task-ids :initform common-lisp:nil
                         :type (common-lisp:or task-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-thing-registration-tasks-response-task-ids
                         :shape "TaskIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-registration-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-registration-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-thing-registration-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-registration-tasks-response
                    'make-list-thing-registration-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-ids))
      (common-lisp:list
       (common-lisp:cons "taskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-registration-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-types-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-types-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-thing-types-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-list-thing-types-request-thing-type-name
                         :shape "ThingTypeName" :location "querystring"
                         :location-name "thingTypeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-thing-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-request 'make-list-thing-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-thing-types-response common-lisp:nil
                       ((thing-types :initarg :thing-types :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-list common-lisp:null)
                         :accessor
                         struct-shape-list-thing-types-response-thing-types
                         :shape "ThingTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-thing-types-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-thing-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-thing-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-response
                    'make-list-thing-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-types))
      (common-lisp:list
       (common-lisp:cons "thingTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-things-in-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform
                         (common-lisp:error ":billinggroupname is required")
                         :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-things-in-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location "uri"
                         :location-name "billingGroupName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-things-in-billing-group-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-things-in-billing-group-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-things-in-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-things-in-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-things-in-billing-group-request
                    'make-list-things-in-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-things-in-billing-group-response common-lisp:nil
                       ((things :initarg :things :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-things-in-billing-group-response-things
                         :shape "ThingNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-things-in-billing-group-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-things-in-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-things-in-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-things-in-billing-group-response
                    'make-list-things-in-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-things-in-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-things-in-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (recursive :initarg :recursive :initform
                         common-lisp:nil :type
                         (common-lisp:or recursive common-lisp:null) :accessor
                         struct-shape-list-things-in-thing-group-request-recursive
                         :shape "Recursive" :location "querystring"
                         :location-name "recursive")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-things-in-thing-group-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-things-in-thing-group-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-things-in-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-things-in-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-things-in-thing-group-request
                    'make-list-things-in-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-things-in-thing-group-response common-lisp:nil
                       ((things :initarg :things :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-things-in-thing-group-response-things
                         :shape "ThingNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-things-in-thing-group-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-things-in-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-things-in-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-things-in-thing-group-response
                    'make-list-things-in-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-things-in-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-things-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-things-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-max-results common-lisp:null)
                         :accessor struct-shape-list-things-request-max-results
                         :shape "RegistryMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor
                         struct-shape-list-things-request-attribute-name :shape
                         "AttributeName" :location "querystring" :location-name
                         "attributeName")
                        (attribute-value :initarg :attribute-value :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor
                         struct-shape-list-things-request-attribute-value
                         :shape "AttributeValue" :location "querystring"
                         :location-name "attributeValue")
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-list-things-request-thing-type-name
                         :shape "ThingTypeName" :location "querystring"
                         :location-name "thingTypeName")
                        (use-prefix-attribute-value :initarg
                         :use-prefix-attribute-value :initform common-lisp:nil
                         :type
                         (common-lisp:or |usePrefixAttributeValue|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-things-request-use-prefix-attribute-value
                         :shape "usePrefixAttributeValue" :location
                         "querystring" :location-name
                         "usePrefixAttributeValue"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-things-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-things-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-things-request 'make-list-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-things-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-things-response common-lisp:nil
                       ((things :initarg :things :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-attribute-list common-lisp:null)
                         :accessor struct-shape-list-things-response-things
                         :shape "ThingAttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-things-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-things-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-things-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-things-response 'make-list-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-things-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-things-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-things-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-topic-rule-destinations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or topic-rule-destination-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-topic-rule-destinations-request-max-results
                         :shape "TopicRuleDestinationMaxResults" :location
                         "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-topic-rule-destinations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-topic-rule-destinations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-topic-rule-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-topic-rule-destinations-request
                    'make-list-topic-rule-destinations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-topic-rule-destinations-response common-lisp:nil
                       ((destination-summaries :initarg :destination-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or topic-rule-destination-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-topic-rule-destinations-response-destination-summaries
                         :shape "TopicRuleDestinationSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-topic-rule-destinations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-topic-rule-destinations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-topic-rule-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-topic-rule-destinations-response
                    'make-list-topic-rule-destinations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-summaries))
      (common-lisp:list
       (common-lisp:cons "destinationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rule-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-topic-rules-request common-lisp:nil
                       ((topic :initarg :topic :initform common-lisp:nil :type
                         (common-lisp:or topic common-lisp:null) :accessor
                         struct-shape-list-topic-rules-request-topic :shape
                         "Topic" :location "querystring" :location-name
                         "topic")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or topic-rule-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-topic-rules-request-max-results
                         :shape "TopicRuleMaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-topic-rules-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (rule-disabled :initarg :rule-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or is-disabled common-lisp:null)
                         :accessor
                         struct-shape-list-topic-rules-request-rule-disabled
                         :shape "IsDisabled" :location "querystring"
                         :location-name "ruleDisabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-topic-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-topic-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-request 'make-list-topic-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-topic-rules-response common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or topic-rule-list common-lisp:null)
                         :accessor struct-shape-list-topic-rules-response-rules
                         :shape "TopicRuleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-topic-rules-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-topic-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-topic-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-response
                    'make-list-topic-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-v2logging-levels-request common-lisp:nil
                       ((target-type :initarg :target-type :initform
                         common-lisp:nil :type
                         (common-lisp:or log-target-type common-lisp:null)
                         :accessor
                         struct-shape-list-v2logging-levels-request-target-type
                         :shape "LogTargetType" :location "querystring"
                         :location-name "targetType")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-v2logging-levels-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or skyfall-max-results common-lisp:null)
                         :accessor
                         struct-shape-list-v2logging-levels-request-max-results
                         :shape "SkyfallMaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-v2logging-levels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-v2logging-levels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-v2logging-levels-request
                    'make-list-v2logging-levels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-v2logging-levels-response common-lisp:nil
                       ((log-target-configurations :initarg
                         :log-target-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or log-target-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-v2logging-levels-response-log-target-configurations
                         :shape "LogTargetConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-v2logging-levels-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-v2logging-levels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-v2logging-levels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-v2logging-levels-response
                    'make-list-v2logging-levels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-target-configurations))
      (common-lisp:list
       (common-lisp:cons "logTargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-v2logging-levels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-violation-events-request common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-violation-events-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-violation-events-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-request-thing-name
                         :shape "DeviceDefenderThingName" :location
                         "querystring" :location-name "thingName")
                        (security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-request-security-profile-name
                         :shape "SecurityProfileName" :location "querystring"
                         :location-name "securityProfileName")
                        (behavior-criteria-type :initarg
                         :behavior-criteria-type :initform common-lisp:nil
                         :type
                         (common-lisp:or behavior-criteria-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-request-behavior-criteria-type
                         :shape "BehaviorCriteriaType" :location "querystring"
                         :location-name "behaviorCriteriaType")
                        (list-suppressed-alerts :initarg
                         :list-suppressed-alerts :initform common-lisp:nil
                         :type
                         (common-lisp:or list-suppressed-alerts
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-request-list-suppressed-alerts
                         :shape "ListSuppressedAlerts" :location "querystring"
                         :location-name "listSuppressedAlerts")
                        (verification-state :initarg :verification-state
                         :initform common-lisp:nil :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-request-verification-state
                         :shape "VerificationState" :location "querystring"
                         :location-name "verificationState")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-violation-events-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-violation-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-violation-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-violation-events-request
                    'make-list-violation-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-violation-events-response common-lisp:nil
                       ((violation-events :initarg :violation-events :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-events common-lisp:null)
                         :accessor
                         struct-shape-list-violation-events-response-violation-events
                         :shape "ViolationEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-violation-events-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-violation-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-violation-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-violation-events-response
                    'make-list-violation-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-events))
      (common-lisp:list
       (common-lisp:cons "violationEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-violation-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass location-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-location-action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tracker-name :initarg :tracker-name :initform
                         (common-lisp:error ":trackername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-location-action-tracker-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":deviceid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-location-action-device-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or location-timestamp common-lisp:null)
                         :accessor struct-shape-location-action-timestamp
                         :shape "LocationTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latitude :initarg :latitude :initform
                         (common-lisp:error ":latitude is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-location-action-latitude :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (longitude :initarg :longitude :initform
                         (common-lisp:error ":longitude is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-location-action-longitude :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location-action 'make-location-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracker-name))
      (common-lisp:list
       (common-lisp:cons "trackerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "deviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass location-timestamp common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-location-timestamp-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-location-timestamp-unit :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location-timestamp
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location-timestamp
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'location-timestamp 'make-location-timestamp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-timestamp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-timestamp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-timestamp))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass log-target common-lisp:nil
                       ((target-type :initarg :target-type :initform
                         (common-lisp:error ":targettype is required") :type
                         (common-lisp:or log-target-type common-lisp:null)
                         :accessor struct-shape-log-target-target-type :shape
                         "LogTargetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-name :initarg :target-name :initform
                         common-lisp:nil :type
                         (common-lisp:or log-target-name common-lisp:null)
                         :accessor struct-shape-log-target-target-name :shape
                         "LogTargetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-target 'make-log-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-name))
      (common-lisp:list
       (common-lisp:cons "targetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-target-configuration common-lisp:nil
                       ((log-target :initarg :log-target :initform
                         common-lisp:nil :type
                         (common-lisp:or log-target common-lisp:null) :accessor
                         struct-shape-log-target-configuration-log-target
                         :shape "LogTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-log-target-configuration-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-target-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-target-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-target-configuration 'make-log-target-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-target-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-target-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-target))
      (common-lisp:list
       (common-lisp:cons "logTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-target-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-target-configurations ()
   '(trivial-types:proper-list log-target-configuration))
 (common-lisp:defun make-log-target-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            log-target-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-target-name () 'common-lisp:string)
(common-lisp:deftype log-target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-options-payload common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-logging-options-payload-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-logging-options-payload-log-level :shape
                         "LogLevel" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-options-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-options-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'logging-options-payload 'make-logging-options-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass machine-learning-detection-config common-lisp:nil
                       ((confidence-level :initarg :confidence-level :initform
                         (common-lisp:error ":confidencelevel is required")
                         :type
                         (common-lisp:or confidence-level common-lisp:null)
                         :accessor
                         struct-shape-machine-learning-detection-config-confidence-level
                         :shape "ConfidenceLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-machine-learning-detection-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'machine-learning-detection-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'machine-learning-detection-config
                    'make-machine-learning-detection-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          machine-learning-detection-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          machine-learning-detection-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-level))
      (common-lisp:list
       (common-lisp:cons "confidenceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          machine-learning-detection-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maintenance-window common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor struct-shape-maintenance-window-start-time
                         :shape "CronExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-in-minutes :initarg :duration-in-minutes
                         :initform
                         (common-lisp:error ":durationinminutes is required")
                         :type
                         (common-lisp:or duration-in-minutes common-lisp:null)
                         :accessor
                         struct-shape-maintenance-window-duration-in-minutes
                         :shape "DurationInMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maintenance-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'maintenance-window 'make-maintenance-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "durationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-windows ()
   '(trivial-types:proper-list maintenance-window))
 (common-lisp:defun make-maintenance-windows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list maintenance-window))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-exception
                    'malformed-policy-exception-message)))
(common-lisp:deftype managed-job-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass managed-job-template-summary common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or job-template-arn common-lisp:null)
                         :accessor
                         struct-shape-managed-job-template-summary-template-arn
                         :shape "JobTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-job-template-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-job-template-summary-template-name
                         :shape "ManagedJobTemplateName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor
                         struct-shape-managed-job-template-summary-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environments :initarg :environments :initform
                         common-lisp:nil :type
                         (common-lisp:or environments common-lisp:null)
                         :accessor
                         struct-shape-managed-job-template-summary-environments
                         :shape "Environments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-version :initarg :template-version :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-job-template-summary-template-version
                         :shape "ManagedTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-job-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-job-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'managed-job-template-summary
                    'make-managed-job-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-job-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-job-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "templateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-job-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-job-templates-summary-list ()
   '(trivial-types:proper-list managed-job-template-summary))
 (common-lisp:defun make-managed-job-templates-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-job-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-template-version () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-buckets () 'common-lisp:integer)
(common-lisp:deftype max-job-executions-per-min () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum () 'common-lisp:double-float)
(common-lisp:deftype maximum-per-minute () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-expiry () 'common-lisp:string)
(common-lisp:deftype message-format () 'common-lisp:string)
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-datum common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-metric-datum-timestamp :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor struct-shape-metric-datum-value :shape
                         "MetricValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-datum
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-datum
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-datum 'make-metric-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-datum))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-datum-list ()
   '(trivial-types:proper-list metric-datum))
 (common-lisp:defun make-metric-datum-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-dimension common-lisp:nil
                       ((dimension-name :initarg :dimension-name :initform
                         (common-lisp:error ":dimensionname is required") :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-metric-dimension-dimension-name
                         :shape "DimensionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform common-lisp:nil
                         :type
                         (common-lisp:or dimension-value-operator
                                         common-lisp:null)
                         :accessor struct-shape-metric-dimension-operator
                         :shape "DimensionValueOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "dimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-names () '(trivial-types:proper-list metric-name))
 (common-lisp:defun make-metric-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-to-retain common-lisp:nil
                       ((metric :initarg :metric :initform
                         (common-lisp:error ":metric is required") :type
                         (common-lisp:or behavior-metric common-lisp:null)
                         :accessor struct-shape-metric-to-retain-metric :shape
                         "BehaviorMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-dimension :initarg :metric-dimension :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-dimension common-lisp:null)
                         :accessor
                         struct-shape-metric-to-retain-metric-dimension :shape
                         "MetricDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-metric :initarg :export-metric :initform
                         common-lisp:nil :type
                         (common-lisp:or export-metric common-lisp:null)
                         :accessor struct-shape-metric-to-retain-export-metric
                         :shape "ExportMetric" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-to-retain
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-to-retain
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-to-retain 'make-metric-to-retain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-to-retain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-to-retain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-dimension))
      (common-lisp:list
       (common-lisp:cons "metricDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-metric))
      (common-lisp:list
       (common-lisp:cons "exportMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-to-retain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metric-value common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or unsigned-long common-lisp:null)
                         :accessor struct-shape-metric-value-count :shape
                         "UnsignedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidrs :initarg :cidrs :initform common-lisp:nil :type
                         (common-lisp:or cidrs common-lisp:null) :accessor
                         struct-shape-metric-value-cidrs :shape "Cidrs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ports :initarg :ports :initform common-lisp:nil :type
                         (common-lisp:or ports common-lisp:null) :accessor
                         struct-shape-metric-value-ports :shape "Ports"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number :initarg :number :initform common-lisp:nil
                         :type (common-lisp:or number common-lisp:null)
                         :accessor struct-shape-metric-value-number :shape
                         "Number" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (numbers :initarg :numbers :initform common-lisp:nil
                         :type (common-lisp:or number-list common-lisp:null)
                         :accessor struct-shape-metric-value-numbers :shape
                         "NumberList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (strings :initarg :strings :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-metric-value-strings :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-value 'make-metric-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number))
      (common-lisp:list
       (common-lisp:cons "number"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numbers))
      (common-lisp:list
       (common-lisp:cons "numbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strings))
      (common-lisp:list
       (common-lisp:cons "strings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metrics-export-config common-lisp:nil
                       ((mqtt-topic :initarg :mqtt-topic :initform
                         (common-lisp:error ":mqtttopic is required") :type
                         (common-lisp:or mqtt-topic common-lisp:null) :accessor
                         struct-shape-metrics-export-config-mqtt-topic :shape
                         "MqttTopic" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-metrics-export-config-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metrics-export-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-export-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metrics-export-config 'make-metrics-export-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metrics-export-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metrics-export-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mqtt-topic))
      (common-lisp:list
       (common-lisp:cons "mqttTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metrics-export-config))
   common-lisp:nil))
(common-lisp:deftype minimum () 'common-lisp:double-float)
(common-lisp:deftype minimum-number-of-executed-things () 'common-lisp:integer)
(common-lisp:deftype missing-context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype missing-context-values ()
   '(trivial-types:proper-list missing-context-value))
 (common-lisp:defun make-missing-context-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list missing-context-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mitigation-action common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor struct-shape-mitigation-action-name :shape
                         "MitigationActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or mitigation-action-id common-lisp:null)
                         :accessor struct-shape-mitigation-action-id :shape
                         "MitigationActionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-mitigation-action-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-params :initarg :action-params :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-params
                                         common-lisp:null)
                         :accessor struct-shape-mitigation-action-action-params
                         :shape "MitigationActionParams" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mitigation-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mitigation-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mitigation-action 'make-mitigation-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mitigation-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mitigation-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mitigation-action))
   common-lisp:nil))
(common-lisp:deftype mitigation-action-arn () 'common-lisp:string)
(common-lisp:deftype mitigation-action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mitigation-action-identifier common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-identifier-action-name
                         :shape "MitigationActionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-arn :initarg :action-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-identifier-action-arn
                         :shape "MitigationActionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mitigation-action-identifier-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mitigation-action-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mitigation-action-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mitigation-action-identifier
                    'make-mitigation-action-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mitigation-action-identifier-list ()
   '(trivial-types:proper-list mitigation-action-identifier))
 (common-lisp:defun make-mitigation-action-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mitigation-action-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype mitigation-action-list ()
   '(trivial-types:proper-list mitigation-action))
 (common-lisp:defun make-mitigation-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mitigation-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mitigation-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mitigation-action-name-list ()
   '(trivial-types:proper-list mitigation-action-name))
 (common-lisp:defun make-mitigation-action-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mitigation-action-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mitigation-action-params common-lisp:nil
                       ((update-device-certificate-params :initarg
                         :update-device-certificate-params :initform
                         common-lisp:nil :type
                         (common-lisp:or update-device-certificate-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-params-update-device-certificate-params
                         :shape "UpdateDeviceCertificateParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-cacertificate-params :initarg
                         :update-cacertificate-params :initform common-lisp:nil
                         :type
                         (common-lisp:or update-cacertificate-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-params-update-cacertificate-params
                         :shape "UpdateCACertificateParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (add-things-to-thing-group-params :initarg
                         :add-things-to-thing-group-params :initform
                         common-lisp:nil :type
                         (common-lisp:or add-things-to-thing-group-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-params-add-things-to-thing-group-params
                         :shape "AddThingsToThingGroupParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replace-default-policy-version-params :initarg
                         :replace-default-policy-version-params :initform
                         common-lisp:nil :type
                         (common-lisp:or replace-default-policy-version-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-params-replace-default-policy-version-params
                         :shape "ReplaceDefaultPolicyVersionParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-io-tlogging-params :initarg
                         :enable-io-tlogging-params :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-io-tlogging-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-params-enable-io-tlogging-params
                         :shape "EnableIoTLoggingParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publish-finding-to-sns-params :initarg
                         :publish-finding-to-sns-params :initform
                         common-lisp:nil :type
                         (common-lisp:or publish-finding-to-sns-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-mitigation-action-params-publish-finding-to-sns-params
                         :shape "PublishFindingToSnsParams" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mitigation-action-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mitigation-action-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mitigation-action-params 'make-mitigation-action-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-device-certificate-params))
      (common-lisp:list
       (common-lisp:cons "updateDeviceCertificateParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-cacertificate-params))
      (common-lisp:list
       (common-lisp:cons "updateCACertificateParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-things-to-thing-group-params))
      (common-lisp:list
       (common-lisp:cons "addThingsToThingGroupParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-default-policy-version-params))
      (common-lisp:list
       (common-lisp:cons "replaceDefaultPolicyVersionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-io-tlogging-params))
      (common-lisp:list
       (common-lisp:cons "enableIoTLoggingParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-finding-to-sns-params))
      (common-lisp:list
       (common-lisp:cons "publishFindingToSnsParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mitigation-action-params))
   common-lisp:nil))
(common-lisp:deftype mitigation-action-type () 'common-lisp:string)
(common-lisp:deftype mitigation-actions-task-id () 'common-lisp:string)
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:deftype mqtt-client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mqtt-context common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or mqtt-username common-lisp:null)
                         :accessor struct-shape-mqtt-context-username :shape
                         "MqttUsername" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or mqtt-password common-lisp:null)
                         :accessor struct-shape-mqtt-context-password :shape
                         "MqttPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mqtt-client-id common-lisp:null)
                         :accessor struct-shape-mqtt-context-client-id :shape
                         "MqttClientId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mqtt-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mqtt-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mqtt-context 'make-mqtt-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mqtt-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mqtt-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mqtt-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mqtt-headers common-lisp:nil
                       ((payload-format-indicator :initarg
                         :payload-format-indicator :initform common-lisp:nil
                         :type
                         (common-lisp:or payload-format-indicator
                                         common-lisp:null)
                         :accessor
                         struct-shape-mqtt-headers-payload-format-indicator
                         :shape "PayloadFormatIndicator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-mqtt-headers-content-type
                         :shape "ContentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-topic :initarg :response-topic :initform
                         common-lisp:nil :type
                         (common-lisp:or response-topic common-lisp:null)
                         :accessor struct-shape-mqtt-headers-response-topic
                         :shape "ResponseTopic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (correlation-data :initarg :correlation-data :initform
                         common-lisp:nil :type
                         (common-lisp:or correlation-data common-lisp:null)
                         :accessor struct-shape-mqtt-headers-correlation-data
                         :shape "CorrelationData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-expiry :initarg :message-expiry :initform
                         common-lisp:nil :type
                         (common-lisp:or message-expiry common-lisp:null)
                         :accessor struct-shape-mqtt-headers-message-expiry
                         :shape "MessageExpiry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-properties :initarg :user-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or user-properties common-lisp:null)
                         :accessor struct-shape-mqtt-headers-user-properties
                         :shape "UserProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mqtt-headers
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mqtt-headers
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mqtt-headers 'make-mqtt-headers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mqtt-headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mqtt-headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'payload-format-indicator))
      (common-lisp:list
       (common-lisp:cons "payloadFormatIndicator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-topic))
      (common-lisp:list
       (common-lisp:cons "responseTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'correlation-data))
      (common-lisp:list
       (common-lisp:cons "correlationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-expiry))
      (common-lisp:list
       (common-lisp:cons "messageExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-properties))
      (common-lisp:list
       (common-lisp:cons "userProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mqtt-headers))
   common-lisp:nil))
(common-lisp:deftype mqtt-password ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype mqtt-topic () 'common-lisp:string)
(common-lisp:deftype mqtt-username () 'common-lisp:string)
(common-lisp:deftype named-shadow-indexing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype named-shadow-names-filter ()
   '(trivial-types:proper-list shadow-name))
 (common-lisp:defun make-named-shadow-names-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shadow-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype namespace-id () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-compliant-checks-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass non-compliant-resource common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-non-compliant-resource-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-non-compliant-resource-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-non-compliant-resource-additional-info
                         :shape "StringMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-non-compliant-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'non-compliant-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'non-compliant-resource 'make-non-compliant-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-resource))
   common-lisp:nil))
(common-lisp:deftype non-compliant-resources-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-configured-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-configured-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-configured-exception
                    'not-configured-exception-message)))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype number () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype number-list () '(trivial-types:proper-list number))
 (common-lisp:defun make-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-of-retries () 'common-lisp:integer)
(common-lisp:deftype number-of-things () 'common-lisp:integer)
(common-lisp:deftype otaupdate-arn () 'common-lisp:string)
(common-lisp:deftype otaupdate-description () 'common-lisp:string)
(common-lisp:deftype otaupdate-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass otaupdate-file common-lisp:nil
                       ((file-name :initarg :file-name :initform
                         common-lisp:nil :type
                         (common-lisp:or file-name common-lisp:null) :accessor
                         struct-shape-otaupdate-file-file-name :shape
                         "FileName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-type :initarg :file-type :initform
                         common-lisp:nil :type
                         (common-lisp:or file-type common-lisp:null) :accessor
                         struct-shape-otaupdate-file-file-type :shape
                         "FileType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-version :initarg :file-version :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-file-version
                                         common-lisp:null)
                         :accessor struct-shape-otaupdate-file-file-version
                         :shape "OTAUpdateFileVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-location :initarg :file-location :initform
                         common-lisp:nil :type
                         (common-lisp:or file-location common-lisp:null)
                         :accessor struct-shape-otaupdate-file-file-location
                         :shape "FileLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-signing :initarg :code-signing :initform
                         common-lisp:nil :type
                         (common-lisp:or code-signing common-lisp:null)
                         :accessor struct-shape-otaupdate-file-code-signing
                         :shape "CodeSigning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes-map common-lisp:null)
                         :accessor struct-shape-otaupdate-file-attributes
                         :shape "AttributesMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-otaupdate-file
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'otaupdate-file
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'otaupdate-file 'make-otaupdate-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaupdate-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaupdate-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-version))
      (common-lisp:list
       (common-lisp:cons "fileVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-location))
      (common-lisp:list
       (common-lisp:cons "fileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-signing))
      (common-lisp:list
       (common-lisp:cons "codeSigning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaupdate-file))
   common-lisp:nil))
(common-lisp:deftype otaupdate-file-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype otaupdate-files ()
   '(trivial-types:proper-list otaupdate-file))
 (common-lisp:defun make-otaupdate-files
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list otaupdate-file))
   aws-sdk/generator/shape::members))
(common-lisp:deftype otaupdate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass otaupdate-info common-lisp:nil
                       ((ota-update-id :initarg :ota-update-id :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-id common-lisp:null)
                         :accessor struct-shape-otaupdate-info-ota-update-id
                         :shape "OTAUpdateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ota-update-arn :initarg :ota-update-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-arn common-lisp:null)
                         :accessor struct-shape-otaupdate-info-ota-update-arn
                         :shape "OTAUpdateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-otaupdate-info-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-otaupdate-info-last-modified-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-description
                                         common-lisp:null)
                         :accessor struct-shape-otaupdate-info-description
                         :shape "OTAUpdateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (targets :initarg :targets :initform common-lisp:nil
                         :type (common-lisp:or targets common-lisp:null)
                         :accessor struct-shape-otaupdate-info-targets :shape
                         "Targets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or protocols common-lisp:null) :accessor
                         struct-shape-otaupdate-info-protocols :shape
                         "Protocols" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-job-executions-rollout-config :initarg
                         :aws-job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-otaupdate-info-aws-job-executions-rollout-config
                         :shape "AwsJobExecutionsRolloutConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aws-job-presigned-url-config :initarg
                         :aws-job-presigned-url-config :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-job-presigned-url-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-otaupdate-info-aws-job-presigned-url-config
                         :shape "AwsJobPresignedUrlConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-selection :initarg :target-selection :initform
                         common-lisp:nil :type
                         (common-lisp:or target-selection common-lisp:null)
                         :accessor struct-shape-otaupdate-info-target-selection
                         :shape "TargetSelection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ota-update-files :initarg :ota-update-files :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-files common-lisp:null)
                         :accessor struct-shape-otaupdate-info-ota-update-files
                         :shape "OTAUpdateFiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ota-update-status :initarg :ota-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or otaupdate-status common-lisp:null)
                         :accessor
                         struct-shape-otaupdate-info-ota-update-status :shape
                         "OTAUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-iot-job-id :initarg :aws-iot-job-id :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-iot-job-id common-lisp:null)
                         :accessor struct-shape-otaupdate-info-aws-iot-job-id
                         :shape "AwsIotJobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-iot-job-arn :initarg :aws-iot-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-iot-job-arn common-lisp:null)
                         :accessor struct-shape-otaupdate-info-aws-iot-job-arn
                         :shape "AwsIotJobArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         struct-shape-otaupdate-info-error-info :shape
                         "ErrorInfo" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (additional-parameters :initarg :additional-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-parameter-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-otaupdate-info-additional-parameters
                         :shape "AdditionalParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-otaupdate-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'otaupdate-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'otaupdate-info 'make-otaupdate-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaupdate-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaupdate-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-id))
      (common-lisp:list
       (common-lisp:cons "otaUpdateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-arn))
      (common-lisp:list
       (common-lisp:cons "otaUpdateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "awsJobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-job-presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "awsJobPresignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-selection))
      (common-lisp:list
       (common-lisp:cons "targetSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-files))
      (common-lisp:list
       (common-lisp:cons "otaUpdateFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-status))
      (common-lisp:list
       (common-lisp:cons "otaUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-id))
      (common-lisp:list
       (common-lisp:cons "awsIotJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-job-arn))
      (common-lisp:list
       (common-lisp:cons "awsIotJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-parameters))
      (common-lisp:list
       (common-lisp:cons "additionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaupdate-info))
   common-lisp:nil))
(common-lisp:deftype otaupdate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass otaupdate-summary common-lisp:nil
                       ((ota-update-id :initarg :ota-update-id :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-id common-lisp:null)
                         :accessor struct-shape-otaupdate-summary-ota-update-id
                         :shape "OTAUpdateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ota-update-arn :initarg :ota-update-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or otaupdate-arn common-lisp:null)
                         :accessor
                         struct-shape-otaupdate-summary-ota-update-arn :shape
                         "OTAUpdateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-otaupdate-summary-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-otaupdate-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'otaupdate-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'otaupdate-summary 'make-otaupdate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaupdate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaupdate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-id))
      (common-lisp:list
       (common-lisp:cons "otaUpdateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ota-update-arn))
      (common-lisp:list
       (common-lisp:cons "otaUpdateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaupdate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype otaupdates-summary ()
   '(trivial-types:proper-list otaupdate-summary))
 (common-lisp:defun make-otaupdates-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list otaupdate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass open-search-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-open-search-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or elasticsearch-endpoint
                                         common-lisp:null)
                         :accessor struct-shape-open-search-action-endpoint
                         :shape "ElasticsearchEndpoint" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index :initarg :index :initform
                         (common-lisp:error ":index is required") :type
                         (common-lisp:or elasticsearch-index common-lisp:null)
                         :accessor struct-shape-open-search-action-index :shape
                         "ElasticsearchIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or elasticsearch-type common-lisp:null)
                         :accessor struct-shape-open-search-action-type :shape
                         "ElasticsearchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or elasticsearch-id common-lisp:null)
                         :accessor struct-shape-open-search-action-id :shape
                         "ElasticsearchId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-search-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'open-search-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-search-action 'make-open-search-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-search-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-search-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-search-action))
   common-lisp:nil))
(common-lisp:deftype optional () 'common-lisp:boolean)
(common-lisp:deftype optional-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass outgoing-certificate common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-outgoing-certificate-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-outgoing-certificate-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transferred-to :initarg :transferred-to :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-outgoing-certificate-transferred-to
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transfer-date :initarg :transfer-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-outgoing-certificate-transfer-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transfer-message :initarg :transfer-message :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-outgoing-certificate-transfer-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-outgoing-certificate-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outgoing-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outgoing-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outgoing-certificate 'make-outgoing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transferred-to))
      (common-lisp:list
       (common-lisp:cons "transferredTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-date))
      (common-lisp:list
       (common-lisp:cons "transferDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outgoing-certificates ()
   '(trivial-types:proper-list outgoing-certificate))
 (common-lisp:defun make-outgoing-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outgoing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype override-dynamic-groups () 'common-lisp:boolean)
(common-lisp:deftype package-arn () 'common-lisp:string)
(common-lisp:deftype package-catalog-max-results () 'common-lisp:integer)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-summary common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor struct-shape-package-summary-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-name :initarg :default-version-name
                         :initform common-lisp:nil :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-package-summary-default-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor struct-shape-package-summary-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-package-summary-last-modified-date :shape
                         "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-package-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'package-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'package-summary 'make-package-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "defaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-summary-list ()
   '(trivial-types:proper-list package-summary))
 (common-lisp:defun make-package-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-version-action () 'common-lisp:string)
(common-lisp:deftype package-version-arn () 'common-lisp:string)
(common-lisp:deftype package-version-error-reason () 'common-lisp:string)
(common-lisp:deftype package-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-version-summary common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-package-version-summary-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-name :initarg :version-name :initform
                         common-lisp:nil :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-package-version-summary-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor struct-shape-package-version-summary-status
                         :shape "PackageVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-package-version-summary-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-modified-date common-lisp:null)
                         :accessor
                         struct-shape-package-version-summary-last-modified-date
                         :shape "LastModifiedDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-package-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'package-version-summary 'make-package-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "versionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-version-summary-list ()
   '(trivial-types:proper-list package-version-summary))
 (common-lisp:defun make-package-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype parameter () 'common-lisp:string)
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameter-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype partition-key () 'common-lisp:string)
(common-lisp:deftype payload-field () 'common-lisp:string)
(common-lisp:deftype payload-format-indicator () 'common-lisp:string)
(common-lisp:deftype payload-version () 'common-lisp:string)
(common-lisp:deftype percent () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype percent-list () '(trivial-types:proper-list percent))
 (common-lisp:defun make-percent-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list percent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass percent-pair common-lisp:nil
                       ((percent :initarg :percent :initform common-lisp:nil
                         :type (common-lisp:or percent common-lisp:null)
                         :accessor struct-shape-percent-pair-percent :shape
                         "Percent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or percent-value common-lisp:null)
                         :accessor struct-shape-percent-pair-value :shape
                         "PercentValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-percent-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'percent-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'percent-pair 'make-percent-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input percent-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input percent-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent))
      (common-lisp:list
       (common-lisp:cons "percent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input percent-pair))
   common-lisp:nil))
(common-lisp:deftype percent-value () 'common-lisp:double-float)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype percentiles () '(trivial-types:proper-list percent-pair))
 (common-lisp:defun make-percentiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list percent-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policies () '(trivial-types:proper-list policy))
 (common-lisp:defun make-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-policy-policy-name :shape
                         "PolicyName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-policy-policy-arn :shape "PolicyArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-documents ()
   '(trivial-types:proper-list policy-document))
 (common-lisp:defun make-policy-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-names () '(trivial-types:proper-list policy-name))
 (common-lisp:defun make-policy-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-targets ()
   '(trivial-types:proper-list policy-target))
 (common-lisp:defun make-policy-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-version common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor struct-shape-policy-version-version-id
                         :shape "PolicyVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor
                         struct-shape-policy-version-is-default-version :shape
                         "IsDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-policy-version-create-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "createDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-version))
   common-lisp:nil))
(common-lisp:deftype policy-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-version-identifier common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-policy-version-identifier-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-policy-version-identifier-policy-version-id
                         :shape "PolicyVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-version-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-version-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-version-identifier
                    'make-policy-version-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-version-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-version-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-version-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-versions ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun make-policy-versions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype ports () '(trivial-types:proper-list port))
 (common-lisp:defun make-ports
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass presigned-url-config common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-presigned-url-config-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-in-sec :initarg :expires-in-sec :initform
                         common-lisp:nil :type
                         (common-lisp:or expires-in-sec common-lisp:null)
                         :accessor
                         struct-shape-presigned-url-config-expires-in-sec
                         :shape "ExpiresInSec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-presigned-url-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'presigned-url-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'presigned-url-config 'make-presigned-url-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input presigned-url-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input presigned-url-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-sec))
      (common-lisp:list
       (common-lisp:cons "expiresInSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input presigned-url-config))
   common-lisp:nil))
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:deftype principal-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal-arn))
 (common-lisp:defun make-principals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype private-key () 'common-lisp:string)
(common-lisp:deftype processing-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype processing-target-name-list ()
   '(trivial-types:proper-list processing-target-name))
 (common-lisp:defun make-processing-target-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processing-target-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocols () '(trivial-types:proper-list protocol))
 (common-lisp:defun make-protocols
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-hook common-lisp:nil
                       ((payload-version :initarg :payload-version :initform
                         common-lisp:nil :type
                         (common-lisp:or payload-version common-lisp:null)
                         :accessor
                         struct-shape-provisioning-hook-payload-version :shape
                         "PayloadVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         (common-lisp:error ":targetarn is required") :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         struct-shape-provisioning-hook-target-arn :shape
                         "TargetArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioning-hook
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provisioning-hook
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioning-hook 'make-provisioning-hook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioning-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioning-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-version))
      (common-lisp:list
       (common-lisp:cons "payloadVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioning-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-template-listing ()
   '(trivial-types:proper-list provisioning-template-summary))
 (common-lisp:defun make-provisioning-template-listing
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-template-summary common-lisp:nil
                       ((template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or template-arn common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-summary-template-arn
                         :shape "TemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-summary-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-summary-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-provisioning-template-summary-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-provisioning-template-summary-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-summary-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-summary-type :shape
                         "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioning-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioning-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioning-template-summary
                    'make-provisioning-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "templateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype provisioning-template-version-listing ()
   '(trivial-types:proper-list provisioning-template-version-summary))
 (common-lisp:defun make-provisioning-template-version-listing
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provisioning-template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioning-template-version-summary common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-version-summary-version-id
                         :shape "TemplateVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-provisioning-template-version-summary-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor
                         struct-shape-provisioning-template-version-summary-is-default-version
                         :shape "IsDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioning-template-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provisioning-template-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioning-template-version-summary
                    'make-provisioning-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-template-version-summary))
   common-lisp:nil))
(common-lisp:deftype public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype public-key-map () 'common-lisp:hash-table)
 (common-lisp:defun make-public-key-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass publish-finding-to-sns-params common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         (common-lisp:error ":topicarn is required") :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor
                         struct-shape-publish-finding-to-sns-params-topic-arn
                         :shape "SnsTopicArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-publish-finding-to-sns-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-finding-to-sns-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'publish-finding-to-sns-params
                    'make-publish-finding-to-sns-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-finding-to-sns-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-finding-to-sns-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-finding-to-sns-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-asset-property-value-entry common-lisp:nil
                       ((entry-id :initarg :entry-id :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-property-entry-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-entry-id
                         :shape "AssetPropertyEntryId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or asset-id common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-asset-id
                         :shape "AssetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-id :initarg :property-id :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-id common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-property-id
                         :shape "AssetPropertyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-alias :initarg :property-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-property-alias common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-property-alias
                         :shape "AssetPropertyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (property-values :initarg :property-values :initform
                         (common-lisp:error ":propertyvalues is required")
                         :type
                         (common-lisp:or asset-property-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-asset-property-value-entry-property-values
                         :shape "AssetPropertyValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-asset-property-value-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-asset-property-value-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-asset-property-value-entry
                    'make-put-asset-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-asset-property-value-entry-list ()
   '(trivial-types:proper-list put-asset-property-value-entry))
 (common-lisp:defun make-put-asset-property-value-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-asset-property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-item-input common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-put-item-input-table-name :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-item-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-item-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'put-item-input 'make-put-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-verification-state-on-violation-request
                       common-lisp:nil
                       ((violation-id :initarg :violation-id :initform
                         (common-lisp:error ":violationid is required") :type
                         (common-lisp:or violation-id common-lisp:null)
                         :accessor
                         struct-shape-put-verification-state-on-violation-request-violation-id
                         :shape "ViolationId" :location "uri" :location-name
                         "violationId")
                        (verification-state :initarg :verification-state
                         :initform
                         (common-lisp:error ":verificationstate is required")
                         :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor
                         struct-shape-put-verification-state-on-violation-request-verification-state
                         :shape "VerificationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verification-state-description :initarg
                         :verification-state-description :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-state-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-verification-state-on-violation-request-verification-state-description
                         :shape "VerificationStateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-verification-state-on-violation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-verification-state-on-violation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-verification-state-on-violation-request
                    'make-put-verification-state-on-violation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "verificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-state-description))
      (common-lisp:list
       (common-lisp:cons "verificationStateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-verification-state-on-violation-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-verification-state-on-violation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-verification-state-on-violation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-verification-state-on-violation-response
                    'make-put-verification-state-on-violation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-verification-state-on-violation-response))
   common-lisp:nil))
(common-lisp:deftype qos () 'common-lisp:integer)
(common-lisp:deftype query-max-results () 'common-lisp:integer)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:deftype query-version () 'common-lisp:string)
(common-lisp:deftype queue-url () 'common-lisp:string)
(common-lisp:deftype queued-things () 'common-lisp:integer)
(common-lisp:deftype range-key-field () 'common-lisp:string)
(common-lisp:deftype range-key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rate-increase-criteria common-lisp:nil
                       ((number-of-notified-things :initarg
                         :number-of-notified-things :initform common-lisp:nil
                         :type
                         (common-lisp:or number-of-things common-lisp:null)
                         :accessor
                         struct-shape-rate-increase-criteria-number-of-notified-things
                         :shape "NumberOfThings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-succeeded-things :initarg
                         :number-of-succeeded-things :initform common-lisp:nil
                         :type
                         (common-lisp:or number-of-things common-lisp:null)
                         :accessor
                         struct-shape-rate-increase-criteria-number-of-succeeded-things
                         :shape "NumberOfThings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rate-increase-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rate-increase-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rate-increase-criteria 'make-rate-increase-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-increase-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-increase-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-notified-things))
      (common-lisp:list
       (common-lisp:cons "numberOfNotifiedThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-succeeded-things))
      (common-lisp:list
       (common-lisp:cons "numberOfSucceededThings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-increase-criteria))
   common-lisp:nil))
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:deftype reason-for-non-compliance () 'common-lisp:string)
(common-lisp:deftype reason-for-non-compliance-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reason-for-non-compliance-codes ()
   '(trivial-types:proper-list reason-for-non-compliance-code))
 (common-lisp:defun make-reason-for-non-compliance-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reason-for-non-compliance-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recursive () 'common-lisp:boolean)
(common-lisp:deftype recursive-without-default () 'common-lisp:boolean)
(common-lisp:deftype regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-cacertificate-request common-lisp:nil
                       ((ca-certificate :initarg :ca-certificate :initform
                         (common-lisp:error ":cacertificate is required") :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-request-ca-certificate
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verification-certificate :initarg
                         :verification-certificate :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-request-verification-certificate
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (set-as-active :initarg :set-as-active :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-active common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-request-set-as-active
                         :shape "SetAsActive" :location "querystring"
                         :location-name "setAsActive")
                        (allow-auto-registration :initarg
                         :allow-auto-registration :initform common-lisp:nil
                         :type
                         (common-lisp:or allow-auto-registration
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-request-allow-auto-registration
                         :shape "AllowAutoRegistration" :location "querystring"
                         :location-name "allowAutoRegistration")
                        (registration-config :initarg :registration-config
                         :initform common-lisp:nil :type
                         (common-lisp:or registration-config common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-request-registration-config
                         :shape "RegistrationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-register-cacertificate-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-mode :initarg :certificate-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-mode common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-request-certificate-mode
                         :shape "CertificateMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-cacertificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-cacertificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-request
                    'make-register-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate))
      (common-lisp:list
       (common-lisp:cons "caCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-certificate))
      (common-lisp:list
       (common-lisp:cons "verificationCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "registrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "certificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-cacertificate-response common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-response-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-register-cacertificate-response-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-cacertificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-cacertificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-response
                    'make-register-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-certificate-request common-lisp:nil
                       ((certificate-pem :initarg :certificate-pem :initform
                         (common-lisp:error ":certificatepem is required")
                         :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-request-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificate-pem :initarg :ca-certificate-pem
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-request-ca-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (set-as-active :initarg :set-as-active :initform
                         common-lisp:nil :type
                         (common-lisp:or set-as-active-flag common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-request-set-as-active
                         :shape "SetAsActiveFlag" :location "querystring"
                         :location-name "setAsActive")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-status common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-request-status
                         :shape "CertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-certificate-request
                    'make-register-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-pem))
      (common-lisp:list
       (common-lisp:cons "caCertificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-certificate-response common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-response-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-response-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-certificate-response
                    'make-register-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-certificate-without-carequest common-lisp:nil
                       ((certificate-pem :initarg :certificate-pem :initform
                         (common-lisp:error ":certificatepem is required")
                         :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-without-carequest-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-status common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-without-carequest-status
                         :shape "CertificateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-certificate-without-carequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-certificate-without-carequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-certificate-without-carequest
                    'make-register-certificate-without-carequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-carequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-carequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-certificate-without-caresponse common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-without-caresponse-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-register-certificate-without-caresponse-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-certificate-without-caresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-certificate-without-caresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-certificate-without-caresponse
                    'make-register-certificate-without-caresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-caresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-caresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-without-caresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-thing-request common-lisp:nil
                       ((template-body :initarg :template-body :initform
                         (common-lisp:error ":templatebody is required") :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-register-thing-request-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         struct-shape-register-thing-request-parameters :shape
                         "Parameters" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-thing-request 'make-register-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-thing-response common-lisp:nil
                       ((certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor
                         struct-shape-register-thing-response-certificate-pem
                         :shape "CertificatePem" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arns :initarg :resource-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor
                         struct-shape-register-thing-response-resource-arns
                         :shape "ResourceArns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-thing-response 'make-register-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-thing-response))
   common-lisp:nil))
(common-lisp:deftype registration-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition registration-code-validation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       registration-code-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'registration-code-validation-exception
                    'registration-code-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass registration-config common-lisp:nil
                       ((template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-registration-config-template-body :shape
                         "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-registration-config-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-registration-config-template-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registration-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registration-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'registration-config 'make-registration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registration-config))
   common-lisp:nil))
(common-lisp:deftype registry-max-results () 'common-lisp:integer)
(common-lisp:deftype registry-s3bucket-name () 'common-lisp:string)
(common-lisp:deftype registry-s3key-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-certificate-transfer-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-reject-certificate-transfer-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId")
                        (reject-reason :initarg :reject-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-reject-certificate-transfer-request-reject-reason
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-certificate-transfer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-certificate-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-certificate-transfer-request
                    'make-reject-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-reason))
      (common-lisp:list
       (common-lisp:cons "rejectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:deftype rejected-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass related-resource common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-related-resource-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-related-resource-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-info :initarg :additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-related-resource-additional-info :shape
                         "StringMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-resource 'make-related-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "additionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-resources ()
   '(trivial-types:proper-list related-resource))
 (common-lisp:defun make-related-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype remove-authorizer-config () 'common-lisp:boolean)
(common-lisp:deftype remove-auto-registration () 'common-lisp:boolean)
(common-lisp:deftype remove-hook () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass remove-thing-from-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-remove-thing-from-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (billing-group-arn :initarg :billing-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or billing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-remove-thing-from-billing-group-request-billing-group-arn
                         :shape "BillingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-remove-thing-from-billing-group-request-thing-name
                         :shape "ThingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-remove-thing-from-billing-group-request-thing-arn
                         :shape "ThingArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-thing-from-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-thing-from-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-billing-group-request
                    'make-remove-thing-from-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-name))
      (common-lisp:list
       (common-lisp:cons "billingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-group-arn))
      (common-lisp:list
       (common-lisp:cons "billingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-thing-from-billing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-thing-from-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-thing-from-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-billing-group-response
                    'make-remove-thing-from-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-thing-from-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-remove-thing-from-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-arn :initarg :thing-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-arn common-lisp:null)
                         :accessor
                         struct-shape-remove-thing-from-thing-group-request-thing-group-arn
                         :shape "ThingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-remove-thing-from-thing-group-request-thing-name
                         :shape "ThingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-remove-thing-from-thing-group-request-thing-arn
                         :shape "ThingArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-thing-from-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-thing-from-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-thing-group-request
                    'make-remove-thing-from-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-arn))
      (common-lisp:list
       (common-lisp:cons "thingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-thing-from-thing-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-thing-from-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-thing-from-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-thing-from-thing-group-response
                    'make-remove-thing-from-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-thing-from-thing-group-response))
   common-lisp:nil))
(common-lisp:deftype remove-thing-type () 'common-lisp:boolean)
(common-lisp:deftype removed-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass replace-default-policy-version-params common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or policy-template-name common-lisp:null)
                         :accessor
                         struct-shape-replace-default-policy-version-params-template-name
                         :shape "PolicyTemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replace-default-policy-version-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replace-default-policy-version-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replace-default-policy-version-params
                    'make-replace-default-policy-version-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-default-policy-version-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-default-policy-version-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-default-policy-version-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replace-topic-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-replace-topic-rule-request-rule-name
                         :shape "RuleName" :location "uri" :location-name
                         "ruleName")
                        (topic-rule-payload :initarg :topic-rule-payload
                         :initform
                         (common-lisp:error ":topicrulepayload is required")
                         :type
                         (common-lisp:or topic-rule-payload common-lisp:null)
                         :accessor
                         struct-shape-replace-topic-rule-request-topic-rule-payload
                         :shape "TopicRulePayload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replace-topic-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replace-topic-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replace-topic-rule-request
                    'make-replace-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-rule-payload))
      (common-lisp:list
       (common-lisp:cons "topicRulePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'topic-rule-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass republish-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-republish-action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (topic :initarg :topic :initform
                         (common-lisp:error ":topic is required") :type
                         (common-lisp:or topic-pattern common-lisp:null)
                         :accessor struct-shape-republish-action-topic :shape
                         "TopicPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qos :initarg :qos :initform common-lisp:nil :type
                         (common-lisp:or qos common-lisp:null) :accessor
                         struct-shape-republish-action-qos :shape "Qos"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (headers :initarg :headers :initform common-lisp:nil
                         :type (common-lisp:or mqtt-headers common-lisp:null)
                         :accessor struct-shape-republish-action-headers :shape
                         "MqttHeaders" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-republish-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'republish-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'republish-action 'make-republish-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input republish-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input republish-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qos))
      (common-lisp:list
       (common-lisp:cons "qos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input republish-action))
   common-lisp:nil))
(common-lisp:deftype reserved-domain-configuration-name () 'common-lisp:string)
(common-lisp:deftype resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-id
                    'resource-already-exists-exception-resource-arn)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arns () 'common-lisp:hash-table)
 (common-lisp:defun make-resource-arns (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-attribute-key () 'common-lisp:string)
(common-lisp:deftype resource-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-resource-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-identifier common-lisp:nil
                       ((device-certificate-id :initarg :device-certificate-id
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-device-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificate-id :initarg :ca-certificate-id
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-ca-certificate-id
                         :shape "CertificateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-identity-pool-id :initarg
                         :cognito-identity-pool-id :initform common-lisp:nil
                         :type
                         (common-lisp:or cognito-identity-pool-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-cognito-identity-pool-id
                         :shape "CognitoIdentityPoolId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-resource-identifier-client-id :shape
                         "ClientId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-version-identifier :initarg
                         :policy-version-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or policy-version-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-policy-version-identifier
                         :shape "PolicyVersionIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account :initarg :account :initform common-lisp:nil
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-resource-identifier-account
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-resource-identifier-iam-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-alias-arn :initarg :role-alias-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias-arn common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-role-alias-arn :shape
                         "RoleAliasArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuer-certificate-identifier :initarg
                         :issuer-certificate-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or issuer-certificate-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-issuer-certificate-identifier
                         :shape "IssuerCertificateIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-certificate-arn :initarg
                         :device-certificate-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-device-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-identifier 'make-resource-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-certificate-id))
      (common-lisp:list
       (common-lisp:cons "deviceCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-id))
      (common-lisp:list
       (common-lisp:cons "caCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "cognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-version-identifier))
      (common-lisp:list
       (common-lisp:cons "policyVersionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "deviceCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-identifier))
   common-lisp:nil))
(common-lisp:deftype resource-logical-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-registration-failure-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-registration-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-registration-failure-exception
                    'resource-registration-failure-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype response-topic () 'common-lisp:string)
(common-lisp:deftype retry-attempt () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass retry-criteria common-lisp:nil
                       ((failure-type :initarg :failure-type :initform
                         (common-lisp:error ":failuretype is required") :type
                         (common-lisp:or retryable-failure-type
                                         common-lisp:null)
                         :accessor struct-shape-retry-criteria-failure-type
                         :shape "RetryableFailureType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (number-of-retries :initarg :number-of-retries
                         :initform
                         (common-lisp:error ":numberofretries is required")
                         :type
                         (common-lisp:or number-of-retries common-lisp:null)
                         :accessor
                         struct-shape-retry-criteria-number-of-retries :shape
                         "NumberOfRetries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retry-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retry-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'retry-criteria 'make-retry-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retry-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retry-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "failureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-retries))
      (common-lisp:list
       (common-lisp:cons "numberOfRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retry-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype retry-criteria-list ()
   '(trivial-types:proper-list retry-criteria))
 (common-lisp:defun make-retry-criteria-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retry-criteria))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retryable-failure-type () 'common-lisp:string)
(common-lisp:deftype role-alias () 'common-lisp:string)
(common-lisp:deftype role-alias-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass role-alias-description common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-role-alias-description-role-alias :shape
                         "RoleAlias" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-alias-arn :initarg :role-alias-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias-arn common-lisp:null)
                         :accessor
                         struct-shape-role-alias-description-role-alias-arn
                         :shape "RoleAliasArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-role-alias-description-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-role-alias-description-owner
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credential-duration-seconds :initarg
                         :credential-duration-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or credential-duration-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-role-alias-description-credential-duration-seconds
                         :shape "CredentialDurationSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-role-alias-description-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-role-alias-description-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role-alias-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role-alias-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'role-alias-description 'make-role-alias-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          role-alias-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          role-alias-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias))
      (common-lisp:list
       (common-lisp:cons "roleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credential-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "credentialDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          role-alias-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype role-aliases () '(trivial-types:proper-list role-alias))
 (common-lisp:defun make-role-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype rollout-rate-per-minute () 'common-lisp:integer)
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-s3action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucketname is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-s3action-bucket-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or key common-lisp:null) :accessor
                         struct-shape-s3action-key :shape "Key" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (canned-acl :initarg :canned-acl :initform
                         common-lisp:nil :type
                         (common-lisp:or canned-access-control-list
                                         common-lisp:null)
                         :accessor struct-shape-s3action-canned-acl :shape
                         "CannedAccessControlList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3action 'make-s3action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "cannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3action))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3destination common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-s3destination-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-s3destination-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3destination 'make-s3destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3destination))
   common-lisp:nil))
(common-lisp:deftype s3file-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3file-url-list ()
   '(trivial-types:proper-list s3file-url))
 (common-lisp:defun make-s3file-url-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3file-url))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-s3location-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-s3location-key :shape "S3Key" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or s3version common-lisp:null)
                         :accessor struct-shape-s3location-version :shape
                         "S3Version" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3version () 'common-lisp:string)
(common-lisp:deftype sql () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass salesforce-action common-lisp:nil
                       ((token :initarg :token :initform
                         (common-lisp:error ":token is required") :type
                         (common-lisp:or salesforce-token common-lisp:null)
                         :accessor struct-shape-salesforce-action-token :shape
                         "SalesforceToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or salesforce-endpoint common-lisp:null)
                         :accessor struct-shape-salesforce-action-url :shape
                         "SalesforceEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-salesforce-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'salesforce-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'salesforce-action 'make-salesforce-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input salesforce-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input salesforce-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input salesforce-action))
   common-lisp:nil))
(common-lisp:deftype salesforce-endpoint () 'common-lisp:string)
(common-lisp:deftype salesforce-token () 'common-lisp:string)
(common-lisp:deftype scheduled-audit-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-audit-metadata common-lisp:nil
                       ((scheduled-audit-name :initarg :scheduled-audit-name
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-scheduled-audit-metadata-scheduled-audit-name
                         :shape "ScheduledAuditName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduled-audit-arn :initarg :scheduled-audit-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-arn common-lisp:null)
                         :accessor
                         struct-shape-scheduled-audit-metadata-scheduled-audit-arn
                         :shape "ScheduledAuditArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (frequency :initarg :frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-frequency common-lisp:null)
                         :accessor
                         struct-shape-scheduled-audit-metadata-frequency :shape
                         "AuditFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-month :initarg :day-of-month :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor
                         struct-shape-scheduled-audit-metadata-day-of-month
                         :shape "DayOfMonth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-week :initarg :day-of-week :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor
                         struct-shape-scheduled-audit-metadata-day-of-week
                         :shape "DayOfWeek" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-audit-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-audit-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-audit-metadata 'make-scheduled-audit-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-audit-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-audit-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-audit-name))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-audit-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-audit-metadata-list ()
   '(trivial-types:proper-list scheduled-audit-metadata))
 (common-lisp:defun make-scheduled-audit-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-audit-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scheduled-audit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-job-rollout common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string-date-time common-lisp:null)
                         :accessor
                         struct-shape-scheduled-job-rollout-start-time :shape
                         "StringDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-job-rollout
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-job-rollout
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-job-rollout 'make-scheduled-job-rollout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-job-rollout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-job-rollout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-job-rollout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-job-rollout-list ()
   '(trivial-types:proper-list scheduled-job-rollout))
 (common-lisp:defun make-scheduled-job-rollout-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-job-rollout))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scheduling-config common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string-date-time common-lisp:null)
                         :accessor struct-shape-scheduling-config-start-time
                         :shape "StringDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type
                         (common-lisp:or string-date-time common-lisp:null)
                         :accessor struct-shape-scheduling-config-end-time
                         :shape "StringDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-behavior :initarg :end-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or job-end-behavior common-lisp:null)
                         :accessor struct-shape-scheduling-config-end-behavior
                         :shape "JobEndBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-windows :initarg :maintenance-windows
                         :initform common-lisp:nil :type
                         (common-lisp:or maintenance-windows common-lisp:null)
                         :accessor
                         struct-shape-scheduling-config-maintenance-windows
                         :shape "MaintenanceWindows" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduling-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduling-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduling-config 'make-scheduling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-behavior))
      (common-lisp:list
       (common-lisp:cons "endBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "maintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduling-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-index-request common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-search-index-request-index-name :shape
                         "IndexName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         (common-lisp:error ":querystring is required") :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-search-index-request-query-string :shape
                         "QueryString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-index-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or search-query-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-index-request-max-results :shape
                         "SearchQueryMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-search-index-request-query-version :shape
                         "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-index-request 'make-search-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-index-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-index-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (things :initarg :things :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-document-list common-lisp:null)
                         :accessor struct-shape-search-index-response-things
                         :shape "ThingDocumentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-groups :initarg :thing-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-document-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-index-response-thing-groups :shape
                         "ThingGroupDocumentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-index-response 'make-search-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups))
      (common-lisp:list
       (common-lisp:cons "thingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-index-response))
   common-lisp:nil))
(common-lisp:deftype search-query-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype searchable-attributes ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun make-searchable-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype seconds () 'common-lisp:integer)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-policy () 'common-lisp:string)
(common-lisp:deftype security-profile-arn () 'common-lisp:string)
(common-lisp:deftype security-profile-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass security-profile-identifier common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-security-profile-identifier-name :shape
                         "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or security-profile-arn common-lisp:null)
                         :accessor struct-shape-security-profile-identifier-arn
                         :shape "SecurityProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-profile-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'security-profile-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-profile-identifier
                    'make-security-profile-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-profile-identifiers ()
   '(trivial-types:proper-list security-profile-identifier))
 (common-lisp:defun make-security-profile-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass security-profile-target common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or security-profile-target-arn
                                         common-lisp:null)
                         :accessor struct-shape-security-profile-target-arn
                         :shape "SecurityProfileTargetArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-profile-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'security-profile-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-profile-target 'make-security-profile-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target))
   common-lisp:nil))
(common-lisp:deftype security-profile-target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass security-profile-target-mapping common-lisp:nil
                       ((security-profile-identifier :initarg
                         :security-profile-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or security-profile-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-security-profile-target-mapping-security-profile-identifier
                         :shape "SecurityProfileIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or security-profile-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-security-profile-target-mapping-target
                         :shape "SecurityProfileTarget" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-profile-target-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'security-profile-target-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-profile-target-mapping
                    'make-security-profile-target-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "securityProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-profile-target-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-profile-target-mappings ()
   '(trivial-types:proper-list security-profile-target-mapping))
 (common-lisp:defun make-security-profile-target-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-profile-target-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-profile-targets ()
   '(trivial-types:proper-list security-profile-target))
 (common-lisp:defun make-security-profile-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-profile-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype server-certificate-arns ()
   '(trivial-types:proper-list acm-certificate-arn))
 (common-lisp:defun make-server-certificate-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list acm-certificate-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-certificate-config common-lisp:nil
                       ((enable-ocspcheck :initarg :enable-ocspcheck :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-ocspcheck common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-config-enable-ocspcheck
                         :shape "EnableOCSPCheck" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-certificate-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'server-certificate-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-certificate-config
                    'make-server-certificate-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-ocspcheck))
      (common-lisp:list
       (common-lisp:cons "enableOCSPCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-config))
   common-lisp:nil))
(common-lisp:deftype server-certificate-status () 'common-lisp:string)
(common-lisp:deftype server-certificate-status-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-certificate-summary common-lisp:nil
                       ((server-certificate-arn :initarg
                         :server-certificate-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or acm-certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-summary-server-certificate-arn
                         :shape "AcmCertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificate-status :initarg
                         :server-certificate-status :initform common-lisp:nil
                         :type
                         (common-lisp:or server-certificate-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-summary-server-certificate-status
                         :shape "ServerCertificateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (server-certificate-status-detail :initarg
                         :server-certificate-status-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or server-certificate-status-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-summary-server-certificate-status-detail
                         :shape "ServerCertificateStatusDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-certificate-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'server-certificate-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-certificate-summary
                    'make-server-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "serverCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-status))
      (common-lisp:list
       (common-lisp:cons "serverCertificateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-status-detail))
      (common-lisp:list
       (common-lisp:cons "serverCertificateStatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-certificates ()
   '(trivial-types:proper-list server-certificate-summary))
 (common-lisp:defun make-server-certificates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-name () 'common-lisp:string)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype service-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype set-as-active () 'common-lisp:boolean)
(common-lisp:deftype set-as-active-flag () 'common-lisp:boolean)
(common-lisp:deftype set-as-default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass set-default-authorizer-request common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         (common-lisp:error ":authorizername is required")
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-set-default-authorizer-request-authorizer-name
                         :shape "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-default-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-default-authorizer-request
                    'make-set-default-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-default-authorizer-response common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-set-default-authorizer-response-authorizer-name
                         :shape "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-arn :initarg :authorizer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-arn common-lisp:null)
                         :accessor
                         struct-shape-set-default-authorizer-response-authorizer-arn
                         :shape "AuthorizerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-default-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-default-authorizer-response
                    'make-set-default-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-default-policy-version-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policyname is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-set-default-policy-version-request-policy-name
                         :shape "PolicyName" :location "uri" :location-name
                         "policyName")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policyversionid is required")
                         :type
                         (common-lisp:or policy-version-id common-lisp:null)
                         :accessor
                         struct-shape-set-default-policy-version-request-policy-version-id
                         :shape "PolicyVersionId" :location "uri"
                         :location-name "policyVersionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-default-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-logging-options-request common-lisp:nil
                       ((logging-options-payload :initarg
                         :logging-options-payload :initform
                         (common-lisp:error
                          ":loggingoptionspayload is required")
                         :type
                         (common-lisp:or logging-options-payload
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-logging-options-request-logging-options-payload
                         :shape "LoggingOptionsPayload" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-logging-options-request
                    'make-set-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-options-payload))
      (common-lisp:list
       (common-lisp:cons "loggingOptionsPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'logging-options-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass set-v2logging-level-request common-lisp:nil
                       ((log-target :initarg :log-target :initform
                         (common-lisp:error ":logtarget is required") :type
                         (common-lisp:or log-target common-lisp:null) :accessor
                         struct-shape-set-v2logging-level-request-log-target
                         :shape "LogTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-level :initarg :log-level :initform
                         (common-lisp:error ":loglevel is required") :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-set-v2logging-level-request-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-v2logging-level-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-v2logging-level-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-v2logging-level-request
                    'make-set-v2logging-level-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-level-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-target))
      (common-lisp:list
       (common-lisp:cons "logTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-level-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-v2logging-options-request common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor
                         struct-shape-set-v2logging-options-request-role-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-log-level :initarg :default-log-level
                         :initform common-lisp:nil :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         struct-shape-set-v2logging-options-request-default-log-level
                         :shape "LogLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-all-logs :initarg :disable-all-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or disable-all-logs common-lisp:null)
                         :accessor
                         struct-shape-set-v2logging-options-request-disable-all-logs
                         :shape "DisableAllLogs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-v2logging-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-v2logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-v2logging-options-request
                    'make-set-v2logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-log-level))
      (common-lisp:list
       (common-lisp:cons "defaultLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-all-logs))
      (common-lisp:list
       (common-lisp:cons "disableAllLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-v2logging-options-request))
   common-lisp:nil))
(common-lisp:deftype shadow-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sig-v4authorization common-lisp:nil
                       ((signing-region :initarg :signing-region :initform
                         (common-lisp:error ":signingregion is required") :type
                         (common-lisp:or signing-region common-lisp:null)
                         :accessor
                         struct-shape-sig-v4authorization-signing-region :shape
                         "SigningRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-sig-v4authorization-service-name :shape
                         "ServiceName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-sig-v4authorization-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sig-v4authorization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sig-v4authorization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sig-v4authorization 'make-sig-v4authorization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sig-v4authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sig-v4authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-region))
      (common-lisp:list
       (common-lisp:cons "signingRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sig-v4authorization))
   common-lisp:nil))
(common-lisp:deftype signature ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype signature-algorithm () 'common-lisp:string)
(common-lisp:deftype signing-job-id () 'common-lisp:string)
(common-lisp:deftype signing-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass signing-profile-parameter common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-signing-profile-parameter-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or platform common-lisp:null)
                         :accessor
                         struct-shape-signing-profile-parameter-platform :shape
                         "Platform" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-path-on-device :initarg
                         :certificate-path-on-device :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-path-on-device
                                         common-lisp:null)
                         :accessor
                         struct-shape-signing-profile-parameter-certificate-path-on-device
                         :shape "CertificatePathOnDevice" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-signing-profile-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'signing-profile-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'signing-profile-parameter
                    'make-signing-profile-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signing-profile-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signing-profile-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-path-on-device))
      (common-lisp:list
       (common-lisp:cons "certificatePathOnDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signing-profile-parameter))
   common-lisp:nil))
(common-lisp:deftype signing-region () 'common-lisp:string)
(common-lisp:deftype skipped-findings-count () 'common-lisp:integer)
(common-lisp:deftype skyfall-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass sns-action common-lisp:nil
                       ((target-arn :initarg :target-arn :initform
                         (common-lisp:error ":targetarn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-sns-action-target-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-sns-action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-format :initarg :message-format :initform
                         common-lisp:nil :type
                         (common-lisp:or message-format common-lisp:null)
                         :accessor struct-shape-sns-action-message-format
                         :shape "MessageFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sns-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sns-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sns-action 'make-sns-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "messageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-action))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition sql-parse-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       sql-parse-exception-message)))
 (common-lisp:export
  (common-lisp:list 'sql-parse-exception 'sql-parse-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sqs-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-sqs-action-role-arn :shape "AwsArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (queue-url :initarg :queue-url :initform
                         (common-lisp:error ":queueurl is required") :type
                         (common-lisp:or queue-url common-lisp:null) :accessor
                         struct-shape-sqs-action-queue-url :shape "QueueUrl"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-base64 :initarg :use-base64 :initform
                         common-lisp:nil :type
                         (common-lisp:or use-base64 common-lisp:null) :accessor
                         struct-shape-sqs-action-use-base64 :shape "UseBase64"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sqs-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sqs-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sqs-action 'make-sqs-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sqs-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sqs-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-url))
      (common-lisp:list
       (common-lisp:cons "queueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-base64))
      (common-lisp:list
       (common-lisp:cons "useBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sqs-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-audit-mitigation-actions-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-audit-mitigation-actions-task-request-task-id
                         :shape "MitigationActionsTaskId" :location "uri"
                         :location-name "taskId")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or audit-mitigation-actions-task-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-audit-mitigation-actions-task-request-target
                         :shape "AuditMitigationActionsTaskTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (audit-check-to-actions-mapping :initarg
                         :audit-check-to-actions-mapping :initform
                         (common-lisp:error
                          ":auditchecktoactionsmapping is required")
                         :type
                         (common-lisp:or audit-check-to-actions-mapping
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-audit-mitigation-actions-task-request-audit-check-to-actions-mapping
                         :shape "AuditCheckToActionsMapping" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error ":clientrequesttoken is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-audit-mitigation-actions-task-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-audit-mitigation-actions-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-audit-mitigation-actions-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-audit-mitigation-actions-task-request
                    'make-start-audit-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-to-actions-mapping))
      (common-lisp:list
       (common-lisp:cons "auditCheckToActionsMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-audit-mitigation-actions-task-response
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-audit-mitigation-actions-task-response-task-id
                         :shape "MitigationActionsTaskId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-audit-mitigation-actions-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-audit-mitigation-actions-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-audit-mitigation-actions-task-response
                    'make-start-audit-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-audit-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-detect-mitigation-actions-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-task-id
                         :shape "MitigationActionsTaskId" :location "uri"
                         :location-name "taskId")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or detect-mitigation-actions-task-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-target
                         :shape "DetectMitigationActionsTaskTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or
                          detect-mitigation-actions-to-execute-list
                          common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-actions
                         :shape "DetectMitigationActionsToExecuteList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (violation-event-occurrence-range :initarg
                         :violation-event-occurrence-range :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-event-occurrence-range
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-violation-event-occurrence-range
                         :shape "ViolationEventOccurrenceRange" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (include-only-active-violations :initarg
                         :include-only-active-violations :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-include-only-active-violations
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-suppressed-alerts :initarg
                         :include-suppressed-alerts :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-include-suppressed-alerts
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error ":clientrequesttoken is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-detect-mitigation-actions-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-detect-mitigation-actions-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-detect-mitigation-actions-task-request
                    'make-start-detect-mitigation-actions-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-occurrence-range))
      (common-lisp:list
       (common-lisp:cons "violationEventOccurrenceRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-only-active-violations))
      (common-lisp:list
       (common-lisp:cons "includeOnlyActiveViolations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-suppressed-alerts))
      (common-lisp:list
       (common-lisp:cons "includeSuppressedAlerts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-detect-mitigation-actions-task-response
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type
                         (common-lisp:or mitigation-actions-task-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-detect-mitigation-actions-task-response-task-id
                         :shape "MitigationActionsTaskId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-detect-mitigation-actions-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-detect-mitigation-actions-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-detect-mitigation-actions-task-response
                    'make-start-detect-mitigation-actions-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-detect-mitigation-actions-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-on-demand-audit-task-request common-lisp:nil
                       ((target-check-names :initarg :target-check-names
                         :initform
                         (common-lisp:error ":targetchecknames is required")
                         :type
                         (common-lisp:or target-audit-check-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-on-demand-audit-task-request-target-check-names
                         :shape "TargetAuditCheckNames" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-on-demand-audit-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-on-demand-audit-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-audit-task-request
                    'make-start-on-demand-audit-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-on-demand-audit-task-response common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or audit-task-id common-lisp:null)
                         :accessor
                         struct-shape-start-on-demand-audit-task-response-task-id
                         :shape "AuditTaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-on-demand-audit-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-on-demand-audit-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-audit-task-response
                    'make-start-on-demand-audit-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-audit-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-signing-job-parameter common-lisp:nil
                       ((signing-profile-parameter :initarg
                         :signing-profile-parameter :initform common-lisp:nil
                         :type
                         (common-lisp:or signing-profile-parameter
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-signing-job-parameter-signing-profile-parameter
                         :shape "SigningProfileParameter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (signing-profile-name :initarg :signing-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or signing-profile-name common-lisp:null)
                         :accessor
                         struct-shape-start-signing-job-parameter-signing-profile-name
                         :shape "SigningProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor
                         struct-shape-start-signing-job-parameter-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-signing-job-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-signing-job-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-signing-job-parameter
                    'make-start-signing-job-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-signing-job-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-signing-job-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-parameter))
      (common-lisp:list
       (common-lisp:cons "signingProfileParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-profile-name))
      (common-lisp:list
       (common-lisp:cons "signingProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-signing-job-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-thing-registration-task-request common-lisp:nil
                       ((template-body :initarg :template-body :initform
                         (common-lisp:error ":templatebody is required") :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-start-thing-registration-task-request-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-file-bucket :initarg :input-file-bucket
                         :initform
                         (common-lisp:error ":inputfilebucket is required")
                         :type
                         (common-lisp:or registry-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-thing-registration-task-request-input-file-bucket
                         :shape "RegistryS3BucketName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-file-key :initarg :input-file-key :initform
                         (common-lisp:error ":inputfilekey is required") :type
                         (common-lisp:or registry-s3key-name common-lisp:null)
                         :accessor
                         struct-shape-start-thing-registration-task-request-input-file-key
                         :shape "RegistryS3KeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-start-thing-registration-task-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-thing-registration-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-thing-registration-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-thing-registration-task-request
                    'make-start-thing-registration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-bucket))
      (common-lisp:list
       (common-lisp:cons "inputFileBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-file-key))
      (common-lisp:list
       (common-lisp:cons "inputFileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-thing-registration-task-response common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or task-id common-lisp:null)
                         :accessor
                         struct-shape-start-thing-registration-task-response-task-id
                         :shape "TaskId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-thing-registration-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-thing-registration-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-thing-registration-task-response
                    'make-start-thing-registration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-thing-registration-task-response))
   common-lisp:nil))
(common-lisp:deftype state-machine-name () 'common-lisp:string)
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype state-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass statistical-threshold common-lisp:nil
                       ((statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-statistic common-lisp:null)
                         :accessor struct-shape-statistical-threshold-statistic
                         :shape "EvaluationStatistic" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statistical-threshold
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statistical-threshold
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'statistical-threshold 'make-statistical-threshold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          statistical-threshold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          statistical-threshold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          statistical-threshold))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass statistics common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-statistics-count :shape "Count" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (average :initarg :average :initform common-lisp:nil
                         :type (common-lisp:or average common-lisp:null)
                         :accessor struct-shape-statistics-average :shape
                         "Average" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sum :initarg :sum :initform common-lisp:nil :type
                         (common-lisp:or sum common-lisp:null) :accessor
                         struct-shape-statistics-sum :shape "Sum" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (minimum :initarg :minimum :initform common-lisp:nil
                         :type (common-lisp:or minimum common-lisp:null)
                         :accessor struct-shape-statistics-minimum :shape
                         "Minimum" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maximum :initarg :maximum :initform common-lisp:nil
                         :type (common-lisp:or maximum common-lisp:null)
                         :accessor struct-shape-statistics-maximum :shape
                         "Maximum" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sum-of-squares :initarg :sum-of-squares :initform
                         common-lisp:nil :type
                         (common-lisp:or sum-of-squares common-lisp:null)
                         :accessor struct-shape-statistics-sum-of-squares
                         :shape "SumOfSquares" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (variance :initarg :variance :initform common-lisp:nil
                         :type (common-lisp:or variance common-lisp:null)
                         :accessor struct-shape-statistics-variance :shape
                         "Variance" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (std-deviation :initarg :std-deviation :initform
                         common-lisp:nil :type
                         (common-lisp:or std-deviation common-lisp:null)
                         :accessor struct-shape-statistics-std-deviation :shape
                         "StdDeviation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'statistics 'make-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average))
      (common-lisp:list
       (common-lisp:cons "average"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-of-squares))
      (common-lisp:list
       (common-lisp:cons "sumOfSquares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variance))
      (common-lisp:list
       (common-lisp:cons "variance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-deviation))
      (common-lisp:list
       (common-lisp:cons "stdDeviation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype std-deviation () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass step-functions-action common-lisp:nil
                       ((execution-name-prefix :initarg :execution-name-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-name-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-step-functions-action-execution-name-prefix
                         :shape "ExecutionNamePrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state-machine-name :initarg :state-machine-name
                         :initform
                         (common-lisp:error ":statemachinename is required")
                         :type
                         (common-lisp:or state-machine-name common-lisp:null)
                         :accessor
                         struct-shape-step-functions-action-state-machine-name
                         :shape "StateMachineName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-step-functions-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-step-functions-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'step-functions-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'step-functions-action 'make-step-functions-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-functions-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-functions-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-name-prefix))
      (common-lisp:list
       (common-lisp:cons "executionNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-name))
      (common-lisp:list
       (common-lisp:cons "stateMachineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-functions-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-thing-registration-task-request common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         struct-shape-stop-thing-registration-task-request-task-id
                         :shape "TaskId" :location "uri" :location-name
                         "taskId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-thing-registration-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-thing-registration-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-thing-registration-task-request
                    'make-stop-thing-registration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-thing-registration-task-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-thing-registration-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-thing-registration-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-thing-registration-task-response
                    'make-stop-thing-registration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-thing-registration-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-stream-stream-id :shape "StreamId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-id :initarg :file-id :initform common-lisp:nil
                         :type (common-lisp:or file-id common-lisp:null)
                         :accessor struct-shape-stream-file-id :shape "FileId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stream 'make-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-id))
      (common-lisp:list
       (common-lisp:cons "fileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream))
   common-lisp:nil))
(common-lisp:deftype stream-arn () 'common-lisp:string)
(common-lisp:deftype stream-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-file common-lisp:nil
                       ((file-id :initarg :file-id :initform common-lisp:nil
                         :type (common-lisp:or file-id common-lisp:null)
                         :accessor struct-shape-stream-file-file-id :shape
                         "FileId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-stream-file-s3location :shape
                         "S3Location" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-file
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-file
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stream-file 'make-stream-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-id))
      (common-lisp:list
       (common-lisp:cons "fileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-file))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stream-files () '(trivial-types:proper-list stream-file))
 (common-lisp:defun make-stream-files
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-file))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stream-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-info common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-stream-info-stream-id :shape "StreamId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-stream-info-stream-arn :shape "StreamArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-version :initarg :stream-version :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-version common-lisp:null)
                         :accessor struct-shape-stream-info-stream-version
                         :shape "StreamVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor struct-shape-stream-info-description :shape
                         "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (files :initarg :files :initform common-lisp:nil :type
                         (common-lisp:or stream-files common-lisp:null)
                         :accessor struct-shape-stream-info-files :shape
                         "StreamFiles" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-stream-info-created-at :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-stream-info-last-updated-at :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-stream-info-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stream-info 'make-stream-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-info))
   common-lisp:nil))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-summary common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-stream-summary-stream-id :shape
                         "StreamId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-stream-summary-stream-arn :shape
                         "StreamArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-version :initarg :stream-version :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-version common-lisp:null)
                         :accessor struct-shape-stream-summary-stream-version
                         :shape "StreamVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor struct-shape-stream-summary-description
                         :shape "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stream-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stream-summary 'make-stream-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-summary))
   common-lisp:nil))
(common-lisp:deftype stream-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype streams-summary ()
   '(trivial-types:proper-list stream-summary))
 (common-lisp:defun make-streams-summary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list |stringValue|))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |stringValue|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype succeeded-findings-count () 'common-lisp:integer)
(common-lisp:deftype succeeded-things () 'common-lisp:integer)
(common-lisp:deftype sum () 'common-lisp:double-float)
(common-lisp:deftype sum-of-squares () 'common-lisp:double-float)
(common-lisp:deftype suppress-alerts () 'common-lisp:boolean)
(common-lisp:deftype suppress-indefinitely () 'common-lisp:boolean)
(common-lisp:deftype suppressed-non-compliant-resources-count ()
  'common-lisp:integer)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-audit-check-names ()
   '(trivial-types:proper-list audit-check-name))
 (common-lisp:defun make-target-audit-check-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audit-check-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-field-name () 'common-lisp:string)
(common-lisp:deftype target-field-order () 'common-lisp:string)
(common-lisp:deftype target-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-violation-ids-for-detect-mitigation-actions ()
   '(trivial-types:proper-list violation-id))
 (common-lisp:defun make-target-violation-ids-for-detect-mitigation-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list violation-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype targets () '(trivial-types:proper-list target))
 (common-lisp:defun make-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition task-already-exists-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       task-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'task-already-exists-exception
                    'task-already-exists-exception-message)))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-id-list () '(trivial-types:proper-list task-id))
 (common-lisp:defun make-task-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass task-statistics common-lisp:nil
                       ((total-checks :initarg :total-checks :initform
                         common-lisp:nil :type
                         (common-lisp:or total-checks-count common-lisp:null)
                         :accessor struct-shape-task-statistics-total-checks
                         :shape "TotalChecksCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (in-progress-checks :initarg :in-progress-checks
                         :initform common-lisp:nil :type
                         (common-lisp:or in-progress-checks-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-in-progress-checks :shape
                         "InProgressChecksCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (waiting-for-data-collection-checks :initarg
                         :waiting-for-data-collection-checks :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          waiting-for-data-collection-checks-count
                          common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-waiting-for-data-collection-checks
                         :shape "WaitingForDataCollectionChecksCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliant-checks :initarg :compliant-checks :initform
                         common-lisp:nil :type
                         (common-lisp:or compliant-checks-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-compliant-checks :shape
                         "CompliantChecksCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-compliant-checks :initarg :non-compliant-checks
                         :initform common-lisp:nil :type
                         (common-lisp:or non-compliant-checks-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-non-compliant-checks
                         :shape "NonCompliantChecksCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failed-checks :initarg :failed-checks :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-checks-count common-lisp:null)
                         :accessor struct-shape-task-statistics-failed-checks
                         :shape "FailedChecksCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (canceled-checks :initarg :canceled-checks :initform
                         common-lisp:nil :type
                         (common-lisp:or canceled-checks-count
                                         common-lisp:null)
                         :accessor struct-shape-task-statistics-canceled-checks
                         :shape "CanceledChecksCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task-statistics 'make-task-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-checks))
      (common-lisp:list
       (common-lisp:cons "totalChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress-checks))
      (common-lisp:list
       (common-lisp:cons "inProgressChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'waiting-for-data-collection-checks))
      (common-lisp:list
       (common-lisp:cons "waitingForDataCollectionChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-checks))
      (common-lisp:list
       (common-lisp:cons "compliantChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-checks))
      (common-lisp:list
       (common-lisp:cons "nonCompliantChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-checks))
      (common-lisp:list
       (common-lisp:cons "failedChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canceled-checks))
      (common-lisp:list
       (common-lisp:cons "canceledChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-statistics-for-audit-check common-lisp:nil
                       ((total-findings-count :initarg :total-findings-count
                         :initform common-lisp:nil :type
                         (common-lisp:or total-findings-count common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-for-audit-check-total-findings-count
                         :shape "TotalFindingsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-findings-count :initarg :failed-findings-count
                         :initform common-lisp:nil :type
                         (common-lisp:or failed-findings-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-for-audit-check-failed-findings-count
                         :shape "FailedFindingsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (succeeded-findings-count :initarg
                         :succeeded-findings-count :initform common-lisp:nil
                         :type
                         (common-lisp:or succeeded-findings-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-for-audit-check-succeeded-findings-count
                         :shape "SucceededFindingsCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (skipped-findings-count :initarg
                         :skipped-findings-count :initform common-lisp:nil
                         :type
                         (common-lisp:or skipped-findings-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-for-audit-check-skipped-findings-count
                         :shape "SkippedFindingsCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (canceled-findings-count :initarg
                         :canceled-findings-count :initform common-lisp:nil
                         :type
                         (common-lisp:or canceled-findings-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-statistics-for-audit-check-canceled-findings-count
                         :shape "CanceledFindingsCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-statistics-for-audit-check
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-statistics-for-audit-check
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-statistics-for-audit-check
                    'make-task-statistics-for-audit-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-statistics-for-audit-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-statistics-for-audit-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-findings-count))
      (common-lisp:list
       (common-lisp:cons "totalFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-findings-count))
      (common-lisp:list
       (common-lisp:cons "failedFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'succeeded-findings-count))
      (common-lisp:list
       (common-lisp:cons "succeededFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skipped-findings-count))
      (common-lisp:list
       (common-lisp:cons "skippedFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canceled-findings-count))
      (common-lisp:list
       (common-lisp:cons "canceledFindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-statistics-for-audit-check))
   common-lisp:nil))
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:deftype template-body () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:deftype template-version-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass terms-aggregation common-lisp:nil
                       ((max-buckets :initarg :max-buckets :initform
                         common-lisp:nil :type
                         (common-lisp:or max-buckets common-lisp:null)
                         :accessor struct-shape-terms-aggregation-max-buckets
                         :shape "MaxBuckets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terms-aggregation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'terms-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terms-aggregation 'make-terms-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terms-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terms-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-buckets))
      (common-lisp:list
       (common-lisp:cons "maxBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terms-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-authorization-request common-lisp:nil
                       ((principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-test-authorization-request-principal
                         :shape "Principal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-identity-pool-id :initarg
                         :cognito-identity-pool-id :initform common-lisp:nil
                         :type
                         (common-lisp:or cognito-identity-pool-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-authorization-request-cognito-identity-pool-id
                         :shape "CognitoIdentityPoolId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-infos :initarg :auth-infos :initform
                         (common-lisp:error ":authinfos is required") :type
                         (common-lisp:or auth-infos common-lisp:null) :accessor
                         struct-shape-test-authorization-request-auth-infos
                         :shape "AuthInfos" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-test-authorization-request-client-id
                         :shape "ClientId" :location "querystring"
                         :location-name "clientId")
                        (policy-names-to-add :initarg :policy-names-to-add
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor
                         struct-shape-test-authorization-request-policy-names-to-add
                         :shape "PolicyNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-names-to-skip :initarg :policy-names-to-skip
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor
                         struct-shape-test-authorization-request-policy-names-to-skip
                         :shape "PolicyNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-authorization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-authorization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-authorization-request
                    'make-test-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "cognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-infos))
      (common-lisp:list
       (common-lisp:cons "authInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names-to-add))
      (common-lisp:list
       (common-lisp:cons "policyNamesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-names-to-skip))
      (common-lisp:list
       (common-lisp:cons "policyNamesToSkip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-authorization-response common-lisp:nil
                       ((auth-results :initarg :auth-results :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-results common-lisp:null)
                         :accessor
                         struct-shape-test-authorization-response-auth-results
                         :shape "AuthResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-authorization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-authorization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-authorization-response
                    'make-test-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-results))
      (common-lisp:list
       (common-lisp:cons "authResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-authorization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-invoke-authorizer-request common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         (common-lisp:error ":authorizername is required")
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-request-authorizer-name
                         :shape "AuthorizerName" :location "uri" :location-name
                         "authorizerName")
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-test-invoke-authorizer-request-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-signature :initarg :token-signature :initform
                         common-lisp:nil :type
                         (common-lisp:or token-signature common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-request-token-signature
                         :shape "TokenSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-context :initarg :http-context :initform
                         common-lisp:nil :type
                         (common-lisp:or http-context common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-request-http-context
                         :shape "HttpContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mqtt-context :initarg :mqtt-context :initform
                         common-lisp:nil :type
                         (common-lisp:or mqtt-context common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-request-mqtt-context
                         :shape "MqttContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls-context :initarg :tls-context :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-context common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-request-tls-context
                         :shape "TlsContext" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-invoke-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-invoke-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-invoke-authorizer-request
                    'make-test-invoke-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-signature))
      (common-lisp:list
       (common-lisp:cons "tokenSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-context))
      (common-lisp:list
       (common-lisp:cons "httpContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mqtt-context))
      (common-lisp:list
       (common-lisp:cons "mqttContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-context))
      (common-lisp:list
       (common-lisp:cons "tlsContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-invoke-authorizer-response common-lisp:nil
                       ((is-authenticated :initarg :is-authenticated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-authenticated common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-response-is-authenticated
                         :shape "IsAuthenticated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-id :initarg :principal-id :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-id common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-response-principal-id
                         :shape "PrincipalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-documents :initarg :policy-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-documents common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-response-policy-documents
                         :shape "PolicyDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh-after-in-seconds :initarg
                         :refresh-after-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or seconds common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-response-refresh-after-in-seconds
                         :shape "Seconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disconnect-after-in-seconds :initarg
                         :disconnect-after-in-seconds :initform common-lisp:nil
                         :type (common-lisp:or seconds common-lisp:null)
                         :accessor
                         struct-shape-test-invoke-authorizer-response-disconnect-after-in-seconds
                         :shape "Seconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-invoke-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-invoke-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-invoke-authorizer-response
                    'make-test-invoke-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-authenticated))
      (common-lisp:list
       (common-lisp:cons "isAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "principalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-documents))
      (common-lisp:list
       (common-lisp:cons "policyDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-after-in-seconds))
      (common-lisp:list
       (common-lisp:cons "refreshAfterInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-after-in-seconds))
      (common-lisp:list
       (common-lisp:cons "disconnectAfterInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-invoke-authorizer-response))
   common-lisp:nil))
(common-lisp:deftype thing-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-attribute common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-thing-attribute-thing-name :shape
                         "ThingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor struct-shape-thing-attribute-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-arn :initarg :thing-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         struct-shape-thing-attribute-thing-arn :shape
                         "ThingArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-thing-attribute-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-thing-attribute-version :shape
                         "Version" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'thing-attribute 'make-thing-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-attribute-list ()
   '(trivial-types:proper-list thing-attribute))
 (common-lisp:defun make-thing-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass thing-connectivity common-lisp:nil
                       ((connected :initarg :connected :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-thing-connectivity-connected :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or connectivity-timestamp
                                         common-lisp:null)
                         :accessor struct-shape-thing-connectivity-timestamp
                         :shape "ConnectivityTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (disconnect-reason :initarg :disconnect-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or disconnect-reason common-lisp:null)
                         :accessor
                         struct-shape-thing-connectivity-disconnect-reason
                         :shape "DisconnectReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-connectivity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-connectivity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-connectivity 'make-thing-connectivity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-connectivity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-connectivity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected))
      (common-lisp:list
       (common-lisp:cons "connected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disconnect-reason))
      (common-lisp:list
       (common-lisp:cons "disconnectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-connectivity))
   common-lisp:nil))
(common-lisp:deftype thing-connectivity-indexing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-document common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-thing-document-thing-name :shape
                         "ThingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-id :initarg :thing-id :initform common-lisp:nil
                         :type (common-lisp:or thing-id common-lisp:null)
                         :accessor struct-shape-thing-document-thing-id :shape
                         "ThingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor struct-shape-thing-document-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-names :initarg :thing-group-names
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-document-thing-group-names :shape
                         "ThingGroupNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-thing-document-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shadow :initarg :shadow :initform common-lisp:nil
                         :type (common-lisp:or json-document common-lisp:null)
                         :accessor struct-shape-thing-document-shadow :shape
                         "JsonDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-defender :initarg :device-defender :initform
                         common-lisp:nil :type
                         (common-lisp:or json-document common-lisp:null)
                         :accessor struct-shape-thing-document-device-defender
                         :shape "JsonDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connectivity :initarg :connectivity :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-connectivity common-lisp:null)
                         :accessor struct-shape-thing-document-connectivity
                         :shape "ThingConnectivity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'thing-document 'make-thing-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-id))
      (common-lisp:list
       (common-lisp:cons "thingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-names))
      (common-lisp:list
       (common-lisp:cons "thingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow))
      (common-lisp:list
       (common-lisp:cons "shadow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-defender))
      (common-lisp:list
       (common-lisp:cons "deviceDefender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity))
      (common-lisp:list
       (common-lisp:cons "connectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-document-list ()
   '(trivial-types:proper-list thing-document))
 (common-lisp:defun make-thing-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-group-arn () 'common-lisp:string)
(common-lisp:deftype thing-group-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-group-document common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-thing-group-document-thing-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-id :initarg :thing-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-id common-lisp:null)
                         :accessor
                         struct-shape-thing-group-document-thing-group-id
                         :shape "ThingGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-group-description :initarg
                         :thing-group-description :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-group-document-thing-group-description
                         :shape "ThingGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-thing-group-document-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-group-names :initarg :parent-group-names
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-group-document-parent-group-names
                         :shape "ThingGroupNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-group-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-group-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-group-document 'make-thing-group-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-group-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-group-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-name))
      (common-lisp:list
       (common-lisp:cons "thingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-group-id))
      (common-lisp:list
       (common-lisp:cons "thingGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-description))
      (common-lisp:list
       (common-lisp:cons "thingGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-names))
      (common-lisp:list
       (common-lisp:cons "parentGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-group-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-group-document-list ()
   '(trivial-types:proper-list thing-group-document))
 (common-lisp:defun make-thing-group-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-document))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-group-indexing-configuration common-lisp:nil
                       ((thing-group-indexing-mode :initarg
                         :thing-group-indexing-mode :initform
                         (common-lisp:error
                          ":thinggroupindexingmode is required")
                         :type
                         (common-lisp:or thing-group-indexing-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-group-indexing-configuration-thing-group-indexing-mode
                         :shape "ThingGroupIndexingMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (managed-fields :initarg :managed-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or fields common-lisp:null) :accessor
                         struct-shape-thing-group-indexing-configuration-managed-fields
                         :shape "Fields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-fields :initarg :custom-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or fields common-lisp:null) :accessor
                         struct-shape-thing-group-indexing-configuration-custom-fields
                         :shape "Fields" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-group-indexing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'thing-group-indexing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-group-indexing-configuration
                    'make-thing-group-indexing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-indexing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-indexing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "thingGroupIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-fields))
      (common-lisp:list
       (common-lisp:cons "managedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-fields))
      (common-lisp:list
       (common-lisp:cons "customFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-indexing-configuration))
   common-lisp:nil))
(common-lisp:deftype thing-group-indexing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-group-list ()
   '(trivial-types:proper-list thing-group-name))
 (common-lisp:defun make-thing-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass thing-group-metadata common-lisp:nil
                       ((parent-group-name :initarg :parent-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-thing-group-metadata-parent-group-name
                         :shape "ThingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root-to-parent-thing-groups :initarg
                         :root-to-parent-thing-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-name-and-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-group-metadata-root-to-parent-thing-groups
                         :shape "ThingGroupNameAndArnList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-thing-group-metadata-creation-date :shape
                         "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-group-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-group-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-group-metadata 'make-thing-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-group-name))
      (common-lisp:list
       (common-lisp:cons "parentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-to-parent-thing-groups))
      (common-lisp:list
       (common-lisp:cons "rootToParentThingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-group-metadata))
   common-lisp:nil))
(common-lisp:deftype thing-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-group-name-and-arn-list ()
   '(trivial-types:proper-list group-name-and-arn))
 (common-lisp:defun make-thing-group-name-and-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-name-and-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype thing-group-name-list ()
   '(trivial-types:proper-list thing-group-name))
 (common-lisp:defun make-thing-group-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype thing-group-names ()
   '(trivial-types:proper-list thing-group-name))
 (common-lisp:defun make-thing-group-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass thing-group-properties common-lisp:nil
                       ((thing-group-description :initarg
                         :thing-group-description :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-group-properties-thing-group-description
                         :shape "ThingGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-payload :initarg :attribute-payload
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-payload common-lisp:null)
                         :accessor
                         struct-shape-thing-group-properties-attribute-payload
                         :shape "AttributePayload" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-group-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-group-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-group-properties 'make-thing-group-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-description))
      (common-lisp:list
       (common-lisp:cons "thingGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-group-properties))
   common-lisp:nil))
(common-lisp:deftype thing-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-indexing-configuration common-lisp:nil
                       ((thing-indexing-mode :initarg :thing-indexing-mode
                         :initform
                         (common-lisp:error ":thingindexingmode is required")
                         :type
                         (common-lisp:or thing-indexing-mode common-lisp:null)
                         :accessor
                         struct-shape-thing-indexing-configuration-thing-indexing-mode
                         :shape "ThingIndexingMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-connectivity-indexing-mode :initarg
                         :thing-connectivity-indexing-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-connectivity-indexing-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-indexing-configuration-thing-connectivity-indexing-mode
                         :shape "ThingConnectivityIndexingMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-defender-indexing-mode :initarg
                         :device-defender-indexing-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-indexing-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-indexing-configuration-device-defender-indexing-mode
                         :shape "DeviceDefenderIndexingMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (named-shadow-indexing-mode :initarg
                         :named-shadow-indexing-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or named-shadow-indexing-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-indexing-configuration-named-shadow-indexing-mode
                         :shape "NamedShadowIndexingMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (managed-fields :initarg :managed-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or fields common-lisp:null) :accessor
                         struct-shape-thing-indexing-configuration-managed-fields
                         :shape "Fields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-fields :initarg :custom-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or fields common-lisp:null) :accessor
                         struct-shape-thing-indexing-configuration-custom-fields
                         :shape "Fields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or indexing-filter common-lisp:null)
                         :accessor
                         struct-shape-thing-indexing-configuration-filter
                         :shape "IndexingFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-indexing-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-indexing-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-indexing-configuration
                    'make-thing-indexing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-indexing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-indexing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "thingIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-connectivity-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "thingConnectivityIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-defender-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "deviceDefenderIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'named-shadow-indexing-mode))
      (common-lisp:list
       (common-lisp:cons "namedShadowIndexingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-fields))
      (common-lisp:list
       (common-lisp:cons "managedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-fields))
      (common-lisp:list
       (common-lisp:cons "customFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-indexing-configuration))
   common-lisp:nil))
(common-lisp:deftype thing-indexing-mode () 'common-lisp:string)
(common-lisp:deftype thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-name-list ()
   '(trivial-types:proper-list thing-name))
 (common-lisp:defun make-thing-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-type-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-type-definition common-lisp:nil
                       ((thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-thing-type-definition-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-arn :initarg :thing-type-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-arn common-lisp:null)
                         :accessor
                         struct-shape-thing-type-definition-thing-type-arn
                         :shape "ThingTypeArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-properties :initarg :thing-type-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-type-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-type-definition-thing-type-properties
                         :shape "ThingTypeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-type-metadata :initarg :thing-type-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-type-metadata common-lisp:null)
                         :accessor
                         struct-shape-thing-type-definition-thing-type-metadata
                         :shape "ThingTypeMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-type-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-type-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-type-definition 'make-thing-type-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-metadata))
      (common-lisp:list
       (common-lisp:cons "thingTypeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   common-lisp:nil))
(common-lisp:deftype thing-type-description () 'common-lisp:string)
(common-lisp:deftype thing-type-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-type-list ()
   '(trivial-types:proper-list thing-type-definition))
 (common-lisp:defun make-thing-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-type-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass thing-type-metadata common-lisp:nil
                       ((deprecated :initarg :deprecated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-thing-type-metadata-deprecated :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecation-date :initarg :deprecation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or deprecation-date common-lisp:null)
                         :accessor
                         struct-shape-thing-type-metadata-deprecation-date
                         :shape "DeprecationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-thing-type-metadata-creation-date :shape
                         "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-type-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-type-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-type-metadata 'make-thing-type-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecated))
      (common-lisp:list
       (common-lisp:cons "deprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-date))
      (common-lisp:list
       (common-lisp:cons "deprecationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   common-lisp:nil))
(common-lisp:deftype thing-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thing-type-properties common-lisp:nil
                       ((thing-type-description :initarg
                         :thing-type-description :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-type-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-type-properties-thing-type-description
                         :shape "ThingTypeDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (searchable-attributes :initarg :searchable-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or searchable-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-thing-type-properties-searchable-attributes
                         :shape "SearchableAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-thing-type-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'thing-type-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'thing-type-properties 'make-thing-type-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-description))
      (common-lisp:list
       (common-lisp:cons "thingTypeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searchable-attributes))
      (common-lisp:list
       (common-lisp:cons "searchableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timed-out-things () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass timeout-config common-lisp:nil
                       ((in-progress-timeout-in-minutes :initarg
                         :in-progress-timeout-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or in-progress-timeout-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-timeout-config-in-progress-timeout-in-minutes
                         :shape "InProgressTimeoutInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timeout-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timeout-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'timeout-config 'make-timeout-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timeout-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timeout-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-progress-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "inProgressTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timeout-config))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestream-action common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-timestream-action-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":databasename is required") :type
                         (common-lisp:or timestream-database-name
                                         common-lisp:null)
                         :accessor struct-shape-timestream-action-database-name
                         :shape "TimestreamDatabaseName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":tablename is required") :type
                         (common-lisp:or timestream-table-name
                                         common-lisp:null)
                         :accessor struct-shape-timestream-action-table-name
                         :shape "TimestreamTableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimensions :initarg :dimensions :initform
                         (common-lisp:error ":dimensions is required") :type
                         (common-lisp:or timestream-dimension-list
                                         common-lisp:null)
                         :accessor struct-shape-timestream-action-dimensions
                         :shape "TimestreamDimensionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestream-timestamp common-lisp:null)
                         :accessor struct-shape-timestream-action-timestamp
                         :shape "TimestreamTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-action 'make-timestream-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-action))
   common-lisp:nil))
(common-lisp:deftype timestream-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestream-dimension common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or timestream-dimension-name
                                         common-lisp:null)
                         :accessor struct-shape-timestream-dimension-name
                         :shape "TimestreamDimensionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or timestream-dimension-value
                                         common-lisp:null)
                         :accessor struct-shape-timestream-dimension-value
                         :shape "TimestreamDimensionValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-dimension 'make-timestream-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype timestream-dimension-list ()
   '(trivial-types:proper-list timestream-dimension))
 (common-lisp:defun make-timestream-dimension-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestream-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestream-dimension-name () 'common-lisp:string)
(common-lisp:deftype timestream-dimension-value () 'common-lisp:string)
(common-lisp:deftype timestream-table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestream-timestamp common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or timestream-timestamp-value
                                         common-lisp:null)
                         :accessor struct-shape-timestream-timestamp-value
                         :shape "TimestreamTimestampValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unit :initarg :unit :initform
                         (common-lisp:error ":unit is required") :type
                         (common-lisp:or timestream-timestamp-unit
                                         common-lisp:null)
                         :accessor struct-shape-timestream-timestamp-unit
                         :shape "TimestreamTimestampUnit" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-timestamp
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-timestamp
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-timestamp 'make-timestream-timestamp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-timestamp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-timestamp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-timestamp))
   common-lisp:nil))
(common-lisp:deftype timestream-timestamp-unit () 'common-lisp:string)
(common-lisp:deftype timestream-timestamp-value () 'common-lisp:string)
(common-lisp:deftype tiny-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass tls-config common-lisp:nil
                       ((security-policy :initarg :security-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or security-policy common-lisp:null)
                         :accessor struct-shape-tls-config-security-policy
                         :shape "SecurityPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tls-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tls-config 'make-tls-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tls-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tls-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-policy))
      (common-lisp:list
       (common-lisp:cons "securityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tls-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-context common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or server-name common-lisp:null)
                         :accessor struct-shape-tls-context-server-name :shape
                         "ServerName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tls-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tls-context 'make-tls-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tls-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tls-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "serverName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tls-context))
   common-lisp:nil))
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype token-key-name () 'common-lisp:string)
(common-lisp:deftype token-signature () 'common-lisp:string)
(common-lisp:deftype topic () 'common-lisp:string)
(common-lisp:deftype topic-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass topic-rule common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-topic-rule-rule-name :shape "RuleName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql :initarg :sql :initform common-lisp:nil :type
                         (common-lisp:or sql common-lisp:null) :accessor
                         struct-shape-topic-rule-sql :shape "SQL" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-topic-rule-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at-date common-lisp:null)
                         :accessor struct-shape-topic-rule-created-at :shape
                         "CreatedAtDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-topic-rule-actions :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-disabled :initarg :rule-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or is-disabled common-lisp:null)
                         :accessor struct-shape-topic-rule-rule-disabled :shape
                         "IsDisabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-iot-sql-version :initarg :aws-iot-sql-version
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-iot-sql-version common-lisp:null)
                         :accessor struct-shape-topic-rule-aws-iot-sql-version
                         :shape "AwsIotSqlVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-action :initarg :error-action :initform
                         common-lisp:nil :type
                         (common-lisp:or action common-lisp:null) :accessor
                         struct-shape-topic-rule-error-action :shape "Action"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'topic-rule 'make-topic-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-sql-version))
      (common-lisp:list
       (common-lisp:cons "awsIotSqlVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-action))
      (common-lisp:list
       (common-lisp:cons "errorAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass topic-rule-destination common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-topic-rule-destination-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or topic-rule-destination-status
                                         common-lisp:null)
                         :accessor struct-shape-topic-rule-destination-status
                         :shape "TopicRuleDestinationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at-date common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-created-at :shape
                         "CreatedAtDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated-at-date common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-last-updated-at
                         :shape "LastUpdatedAtDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-topic-rule-destination-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-url-properties :initarg :http-url-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or http-url-destination-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-http-url-properties
                         :shape "HttpUrlDestinationProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-properties :initarg :vpc-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-destination-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-vpc-properties
                         :shape "VpcDestinationProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-rule-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-rule-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-rule-destination 'make-topic-rule-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-url-properties))
      (common-lisp:list
       (common-lisp:cons "httpUrlProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-properties))
      (common-lisp:list
       (common-lisp:cons "vpcProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass topic-rule-destination-configuration common-lisp:nil
                       ((http-url-configuration :initarg
                         :http-url-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or http-url-destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-configuration-http-url-configuration
                         :shape "HttpUrlDestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-destination-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-configuration-vpc-configuration
                         :shape "VpcDestinationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-rule-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'topic-rule-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-rule-destination-configuration
                    'make-topic-rule-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-url-configuration))
      (common-lisp:list
       (common-lisp:cons "httpUrlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-configuration))
   common-lisp:nil))
(common-lisp:deftype topic-rule-destination-max-results () 'common-lisp:integer)
(common-lisp:deftype topic-rule-destination-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topic-rule-destination-summaries ()
   '(trivial-types:proper-list topic-rule-destination-summary))
 (common-lisp:defun make-topic-rule-destination-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            topic-rule-destination-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass topic-rule-destination-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-topic-rule-destination-summary-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or topic-rule-destination-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-summary-status
                         :shape "TopicRuleDestinationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at-date common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-summary-created-at
                         :shape "CreatedAtDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated-at-date common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-summary-last-updated-at
                         :shape "LastUpdatedAtDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-topic-rule-destination-summary-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-url-summary :initarg :http-url-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or http-url-destination-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-summary-http-url-summary
                         :shape "HttpUrlDestinationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-destination-summary :initarg
                         :vpc-destination-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-destination-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-destination-summary-vpc-destination-summary
                         :shape "VpcDestinationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-rule-destination-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'topic-rule-destination-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-rule-destination-summary
                    'make-topic-rule-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-url-summary))
      (common-lisp:list
       (common-lisp:cons "httpUrlSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-destination-summary))
      (common-lisp:list
       (common-lisp:cons "vpcDestinationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-rule-destination-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype topic-rule-list ()
   '(trivial-types:proper-list topic-rule-list-item))
 (common-lisp:defun make-topic-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-rule-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass topic-rule-list-item common-lisp:nil
                       ((rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or rule-arn common-lisp:null)
                         :accessor struct-shape-topic-rule-list-item-rule-arn
                         :shape "RuleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-topic-rule-list-item-rule-name :shape
                         "RuleName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (topic-pattern :initarg :topic-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or topic-pattern common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-list-item-topic-pattern :shape
                         "TopicPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at-date common-lisp:null)
                         :accessor struct-shape-topic-rule-list-item-created-at
                         :shape "CreatedAtDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-disabled :initarg :rule-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or is-disabled common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-list-item-rule-disabled :shape
                         "IsDisabled" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-rule-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-rule-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-rule-list-item 'make-topic-rule-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "ruleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-pattern))
      (common-lisp:list
       (common-lisp:cons "topicPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   common-lisp:nil))
(common-lisp:deftype topic-rule-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass topic-rule-payload common-lisp:nil
                       ((sql :initarg :sql :initform
                         (common-lisp:error ":sql is required") :type
                         (common-lisp:or sql common-lisp:null) :accessor
                         struct-shape-topic-rule-payload-sql :shape "SQL"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-topic-rule-payload-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-topic-rule-payload-actions
                         :shape "ActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-disabled :initarg :rule-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or is-disabled common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-payload-rule-disabled :shape
                         "IsDisabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-iot-sql-version :initarg :aws-iot-sql-version
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-iot-sql-version common-lisp:null)
                         :accessor
                         struct-shape-topic-rule-payload-aws-iot-sql-version
                         :shape "AwsIotSqlVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-action :initarg :error-action :initform
                         common-lisp:nil :type
                         (common-lisp:or action common-lisp:null) :accessor
                         struct-shape-topic-rule-payload-error-action :shape
                         "Action" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-rule-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-rule-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-rule-payload 'make-topic-rule-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-sql-version))
      (common-lisp:list
       (common-lisp:cons "awsIotSqlVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-action))
      (common-lisp:list
       (common-lisp:cons "errorAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   common-lisp:nil))
(common-lisp:deftype total-checks-count () 'common-lisp:integer)
(common-lisp:deftype total-findings-count () 'common-lisp:integer)
(common-lisp:deftype total-resources-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition transfer-already-completed-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transfer-already-completed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transfer-already-completed-exception
                    'transfer-already-completed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transfer-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-transfer-certificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId")
                        (target-aws-account :initarg :target-aws-account
                         :initform
                         (common-lisp:error ":targetawsaccount is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-transfer-certificate-request-target-aws-account
                         :shape "AwsAccountId" :location "querystring"
                         :location-name "targetAwsAccount")
                        (transfer-message :initarg :transfer-message :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-transfer-certificate-request-transfer-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transfer-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transfer-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-request
                    'make-transfer-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-certificate-response common-lisp:nil
                       ((transferred-certificate-arn :initarg
                         :transferred-certificate-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor
                         struct-shape-transfer-certificate-response-transferred-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transfer-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-response
                    'make-transfer-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transferred-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "transferredCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition transfer-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transfer-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transfer-conflict-exception
                    'transfer-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transfer-data common-lisp:nil
                       ((transfer-message :initarg :transfer-message :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-transfer-data-transfer-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reject-reason :initarg :reject-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-transfer-data-reject-reason :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transfer-date :initarg :transfer-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-transfer-data-transfer-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (accept-date :initarg :accept-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-transfer-data-accept-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reject-date :initarg :reject-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-transfer-data-reject-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transfer-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transfer-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'transfer-data 'make-transfer-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transfer-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transfer-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-reason))
      (common-lisp:list
       (common-lisp:cons "rejectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-date))
      (common-lisp:list
       (common-lisp:cons "transferDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-date))
      (common-lisp:list
       (common-lisp:cons "acceptDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-date))
      (common-lisp:list
       (common-lisp:cons "rejectDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transfer-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:deftype undo-deprecate () 'common-lisp:boolean)
(common-lisp:deftype unset-default-version () 'common-lisp:boolean)
(common-lisp:deftype unsigned-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-audit-configuration-request
                       common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-account-audit-configuration-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-notification-target-configurations :initarg
                         :audit-notification-target-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          audit-notification-target-configurations
                          common-lisp:null)
                         :accessor
                         struct-shape-update-account-audit-configuration-request-audit-notification-target-configurations
                         :shape "AuditNotificationTargetConfigurations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (audit-check-configurations :initarg
                         :audit-check-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or audit-check-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-audit-configuration-request-audit-check-configurations
                         :shape "AuditCheckConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-audit-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-audit-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-audit-configuration-request
                    'make-update-account-audit-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-notification-target-configurations))
      (common-lisp:list
       (common-lisp:cons "auditNotificationTargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-check-configurations))
      (common-lisp:list
       (common-lisp:cons "auditCheckConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-audit-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-audit-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-audit-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-audit-configuration-response
                    'make-update-account-audit-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-audit-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-audit-suppression-request common-lisp:nil
                       ((check-name :initarg :check-name :initform
                         (common-lisp:error ":checkname is required") :type
                         (common-lisp:or audit-check-name common-lisp:null)
                         :accessor
                         struct-shape-update-audit-suppression-request-check-name
                         :shape "AuditCheckName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resourceidentifier is required")
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         struct-shape-update-audit-suppression-request-resource-identifier
                         :shape "ResourceIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-audit-suppression-request-expiration-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suppress-indefinitely :initarg :suppress-indefinitely
                         :initform common-lisp:nil :type
                         (common-lisp:or suppress-indefinitely
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-audit-suppression-request-suppress-indefinitely
                         :shape "SuppressIndefinitely" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-description common-lisp:null)
                         :accessor
                         struct-shape-update-audit-suppression-request-description
                         :shape "AuditDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-audit-suppression-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-audit-suppression-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-audit-suppression-request
                    'make-update-audit-suppression-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-name))
      (common-lisp:list
       (common-lisp:cons "checkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-indefinitely))
      (common-lisp:list
       (common-lisp:cons "suppressIndefinitely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-audit-suppression-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-audit-suppression-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-audit-suppression-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-audit-suppression-response
                    'make-update-audit-suppression-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-audit-suppression-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-authorizer-request common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         (common-lisp:error ":authorizername is required")
                         :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-request-authorizer-name
                         :shape "AuthorizerName" :location "uri" :location-name
                         "authorizerName")
                        (authorizer-function-arn :initarg
                         :authorizer-function-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-request-authorizer-function-arn
                         :shape "AuthorizerFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (token-key-name :initarg :token-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or token-key-name common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-request-token-key-name
                         :shape "TokenKeyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-signing-public-keys :initarg
                         :token-signing-public-keys :initform common-lisp:nil
                         :type (common-lisp:or public-key-map common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-request-token-signing-public-keys
                         :shape "PublicKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or authorizer-status common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-request-status :shape
                         "AuthorizerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-caching-for-http :initarg
                         :enable-caching-for-http :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-caching-for-http
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-request-enable-caching-for-http
                         :shape "EnableCachingForHttp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-authorizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-authorizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-authorizer-request
                    'make-update-authorizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-function-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-name))
      (common-lisp:list
       (common-lisp:cons "tokenKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-signing-public-keys))
      (common-lisp:list
       (common-lisp:cons "tokenSigningPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-caching-for-http))
      (common-lisp:list
       (common-lisp:cons "enableCachingForHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-authorizer-response common-lisp:nil
                       ((authorizer-name :initarg :authorizer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-name common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-response-authorizer-name
                         :shape "AuthorizerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorizer-arn :initarg :authorizer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or authorizer-arn common-lisp:null)
                         :accessor
                         struct-shape-update-authorizer-response-authorizer-arn
                         :shape "AuthorizerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-authorizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-authorizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-authorizer-response
                    'make-update-authorizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-name))
      (common-lisp:list
       (common-lisp:cons "authorizerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-arn))
      (common-lisp:list
       (common-lisp:cons "authorizerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-authorizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-billing-group-request common-lisp:nil
                       ((billing-group-name :initarg :billing-group-name
                         :initform
                         (common-lisp:error ":billinggroupname is required")
                         :type
                         (common-lisp:or billing-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-billing-group-request-billing-group-name
                         :shape "BillingGroupName" :location "uri"
                         :location-name "billingGroupName")
                        (billing-group-properties :initarg
                         :billing-group-properties :initform
                         (common-lisp:error
                          ":billinggroupproperties is required")
                         :type
                         (common-lisp:or billing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-billing-group-request-billing-group-properties
                         :shape "BillingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-update-billing-group-request-expected-version
                         :shape "OptionalVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-billing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-billing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-billing-group-request
                    'make-update-billing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-group-properties))
      (common-lisp:list
       (common-lisp:cons "billingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-billing-group-response common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-update-billing-group-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-billing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-billing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-billing-group-response
                    'make-update-billing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-billing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cacertificate-params common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or cacertificate-update-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cacertificate-params-action :shape
                         "CACertificateUpdateAction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cacertificate-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-cacertificate-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cacertificate-params
                    'make-update-cacertificate-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cacertificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-update-cacertificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "caCertificateId")
                        (new-status :initarg :new-status :initform
                         common-lisp:nil :type
                         (common-lisp:or cacertificate-status common-lisp:null)
                         :accessor
                         struct-shape-update-cacertificate-request-new-status
                         :shape "CACertificateStatus" :location "querystring"
                         :location-name "newStatus")
                        (new-auto-registration-status :initarg
                         :new-auto-registration-status :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-registration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cacertificate-request-new-auto-registration-status
                         :shape "AutoRegistrationStatus" :location
                         "querystring" :location-name
                         "newAutoRegistrationStatus")
                        (registration-config :initarg :registration-config
                         :initform common-lisp:nil :type
                         (common-lisp:or registration-config common-lisp:null)
                         :accessor
                         struct-shape-update-cacertificate-request-registration-config
                         :shape "RegistrationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-auto-registration :initarg
                         :remove-auto-registration :initform common-lisp:nil
                         :type
                         (common-lisp:or remove-auto-registration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cacertificate-request-remove-auto-registration
                         :shape "RemoveAutoRegistration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cacertificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-cacertificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cacertificate-request
                    'make-update-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-config))
      (common-lisp:list
       (common-lisp:cons "registrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-auto-registration))
      (common-lisp:list
       (common-lisp:cons "removeAutoRegistration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-certificate-provider-request common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform
                         (common-lisp:error
                          ":certificateprovidername is required")
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-provider-request-certificate-provider-name
                         :shape "CertificateProviderName" :location "uri"
                         :location-name "certificateProviderName")
                        (lambda-function-arn :initarg :lambda-function-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-provider-function-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-provider-request-lambda-function-arn
                         :shape "CertificateProviderFunctionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-default-for-operations :initarg
                         :account-default-for-operations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          certificate-provider-account-default-for-operations
                          common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-provider-request-account-default-for-operations
                         :shape
                         "CertificateProviderAccountDefaultForOperations"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-certificate-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-certificate-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-certificate-provider-request
                    'make-update-certificate-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-default-for-operations))
      (common-lisp:list
       (common-lisp:cons "accountDefaultForOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-certificate-provider-response common-lisp:nil
                       ((certificate-provider-name :initarg
                         :certificate-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-provider-response-certificate-provider-name
                         :shape "CertificateProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-provider-arn :initarg
                         :certificate-provider-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-provider-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-provider-response-certificate-provider-arn
                         :shape "CertificateProviderArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-certificate-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-certificate-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-certificate-provider-response
                    'make-update-certificate-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-name))
      (common-lisp:list
       (common-lisp:cons "certificateProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider-arn))
      (common-lisp:list
       (common-lisp:cons "certificateProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificateid is required") :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-request-certificate-id
                         :shape "CertificateId" :location "uri" :location-name
                         "certificateId")
                        (new-status :initarg :new-status :initform
                         (common-lisp:error ":newstatus is required") :type
                         (common-lisp:or certificate-status common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-request-new-status
                         :shape "CertificateStatus" :location "querystring"
                         :location-name "newStatus"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-certificate-request
                    'make-update-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-update-custom-metric-request-metric-name
                         :shape "MetricName" :location "uri" :location-name
                         "metricName")
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or custom-metric-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-metric-request-display-name
                         :shape "CustomMetricDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-custom-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-metric-request
                    'make-update-custom-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-metric-response common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor
                         struct-shape-update-custom-metric-response-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-arn :initarg :metric-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-arn common-lisp:null)
                         :accessor
                         struct-shape-update-custom-metric-response-metric-arn
                         :shape "CustomMetricArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-type :initarg :metric-type :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-type common-lisp:null)
                         :accessor
                         struct-shape-update-custom-metric-response-metric-type
                         :shape "CustomMetricType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-metric-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-metric-response-display-name
                         :shape "CustomMetricDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-custom-metric-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-custom-metric-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-metric-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-metric-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-metric-response
                    'make-update-custom-metric-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-arn))
      (common-lisp:list
       (common-lisp:cons "metricArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-type))
      (common-lisp:list
       (common-lisp:cons "metricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-metric-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-certificate-params common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or device-certificate-update-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-device-certificate-params-action
                         :shape "DeviceCertificateUpdateAction" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-certificate-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-device-certificate-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-certificate-params
                    'make-update-device-certificate-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-certificate-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-certificate-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-certificate-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dimension-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-update-dimension-request-name
                         :shape "DimensionName" :location "uri" :location-name
                         "name")
                        (string-values :initarg :string-values :initform
                         (common-lisp:error ":stringvalues is required") :type
                         (common-lisp:or dimension-string-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-dimension-request-string-values
                         :shape "DimensionStringValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dimension-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dimension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dimension-request 'make-update-dimension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dimension-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or dimension-name common-lisp:null)
                         :accessor struct-shape-update-dimension-response-name
                         :shape "DimensionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or dimension-arn common-lisp:null)
                         :accessor struct-shape-update-dimension-response-arn
                         :shape "DimensionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or dimension-type common-lisp:null)
                         :accessor struct-shape-update-dimension-response-type
                         :shape "DimensionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-values :initarg :string-values :initform
                         common-lisp:nil :type
                         (common-lisp:or dimension-string-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-dimension-response-string-values
                         :shape "DimensionStringValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-dimension-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-dimension-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dimension-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dimension-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dimension-response
                    'make-update-dimension-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dimension-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-configuration-request common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform
                         (common-lisp:error
                          ":domainconfigurationname is required")
                         :type
                         (common-lisp:or reserved-domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-request-domain-configuration-name
                         :shape "ReservedDomainConfigurationName" :location
                         "uri" :location-name "domainConfigurationName")
                        (authorizer-config :initarg :authorizer-config
                         :initform common-lisp:nil :type
                         (common-lisp:or authorizer-config common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-request-authorizer-config
                         :shape "AuthorizerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-configuration-status :initarg
                         :domain-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-request-domain-configuration-status
                         :shape "DomainConfigurationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (remove-authorizer-config :initarg
                         :remove-authorizer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or remove-authorizer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-request-remove-authorizer-config
                         :shape "RemoveAuthorizerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tls-config :initarg :tls-config :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-config common-lisp:null) :accessor
                         struct-shape-update-domain-configuration-request-tls-config
                         :shape "TlsConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificate-config :initarg
                         :server-certificate-config :initform common-lisp:nil
                         :type
                         (common-lisp:or server-certificate-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-request-server-certificate-config
                         :shape "ServerCertificateConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-configuration-request
                    'make-update-domain-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-config))
      (common-lisp:list
       (common-lisp:cons "authorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-status))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "removeAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-config))
      (common-lisp:list
       (common-lisp:cons "tlsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-config))
      (common-lisp:list
       (common-lisp:cons "serverCertificateConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-configuration-response common-lisp:nil
                       ((domain-configuration-name :initarg
                         :domain-configuration-name :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-domain-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-response-domain-configuration-name
                         :shape "ReservedDomainConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-configuration-arn :initarg
                         :domain-configuration-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-configuration-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-domain-configuration-response-domain-configuration-arn
                         :shape "DomainConfigurationArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-domain-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-domain-configuration-response
                    'make-update-domain-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-name))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "domainConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dynamic-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-dynamic-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (thing-group-properties :initarg
                         :thing-group-properties :initform
                         (common-lisp:error
                          ":thinggroupproperties is required")
                         :type
                         (common-lisp:or thing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-dynamic-thing-group-request-thing-group-properties
                         :shape "ThingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-update-dynamic-thing-group-request-expected-version
                         :shape "OptionalVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         common-lisp:nil :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-update-dynamic-thing-group-request-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-update-dynamic-thing-group-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-update-dynamic-thing-group-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dynamic-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dynamic-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dynamic-thing-group-request
                    'make-update-dynamic-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dynamic-thing-group-response common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-update-dynamic-thing-group-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dynamic-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dynamic-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dynamic-thing-group-response
                    'make-update-dynamic-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dynamic-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-configurations-request common-lisp:nil
                       ((event-configurations :initarg :event-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or event-configurations common-lisp:null)
                         :accessor
                         struct-shape-update-event-configurations-request-event-configurations
                         :shape "EventConfigurations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-event-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-event-configurations-request
                    'make-update-event-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-configurations))
      (common-lisp:list
       (common-lisp:cons "eventConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-configurations-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-event-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-event-configurations-response
                    'make-update-event-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-metric-request common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         (common-lisp:error ":metricname is required") :type
                         (common-lisp:or fleet-metric-name common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-metric-name
                         :shape "FleetMetricName" :location "uri"
                         :location-name "metricName")
                        (query-string :initarg :query-string :initform
                         common-lisp:nil :type
                         (common-lisp:or query-string common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-query-string
                         :shape "QueryString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-type :initarg :aggregation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregation-type common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-aggregation-type
                         :shape "AggregationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or fleet-metric-period common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-period :shape
                         "FleetMetricPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-field :initarg :aggregation-field
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregation-field common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-aggregation-field
                         :shape "AggregationField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-metric-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-description
                         :shape "FleetMetricDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query-version :initarg :query-version :initform
                         common-lisp:nil :type
                         (common-lisp:or query-version common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-query-version
                         :shape "QueryVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         (common-lisp:error ":indexname is required") :type
                         (common-lisp:or index-name common-lisp:null) :accessor
                         struct-shape-update-fleet-metric-request-index-name
                         :shape "IndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or fleet-metric-unit common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-unit :shape
                         "FleetMetricUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-update-fleet-metric-request-expected-version
                         :shape "OptionalVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-fleet-metric-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-metric-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-fleet-metric-request
                    'make-update-fleet-metric-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-metric-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-metric-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-field))
      (common-lisp:list
       (common-lisp:cons "aggregationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-version))
      (common-lisp:list
       (common-lisp:cons "queryVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-metric-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-indexing-configuration-request common-lisp:nil
                       ((thing-indexing-configuration :initarg
                         :thing-indexing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-indexing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-indexing-configuration-request-thing-indexing-configuration
                         :shape "ThingIndexingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thing-group-indexing-configuration :initarg
                         :thing-group-indexing-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-group-indexing-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-indexing-configuration-request-thing-group-indexing-configuration
                         :shape "ThingGroupIndexingConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-indexing-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-indexing-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-indexing-configuration-request
                    'make-update-indexing-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-indexing-configuration))
      (common-lisp:list
       (common-lisp:cons "thingGroupIndexingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-indexing-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-indexing-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-indexing-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-indexing-configuration-response
                    'make-update-indexing-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-indexing-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-update-job-request-job-id :shape "JobId"
                         :location "uri" :location-name "jobId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or job-description common-lisp:null)
                         :accessor struct-shape-update-job-request-description
                         :shape "JobDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (presigned-url-config :initarg :presigned-url-config
                         :initform common-lisp:nil :type
                         (common-lisp:or presigned-url-config common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-presigned-url-config
                         :shape "PresignedUrlConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-executions-rollout-config :initarg
                         :job-executions-rollout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or job-executions-rollout-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-job-executions-rollout-config
                         :shape "JobExecutionsRolloutConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-config :initarg :abort-config :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-config common-lisp:null)
                         :accessor struct-shape-update-job-request-abort-config
                         :shape "AbortConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-config :initarg :timeout-config :initform
                         common-lisp:nil :type
                         (common-lisp:or timeout-config common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-timeout-config :shape
                         "TimeoutConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace-id :initarg :namespace-id :initform
                         common-lisp:nil :type
                         (common-lisp:or namespace-id common-lisp:null)
                         :accessor struct-shape-update-job-request-namespace-id
                         :shape "NamespaceId" :location "querystring"
                         :location-name "namespaceId")
                        (job-executions-retry-config :initarg
                         :job-executions-retry-config :initform common-lisp:nil
                         :type
                         (common-lisp:or job-executions-retry-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-job-request-job-executions-retry-config
                         :shape "JobExecutionsRetryConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-config))
      (common-lisp:list
       (common-lisp:cons "presignedUrlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-rollout-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRolloutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-config))
      (common-lisp:list
       (common-lisp:cons "abortConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-config))
      (common-lisp:list
       (common-lisp:cons "timeoutConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-executions-retry-config))
      (common-lisp:list
       (common-lisp:cons "jobExecutionsRetryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mitigation-action-request common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or mitigation-action-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mitigation-action-request-action-name
                         :shape "MitigationActionName" :location "uri"
                         :location-name "actionName")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-mitigation-action-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-params :initarg :action-params :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mitigation-action-request-action-params
                         :shape "MitigationActionParams" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mitigation-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-mitigation-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mitigation-action-request
                    'make-update-mitigation-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-params))
      (common-lisp:list
       (common-lisp:cons "actionParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mitigation-action-response common-lisp:nil
                       ((action-arn :initarg :action-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-mitigation-action-response-action-arn
                         :shape "MitigationActionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or mitigation-action-id common-lisp:null)
                         :accessor
                         struct-shape-update-mitigation-action-response-action-id
                         :shape "MitigationActionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mitigation-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-mitigation-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mitigation-action-response
                    'make-update-mitigation-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "actionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mitigation-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-configuration-request common-lisp:nil
                       ((version-update-by-jobs-config :initarg
                         :version-update-by-jobs-config :initform
                         common-lisp:nil :type
                         (common-lisp:or version-update-by-jobs-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-package-configuration-request-version-update-by-jobs-config
                         :shape "VersionUpdateByJobsConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-package-configuration-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-package-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-configuration-request
                    'make-update-package-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'version-update-by-jobs-config))
      (common-lisp:list
       (common-lisp:cons "versionUpdateByJobsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-package-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-configuration-response
                    'make-update-package-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-description :shape
                         "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-name :initarg :default-version-name
                         :initform common-lisp:nil :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-default-version-name
                         :shape "VersionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unset-default-version :initarg :unset-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or unset-default-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-unset-default-version
                         :shape "UnsetDefaultVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-request 'make-update-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "defaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unset-default-version))
      (common-lisp:list
       (common-lisp:cons "unsetDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-response 'make-update-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-version-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":packagename is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-update-package-version-request-package-name
                         :shape "PackageName" :location "uri" :location-name
                         "packageName")
                        (version-name :initarg :version-name :initform
                         (common-lisp:error ":versionname is required") :type
                         (common-lisp:or version-name common-lisp:null)
                         :accessor
                         struct-shape-update-package-version-request-version-name
                         :shape "VersionName" :location "uri" :location-name
                         "versionName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-description common-lisp:null)
                         :accessor
                         struct-shape-update-package-version-request-description
                         :shape "ResourceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-attributes common-lisp:null)
                         :accessor
                         struct-shape-update-package-version-request-attributes
                         :shape "ResourceAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-package-version-request-action
                         :shape "PackageVersionAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-package-version-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-version-request
                    'make-update-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-version-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-package-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-version-response
                    'make-update-package-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioning-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-update-provisioning-template-request-template-name
                         :shape "TemplateName" :location "uri" :location-name
                         "templateName")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor
                         struct-shape-update-provisioning-template-request-description
                         :shape "TemplateDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-update-provisioning-template-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-id :initarg :default-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or template-version-id common-lisp:null)
                         :accessor
                         struct-shape-update-provisioning-template-request-default-version-id
                         :shape "TemplateVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-role-arn :initarg :provisioning-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-provisioning-template-request-provisioning-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-provisioning-hook :initarg :pre-provisioning-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioning-hook common-lisp:null)
                         :accessor
                         struct-shape-update-provisioning-template-request-pre-provisioning-hook
                         :shape "ProvisioningHook" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-pre-provisioning-hook :initarg
                         :remove-pre-provisioning-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or remove-hook common-lisp:null)
                         :accessor
                         struct-shape-update-provisioning-template-request-remove-pre-provisioning-hook
                         :shape "RemoveHook" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-provisioning-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioning-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-template-request
                    'make-update-provisioning-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-role-arn))
      (common-lisp:list
       (common-lisp:cons "provisioningRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "preProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-pre-provisioning-hook))
      (common-lisp:list
       (common-lisp:cons "removePreProvisioningHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-provisioning-template-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-provisioning-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-provisioning-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-provisioning-template-response
                    'make-update-provisioning-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-provisioning-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-role-alias-request common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         (common-lisp:error ":rolealias is required") :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-update-role-alias-request-role-alias
                         :shape "RoleAlias" :location "uri" :location-name
                         "roleAlias")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-role-alias-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (credential-duration-seconds :initarg
                         :credential-duration-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or credential-duration-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-role-alias-request-credential-duration-seconds
                         :shape "CredentialDurationSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-role-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-role-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-role-alias-request
                    'make-update-role-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credential-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "credentialDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-role-alias-response common-lisp:nil
                       ((role-alias :initarg :role-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias common-lisp:null) :accessor
                         struct-shape-update-role-alias-response-role-alias
                         :shape "RoleAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-alias-arn :initarg :role-alias-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or role-alias-arn common-lisp:null)
                         :accessor
                         struct-shape-update-role-alias-response-role-alias-arn
                         :shape "RoleAliasArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-role-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-role-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-role-alias-response
                    'make-update-role-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias))
      (common-lisp:list
       (common-lisp:cons "roleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-alias-arn))
      (common-lisp:list
       (common-lisp:cons "roleAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scheduled-audit-request common-lisp:nil
                       ((frequency :initarg :frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-frequency common-lisp:null)
                         :accessor
                         struct-shape-update-scheduled-audit-request-frequency
                         :shape "AuditFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-month :initarg :day-of-month :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor
                         struct-shape-update-scheduled-audit-request-day-of-month
                         :shape "DayOfMonth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-week :initarg :day-of-week :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor
                         struct-shape-update-scheduled-audit-request-day-of-week
                         :shape "DayOfWeek" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-check-names :initarg :target-check-names
                         :initform common-lisp:nil :type
                         (common-lisp:or target-audit-check-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-scheduled-audit-request-target-check-names
                         :shape "TargetAuditCheckNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scheduled-audit-name :initarg :scheduled-audit-name
                         :initform
                         (common-lisp:error ":scheduledauditname is required")
                         :type
                         (common-lisp:or scheduled-audit-name common-lisp:null)
                         :accessor
                         struct-shape-update-scheduled-audit-request-scheduled-audit-name
                         :shape "ScheduledAuditName" :location "uri"
                         :location-name "scheduledAuditName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-scheduled-audit-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scheduled-audit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-audit-request
                    'make-update-scheduled-audit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "dayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "dayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-check-names))
      (common-lisp:list
       (common-lisp:cons "targetCheckNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scheduled-audit-response common-lisp:nil
                       ((scheduled-audit-arn :initarg :scheduled-audit-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduled-audit-arn common-lisp:null)
                         :accessor
                         struct-shape-update-scheduled-audit-response-scheduled-audit-arn
                         :shape "ScheduledAuditArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-scheduled-audit-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scheduled-audit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-audit-response
                    'make-update-scheduled-audit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-audit-arn))
      (common-lisp:list
       (common-lisp:cons "scheduledAuditArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-audit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-profile-request common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform
                         (common-lisp:error ":securityprofilename is required")
                         :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-security-profile-name
                         :shape "SecurityProfileName" :location "uri"
                         :location-name "securityProfileName")
                        (security-profile-description :initarg
                         :security-profile-description :initform
                         common-lisp:nil :type
                         (common-lisp:or security-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-security-profile-description
                         :shape "SecurityProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (behaviors :initarg :behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or behaviors common-lisp:null) :accessor
                         struct-shape-update-security-profile-request-behaviors
                         :shape "Behaviors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alert-targets :initarg :alert-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or alert-targets common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-alert-targets
                         :shape "AlertTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-metrics-to-retain :initarg
                         :additional-metrics-to-retain :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-additional-metrics-to-retain
                         :shape "AdditionalMetricsToRetainList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-metrics-to-retain-v2 :initarg
                         :additional-metrics-to-retain-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-v2list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-additional-metrics-to-retain-v2
                         :shape "AdditionalMetricsToRetainV2List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delete-behaviors :initarg :delete-behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-behaviors common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-delete-behaviors
                         :shape "DeleteBehaviors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-alert-targets :initarg :delete-alert-targets
                         :initform common-lisp:nil :type
                         (common-lisp:or delete-alert-targets common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-delete-alert-targets
                         :shape "DeleteAlertTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-additional-metrics-to-retain :initarg
                         :delete-additional-metrics-to-retain :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-additional-metrics-to-retain
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-delete-additional-metrics-to-retain
                         :shape "DeleteAdditionalMetricsToRetain" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-expected-version
                         :shape "OptionalVersion" :location "querystring"
                         :location-name "expectedVersion")
                        (metrics-export-config :initarg :metrics-export-config
                         :initform common-lisp:nil :type
                         (common-lisp:or metrics-export-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-metrics-export-config
                         :shape "MetricsExportConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-metrics-export-config :initarg
                         :delete-metrics-export-config :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-metrics-export-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-request-delete-metrics-export-config
                         :shape "DeleteMetricsExportConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-security-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-security-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-security-profile-request
                    'make-update-security-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-behaviors))
      (common-lisp:list
       (common-lisp:cons "deleteBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-alert-targets))
      (common-lisp:list
       (common-lisp:cons "deleteAlertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "deleteAdditionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "deleteMetricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-profile-response common-lisp:nil
                       ((security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-profile-arn :initarg :security-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-arn common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-security-profile-arn
                         :shape "SecurityProfileArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-profile-description :initarg
                         :security-profile-description :initform
                         common-lisp:nil :type
                         (common-lisp:or security-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-security-profile-description
                         :shape "SecurityProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (behaviors :initarg :behaviors :initform
                         common-lisp:nil :type
                         (common-lisp:or behaviors common-lisp:null) :accessor
                         struct-shape-update-security-profile-response-behaviors
                         :shape "Behaviors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alert-targets :initarg :alert-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or alert-targets common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-alert-targets
                         :shape "AlertTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-metrics-to-retain :initarg
                         :additional-metrics-to-retain :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-additional-metrics-to-retain
                         :shape "AdditionalMetricsToRetainList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-metrics-to-retain-v2 :initarg
                         :additional-metrics-to-retain-v2 :initform
                         common-lisp:nil :type
                         (common-lisp:or additional-metrics-to-retain-v2list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-additional-metrics-to-retain-v2
                         :shape "AdditionalMetricsToRetainV2List" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-security-profile-response-creation-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-security-profile-response-last-modified-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics-export-config :initarg :metrics-export-config
                         :initform common-lisp:nil :type
                         (common-lisp:or metrics-export-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-security-profile-response-metrics-export-config
                         :shape "MetricsExportConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-security-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-security-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-security-profile-response
                    'make-update-security-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-arn))
      (common-lisp:list
       (common-lisp:cons "securityProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-description))
      (common-lisp:list
       (common-lisp:cons "securityProfileDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-targets))
      (common-lisp:list
       (common-lisp:cons "alertTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-metrics-to-retain-v2))
      (common-lisp:list
       (common-lisp:cons "additionalMetricsToRetainV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-export-config))
      (common-lisp:list
       (common-lisp:cons "metricsExportConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stream-request common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         (common-lisp:error ":streamid is required") :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-update-stream-request-stream-id :shape
                         "StreamId" :location "uri" :location-name "streamId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor
                         struct-shape-update-stream-request-description :shape
                         "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (files :initarg :files :initform common-lisp:nil :type
                         (common-lisp:or stream-files common-lisp:null)
                         :accessor struct-shape-update-stream-request-files
                         :shape "StreamFiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-update-stream-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-stream-request 'make-update-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stream-response common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-id common-lisp:null) :accessor
                         struct-shape-update-stream-response-stream-id :shape
                         "StreamId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-arn common-lisp:null) :accessor
                         struct-shape-update-stream-response-stream-arn :shape
                         "StreamArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-description common-lisp:null)
                         :accessor
                         struct-shape-update-stream-response-description :shape
                         "StreamDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-version :initarg :stream-version :initform
                         common-lisp:nil :type
                         (common-lisp:or stream-version common-lisp:null)
                         :accessor
                         struct-shape-update-stream-response-stream-version
                         :shape "StreamVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-stream-response 'make-update-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "streamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "streamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-version))
      (common-lisp:list
       (common-lisp:cons "streamVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-thing-group-request common-lisp:nil
                       ((thing-group-name :initarg :thing-group-name :initform
                         (common-lisp:error ":thinggroupname is required")
                         :type
                         (common-lisp:or thing-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-thing-group-request-thing-group-name
                         :shape "ThingGroupName" :location "uri" :location-name
                         "thingGroupName")
                        (thing-group-properties :initarg
                         :thing-group-properties :initform
                         (common-lisp:error
                          ":thinggroupproperties is required")
                         :type
                         (common-lisp:or thing-group-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-thing-group-request-thing-group-properties
                         :shape "ThingGroupProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-update-thing-group-request-expected-version
                         :shape "OptionalVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-thing-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-thing-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-thing-group-request
                    'make-update-thing-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-group-properties))
      (common-lisp:list
       (common-lisp:cons "thingGroupProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-thing-group-response common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-update-thing-group-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-thing-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-thing-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-thing-group-response
                    'make-update-thing-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-thing-groups-for-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-update-thing-groups-for-thing-request-thing-name
                         :shape "ThingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-groups-to-add :initarg :thing-groups-to-add
                         :initform common-lisp:nil :type
                         (common-lisp:or thing-group-list common-lisp:null)
                         :accessor
                         struct-shape-update-thing-groups-for-thing-request-thing-groups-to-add
                         :shape "ThingGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-groups-to-remove :initarg
                         :thing-groups-to-remove :initform common-lisp:nil
                         :type
                         (common-lisp:or thing-group-list common-lisp:null)
                         :accessor
                         struct-shape-update-thing-groups-for-thing-request-thing-groups-to-remove
                         :shape "ThingGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (override-dynamic-groups :initarg
                         :override-dynamic-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or override-dynamic-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-thing-groups-for-thing-request-override-dynamic-groups
                         :shape "OverrideDynamicGroups" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-thing-groups-for-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-thing-groups-for-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-thing-groups-for-thing-request
                    'make-update-thing-groups-for-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-groups-to-add))
      (common-lisp:list
       (common-lisp:cons "thingGroupsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-groups-to-remove))
      (common-lisp:list
       (common-lisp:cons "thingGroupsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-dynamic-groups))
      (common-lisp:list
       (common-lisp:cons "overrideDynamicGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-thing-groups-for-thing-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-thing-groups-for-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-thing-groups-for-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-thing-groups-for-thing-response
                    'make-update-thing-groups-for-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-groups-for-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-thing-request common-lisp:nil
                       ((thing-name :initarg :thing-name :initform
                         (common-lisp:error ":thingname is required") :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         struct-shape-update-thing-request-thing-name :shape
                         "ThingName" :location "uri" :location-name
                         "thingName")
                        (thing-type-name :initarg :thing-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or thing-type-name common-lisp:null)
                         :accessor
                         struct-shape-update-thing-request-thing-type-name
                         :shape "ThingTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-payload :initarg :attribute-payload
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-payload common-lisp:null)
                         :accessor
                         struct-shape-update-thing-request-attribute-payload
                         :shape "AttributePayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-version :initarg :expected-version :initform
                         common-lisp:nil :type
                         (common-lisp:or optional-version common-lisp:null)
                         :accessor
                         struct-shape-update-thing-request-expected-version
                         :shape "OptionalVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-thing-type :initarg :remove-thing-type
                         :initform common-lisp:nil :type
                         (common-lisp:or remove-thing-type common-lisp:null)
                         :accessor
                         struct-shape-update-thing-request-remove-thing-type
                         :shape "RemoveThingType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-thing-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-thing-request 'make-update-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-thing-type))
      (common-lisp:list
       (common-lisp:cons "removeThingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-thing-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-thing-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-thing-response 'make-update-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-topic-rule-destination-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-update-topic-rule-destination-request-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or topic-rule-destination-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-topic-rule-destination-request-status
                         :shape "TopicRuleDestinationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-topic-rule-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-topic-rule-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-topic-rule-destination-request
                    'make-update-topic-rule-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-topic-rule-destination-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-topic-rule-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-topic-rule-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-topic-rule-destination-response
                    'make-update-topic-rule-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-topic-rule-destination-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype use-base64 () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype user-properties ()
   '(trivial-types:proper-list user-property))
 (common-lisp:defun make-user-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-property common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or user-property-key common-lisp:null)
                         :accessor struct-shape-user-property-key :shape
                         "UserPropertyKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or user-property-value common-lisp:null)
                         :accessor struct-shape-user-property-value :shape
                         "UserPropertyValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-property 'make-user-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-property))
   common-lisp:nil))
(common-lisp:deftype user-property-key () 'common-lisp:string)
(common-lisp:deftype user-property-value () 'common-lisp:string)
(common-lisp:deftype valid () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass validate-security-profile-behaviors-request
                       common-lisp:nil
                       ((behaviors :initarg :behaviors :initform
                         (common-lisp:error ":behaviors is required") :type
                         (common-lisp:or behaviors common-lisp:null) :accessor
                         struct-shape-validate-security-profile-behaviors-request-behaviors
                         :shape "Behaviors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-security-profile-behaviors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-security-profile-behaviors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-security-profile-behaviors-request
                    'make-validate-security-profile-behaviors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behaviors))
      (common-lisp:list
       (common-lisp:cons "behaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-security-profile-behaviors-response
                       common-lisp:nil
                       ((valid :initarg :valid :initform common-lisp:nil :type
                         (common-lisp:or valid common-lisp:null) :accessor
                         struct-shape-validate-security-profile-behaviors-response-valid
                         :shape "Valid" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation-errors :initarg :validation-errors
                         :initform common-lisp:nil :type
                         (common-lisp:or validation-errors common-lisp:null)
                         :accessor
                         struct-shape-validate-security-profile-behaviors-response-validation-errors
                         :shape "ValidationErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-security-profile-behaviors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-security-profile-behaviors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-security-profile-behaviors-response
                    'make-validate-security-profile-behaviors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "validationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-security-profile-behaviors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validation-error common-lisp:nil
                       ((error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-validation-error-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-errors ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun make-validation-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype variance () 'common-lisp:double-float)
(common-lisp:deftype verification-state () 'common-lisp:string)
(common-lisp:deftype verification-state-description () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition version-conflict-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       version-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'version-conflict-exception
                    'version-conflict-exception-message)))
(common-lisp:deftype version-name () 'common-lisp:string)
(common-lisp:deftype version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass version-update-by-jobs-config common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or enabled-boolean common-lisp:null)
                         :accessor
                         struct-shape-version-update-by-jobs-config-enabled
                         :shape "EnabledBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-version-update-by-jobs-config-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-version-update-by-jobs-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'version-update-by-jobs-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'version-update-by-jobs-config
                    'make-version-update-by-jobs-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          version-update-by-jobs-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          version-update-by-jobs-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          version-update-by-jobs-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition versions-limit-exceeded-exception
     (iot-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       versions-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'versions-limit-exceeded-exception
                    'versions-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass violation-event common-lisp:nil
                       ((violation-id :initarg :violation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-id common-lisp:null)
                         :accessor struct-shape-violation-event-violation-id
                         :shape "ViolationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thing-name :initarg :thing-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-defender-thing-name
                                         common-lisp:null)
                         :accessor struct-shape-violation-event-thing-name
                         :shape "DeviceDefenderThingName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-profile-name :initarg :security-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or security-profile-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-violation-event-security-profile-name
                         :shape "SecurityProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behavior :initarg :behavior :initform common-lisp:nil
                         :type (common-lisp:or behavior common-lisp:null)
                         :accessor struct-shape-violation-event-behavior :shape
                         "Behavior" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metric-value :initarg :metric-value :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor struct-shape-violation-event-metric-value
                         :shape "MetricValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (violation-event-additional-info :initarg
                         :violation-event-additional-info :initform
                         common-lisp:nil :type
                         (common-lisp:or violation-event-additional-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-violation-event-violation-event-additional-info
                         :shape "ViolationEventAdditionalInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (violation-event-type :initarg :violation-event-type
                         :initform common-lisp:nil :type
                         (common-lisp:or violation-event-type common-lisp:null)
                         :accessor
                         struct-shape-violation-event-violation-event-type
                         :shape "ViolationEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verification-state :initarg :verification-state
                         :initform common-lisp:nil :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor
                         struct-shape-violation-event-verification-state :shape
                         "VerificationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verification-state-description :initarg
                         :verification-state-description :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-state-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-violation-event-verification-state-description
                         :shape "VerificationStateDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (violation-event-time :initarg :violation-event-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-violation-event-violation-event-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-violation-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'violation-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'violation-event 'make-violation-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input violation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input violation-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-id))
      (common-lisp:list
       (common-lisp:cons "violationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-profile-name))
      (common-lisp:list
       (common-lisp:cons "securityProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-additional-info))
      (common-lisp:list
       (common-lisp:cons "violationEventAdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-type))
      (common-lisp:list
       (common-lisp:cons "violationEventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "verificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-state-description))
      (common-lisp:list
       (common-lisp:cons "verificationStateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'violation-event-time))
      (common-lisp:list
       (common-lisp:cons "violationEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input violation-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass violation-event-additional-info common-lisp:nil
                       ((confidence-level :initarg :confidence-level :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence-level common-lisp:null)
                         :accessor
                         struct-shape-violation-event-additional-info-confidence-level
                         :shape "ConfidenceLevel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-violation-event-additional-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'violation-event-additional-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'violation-event-additional-info
                    'make-violation-event-additional-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-additional-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-additional-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-level))
      (common-lisp:list
       (common-lisp:cons "confidenceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-additional-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass violation-event-occurrence-range common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-violation-event-occurrence-range-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-violation-event-occurrence-range-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-violation-event-occurrence-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'violation-event-occurrence-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'violation-event-occurrence-range
                    'make-violation-event-occurrence-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-occurrence-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-occurrence-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          violation-event-occurrence-range))
   common-lisp:nil))
(common-lisp:deftype violation-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype violation-events ()
   '(trivial-types:proper-list violation-event))
 (common-lisp:defun make-violation-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list violation-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype violation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-destination-configuration common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnetids is required") :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-configuration-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-group-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-configuration-security-groups
                         :shape "SecurityGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         struct-shape-vpc-destination-configuration-vpc-id
                         :shape "VpcId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or aws-arn common-lisp:null) :accessor
                         struct-shape-vpc-destination-configuration-role-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-destination-configuration
                    'make-vpc-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-destination-properties common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-properties-subnet-ids
                         :shape "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-group-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-properties-security-groups
                         :shape "SecurityGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-properties-vpc-id :shape
                         "VpcId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-properties-role-arn
                         :shape "AwsArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-destination-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-destination-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-destination-properties
                    'make-vpc-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-destination-summary common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-summary-subnet-ids :shape
                         "SubnetIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-group-list common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-summary-security-groups
                         :shape "SecurityGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-vpc-destination-summary-vpc-id
                         :shape "VpcId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or aws-arn common-lisp:null)
                         :accessor
                         struct-shape-vpc-destination-summary-role-arn :shape
                         "AwsArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-destination-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-destination-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-destination-summary 'make-vpc-destination-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-destination-summary))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype waiting-for-data-collection-checks-count ()
  'common-lisp:integer)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |resourceArn| () 'common-lisp:string)
(common-lisp:deftype |resourceId| () 'common-lisp:string)
(common-lisp:deftype |stringValue| () 'common-lisp:string)
(common-lisp:deftype |usePrefixAttributeValue| () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun accept-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id set-as-active)
   (common-lisp:declare (common-lisp:ignorable certificate-id set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accept-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "AcceptCertificateTransfer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun add-thing-to-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name billing-group-arn
                     thing-name thing-arn)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-arn thing-name
     thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-thing-to-billing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/billing-groups/addThingToBillingGroup"
                                                        "AddThingToBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-thing-to-billing-group))
(common-lisp:progn
 (common-lisp:defun add-thing-to-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-arn
                     thing-name thing-arn override-dynamic-groups)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-arn thing-name
     thing-arn override-dynamic-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-thing-to-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/thing-groups/addThingToThingGroup"
                                                        "AddThingToThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-thing-to-thing-group))
(common-lisp:progn
 (common-lisp:defun associate-targets-with-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key targets job-id comment namespace-id)
   (common-lisp:declare
    (common-lisp:ignorable targets job-id comment namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-targets-with-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "AssociateTargetsWithJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-targets-with-job))
(common-lisp:progn
 (common-lisp:defun attach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name target)
   (common-lisp:declare (common-lisp:ignorable policy-name target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/target-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "AttachPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-policy))
(common-lisp:progn
 (common-lisp:defun attach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/principal-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "AttachPrincipalPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-principal-policy))
(common-lisp:progn
 (common-lisp:defun attach-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-target-arn)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "AttachSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-security-profile))
(common-lisp:progn
 (common-lisp:defun attach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "AttachThingPrincipal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-thing-principal))
(common-lisp:progn
 (common-lisp:defun cancel-audit-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-audit-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/mitigationactions/tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "CancelAuditMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-audit-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun cancel-audit-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-audit-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "CancelAuditTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-audit-task))
(common-lisp:progn
 (common-lisp:defun cancel-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cancel-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "CancelCertificateTransfer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun cancel-detect-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-detect-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detect/mitigationactions/tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "CancelDetectMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-detect-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id reason-code comment force)
   (common-lisp:declare
    (common-lisp:ignorable job-id reason-code comment force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun cancel-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id thing-name force expected-version
                     status-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id thing-name force expected-version
     status-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelJobExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-job-execution))
(common-lisp:progn
 (common-lisp:defun clear-default-authorizer ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "DELETE" :path
                                "/default-authorizer" :operation
                                "ClearDefaultAuthorizer"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'clear-default-authorizer))
(common-lisp:progn
 (common-lisp:defun confirm-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key confirmation-token)
   (common-lisp:declare (common-lisp:ignorable confirmation-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/confirmdestination/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'confirmation-token)))
                                                        "ConfirmTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'confirm-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun create-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier
                     expiration-date suppress-indefinitely description
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable check-name resource-identifier expiration-date
     suppress-indefinitely description client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-audit-suppression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/create"
                                                        "CreateAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-audit-suppression))
(common-lisp:progn
 (common-lisp:defun create-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name authorizer-function-arn
                     token-key-name token-signing-public-keys status tags
                     signing-disabled enable-caching-for-http)
   (common-lisp:declare
    (common-lisp:ignorable authorizer-name authorizer-function-arn
     token-key-name token-signing-public-keys status tags signing-disabled
     enable-caching-for-http))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "CreateAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-authorizer))
(common-lisp:progn
 (common-lisp:defun create-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name
                     billing-group-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "CreateBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-billing-group))
(common-lisp:progn
 (common-lisp:defun create-certificate-from-csr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-signing-request
                     set-as-active)
   (common-lisp:declare
    (common-lisp:ignorable certificate-signing-request set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-from-csr-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/certificates"
                                                        "CreateCertificateFromCsr"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-certificate-from-csr))
(common-lisp:progn
 (common-lisp:defun create-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name
                     lambda-function-arn account-default-for-operations
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-provider-name lambda-function-arn
     account-default-for-operations client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "CreateCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-certificate-provider))
(common-lisp:progn
 (common-lisp:defun create-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name display-name metric-type tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable metric-name display-name metric-type tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "CreateCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-metric))
(common-lisp:progn
 (common-lisp:defun create-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type string-values tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name type string-values tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateDimension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dimension))
(common-lisp:progn
 (common-lisp:defun create-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name domain-name
                     server-certificate-arns validation-certificate-arn
                     authorizer-config service-type tags tls-config
                     server-certificate-config)
   (common-lisp:declare
    (common-lisp:ignorable domain-configuration-name domain-name
     server-certificate-arns validation-certificate-arn authorizer-config
     service-type tags tls-config server-certificate-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "CreateDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-domain-configuration))
(common-lisp:progn
 (common-lisp:defun create-dynamic-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-properties
                     index-name query-string query-version tags)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-properties index-name
     query-string query-version tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dynamic-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dynamic-thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "CreateDynamicThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dynamic-thing-group))
(common-lisp:progn
 (common-lisp:defun create-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name query-string aggregation-type
                     period aggregation-field description query-version
                     index-name unit tags)
   (common-lisp:declare
    (common-lisp:ignorable metric-name query-string aggregation-type period
     aggregation-field description query-version index-name unit tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "CreateFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-fleet-metric))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id targets document-source document
                     description presigned-url-config target-selection
                     job-executions-rollout-config abort-config timeout-config
                     tags namespace-id job-template-arn
                     job-executions-retry-config document-parameters
                     scheduling-config destination-package-versions)
   (common-lisp:declare
    (common-lisp:ignorable job-id targets document-source document description
     presigned-url-config target-selection job-executions-rollout-config
     abort-config timeout-config tags namespace-id job-template-arn
     job-executions-retry-config document-parameters scheduling-config
     destination-package-versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CreateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-template-id job-arn document-source
                     document description presigned-url-config
                     job-executions-rollout-config abort-config timeout-config
                     tags job-executions-retry-config maintenance-windows
                     destination-package-versions)
   (common-lisp:declare
    (common-lisp:ignorable job-template-id job-arn document-source document
     description presigned-url-config job-executions-rollout-config
     abort-config timeout-config tags job-executions-retry-config
     maintenance-windows destination-package-versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-template-id))))
                                                        "CreateJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-job-template))
(common-lisp:progn
 (common-lisp:defun create-keys-and-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key set-as-active)
   (common-lisp:declare (common-lisp:ignorable set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-keys-and-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/keys-and-certificate"
                                                        "CreateKeysAndCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-keys-and-certificate))
(common-lisp:progn
 (common-lisp:defun create-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name role-arn action-params tags)
   (common-lisp:declare
    (common-lisp:ignorable action-name role-arn action-params tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mitigation-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "CreateMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-mitigation-action))
(common-lisp:progn
 (common-lisp:defun create-otaupdate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ota-update-id description targets
                     protocols target-selection
                     aws-job-executions-rollout-config
                     aws-job-presigned-url-config aws-job-abort-config
                     aws-job-timeout-config files role-arn
                     additional-parameters tags)
   (common-lisp:declare
    (common-lisp:ignorable ota-update-id description targets protocols
     target-selection aws-job-executions-rollout-config
     aws-job-presigned-url-config aws-job-abort-config aws-job-timeout-config
     files role-arn additional-parameters tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-otaupdate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/otaUpdates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ota-update-id))))
                                                        "CreateOTAUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-otaupdate))
(common-lisp:progn
 (common-lisp:defun create-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name description tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name description tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "CreatePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-package))
(common-lisp:progn
 (common-lisp:defun create-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name description
                     attributes tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name version-name description attributes
     tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "CreatePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-package-version))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document tags)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "CreatePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "CreatePolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-provisioning-claim
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-claim-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/provisioning-claim"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateProvisioningClaim"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-provisioning-claim))
(common-lisp:progn
 (common-lisp:defun create-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name description template-body
                     enabled provisioning-role-arn pre-provisioning-hook tags
                     type)
   (common-lisp:declare
    (common-lisp:ignorable template-name description template-body enabled
     provisioning-role-arn pre-provisioning-hook tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/provisioning-templates"
                                                        "CreateProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-provisioning-template))
(common-lisp:progn
 (common-lisp:defun create-provisioning-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-body
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable template-name template-body set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-provisioning-template-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateProvisioningTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-provisioning-template-version))
(common-lisp:progn
 (common-lisp:defun create-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias role-arn
                     credential-duration-seconds tags)
   (common-lisp:declare
    (common-lisp:ignorable role-alias role-arn credential-duration-seconds
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "CreateRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-role-alias))
(common-lisp:progn
 (common-lisp:defun create-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key frequency day-of-month day-of-week
                     target-check-names scheduled-audit-name tags)
   (common-lisp:declare
    (common-lisp:ignorable frequency day-of-month day-of-week
     target-check-names scheduled-audit-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "CreateScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun create-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-description behaviors alert-targets
                     additional-metrics-to-retain
                     additional-metrics-to-retain-v2 tags
                     metrics-export-config)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-description
     behaviors alert-targets additional-metrics-to-retain
     additional-metrics-to-retain-v2 tags metrics-export-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "CreateSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-security-profile))
(common-lisp:progn
 (common-lisp:defun create-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id description files role-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable stream-id description files role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "CreateStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-stream))
(common-lisp:progn
 (common-lisp:defun create-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload billing-group-name)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload
     billing-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "CreateThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-thing))
(common-lisp:progn
 (common-lisp:defun create-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name parent-group-name
                     thing-group-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name parent-group-name
     thing-group-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "CreateThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-thing-group))
(common-lisp:progn
 (common-lisp:defun create-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name thing-type-properties
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable thing-type-name thing-type-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "CreateThingType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-thing-type))
(common-lisp:progn
 (common-lisp:defun create-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload tags)
   (common-lisp:declare
    (common-lisp:ignorable rule-name topic-rule-payload tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "CreateTopicRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-topic-rule))
(common-lisp:progn
 (common-lisp:defun create-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-configuration)
   (common-lisp:declare (common-lisp:ignorable destination-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/destinations"
                                                        "CreateTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun delete-account-audit-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delete-scheduled-audits)
   (common-lisp:declare (common-lisp:ignorable delete-scheduled-audits))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-account-audit-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/audit/configuration"
                                                        "DeleteAccountAuditConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-account-audit-configuration))
(common-lisp:progn
 (common-lisp:defun delete-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier)
   (common-lisp:declare (common-lisp:ignorable check-name resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-audit-suppression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/delete"
                                                        "DeleteAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-audit-suppression))
(common-lisp:progn
 (common-lisp:defun delete-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name)
   (common-lisp:declare (common-lisp:ignorable authorizer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "DeleteAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-authorizer))
(common-lisp:progn
 (common-lisp:defun delete-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "DeleteBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-billing-group))
(common-lisp:progn
 (common-lisp:defun delete-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "DeleteCACertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cacertificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id force-delete)
   (common-lisp:declare (common-lisp:ignorable certificate-id force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "DeleteCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name)
   (common-lisp:declare (common-lisp:ignorable certificate-provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "DeleteCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-certificate-provider))
(common-lisp:progn
 (common-lisp:defun delete-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name)
   (common-lisp:declare (common-lisp:ignorable metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DeleteCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-metric))
(common-lisp:progn
 (common-lisp:defun delete-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteDimension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dimension))
(common-lisp:progn
 (common-lisp:defun delete-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name)
   (common-lisp:declare (common-lisp:ignorable domain-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "DeleteDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-domain-configuration))
(common-lisp:progn
 (common-lisp:defun delete-dynamic-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dynamic-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dynamic-thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "DeleteDynamicThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dynamic-thing-group))
(common-lisp:progn
 (common-lisp:defun delete-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name expected-version)
   (common-lisp:declare (common-lisp:ignorable metric-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DeleteFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-fleet-metric))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id force namespace-id)
   (common-lisp:declare (common-lisp:ignorable job-id force namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DeleteJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id thing-name execution-number force
                     namespace-id)
   (common-lisp:declare
    (common-lisp:ignorable job-id thing-name execution-number force
     namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs/~A/executionNumber/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'execution-number))))
                                                        "DeleteJobExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-job-execution))
(common-lisp:progn
 (common-lisp:defun delete-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-template-id)
   (common-lisp:declare (common-lisp:ignorable job-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-template-id))))
                                                        "DeleteJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-job-template))
(common-lisp:progn
 (common-lisp:defun delete-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name)
   (common-lisp:declare (common-lisp:ignorable action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mitigation-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "DeleteMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mitigation-action))
(common-lisp:progn
 (common-lisp:defun delete-otaupdate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ota-update-id delete-stream
                     force-delete-awsjob)
   (common-lisp:declare
    (common-lisp:ignorable ota-update-id delete-stream force-delete-awsjob))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-otaupdate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/otaUpdates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ota-update-id))))
                                                        "DeleteOTAUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-otaupdate))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name client-token)
   (common-lisp:declare (common-lisp:ignorable package-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "DeletePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun delete-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name version-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "DeletePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-package-version))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DeletePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "DeletePolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeleteProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-provisioning-template))
(common-lisp:progn
 (common-lisp:defun delete-provisioning-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version-id)
   (common-lisp:declare (common-lisp:ignorable template-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-provisioning-template-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DeleteProvisioningTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-provisioning-template-version))
(common-lisp:progn
 (common-lisp:defun delete-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "DELETE" :path
                                "/registrationcode" :operation
                                "DeleteRegistrationCode"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-registration-code))
(common-lisp:progn
 (common-lisp:defun delete-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias)
   (common-lisp:declare (common-lisp:ignorable role-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "DeleteRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-role-alias))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-audit-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-audit-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "DeleteScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun delete-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "DeleteSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-security-profile))
(common-lisp:progn
 (common-lisp:defun delete-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id)
   (common-lisp:declare (common-lisp:ignorable stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "DeleteStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-stream))
(common-lisp:progn
 (common-lisp:defun delete-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name expected-version)
   (common-lisp:declare (common-lisp:ignorable thing-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DeleteThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-thing))
(common-lisp:progn
 (common-lisp:defun delete-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name expected-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "DeleteThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-thing-group))
(common-lisp:progn
 (common-lisp:defun delete-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DeleteThingType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-thing-type))
(common-lisp:progn
 (common-lisp:defun delete-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DeleteTopicRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-topic-rule))
(common-lisp:progn
 (common-lisp:defun delete-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'arn)))
                                                        "DeleteTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun delete-v2logging-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-type target-name)
   (common-lisp:declare (common-lisp:ignorable target-type target-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-v2logging-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v2LoggingLevel"
                                                        "DeleteV2LoggingLevel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-v2logging-level))
(common-lisp:progn
 (common-lisp:defun deprecate-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name undo-deprecate)
   (common-lisp:declare (common-lisp:ignorable thing-type-name undo-deprecate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A/deprecate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DeprecateThingType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deprecate-thing-type))
(common-lisp:progn
 (common-lisp:defun describe-account-audit-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/audit/configuration" :operation
                                "DescribeAccountAuditConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-account-audit-configuration))
(common-lisp:progn
 (common-lisp:defun describe-audit-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id)
   (common-lisp:declare (common-lisp:ignorable finding-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-audit-finding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/findings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'finding-id))))
                                                        "DescribeAuditFinding"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-audit-finding))
(common-lisp:progn
 (common-lisp:defun describe-audit-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-audit-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeAuditMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-audit-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun describe-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier)
   (common-lisp:declare (common-lisp:ignorable check-name resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-audit-suppression-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/describe"
                                                        "DescribeAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-audit-suppression))
(common-lisp:progn
 (common-lisp:defun describe-audit-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-audit-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeAuditTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-audit-task))
(common-lisp:progn
 (common-lisp:defun describe-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name)
   (common-lisp:declare (common-lisp:ignorable authorizer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "DescribeAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-authorizer))
(common-lisp:progn
 (common-lisp:defun describe-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name)
   (common-lisp:declare (common-lisp:ignorable billing-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "DescribeBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-billing-group))
(common-lisp:progn
 (common-lisp:defun describe-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "DescribeCACertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cacertificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "DescribeCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name)
   (common-lisp:declare (common-lisp:ignorable certificate-provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "DescribeCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-certificate-provider))
(common-lisp:progn
 (common-lisp:defun describe-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name)
   (common-lisp:declare (common-lisp:ignorable metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DescribeCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-metric))
(common-lisp:progn
 (common-lisp:defun describe-default-authorizer ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/default-authorizer" :operation
                                "DescribeDefaultAuthorizer"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-default-authorizer))
(common-lisp:progn
 (common-lisp:defun describe-detect-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-detect-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detect/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeDetectMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-detect-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun describe-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeDimension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dimension))
(common-lisp:progn
 (common-lisp:defun describe-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name)
   (common-lisp:declare (common-lisp:ignorable domain-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "DescribeDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-domain-configuration))
(common-lisp:progn
 (common-lisp:defun describe-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-type)
   (common-lisp:declare (common-lisp:ignorable endpoint-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/endpoint"
                                                        "DescribeEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-event-configurations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/event-configurations" :operation
                                "DescribeEventConfigurations"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-event-configurations))
(common-lisp:progn
 (common-lisp:defun describe-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name)
   (common-lisp:declare (common-lisp:ignorable metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "DescribeFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fleet-metric))
(common-lisp:progn
 (common-lisp:defun describe-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name)
   (common-lisp:declare (common-lisp:ignorable index-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/indices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'index-name))))
                                                        "DescribeIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-index))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun describe-job-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id thing-name execution-number)
   (common-lisp:declare
    (common-lisp:ignorable job-id thing-name execution-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeJobExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-job-execution))
(common-lisp:progn
 (common-lisp:defun describe-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-template-id)
   (common-lisp:declare (common-lisp:ignorable job-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-template-id))))
                                                        "DescribeJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-job-template))
(common-lisp:progn
 (common-lisp:defun describe-managed-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-version)
   (common-lisp:declare (common-lisp:ignorable template-name template-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-managed-job-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/managed-job-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DescribeManagedJobTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-managed-job-template))
(common-lisp:progn
 (common-lisp:defun describe-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name)
   (common-lisp:declare (common-lisp:ignorable action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-mitigation-action-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "DescribeMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-mitigation-action))
(common-lisp:progn
 (common-lisp:defun describe-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DescribeProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-provisioning-template))
(common-lisp:progn
 (common-lisp:defun describe-provisioning-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version-id)
   (common-lisp:declare (common-lisp:ignorable template-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-provisioning-template-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-id))))
                                                        "DescribeProvisioningTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-provisioning-template-version))
(common-lisp:progn
 (common-lisp:defun describe-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias)
   (common-lisp:declare (common-lisp:ignorable role-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "DescribeRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-role-alias))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-audit-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-audit-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "DescribeScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun describe-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name)
   (common-lisp:declare (common-lisp:ignorable security-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-security-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "DescribeSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-security-profile))
(common-lisp:progn
 (common-lisp:defun describe-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id)
   (common-lisp:declare (common-lisp:ignorable stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "DescribeStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stream))
(common-lisp:progn
 (common-lisp:defun describe-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name)
   (common-lisp:declare (common-lisp:ignorable thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DescribeThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-thing))
(common-lisp:progn
 (common-lisp:defun describe-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name)
   (common-lisp:declare (common-lisp:ignorable thing-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "DescribeThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-thing-group))
(common-lisp:progn
 (common-lisp:defun describe-thing-registration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-thing-registration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-registration-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "DescribeThingRegistrationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-thing-registration-task))
(common-lisp:progn
 (common-lisp:defun describe-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DescribeThingType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-thing-type))
(common-lisp:progn
 (common-lisp:defun detach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name target)
   (common-lisp:declare (common-lisp:ignorable policy-name target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/target-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DetachPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-policy))
(common-lisp:progn
 (common-lisp:defun detach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/principal-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DetachPrincipalPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-principal-policy))
(common-lisp:progn
 (common-lisp:defun detach-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-target-arn)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "DetachSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-security-profile))
(common-lisp:progn
 (common-lisp:defun detach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DetachThingPrincipal"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-thing-principal))
(common-lisp:progn
 (common-lisp:defun disable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/disable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DisableTopicRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-topic-rule))
(common-lisp:progn
 (common-lisp:defun enable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/enable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "EnableTopicRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-topic-rule))
(common-lisp:progn
 (common-lisp:defun get-behavior-model-training-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-behavior-model-training-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/behavior-model-training/summaries"
                                                        "GetBehaviorModelTrainingSummaries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-behavior-model-training-summaries))
(common-lisp:progn
 (common-lisp:defun get-buckets-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version buckets-aggregation-type)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version buckets-aggregation-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-buckets-aggregation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/buckets"
                                                        "GetBucketsAggregation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-buckets-aggregation))
(common-lisp:progn
 (common-lisp:defun get-cardinality
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cardinality-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/cardinality"
                                                        "GetCardinality"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cardinality))
(common-lisp:progn
 (common-lisp:defun get-effective-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal cognito-identity-pool-id
                     thing-name)
   (common-lisp:declare
    (common-lisp:ignorable principal cognito-identity-pool-id thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-effective-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/effective-policies"
                                                        "GetEffectivePolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-effective-policies))
(common-lisp:progn
 (common-lisp:defun get-indexing-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/indexing/config" :operation
                                "GetIndexingConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-indexing-configuration))
(common-lisp:progn
 (common-lisp:defun get-job-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/job-document"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetJobDocument"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-document))
(common-lisp:progn
 (common-lisp:defun get-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/loggingOptions" :operation
                                "GetLoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-logging-options))
(common-lisp:progn
 (common-lisp:defun get-otaupdate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ota-update-id)
   (common-lisp:declare (common-lisp:ignorable ota-update-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-otaupdate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/otaUpdates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ota-update-id))))
                                                        "GetOTAUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-otaupdate))
(common-lisp:progn
 (common-lisp:defun get-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name)
   (common-lisp:declare (common-lisp:ignorable package-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "GetPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-package))
(common-lisp:progn
 (common-lisp:defun get-package-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/package-configuration" :operation
                                "GetPackageConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-package-configuration))
(common-lisp:progn
 (common-lisp:defun get-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name)
   (common-lisp:declare (common-lisp:ignorable package-name version-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "GetPackageVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-package-version))
(common-lisp:progn
 (common-lisp:defun get-percentiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version percents)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version percents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-percentiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/percentiles"
                                                        "GetPercentiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-percentiles))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "GetPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "GetPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/registrationcode" :operation
                                "GetRegistrationCode"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-registration-code))
(common-lisp:progn
 (common-lisp:defun get-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string aggregation-field
                     query-version)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string aggregation-field
     query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/statistics"
                                                        "GetStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-statistics))
(common-lisp:progn
 (common-lisp:defun get-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "GetTopicRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-topic-rule))
(common-lisp:progn
 (common-lisp:defun get-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'arn)))
                                                        "GetTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun get-v2logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/v2LoggingOptions" :operation
                                "GetV2LoggingOptions"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-v2logging-options))
(common-lisp:progn
 (common-lisp:defun list-active-violations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name security-profile-name
                     behavior-criteria-type list-suppressed-alerts
                     verification-state next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable thing-name security-profile-name
     behavior-criteria-type list-suppressed-alerts verification-state
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-active-violations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/active-violations"
                                                        "ListActiveViolations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-active-violations))
(common-lisp:progn
 (common-lisp:defun list-attached-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target recursive marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable target recursive marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attached-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/attached-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'target))))
                                                        "ListAttachedPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-attached-policies))
(common-lisp:progn
 (common-lisp:defun list-audit-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id check-name resource-identifier
                     max-results next-token start-time end-time
                     list-suppressed-findings)
   (common-lisp:declare
    (common-lisp:ignorable task-id check-name resource-identifier max-results
     next-token start-time end-time list-suppressed-findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-audit-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/findings"
                                                        "ListAuditFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-audit-findings))
(common-lisp:progn
 (common-lisp:defun list-audit-mitigation-actions-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id action-status finding-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id action-status finding-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-audit-mitigation-actions-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/mitigationactions/executions"
                                                        "ListAuditMitigationActionsExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-audit-mitigation-actions-executions))
(common-lisp:progn
 (common-lisp:defun list-audit-mitigation-actions-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key audit-task-id finding-id task-status
                     max-results next-token start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable audit-task-id finding-id task-status max-results
     next-token start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-audit-mitigation-actions-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/mitigationactions/tasks"
                                                        "ListAuditMitigationActionsTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-audit-mitigation-actions-tasks))
(common-lisp:progn
 (common-lisp:defun list-audit-suppressions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier
                     ascending-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable check-name resource-identifier ascending-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-audit-suppressions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/audit/suppressions/list"
                                                        "ListAuditSuppressions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-audit-suppressions))
(common-lisp:progn
 (common-lisp:defun list-audit-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time task-type task-status
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time task-type task-status next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-audit-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/audit/tasks"
                                                        "ListAuditTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-audit-tasks))
(common-lisp:progn
 (common-lisp:defun list-authorizers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order status)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-authorizers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/authorizers/"
                                                        "ListAuthorizers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-authorizers))
(common-lisp:progn
 (common-lisp:defun list-billing-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     name-prefix-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-prefix-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-billing-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/billing-groups"
                                                        "ListBillingGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-billing-groups))
(common-lisp:progn
 (common-lisp:defun list-cacertificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cacertificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/cacertificates"
                                                        "ListCACertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cacertificates))
(common-lisp:progn
 (common-lisp:defun list-certificate-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token ascending-order)
   (common-lisp:declare (common-lisp:ignorable next-token ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-certificate-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/certificate-providers/"
                                                        "ListCertificateProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-certificate-providers))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/certificates"
                                                        "ListCertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-certificates-by-ca
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate-id page-size marker
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate-id page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-by-carequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates-by-ca/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "ListCertificatesByCA"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-certificates-by-ca))
(common-lisp:progn
 (common-lisp:defun list-custom-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-custom-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/custom-metrics"
                                                        "ListCustomMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-metrics))
(common-lisp:progn
 (common-lisp:defun list-detect-mitigation-actions-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id violation-id thing-name
                     start-time end-time max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id violation-id thing-name start-time end-time
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-detect-mitigation-actions-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/detect/mitigationactions/executions"
                                                        "ListDetectMitigationActionsExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-detect-mitigation-actions-executions))
(common-lisp:progn
 (common-lisp:defun list-detect-mitigation-actions-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token start-time
                     end-time)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-detect-mitigation-actions-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/detect/mitigationactions/tasks"
                                                        "ListDetectMitigationActionsTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-detect-mitigation-actions-tasks))
(common-lisp:progn
 (common-lisp:defun list-dimensions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dimensions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/dimensions"
                                                        "ListDimensions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dimensions))
(common-lisp:progn
 (common-lisp:defun list-domain-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size service-type)
   (common-lisp:declare (common-lisp:ignorable marker page-size service-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-domain-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/domainConfigurations"
                                                        "ListDomainConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domain-configurations))
(common-lisp:progn
 (common-lisp:defun list-fleet-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleet-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/fleet-metrics"
                                                        "ListFleetMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-fleet-metrics))
(common-lisp:progn
 (common-lisp:defun list-indices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-indices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/indices"
                                                        "ListIndices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-indices))
(common-lisp:progn
 (common-lisp:defun list-job-executions-for-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable job-id status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-job-executions-for-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A/things"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "ListJobExecutionsForJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-job-executions-for-job))
(common-lisp:progn
 (common-lisp:defun list-job-executions-for-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name status namespace-id
                     max-results next-token job-id)
   (common-lisp:declare
    (common-lisp:ignorable thing-name status namespace-id max-results
     next-token job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-job-executions-for-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/jobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListJobExecutionsForThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-job-executions-for-thing))
(common-lisp:progn
 (common-lisp:defun list-job-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-job-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/job-templates"
                                                        "ListJobTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-job-templates))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status target-selection max-results
                     next-token thing-group-name thing-group-id namespace-id)
   (common-lisp:declare
    (common-lisp:ignorable status target-selection max-results next-token
     thing-group-name thing-group-id namespace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/jobs"
                                                        "ListJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-managed-job-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable template-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-managed-job-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/managed-job-templates"
                                                        "ListManagedJobTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-managed-job-templates))
(common-lisp:progn
 (common-lisp:defun list-metric-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name metric-name dimension-name
                     dimension-value-operator start-time end-time max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable thing-name metric-name dimension-name
     dimension-value-operator start-time end-time max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-metric-values-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/metric-values"
                                                        "ListMetricValues"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-metric-values))
(common-lisp:progn
 (common-lisp:defun list-mitigation-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable action-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mitigation-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/mitigationactions/actions"
                                                        "ListMitigationActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mitigation-actions))
(common-lisp:progn
 (common-lisp:defun list-otaupdates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token ota-update-status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token ota-update-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-otaupdates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/otaUpdates"
                                                        "ListOTAUpdates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-otaupdates))
(common-lisp:progn
 (common-lisp:defun list-outgoing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-outgoing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/certificates-out-going"
                                                        "ListOutgoingCertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-outgoing-certificates))
(common-lisp:progn
 (common-lisp:defun list-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name status max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name status max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "ListPackageVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-package-versions))
(common-lisp:progn
 (common-lisp:defun list-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/packages"
                                                        "ListPackages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-packages))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/policies"
                                                        "ListPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policy-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable policy-name marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/policy-principals"
                                                        "ListPolicyPrincipals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-policy-principals))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "ListPolicyVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-principal-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable principal marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/principal-policies"
                                                        "ListPrincipalPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-principal-policies))
(common-lisp:progn
 (common-lisp:defun list-principal-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results principal)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/principals/things"
                                                        "ListPrincipalThings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-principal-things))
(common-lisp:progn
 (common-lisp:defun list-provisioning-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable template-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioning-template-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "ListProvisioningTemplateVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-provisioning-template-versions))
(common-lisp:progn
 (common-lisp:defun list-provisioning-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-provisioning-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/provisioning-templates"
                                                        "ListProvisioningTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-provisioning-templates))
(common-lisp:progn
 (common-lisp:defun list-related-resources-for-audit-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable finding-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-related-resources-for-audit-finding-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/relatedResources"
                                                        "ListRelatedResourcesForAuditFinding"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-related-resources-for-audit-finding))
(common-lisp:progn
 (common-lisp:defun list-role-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/role-aliases"
                                                        "ListRoleAliases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-role-aliases))
(common-lisp:progn
 (common-lisp:defun list-scheduled-audits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scheduled-audits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/audit/scheduledaudits"
                                                        "ListScheduledAudits"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-scheduled-audits))
(common-lisp:progn
 (common-lisp:defun list-security-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results dimension-name
                     metric-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results dimension-name metric-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-security-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/security-profiles"
                                                        "ListSecurityProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-security-profiles))
(common-lisp:progn
 (common-lisp:defun list-security-profiles-for-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results recursive
                     security-profile-target-arn)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results recursive
     security-profile-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-security-profiles-for-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/security-profiles-for-target"
                                                        "ListSecurityProfilesForTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-security-profiles-for-target))
(common-lisp:progn
 (common-lisp:defun list-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/streams"
                                                        "ListStreams"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-streams))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-targets-for-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name marker page-size)
   (common-lisp:declare (common-lisp:ignorable policy-name marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-targets-for-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy-targets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "ListTargetsForPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-targets-for-policy))
(common-lisp:progn
 (common-lisp:defun list-targets-for-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-targets-for-security-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A/targets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "ListTargetsForSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-targets-for-security-profile))
(common-lisp:progn
 (common-lisp:defun list-thing-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results parent-group
                     name-prefix-filter recursive)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results parent-group
     name-prefix-filter recursive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/thing-groups"
                                                        "ListThingGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-thing-groups))
(common-lisp:progn
 (common-lisp:defun list-thing-groups-for-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable thing-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-thing-groups-for-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/thing-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListThingGroupsForThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-thing-groups-for-thing))
(common-lisp:progn
 (common-lisp:defun list-thing-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results thing-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListThingPrincipals"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-thing-principals))
(common-lisp:progn
 (common-lisp:defun list-thing-registration-task-reports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id report-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable task-id report-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-thing-registration-task-reports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-registration-tasks/~A/reports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "ListThingRegistrationTaskReports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-thing-registration-task-reports))
(common-lisp:progn
 (common-lisp:defun list-thing-registration-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-thing-registration-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/thing-registration-tasks"
                                                        "ListThingRegistrationTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-thing-registration-tasks))
(common-lisp:progn
 (common-lisp:defun list-thing-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results thing-type-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/thing-types"
                                                        "ListThingTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-thing-types))
(common-lisp:progn
 (common-lisp:defun list-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results attribute-name
                     attribute-value thing-type-name
                     use-prefix-attribute-value)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results attribute-name
     attribute-value thing-type-name use-prefix-attribute-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/things"
                                                        "ListThings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-things))
(common-lisp:progn
 (common-lisp:defun list-things-in-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-things-in-billing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A/things"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "ListThingsInBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-things-in-billing-group))
(common-lisp:progn
 (common-lisp:defun list-things-in-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name recursive next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name recursive next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-things-in-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A/things"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "ListThingsInThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-things-in-thing-group))
(common-lisp:progn
 (common-lisp:defun list-topic-rule-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-topic-rule-destinations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/destinations"
                                                        "ListTopicRuleDestinations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-topic-rule-destinations))
(common-lisp:progn
 (common-lisp:defun list-topic-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key topic max-results next-token
                     rule-disabled)
   (common-lisp:declare
    (common-lisp:ignorable topic max-results next-token rule-disabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-topic-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/rules"
                                                        "ListTopicRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-topic-rules))
(common-lisp:progn
 (common-lisp:defun list-v2logging-levels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable target-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-v2logging-levels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v2LoggingLevel"
                                                        "ListV2LoggingLevels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-v2logging-levels))
(common-lisp:progn
 (common-lisp:defun list-violation-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time thing-name
                     security-profile-name behavior-criteria-type
                     list-suppressed-alerts verification-state next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time thing-name security-profile-name
     behavior-criteria-type list-suppressed-alerts verification-state
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-violation-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/violation-events"
                                                        "ListViolationEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-violation-events))
(common-lisp:progn
 (common-lisp:defun put-verification-state-on-violation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key violation-id verification-state
                     verification-state-description)
   (common-lisp:declare
    (common-lisp:ignorable violation-id verification-state
     verification-state-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-verification-state-on-violation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/violations/verification-state/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'violation-id))))
                                                        "PutVerificationStateOnViolation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-verification-state-on-violation))
(common-lisp:progn
 (common-lisp:defun register-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate verification-certificate
                     set-as-active allow-auto-registration registration-config
                     tags certificate-mode)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate verification-certificate
     set-as-active allow-auto-registration registration-config tags
     certificate-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/cacertificate"
                                                        "RegisterCACertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-cacertificate))
(common-lisp:progn
 (common-lisp:defun register-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-pem ca-certificate-pem
                     set-as-active status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-pem ca-certificate-pem set-as-active
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/certificate/register"
                                                        "RegisterCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-certificate))
(common-lisp:progn
 (common-lisp:defun register-certificate-without-ca
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-pem status)
   (common-lisp:declare (common-lisp:ignorable certificate-pem status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-certificate-without-carequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/certificate/register-no-ca"
                                                        "RegisterCertificateWithoutCA"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-certificate-without-ca))
(common-lisp:progn
 (common-lisp:defun register-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body parameters)
   (common-lisp:declare (common-lisp:ignorable template-body parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/things"
                                                        "RegisterThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-thing))
(common-lisp:progn
 (common-lisp:defun reject-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id reject-reason)
   (common-lisp:declare (common-lisp:ignorable certificate-id reject-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/reject-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "RejectCertificateTransfer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun remove-thing-from-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name billing-group-arn
                     thing-name thing-arn)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-arn thing-name
     thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-thing-from-billing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/billing-groups/removeThingFromBillingGroup"
                                                        "RemoveThingFromBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-thing-from-billing-group))
(common-lisp:progn
 (common-lisp:defun remove-thing-from-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-arn
                     thing-name thing-arn)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-arn thing-name
     thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-thing-from-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/thing-groups/removeThingFromThingGroup"
                                                        "RemoveThingFromThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-thing-from-thing-group))
(common-lisp:progn
 (common-lisp:defun replace-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload)
   (common-lisp:declare (common-lisp:ignorable rule-name topic-rule-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replace-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "ReplaceTopicRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'replace-topic-rule))
(common-lisp:progn
 (common-lisp:defun search-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key index-name query-string next-token
                     max-results query-version)
   (common-lisp:declare
    (common-lisp:ignorable index-name query-string next-token max-results
     query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indices/search"
                                                        "SearchIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-index))
(common-lisp:progn
 (common-lisp:defun set-default-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name)
   (common-lisp:declare (common-lisp:ignorable authorizer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-default-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/default-authorizer"
                                                        "SetDefaultAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-default-authorizer))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "SetDefaultPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun set-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options-payload)
   (common-lisp:declare (common-lisp:ignorable logging-options-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/loggingOptions"
                                                        "SetLoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-logging-options))
(common-lisp:progn
 (common-lisp:defun set-v2logging-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-target log-level)
   (common-lisp:declare (common-lisp:ignorable log-target log-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-v2logging-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v2LoggingLevel"
                                                        "SetV2LoggingLevel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-v2logging-level))
(common-lisp:progn
 (common-lisp:defun set-v2logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn default-log-level
                     disable-all-logs)
   (common-lisp:declare
    (common-lisp:ignorable role-arn default-log-level disable-all-logs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-v2logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v2LoggingOptions"
                                                        "SetV2LoggingOptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-v2logging-options))
(common-lisp:progn
 (common-lisp:defun start-audit-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id target
                     audit-check-to-actions-mapping client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id target audit-check-to-actions-mapping
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-audit-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "StartAuditMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-audit-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun start-detect-mitigation-actions-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id target actions
                     violation-event-occurrence-range
                     include-only-active-violations include-suppressed-alerts
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable task-id target actions
     violation-event-occurrence-range include-only-active-violations
     include-suppressed-alerts client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-detect-mitigation-actions-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/detect/mitigationactions/tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "StartDetectMitigationActionsTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-detect-mitigation-actions-task))
(common-lisp:progn
 (common-lisp:defun start-on-demand-audit-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-check-names)
   (common-lisp:declare (common-lisp:ignorable target-check-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-on-demand-audit-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/audit/tasks"
                                                        "StartOnDemandAuditTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-on-demand-audit-task))
(common-lisp:progn
 (common-lisp:defun start-thing-registration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body input-file-bucket
                     input-file-key role-arn)
   (common-lisp:declare
    (common-lisp:ignorable template-body input-file-bucket input-file-key
     role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-thing-registration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/thing-registration-tasks"
                                                        "StartThingRegistrationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-thing-registration-task))
(common-lisp:progn
 (common-lisp:defun stop-thing-registration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-thing-registration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-registration-tasks/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "StopThingRegistrationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-thing-registration-task))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/tags"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal cognito-identity-pool-id
                     auth-infos client-id policy-names-to-add
                     policy-names-to-skip)
   (common-lisp:declare
    (common-lisp:ignorable principal cognito-identity-pool-id auth-infos
     client-id policy-names-to-add policy-names-to-skip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-authorization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/test-authorization"
                                                        "TestAuthorization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-authorization))
(common-lisp:progn
 (common-lisp:defun test-invoke-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name token token-signature
                     http-context mqtt-context tls-context)
   (common-lisp:declare
    (common-lisp:ignorable authorizer-name token token-signature http-context
     mqtt-context tls-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-invoke-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A/test"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "TestInvokeAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-invoke-authorizer))
(common-lisp:progn
 (common-lisp:defun transfer-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id target-aws-account
                     transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id target-aws-account transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/transfer-certificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "TransferCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'transfer-certificate))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/untag"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-account-audit-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn
                     audit-notification-target-configurations
                     audit-check-configurations)
   (common-lisp:declare
    (common-lisp:ignorable role-arn audit-notification-target-configurations
     audit-check-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-audit-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/audit/configuration"
                                                        "UpdateAccountAuditConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-account-audit-configuration))
(common-lisp:progn
 (common-lisp:defun update-audit-suppression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-name resource-identifier
                     expiration-date suppress-indefinitely description)
   (common-lisp:declare
    (common-lisp:ignorable check-name resource-identifier expiration-date
     suppress-indefinitely description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-audit-suppression-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/audit/suppressions/update"
                                                        "UpdateAuditSuppression"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-audit-suppression))
(common-lisp:progn
 (common-lisp:defun update-authorizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorizer-name authorizer-function-arn
                     token-key-name token-signing-public-keys status
                     enable-caching-for-http)
   (common-lisp:declare
    (common-lisp:ignorable authorizer-name authorizer-function-arn
     token-key-name token-signing-public-keys status enable-caching-for-http))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-authorizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/authorizer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'authorizer-name))))
                                                        "UpdateAuthorizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-authorizer))
(common-lisp:progn
 (common-lisp:defun update-billing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key billing-group-name
                     billing-group-properties expected-version)
   (common-lisp:declare
    (common-lisp:ignorable billing-group-name billing-group-properties
     expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-billing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/billing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'billing-group-name))))
                                                        "UpdateBillingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-billing-group))
(common-lisp:progn
 (common-lisp:defun update-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status
                     new-auto-registration-status registration-config
                     remove-auto-registration)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id new-status
     new-auto-registration-status registration-config
     remove-auto-registration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "UpdateCACertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cacertificate))
(common-lisp:progn
 (common-lisp:defun update-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status)
   (common-lisp:declare (common-lisp:ignorable certificate-id new-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "UpdateCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-certificate))
(common-lisp:progn
 (common-lisp:defun update-certificate-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-provider-name
                     lambda-function-arn account-default-for-operations)
   (common-lisp:declare
    (common-lisp:ignorable certificate-provider-name lambda-function-arn
     account-default-for-operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-certificate-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificate-providers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-provider-name))))
                                                        "UpdateCertificateProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-certificate-provider))
(common-lisp:progn
 (common-lisp:defun update-custom-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name display-name)
   (common-lisp:declare (common-lisp:ignorable metric-name display-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-custom-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/custom-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "UpdateCustomMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-custom-metric))
(common-lisp:progn
 (common-lisp:defun update-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name string-values)
   (common-lisp:declare (common-lisp:ignorable name string-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dimension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dimensions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateDimension"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dimension))
(common-lisp:progn
 (common-lisp:defun update-domain-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-configuration-name
                     authorizer-config domain-configuration-status
                     remove-authorizer-config tls-config
                     server-certificate-config)
   (common-lisp:declare
    (common-lisp:ignorable domain-configuration-name authorizer-config
     domain-configuration-status remove-authorizer-config tls-config
     server-certificate-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-domain-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/domainConfigurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-configuration-name))))
                                                        "UpdateDomainConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-domain-configuration))
(common-lisp:progn
 (common-lisp:defun update-dynamic-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-properties
                     expected-version index-name query-string query-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-properties
     expected-version index-name query-string query-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-dynamic-thing-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dynamic-thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "UpdateDynamicThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dynamic-thing-group))
(common-lisp:progn
 (common-lisp:defun update-event-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-configurations)
   (common-lisp:declare (common-lisp:ignorable event-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-event-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/event-configurations"
                                                        "UpdateEventConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-event-configurations))
(common-lisp:progn
 (common-lisp:defun update-fleet-metric
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key metric-name query-string aggregation-type
                     period aggregation-field description query-version
                     index-name unit expected-version)
   (common-lisp:declare
    (common-lisp:ignorable metric-name query-string aggregation-type period
     aggregation-field description query-version index-name unit
     expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-metric-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fleet-metric/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'metric-name))))
                                                        "UpdateFleetMetric"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-fleet-metric))
(common-lisp:progn
 (common-lisp:defun update-indexing-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-indexing-configuration
                     thing-group-indexing-configuration)
   (common-lisp:declare
    (common-lisp:ignorable thing-indexing-configuration
     thing-group-indexing-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-indexing-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/indexing/config"
                                                        "UpdateIndexingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-indexing-configuration))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id description presigned-url-config
                     job-executions-rollout-config abort-config timeout-config
                     namespace-id job-executions-retry-config)
   (common-lisp:declare
    (common-lisp:ignorable job-id description presigned-url-config
     job-executions-rollout-config abort-config timeout-config namespace-id
     job-executions-retry-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "UpdateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-mitigation-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name role-arn action-params)
   (common-lisp:declare
    (common-lisp:ignorable action-name role-arn action-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mitigation-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/mitigationactions/actions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'action-name))))
                                                        "UpdateMitigationAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-mitigation-action))
(common-lisp:progn
 (common-lisp:defun update-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name description
                     default-version-name unset-default-version client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name description default-version-name
     unset-default-version client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))))
                                                        "UpdatePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-package))
(common-lisp:progn
 (common-lisp:defun update-package-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key version-update-by-jobs-config
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable version-update-by-jobs-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-package-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        "/package-configuration"
                                                        "UpdatePackageConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-package-configuration))
(common-lisp:progn
 (common-lisp:defun update-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name version-name description
                     attributes action client-token)
   (common-lisp:declare
    (common-lisp:ignorable package-name version-name description attributes
     action client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/packages/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version-name))))
                                                        "UpdatePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-package-version))
(common-lisp:progn
 (common-lisp:defun update-provisioning-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name description enabled
                     default-version-id provisioning-role-arn
                     pre-provisioning-hook remove-pre-provisioning-hook)
   (common-lisp:declare
    (common-lisp:ignorable template-name description enabled default-version-id
     provisioning-role-arn pre-provisioning-hook remove-pre-provisioning-hook))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-provisioning-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/provisioning-templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdateProvisioningTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-provisioning-template))
(common-lisp:progn
 (common-lisp:defun update-role-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-alias role-arn
                     credential-duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable role-alias role-arn credential-duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/role-aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'role-alias))))
                                                        "UpdateRoleAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-role-alias))
(common-lisp:progn
 (common-lisp:defun update-scheduled-audit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key frequency day-of-month day-of-week
                     target-check-names scheduled-audit-name)
   (common-lisp:declare
    (common-lisp:ignorable frequency day-of-month day-of-week
     target-check-names scheduled-audit-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scheduled-audit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/audit/scheduledaudits/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scheduled-audit-name))))
                                                        "UpdateScheduledAudit"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-scheduled-audit))
(common-lisp:progn
 (common-lisp:defun update-security-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-profile-name
                     security-profile-description behaviors alert-targets
                     additional-metrics-to-retain
                     additional-metrics-to-retain-v2 delete-behaviors
                     delete-alert-targets delete-additional-metrics-to-retain
                     expected-version metrics-export-config
                     delete-metrics-export-config)
   (common-lisp:declare
    (common-lisp:ignorable security-profile-name security-profile-description
     behaviors alert-targets additional-metrics-to-retain
     additional-metrics-to-retain-v2 delete-behaviors delete-alert-targets
     delete-additional-metrics-to-retain expected-version metrics-export-config
     delete-metrics-export-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-security-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/security-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'security-profile-name))))
                                                        "UpdateSecurityProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-security-profile))
(common-lisp:progn
 (common-lisp:defun update-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-id description files role-arn)
   (common-lisp:declare
    (common-lisp:ignorable stream-id description files role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "UpdateStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-stream))
(common-lisp:progn
 (common-lisp:defun update-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload expected-version remove-thing-type)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload
     expected-version remove-thing-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "UpdateThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-thing))
(common-lisp:progn
 (common-lisp:defun update-thing-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-group-name thing-group-properties
                     expected-version)
   (common-lisp:declare
    (common-lisp:ignorable thing-group-name thing-group-properties
     expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thing-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-group-name))))
                                                        "UpdateThingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-thing-group))
(common-lisp:progn
 (common-lisp:defun update-thing-groups-for-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-groups-to-add
                     thing-groups-to-remove override-dynamic-groups)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-groups-to-add
     thing-groups-to-remove override-dynamic-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-thing-groups-for-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/thing-groups/updateThingGroupsForThing"
                                                        "UpdateThingGroupsForThing"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-thing-groups-for-thing))
(common-lisp:progn
 (common-lisp:defun update-topic-rule-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn status)
   (common-lisp:declare (common-lisp:ignorable arn status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-topic-rule-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" "/destinations"
                                                        "UpdateTopicRuleDestination"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-topic-rule-destination))
(common-lisp:progn
 (common-lisp:defun validate-security-profile-behaviors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key behaviors)
   (common-lisp:declare (common-lisp:ignorable behaviors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-security-profile-behaviors-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/security-profile-behaviors/validate"
                                                        "ValidateSecurityProfileBehaviors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-security-profile-behaviors))
