;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/mediaconnect/api
  (:use)
  (:nicknames #:aws/mediaconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mediaconnect/api)
(common-lisp:progn
 (common-lisp:define-condition mediaconnect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mediaconnect-error))
(common-lisp:progn
 (common-lisp:defclass mediaconnect-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "mediaconnect" :api-version
                        "2018-11-14" :host-prefix "mediaconnect" :signing-name
                        "mediaconnect" :global-host common-lisp:nil))
 (common-lisp:export 'mediaconnect-request))
(common-lisp:defvar *error-map*
  '(("AddFlowOutputs420Exception" . add-flow-outputs420exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("CreateBridge420Exception" . create-bridge420exception)
    ("CreateFlow420Exception" . create-flow420exception)
    ("CreateGateway420Exception" . create-gateway420exception)
    ("ForbiddenException" . forbidden-exception)
    ("GrantFlowEntitlements420Exception" . grant-flow-entitlements420exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:defclass add-bridge-flow-source-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-flow-source-request-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (flow-vpc-interface-attachment :initarg
                         :flow-vpc-interface-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-flow-source-request-flow-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "flowVpcInterfaceAttachment")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-flow-source-request-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-flow-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-bridge-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-flow-source-request
                    'make-add-bridge-flow-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-flow-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "FlowVpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-network-output-request common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ip-address is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-network-output-request-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "ipAddress")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-network-output-request-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "name")
                        (network-name :initarg :network-name :initform
                         (common-lisp:error ":network-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-network-output-request-network-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "networkName")
                        (port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-network-output-request-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-add-bridge-network-output-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol")
                        (ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-network-output-request-ttl
                         :shape "__integer" :location common-lisp:nil
                         :location-name "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-network-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-bridge-network-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-network-output-request
                    'make-add-bridge-network-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-network-source-request common-lisp:nil
                       ((multicast-ip :initarg :multicast-ip :initform
                         (common-lisp:error ":multicast-ip is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-network-source-request-multicast-ip
                         :shape "__string" :location common-lisp:nil
                         :location-name "multicastIp")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-network-source-request-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "name")
                        (network-name :initarg :network-name :initform
                         (common-lisp:error ":network-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-network-source-request-network-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "networkName")
                        (port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-network-source-request-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-add-bridge-network-source-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-network-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-bridge-network-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-network-source-request
                    'make-add-bridge-network-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-ip))
      (common-lisp:list
       (common-lisp:cons "MulticastIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-output-request common-lisp:nil
                       ((network-output :initarg :network-output :initform
                         common-lisp:nil :type
                         (common-lisp:or add-bridge-network-output-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-output-request-network-output
                         :shape "AddBridgeNetworkOutputRequest" :location
                         common-lisp:nil :location-name "networkOutput"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-output-request
                    'make-add-bridge-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-output))
      (common-lisp:list
       (common-lisp:cons "NetworkOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-outputs-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-outputs-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or |__listOfAddBridgeOutputRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-outputs-request-outputs :shape
                         "__listOfAddBridgeOutputRequest" :location
                         common-lisp:nil :location-name "outputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-outputs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-outputs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-outputs-request
                    'make-add-bridge-outputs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-outputs-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-outputs-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (outputs :initarg :outputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBridgeOutput|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-outputs-response-outputs
                         :shape "__listOfBridgeOutput" :location
                         common-lisp:nil :location-name "outputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-outputs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-outputs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-outputs-response
                    'make-add-bridge-outputs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-source-request common-lisp:nil
                       ((flow-source :initarg :flow-source :initform
                         common-lisp:nil :type
                         (common-lisp:or add-bridge-flow-source-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-source-request-flow-source
                         :shape "AddBridgeFlowSourceRequest" :location
                         common-lisp:nil :location-name "flowSource")
                        (network-source :initarg :network-source :initform
                         common-lisp:nil :type
                         (common-lisp:or add-bridge-network-source-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-source-request-network-source
                         :shape "AddBridgeNetworkSourceRequest" :location
                         common-lisp:nil :location-name "networkSource"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-source-request
                    'make-add-bridge-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source))
      (common-lisp:list
       (common-lisp:cons "FlowSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source))
      (common-lisp:list
       (common-lisp:cons "NetworkSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-sources-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-sources-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or |__listOfAddBridgeSourceRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-sources-request-sources :shape
                         "__listOfAddBridgeSourceRequest" :location
                         common-lisp:nil :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-sources-request
                    'make-add-bridge-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-sources-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-bridge-sources-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBridgeSource|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-bridge-sources-response-sources
                         :shape "__listOfBridgeSource" :location
                         common-lisp:nil :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-bridge-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-bridge-sources-response
                    'make-add-bridge-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-egress-gateway-bridge-request common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :initform
                         (common-lisp:error ":max-bitrate is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-egress-gateway-bridge-request-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-egress-gateway-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-egress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-egress-gateway-bridge-request
                    'make-add-egress-gateway-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-egress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-egress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-egress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-media-streams-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-flow-media-streams-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (media-streams :initarg :media-streams :initform
                         (common-lisp:error ":media-streams is required") :type
                         (common-lisp:or |__listOfAddMediaStreamRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-flow-media-streams-request-media-streams
                         :shape "__listOfAddMediaStreamRequest" :location
                         common-lisp:nil :location-name "mediaStreams"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-media-streams-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-media-streams-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-media-streams-request
                    'make-add-flow-media-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-media-streams-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-add-flow-media-streams-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (media-streams :initarg :media-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMediaStream|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-flow-media-streams-response-media-streams
                         :shape "__listOfMediaStream" :location common-lisp:nil
                         :location-name "mediaStreams"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-media-streams-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-media-streams-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-media-streams-response
                    'make-add-flow-media-streams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition add-flow-outputs420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       add-flow-outputs420exception-message)))
 (common-lisp:export
  (common-lisp:list 'add-flow-outputs420exception
                    'add-flow-outputs420exception-message)))
(common-lisp:progn
 (common-lisp:defclass add-flow-outputs-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-flow-outputs-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn")
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or |__listOfAddOutputRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-flow-outputs-request-outputs :shape
                         "__listOfAddOutputRequest" :location common-lisp:nil
                         :location-name "outputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-outputs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-outputs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-outputs-request 'make-add-flow-outputs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-outputs-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-add-flow-outputs-response-flow-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "flowArn")
                        (outputs :initarg :outputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor
                         struct-shape-add-flow-outputs-response-outputs :shape
                         "__listOfOutput" :location common-lisp:nil
                         :location-name "outputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-outputs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-outputs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-outputs-response
                    'make-add-flow-outputs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-sources-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-flow-sources-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn")
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or |__listOfSetSourceRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-flow-sources-request-sources :shape
                         "__listOfSetSourceRequest" :location common-lisp:nil
                         :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-sources-request 'make-add-flow-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-sources-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-add-flow-sources-response-flow-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "flowArn")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfSource| common-lisp:null)
                         :accessor
                         struct-shape-add-flow-sources-response-sources :shape
                         "__listOfSource" :location common-lisp:nil
                         :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-sources-response
                    'make-add-flow-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-vpc-interfaces-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-flow-vpc-interfaces-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (vpc-interfaces :initarg :vpc-interfaces :initform
                         (common-lisp:error ":vpc-interfaces is required")
                         :type
                         (common-lisp:or |__listOfVpcInterfaceRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-flow-vpc-interfaces-request-vpc-interfaces
                         :shape "__listOfVpcInterfaceRequest" :location
                         common-lisp:nil :location-name "vpcInterfaces"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-vpc-interfaces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-vpc-interfaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-vpc-interfaces-request
                    'make-add-flow-vpc-interfaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-vpc-interfaces-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-add-flow-vpc-interfaces-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (vpc-interfaces :initarg :vpc-interfaces :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfVpcInterface|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-flow-vpc-interfaces-response-vpc-interfaces
                         :shape "__listOfVpcInterface" :location
                         common-lisp:nil :location-name "vpcInterfaces"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-flow-vpc-interfaces-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-vpc-interfaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-flow-vpc-interfaces-response
                    'make-add-flow-vpc-interfaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-ingress-gateway-bridge-request common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :initform
                         (common-lisp:error ":max-bitrate is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-ingress-gateway-bridge-request-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (max-outputs :initarg :max-outputs :initform
                         (common-lisp:error ":max-outputs is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-ingress-gateway-bridge-request-max-outputs
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxOutputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-ingress-gateway-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-ingress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-ingress-gateway-bridge-request
                    'make-add-ingress-gateway-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-ingress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-ingress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-outputs))
      (common-lisp:list
       (common-lisp:cons "MaxOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-ingress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-maintenance common-lisp:nil
                       ((maintenance-day :initarg :maintenance-day :initform
                         (common-lisp:error ":maintenance-day is required")
                         :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor struct-shape-add-maintenance-maintenance-day
                         :shape "MaintenanceDay" :location common-lisp:nil
                         :location-name "maintenanceDay")
                        (maintenance-start-hour :initarg
                         :maintenance-start-hour :initform
                         (common-lisp:error
                          ":maintenance-start-hour is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-add-maintenance-maintenance-start-hour
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceStartHour"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-maintenance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-maintenance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-maintenance 'make-add-maintenance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-hour))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-maintenance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-media-stream-request common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or media-stream-attributes-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-media-stream-request-attributes
                         :shape "MediaStreamAttributesRequest" :location
                         common-lisp:nil :location-name "attributes")
                        (clock-rate :initarg :clock-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-media-stream-request-clock-rate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "clockRate")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-media-stream-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (media-stream-id :initarg :media-stream-id :initform
                         (common-lisp:error ":media-stream-id is required")
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-media-stream-request-media-stream-id
                         :shape "__integer" :location common-lisp:nil
                         :location-name "mediaStreamId")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-add-media-stream-request-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName")
                        (media-stream-type :initarg :media-stream-type
                         :initform
                         (common-lisp:error ":media-stream-type is required")
                         :type
                         (common-lisp:or media-stream-type common-lisp:null)
                         :accessor
                         struct-shape-add-media-stream-request-media-stream-type
                         :shape "MediaStreamType" :location common-lisp:nil
                         :location-name "mediaStreamType")
                        (video-format :initarg :video-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-media-stream-request-video-format
                         :shape "__string" :location common-lisp:nil
                         :location-name "videoFormat"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-media-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-media-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-media-stream-request 'make-add-media-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-media-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-rate))
      (common-lisp:list
       (common-lisp:cons "ClockRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-id))
      (common-lisp:list
       (common-lisp:cons "MediaStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-format))
      (common-lisp:list
       (common-lisp:cons "VideoFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-media-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-output-request common-lisp:nil
                       ((cidr-allow-list :initarg :cidr-allow-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-add-output-request-cidr-allow-list :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "cidrAllowList")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-output-request-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-output-request-destination :shape
                         "__string" :location common-lisp:nil :location-name
                         "destination")
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-add-output-request-encryption :shape
                         "Encryption" :location common-lisp:nil :location-name
                         "encryption")
                        (max-latency :initarg :max-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-add-output-request-max-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxLatency")
                        (media-stream-output-configurations :initarg
                         :media-stream-output-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMediaStreamOutputConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         struct-shape-add-output-request-media-stream-output-configurations
                         :shape "__listOfMediaStreamOutputConfigurationRequest"
                         :location common-lisp:nil :location-name
                         "mediaStreamOutputConfigurations")
                        (min-latency :initarg :min-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-add-output-request-min-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "minLatency")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-output-request-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-add-output-request-port :shape
                         "__integer" :location common-lisp:nil :location-name
                         "port")
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-add-output-request-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         "protocol")
                        (remote-id :initarg :remote-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-output-request-remote-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "remoteId")
                        (sender-control-port :initarg :sender-control-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-output-request-sender-control-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "senderControlPort")
                        (smoothing-latency :initarg :smoothing-latency
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-add-output-request-smoothing-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "smoothingLatency")
                        (stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-add-output-request-stream-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "streamId")
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-output-request-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "vpcInterfaceAttachment"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-output-request 'make-add-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-allow-list))
      (common-lisp:list
       (common-lisp:cons "CidrAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-output-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamOutputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-id))
      (common-lisp:list
       (common-lisp:cons "RemoteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smoothing-latency))
      (common-lisp:list
       (common-lisp:cons "SmoothingLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-output-request))
   common-lisp:nil))
(common-lisp:deftype algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass bridge common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-bridge-arn :shape "__string"
                         :location common-lisp:nil :location-name "bridgeArn")
                        (bridge-messages :initarg :bridge-messages :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor struct-shape-bridge-bridge-messages :shape
                         "__listOfMessageDetail" :location common-lisp:nil
                         :location-name "bridgeMessages")
                        (bridge-state :initarg :bridge-state :initform
                         (common-lisp:error ":bridge-state is required") :type
                         (common-lisp:or bridge-state common-lisp:null)
                         :accessor struct-shape-bridge-bridge-state :shape
                         "BridgeState" :location common-lisp:nil :location-name
                         "bridgeState")
                        (egress-gateway-bridge :initarg :egress-gateway-bridge
                         :initform common-lisp:nil :type
                         (common-lisp:or egress-gateway-bridge
                                         common-lisp:null)
                         :accessor struct-shape-bridge-egress-gateway-bridge
                         :shape "EgressGatewayBridge" :location common-lisp:nil
                         :location-name "egressGatewayBridge")
                        (ingress-gateway-bridge :initarg
                         :ingress-gateway-bridge :initform common-lisp:nil
                         :type
                         (common-lisp:or ingress-gateway-bridge
                                         common-lisp:null)
                         :accessor struct-shape-bridge-ingress-gateway-bridge
                         :shape "IngressGatewayBridge" :location
                         common-lisp:nil :location-name "ingressGatewayBridge")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (outputs :initarg :outputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBridgeOutput|
                                         common-lisp:null)
                         :accessor struct-shape-bridge-outputs :shape
                         "__listOfBridgeOutput" :location common-lisp:nil
                         :location-name "outputs")
                        (placement-arn :initarg :placement-arn :initform
                         (common-lisp:error ":placement-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-placement-arn :shape "__string"
                         :location common-lisp:nil :location-name
                         "placementArn")
                        (source-failover-config :initarg
                         :source-failover-config :initform common-lisp:nil
                         :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor struct-shape-bridge-source-failover-config
                         :shape "FailoverConfig" :location common-lisp:nil
                         :location-name "sourceFailoverConfig")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfBridgeSource|
                                         common-lisp:null)
                         :accessor struct-shape-bridge-sources :shape
                         "__listOfBridgeSource" :location common-lisp:nil
                         :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bridge 'make-bridge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-messages))
      (common-lisp:list
       (common-lisp:cons "BridgeMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-state))
      (common-lisp:list
       (common-lisp:cons "BridgeState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "EgressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "IngressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-arn))
      (common-lisp:list
       (common-lisp:cons "PlacementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-flow-output common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-flow-output-flow-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "flowArn")
                        (flow-source-arn :initarg :flow-source-arn :initform
                         (common-lisp:error ":flow-source-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-bridge-flow-output-flow-source-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "flowSourceArn")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-flow-output-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge-flow-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-flow-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bridge-flow-output 'make-bridge-flow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-flow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-flow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source-arn))
      (common-lisp:list
       (common-lisp:cons "FlowSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-flow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-flow-source common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-flow-source-flow-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "flowArn")
                        (flow-vpc-interface-attachment :initarg
                         :flow-vpc-interface-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-bridge-flow-source-flow-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "flowVpcInterfaceAttachment")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-flow-source-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (output-arn :initarg :output-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-flow-source-output-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "outputArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge-flow-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-flow-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bridge-flow-source 'make-bridge-flow-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-flow-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-flow-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "FlowVpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-arn))
      (common-lisp:list
       (common-lisp:cons "OutputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-flow-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-network-output common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ip-address is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-network-output-ip-address :shape
                         "__string" :location common-lisp:nil :location-name
                         "ipAddress")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-network-output-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (network-name :initarg :network-name :initform
                         (common-lisp:error ":network-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-network-output-network-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "networkName")
                        (port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-bridge-network-output-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-bridge-network-output-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         "protocol")
                        (ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-bridge-network-output-ttl
                         :shape "__integer" :location common-lisp:nil
                         :location-name "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge-network-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-network-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bridge-network-output 'make-bridge-network-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-network-source common-lisp:nil
                       ((multicast-ip :initarg :multicast-ip :initform
                         (common-lisp:error ":multicast-ip is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-network-source-multicast-ip :shape
                         "__string" :location common-lisp:nil :location-name
                         "multicastIp")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-network-source-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (network-name :initarg :network-name :initform
                         (common-lisp:error ":network-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-bridge-network-source-network-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "networkName")
                        (port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-bridge-network-source-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-bridge-network-source-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         "protocol"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge-network-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-network-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bridge-network-source 'make-bridge-network-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-ip))
      (common-lisp:list
       (common-lisp:cons "MulticastIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-output common-lisp:nil
                       ((flow-output :initarg :flow-output :initform
                         common-lisp:nil :type
                         (common-lisp:or bridge-flow-output common-lisp:null)
                         :accessor struct-shape-bridge-output-flow-output
                         :shape "BridgeFlowOutput" :location common-lisp:nil
                         :location-name "flowOutput")
                        (network-output :initarg :network-output :initform
                         common-lisp:nil :type
                         (common-lisp:or bridge-network-output
                                         common-lisp:null)
                         :accessor struct-shape-bridge-output-network-output
                         :shape "BridgeNetworkOutput" :location common-lisp:nil
                         :location-name "networkOutput"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bridge-output 'make-bridge-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-output))
      (common-lisp:list
       (common-lisp:cons "FlowOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-output))
      (common-lisp:list
       (common-lisp:cons "NetworkOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-output))
   common-lisp:nil))
(common-lisp:deftype bridge-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bridge-source common-lisp:nil
                       ((flow-source :initarg :flow-source :initform
                         common-lisp:nil :type
                         (common-lisp:or bridge-flow-source common-lisp:null)
                         :accessor struct-shape-bridge-source-flow-source
                         :shape "BridgeFlowSource" :location common-lisp:nil
                         :location-name "flowSource")
                        (network-source :initarg :network-source :initform
                         common-lisp:nil :type
                         (common-lisp:or bridge-network-source
                                         common-lisp:null)
                         :accessor struct-shape-bridge-source-network-source
                         :shape "BridgeNetworkSource" :location common-lisp:nil
                         :location-name "networkSource"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bridge-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bridge-source 'make-bridge-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source))
      (common-lisp:list
       (common-lisp:cons "FlowSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source))
      (common-lisp:list
       (common-lisp:cons "NetworkSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-source))
   common-lisp:nil))
(common-lisp:deftype bridge-state () 'common-lisp:string)
(common-lisp:deftype colorimetry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition create-bridge420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-bridge420exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-bridge420exception
                    'create-bridge420exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-bridge-request common-lisp:nil
                       ((egress-gateway-bridge :initarg :egress-gateway-bridge
                         :initform common-lisp:nil :type
                         (common-lisp:or add-egress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bridge-request-egress-gateway-bridge
                         :shape "AddEgressGatewayBridgeRequest" :location
                         common-lisp:nil :location-name "egressGatewayBridge")
                        (ingress-gateway-bridge :initarg
                         :ingress-gateway-bridge :initform common-lisp:nil
                         :type
                         (common-lisp:or add-ingress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bridge-request-ingress-gateway-bridge
                         :shape "AddIngressGatewayBridgeRequest" :location
                         common-lisp:nil :location-name "ingressGatewayBridge")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-bridge-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (outputs :initarg :outputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfAddBridgeOutputRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-bridge-request-outputs
                         :shape "__listOfAddBridgeOutputRequest" :location
                         common-lisp:nil :location-name "outputs")
                        (placement-arn :initarg :placement-arn :initform
                         (common-lisp:error ":placement-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-bridge-request-placement-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "placementArn")
                        (source-failover-config :initarg
                         :source-failover-config :initform common-lisp:nil
                         :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor
                         struct-shape-create-bridge-request-source-failover-config
                         :shape "FailoverConfig" :location common-lisp:nil
                         :location-name "sourceFailoverConfig")
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or |__listOfAddBridgeSourceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-bridge-request-sources
                         :shape "__listOfAddBridgeSourceRequest" :location
                         common-lisp:nil :location-name "sources"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bridge-request 'make-create-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "EgressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "IngressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-arn))
      (common-lisp:list
       (common-lisp:cons "PlacementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bridge-response common-lisp:nil
                       ((bridge :initarg :bridge :initform common-lisp:nil
                         :type (common-lisp:or bridge common-lisp:null)
                         :accessor struct-shape-create-bridge-response-bridge
                         :shape "Bridge" :location common-lisp:nil
                         :location-name "bridge"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bridge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bridge-response 'make-create-bridge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge))
      (common-lisp:list
       (common-lisp:cons "Bridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-flow420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-flow420exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-flow420exception 'create-flow420exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-flow-request common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-flow-request-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone")
                        (entitlements :initarg :entitlements :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfGrantEntitlementRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-flow-request-entitlements :shape
                         "__listOfGrantEntitlementRequest" :location
                         common-lisp:nil :location-name "entitlements")
                        (media-streams :initarg :media-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfAddMediaStreamRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-flow-request-media-streams :shape
                         "__listOfAddMediaStreamRequest" :location
                         common-lisp:nil :location-name "mediaStreams")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-flow-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (outputs :initarg :outputs :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfAddOutputRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-flow-request-outputs
                         :shape "__listOfAddOutputRequest" :location
                         common-lisp:nil :location-name "outputs")
                        (source :initarg :source :initform common-lisp:nil
                         :type
                         (common-lisp:or set-source-request common-lisp:null)
                         :accessor struct-shape-create-flow-request-source
                         :shape "SetSourceRequest" :location common-lisp:nil
                         :location-name "source")
                        (source-failover-config :initarg
                         :source-failover-config :initform common-lisp:nil
                         :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor
                         struct-shape-create-flow-request-source-failover-config
                         :shape "FailoverConfig" :location common-lisp:nil
                         :location-name "sourceFailoverConfig")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfSetSourceRequest|
                                         common-lisp:null)
                         :accessor struct-shape-create-flow-request-sources
                         :shape "__listOfSetSourceRequest" :location
                         common-lisp:nil :location-name "sources")
                        (vpc-interfaces :initarg :vpc-interfaces :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfVpcInterfaceRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-flow-request-vpc-interfaces :shape
                         "__listOfVpcInterfaceRequest" :location
                         common-lisp:nil :location-name "vpcInterfaces")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or add-maintenance common-lisp:null)
                         :accessor struct-shape-create-flow-request-maintenance
                         :shape "AddMaintenance" :location common-lisp:nil
                         :location-name "maintenance"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-flow-request 'make-create-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-flow-response common-lisp:nil
                       ((flow :initarg :flow :initform common-lisp:nil :type
                         (common-lisp:or flow common-lisp:null) :accessor
                         struct-shape-create-flow-response-flow :shape "Flow"
                         :location common-lisp:nil :location-name "flow"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-flow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-flow-response 'make-create-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow))
      (common-lisp:list
       (common-lisp:cons "Flow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-gateway420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-gateway420exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-gateway420exception
                    'create-gateway420exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-gateway-request common-lisp:nil
                       ((egress-cidr-blocks :initarg :egress-cidr-blocks
                         :initform
                         (common-lisp:error ":egress-cidr-blocks is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-request-egress-cidr-blocks
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "egressCidrBlocks")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-gateway-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (networks :initarg :networks :initform
                         (common-lisp:error ":networks is required") :type
                         (common-lisp:or |__listOfGatewayNetwork|
                                         common-lisp:null)
                         :accessor struct-shape-create-gateway-request-networks
                         :shape "__listOfGatewayNetwork" :location
                         common-lisp:nil :location-name "networks"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-request 'make-create-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "EgressCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-response common-lisp:nil
                       ((gateway :initarg :gateway :initform common-lisp:nil
                         :type (common-lisp:or gateway common-lisp:null)
                         :accessor struct-shape-create-gateway-response-gateway
                         :shape "Gateway" :location common-lisp:nil
                         :location-name "gateway"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-response 'make-create-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bridge-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-bridge-request-bridge-arn :shape
                         "__string" :location "uri" :location-name
                         "bridgeArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bridge-request 'make-delete-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bridge-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-bridge-response-bridge-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "bridgeArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bridge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bridge-response 'make-delete-bridge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-flow-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-flow-request 'make-delete-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-flow-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-delete-flow-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-delete-flow-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-flow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-flow-response 'make-delete-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-request common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-gateway-request-gateway-arn :shape
                         "__string" :location "uri" :location-name
                         "gatewayArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-request 'make-delete-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-response common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-gateway-response-gateway-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "gatewayArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-response 'make-delete-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-gateway-instance-request common-lisp:nil
                       ((force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-deregister-gateway-instance-request-force
                         :shape "__boolean" :location "querystring"
                         :location-name "force")
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-deregister-gateway-instance-request-gateway-instance-arn
                         :shape "__string" :location "uri" :location-name
                         "gatewayInstanceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-gateway-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-gateway-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-gateway-instance-request
                    'make-deregister-gateway-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-gateway-instance-response common-lisp:nil
                       ((gateway-instance-arn :initarg :gateway-instance-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-deregister-gateway-instance-response-gateway-instance-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "gatewayInstanceArn")
                        (instance-state :initarg :instance-state :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor
                         struct-shape-deregister-gateway-instance-response-instance-state
                         :shape "InstanceState" :location common-lisp:nil
                         :location-name "instanceState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-gateway-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-gateway-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-gateway-instance-response
                    'make-deregister-gateway-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bridge-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-bridge-request-bridge-arn :shape
                         "__string" :location "uri" :location-name
                         "bridgeArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bridge-request 'make-describe-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bridge-response common-lisp:nil
                       ((bridge :initarg :bridge :initform common-lisp:nil
                         :type (common-lisp:or bridge common-lisp:null)
                         :accessor struct-shape-describe-bridge-response-bridge
                         :shape "Bridge" :location common-lisp:nil
                         :location-name "bridge"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bridge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bridge-response 'make-describe-bridge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge))
      (common-lisp:list
       (common-lisp:cons "Bridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-flow-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-flow-request 'make-describe-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-flow-response common-lisp:nil
                       ((flow :initarg :flow :initform common-lisp:nil :type
                         (common-lisp:or flow common-lisp:null) :accessor
                         struct-shape-describe-flow-response-flow :shape "Flow"
                         :location common-lisp:nil :location-name "flow")
                        (messages :initarg :messages :initform common-lisp:nil
                         :type (common-lisp:or messages common-lisp:null)
                         :accessor struct-shape-describe-flow-response-messages
                         :shape "Messages" :location common-lisp:nil
                         :location-name "messages"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-flow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-flow-response 'make-describe-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow))
      (common-lisp:list
       (common-lisp:cons "Flow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-flow-source-metadata-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-flow-source-metadata-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-flow-source-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-flow-source-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-flow-source-metadata-request
                    'make-describe-flow-source-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-source-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-source-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-source-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-flow-source-metadata-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-flow-source-metadata-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (messages :initarg :messages :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-flow-source-metadata-response-messages
                         :shape "__listOfMessageDetail" :location
                         common-lisp:nil :location-name "messages")
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or |__timestampIso8601| common-lisp:null)
                         :accessor
                         struct-shape-describe-flow-source-metadata-response-timestamp
                         :shape "__timestampIso8601" :location common-lisp:nil
                         :location-name "timestamp")
                        (transport-media-info :initarg :transport-media-info
                         :initform common-lisp:nil :type
                         (common-lisp:or transport-media-info common-lisp:null)
                         :accessor
                         struct-shape-describe-flow-source-metadata-response-transport-media-info
                         :shape "TransportMediaInfo" :location common-lisp:nil
                         :location-name "transportMediaInfo"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-flow-source-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-flow-source-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-flow-source-metadata-response
                    'make-describe-flow-source-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-source-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-source-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-media-info))
      (common-lisp:list
       (common-lisp:cons "TransportMediaInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-source-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-instance-request common-lisp:nil
                       ((gateway-instance-arn :initarg :gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-instance-request-gateway-instance-arn
                         :shape "__string" :location "uri" :location-name
                         "gatewayInstanceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-instance-request
                    'make-describe-gateway-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-instance-response common-lisp:nil
                       ((gateway-instance :initarg :gateway-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-instance common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-instance-response-gateway-instance
                         :shape "GatewayInstance" :location common-lisp:nil
                         :location-name "gatewayInstance"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-instance-response
                    'make-describe-gateway-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-instance))
      (common-lisp:list
       (common-lisp:cons "GatewayInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-request common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-gateway-request-gateway-arn
                         :shape "__string" :location "uri" :location-name
                         "gatewayArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-request 'make-describe-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-response common-lisp:nil
                       ((gateway :initarg :gateway :initform common-lisp:nil
                         :type (common-lisp:or gateway common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-response-gateway :shape
                         "Gateway" :location common-lisp:nil :location-name
                         "gateway"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-response
                    'make-describe-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-request common-lisp:nil
                       ((offering-arn :initarg :offering-arn :initform
                         (common-lisp:error ":offering-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-describe-offering-request-offering-arn
                         :shape "__string" :location "uri" :location-name
                         "offeringArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-offering-request
                    'make-describe-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-response common-lisp:nil
                       ((offering :initarg :offering :initform common-lisp:nil
                         :type (common-lisp:or offering common-lisp:null)
                         :accessor
                         struct-shape-describe-offering-response-offering
                         :shape "Offering" :location common-lisp:nil
                         :location-name "offering"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-offering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-offering-response
                    'make-describe-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering))
      (common-lisp:list
       (common-lisp:cons "Offering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-request common-lisp:nil
                       ((reservation-arn :initarg :reservation-arn :initform
                         (common-lisp:error ":reservation-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-request-reservation-arn
                         :shape "__string" :location "uri" :location-name
                         "reservationArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reservation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-request
                    'make-describe-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-response common-lisp:nil
                       ((reservation :initarg :reservation :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor
                         struct-shape-describe-reservation-response-reservation
                         :shape "Reservation" :location common-lisp:nil
                         :location-name "reservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reservation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-response
                    'make-describe-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   common-lisp:nil))
(common-lisp:deftype desired-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination-configuration common-lisp:nil
                       ((destination-ip :initarg :destination-ip :initform
                         (common-lisp:error ":destination-ip is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-destination-ip
                         :shape "__string" :location common-lisp:nil
                         :location-name "destinationIp")
                        (destination-port :initarg :destination-port :initform
                         (common-lisp:error ":destination-port is required")
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-destination-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "destinationPort")
                        (interface :initarg :interface :initform
                         (common-lisp:error ":interface is required") :type
                         (common-lisp:or interface common-lisp:null) :accessor
                         struct-shape-destination-configuration-interface
                         :shape "Interface" :location common-lisp:nil
                         :location-name "interface")
                        (outbound-ip :initarg :outbound-ip :initform
                         (common-lisp:error ":outbound-ip is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-destination-configuration-outbound-ip
                         :shape "__string" :location common-lisp:nil
                         :location-name "outboundIp"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-configuration
                    'make-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip))
      (common-lisp:list
       (common-lisp:cons "DestinationIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outbound-ip))
      (common-lisp:list
       (common-lisp:cons "OutboundIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-configuration-request common-lisp:nil
                       ((destination-ip :initarg :destination-ip :initform
                         (common-lisp:error ":destination-ip is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-request-destination-ip
                         :shape "__string" :location common-lisp:nil
                         :location-name "destinationIp")
                        (destination-port :initarg :destination-port :initform
                         (common-lisp:error ":destination-port is required")
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-request-destination-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "destinationPort")
                        (interface :initarg :interface :initform
                         (common-lisp:error ":interface is required") :type
                         (common-lisp:or interface-request common-lisp:null)
                         :accessor
                         struct-shape-destination-configuration-request-interface
                         :shape "InterfaceRequest" :location common-lisp:nil
                         :location-name "interface"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'destination-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'destination-configuration-request
                    'make-destination-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip))
      (common-lisp:list
       (common-lisp:cons "DestinationIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration-request))
   common-lisp:nil))
(common-lisp:deftype duration-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass egress-gateway-bridge common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-egress-gateway-bridge-instance-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "instanceId")
                        (max-bitrate :initarg :max-bitrate :initform
                         (common-lisp:error ":max-bitrate is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-egress-gateway-bridge-max-bitrate :shape
                         "__integer" :location common-lisp:nil :location-name
                         "maxBitrate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-egress-gateway-bridge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'egress-gateway-bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'egress-gateway-bridge 'make-egress-gateway-bridge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          egress-gateway-bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          egress-gateway-bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          egress-gateway-bridge))
   common-lisp:nil))
(common-lisp:deftype encoder-profile () 'common-lisp:string)
(common-lisp:deftype encoding-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encoding-parameters common-lisp:nil
                       ((compression-factor :initarg :compression-factor
                         :initform
                         (common-lisp:error ":compression-factor is required")
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-encoding-parameters-compression-factor
                         :shape "__double" :location common-lisp:nil
                         :location-name "compressionFactor")
                        (encoder-profile :initarg :encoder-profile :initform
                         (common-lisp:error ":encoder-profile is required")
                         :type
                         (common-lisp:or encoder-profile common-lisp:null)
                         :accessor
                         struct-shape-encoding-parameters-encoder-profile
                         :shape "EncoderProfile" :location common-lisp:nil
                         :location-name "encoderProfile"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encoding-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encoding-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encoding-parameters 'make-encoding-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encoding-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encoding-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-factor))
      (common-lisp:list
       (common-lisp:cons "CompressionFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-profile))
      (common-lisp:list
       (common-lisp:cons "EncoderProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encoding-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encoding-parameters-request common-lisp:nil
                       ((compression-factor :initarg :compression-factor
                         :initform
                         (common-lisp:error ":compression-factor is required")
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-encoding-parameters-request-compression-factor
                         :shape "__double" :location common-lisp:nil
                         :location-name "compressionFactor")
                        (encoder-profile :initarg :encoder-profile :initform
                         (common-lisp:error ":encoder-profile is required")
                         :type
                         (common-lisp:or encoder-profile common-lisp:null)
                         :accessor
                         struct-shape-encoding-parameters-request-encoder-profile
                         :shape "EncoderProfile" :location common-lisp:nil
                         :location-name "encoderProfile"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encoding-parameters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encoding-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encoding-parameters-request
                    'make-encoding-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encoding-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encoding-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-factor))
      (common-lisp:list
       (common-lisp:cons "CompressionFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-profile))
      (common-lisp:list
       (common-lisp:cons "EncoderProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encoding-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption common-lisp:nil
                       ((algorithm :initarg :algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or algorithm common-lisp:null) :accessor
                         struct-shape-encryption-algorithm :shape "Algorithm"
                         :location common-lisp:nil :location-name "algorithm")
                        (constant-initialization-vector :initarg
                         :constant-initialization-vector :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-encryption-constant-initialization-vector
                         :shape "__string" :location common-lisp:nil
                         :location-name "constantInitializationVector")
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-encryption-device-id :shape "__string"
                         :location common-lisp:nil :location-name "deviceId")
                        (key-type :initarg :key-type :initform common-lisp:nil
                         :type (common-lisp:or key-type common-lisp:null)
                         :accessor struct-shape-encryption-key-type :shape
                         "KeyType" :location common-lisp:nil :location-name
                         "keyType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-encryption-region :shape
                         "__string" :location common-lisp:nil :location-name
                         "region")
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-encryption-resource-id :shape "__string"
                         :location common-lisp:nil :location-name "resourceId")
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-encryption-role-arn :shape "__string"
                         :location common-lisp:nil :location-name "roleArn")
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-encryption-secret-arn :shape "__string"
                         :location common-lisp:nil :location-name "secretArn")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-encryption-url :shape "__string"
                         :location common-lisp:nil :location-name "url"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'encryption 'make-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constant-initialization-vector))
      (common-lisp:list
       (common-lisp:cons "ConstantInitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entitlement common-lisp:nil
                       ((data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-entitlement-data-transfer-subscriber-fee-percent
                         :shape "__integer" :location common-lisp:nil
                         :location-name "dataTransferSubscriberFeePercent")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-entitlement-description :shape "__string"
                         :location common-lisp:nil :location-name
                         "description")
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-entitlement-encryption :shape
                         "Encryption" :location common-lisp:nil :location-name
                         "encryption")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         (common-lisp:error ":entitlement-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-entitlement-entitlement-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "entitlementArn")
                        (entitlement-status :initarg :entitlement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or entitlement-status common-lisp:null)
                         :accessor struct-shape-entitlement-entitlement-status
                         :shape "EntitlementStatus" :location common-lisp:nil
                         :location-name "entitlementStatus")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-entitlement-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (subscribers :initarg :subscribers :initform
                         (common-lisp:error ":subscribers is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-entitlement-subscribers :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "subscribers"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entitlement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entitlement 'make-entitlement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-status))
      (common-lisp:list
       (common-lisp:cons "EntitlementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement))
   common-lisp:nil))
(common-lisp:deftype entitlement-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failover-config common-lisp:nil
                       ((failover-mode :initarg :failover-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or failover-mode common-lisp:null)
                         :accessor struct-shape-failover-config-failover-mode
                         :shape "FailoverMode" :location common-lisp:nil
                         :location-name "failoverMode")
                        (recovery-window :initarg :recovery-window :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-failover-config-recovery-window
                         :shape "__integer" :location common-lisp:nil
                         :location-name "recoveryWindow")
                        (source-priority :initarg :source-priority :initform
                         common-lisp:nil :type
                         (common-lisp:or source-priority common-lisp:null)
                         :accessor struct-shape-failover-config-source-priority
                         :shape "SourcePriority" :location common-lisp:nil
                         :location-name "sourcePriority")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-failover-config-state :shape "State"
                         :location common-lisp:nil :location-name "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failover-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failover-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failover-config 'make-failover-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-mode))
      (common-lisp:list
       (common-lisp:cons "FailoverMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-window))
      (common-lisp:list
       (common-lisp:cons "RecoveryWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-priority))
      (common-lisp:list
       (common-lisp:cons "SourcePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-config))
   common-lisp:nil))
(common-lisp:deftype failover-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass flow common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availability-zone is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-flow-availability-zone :shape
                         "__string" :location common-lisp:nil :location-name
                         "availabilityZone")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-flow-description :shape "__string"
                         :location common-lisp:nil :location-name
                         "description")
                        (egress-ip :initarg :egress-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-flow-egress-ip :shape "__string"
                         :location common-lisp:nil :location-name "egressIp")
                        (entitlements :initarg :entitlements :initform
                         (common-lisp:error ":entitlements is required") :type
                         (common-lisp:or |__listOfEntitlement|
                                         common-lisp:null)
                         :accessor struct-shape-flow-entitlements :shape
                         "__listOfEntitlement" :location common-lisp:nil
                         :location-name "entitlements")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-flow-flow-arn :shape "__string" :location
                         common-lisp:nil :location-name "flowArn")
                        (media-streams :initarg :media-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMediaStream|
                                         common-lisp:null)
                         :accessor struct-shape-flow-media-streams :shape
                         "__listOfMediaStream" :location common-lisp:nil
                         :location-name "mediaStreams")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-flow-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor struct-shape-flow-outputs :shape
                         "__listOfOutput" :location common-lisp:nil
                         :location-name "outputs")
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-flow-source :shape "Source" :location
                         common-lisp:nil :location-name "source")
                        (source-failover-config :initarg
                         :source-failover-config :initform common-lisp:nil
                         :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor struct-shape-flow-source-failover-config
                         :shape "FailoverConfig" :location common-lisp:nil
                         :location-name "sourceFailoverConfig")
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfSource| common-lisp:null)
                         :accessor struct-shape-flow-sources :shape
                         "__listOfSource" :location common-lisp:nil
                         :location-name "sources")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-flow-status :shape "Status" :location
                         common-lisp:nil :location-name "status")
                        (vpc-interfaces :initarg :vpc-interfaces :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfVpcInterface|
                                         common-lisp:null)
                         :accessor struct-shape-flow-vpc-interfaces :shape
                         "__listOfVpcInterface" :location common-lisp:nil
                         :location-name "vpcInterfaces")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance common-lisp:null)
                         :accessor struct-shape-flow-maintenance :shape
                         "Maintenance" :location common-lisp:nil :location-name
                         "maintenance"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flow (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'flow
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'flow 'make-flow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-ip))
      (common-lisp:list
       (common-lisp:cons "EgressIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fmtp common-lisp:nil
                       ((channel-order :initarg :channel-order :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmtp-channel-order :shape "__string"
                         :location common-lisp:nil :location-name
                         "channelOrder")
                        (colorimetry :initarg :colorimetry :initform
                         common-lisp:nil :type
                         (common-lisp:or colorimetry common-lisp:null)
                         :accessor struct-shape-fmtp-colorimetry :shape
                         "Colorimetry" :location common-lisp:nil :location-name
                         "colorimetry")
                        (exact-framerate :initarg :exact-framerate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmtp-exact-framerate :shape "__string"
                         :location common-lisp:nil :location-name
                         "exactFramerate")
                        (par :initarg :par :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmtp-par :shape "__string" :location
                         common-lisp:nil :location-name "par")
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or range common-lisp:null) :accessor
                         struct-shape-fmtp-range :shape "Range" :location
                         common-lisp:nil :location-name "range")
                        (scan-mode :initarg :scan-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-mode common-lisp:null) :accessor
                         struct-shape-fmtp-scan-mode :shape "ScanMode"
                         :location common-lisp:nil :location-name "scanMode")
                        (tcs :initarg :tcs :initform common-lisp:nil :type
                         (common-lisp:or tcs common-lisp:null) :accessor
                         struct-shape-fmtp-tcs :shape "Tcs" :location
                         common-lisp:nil :location-name "tcs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fmtp (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fmtp
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'fmtp 'make-fmtp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmtp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmtp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-order))
      (common-lisp:list
       (common-lisp:cons "ChannelOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colorimetry))
      (common-lisp:list
       (common-lisp:cons "Colorimetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-framerate))
      (common-lisp:list
       (common-lisp:cons "ExactFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par))
      (common-lisp:list
       (common-lisp:cons "Par"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-mode))
      (common-lisp:list
       (common-lisp:cons "ScanMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcs))
      (common-lisp:list
       (common-lisp:cons "Tcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmtp))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fmtp-request common-lisp:nil
                       ((channel-order :initarg :channel-order :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmtp-request-channel-order :shape
                         "__string" :location common-lisp:nil :location-name
                         "channelOrder")
                        (colorimetry :initarg :colorimetry :initform
                         common-lisp:nil :type
                         (common-lisp:or colorimetry common-lisp:null)
                         :accessor struct-shape-fmtp-request-colorimetry :shape
                         "Colorimetry" :location common-lisp:nil :location-name
                         "colorimetry")
                        (exact-framerate :initarg :exact-framerate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmtp-request-exact-framerate :shape
                         "__string" :location common-lisp:nil :location-name
                         "exactFramerate")
                        (par :initarg :par :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-fmtp-request-par :shape "__string"
                         :location common-lisp:nil :location-name "par")
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or range common-lisp:null) :accessor
                         struct-shape-fmtp-request-range :shape "Range"
                         :location common-lisp:nil :location-name "range")
                        (scan-mode :initarg :scan-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-mode common-lisp:null) :accessor
                         struct-shape-fmtp-request-scan-mode :shape "ScanMode"
                         :location common-lisp:nil :location-name "scanMode")
                        (tcs :initarg :tcs :initform common-lisp:nil :type
                         (common-lisp:or tcs common-lisp:null) :accessor
                         struct-shape-fmtp-request-tcs :shape "Tcs" :location
                         common-lisp:nil :location-name "tcs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fmtp-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fmtp-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'fmtp-request 'make-fmtp-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmtp-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmtp-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-order))
      (common-lisp:list
       (common-lisp:cons "ChannelOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colorimetry))
      (common-lisp:list
       (common-lisp:cons "Colorimetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-framerate))
      (common-lisp:list
       (common-lisp:cons "ExactFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par))
      (common-lisp:list
       (common-lisp:cons "Par"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-mode))
      (common-lisp:list
       (common-lisp:cons "ScanMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcs))
      (common-lisp:list
       (common-lisp:cons "Tcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmtp-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass frame-resolution common-lisp:nil
                       ((frame-height :initarg :frame-height :initform
                         (common-lisp:error ":frame-height is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-frame-resolution-frame-height
                         :shape "__integer" :location common-lisp:nil
                         :location-name "frameHeight")
                        (frame-width :initarg :frame-width :initform
                         (common-lisp:error ":frame-width is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-frame-resolution-frame-width
                         :shape "__integer" :location common-lisp:nil
                         :location-name "frameWidth"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-resolution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-resolution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-resolution 'make-frame-resolution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frame-resolution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frame-resolution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-height))
      (common-lisp:list
       (common-lisp:cons "FrameHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-width))
      (common-lisp:list
       (common-lisp:cons "FrameWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frame-resolution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway common-lisp:nil
                       ((egress-cidr-blocks :initarg :egress-cidr-blocks
                         :initform
                         (common-lisp:error ":egress-cidr-blocks is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-gateway-egress-cidr-blocks
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "egressCidrBlocks")
                        (gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-gateway-arn :shape "__string"
                         :location common-lisp:nil :location-name "gatewayArn")
                        (gateway-messages :initarg :gateway-messages :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor struct-shape-gateway-gateway-messages :shape
                         "__listOfMessageDetail" :location common-lisp:nil
                         :location-name "gatewayMessages")
                        (gateway-state :initarg :gateway-state :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-state common-lisp:null)
                         :accessor struct-shape-gateway-gateway-state :shape
                         "GatewayState" :location common-lisp:nil
                         :location-name "gatewayState")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (networks :initarg :networks :initform
                         (common-lisp:error ":networks is required") :type
                         (common-lisp:or |__listOfGatewayNetwork|
                                         common-lisp:null)
                         :accessor struct-shape-gateway-networks :shape
                         "__listOfGatewayNetwork" :location common-lisp:nil
                         :location-name "networks"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gateway 'make-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "EgressCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-messages))
      (common-lisp:list
       (common-lisp:cons "GatewayMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-state))
      (common-lisp:list
       (common-lisp:cons "GatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-bridge-source common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-bridge-source-bridge-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "bridgeArn")
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-bridge-source-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "vpcInterfaceAttachment"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-bridge-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-bridge-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-bridge-source 'make-gateway-bridge-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-bridge-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-bridge-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-bridge-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-instance common-lisp:nil
                       ((bridge-placement :initarg :bridge-placement :initform
                         (common-lisp:error ":bridge-placement is required")
                         :type
                         (common-lisp:or bridge-placement common-lisp:null)
                         :accessor
                         struct-shape-gateway-instance-bridge-placement :shape
                         "BridgePlacement" :location common-lisp:nil
                         :location-name "bridgePlacement")
                        (connection-status :initarg :connection-status
                         :initform
                         (common-lisp:error ":connection-status is required")
                         :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor
                         struct-shape-gateway-instance-connection-status :shape
                         "ConnectionStatus" :location common-lisp:nil
                         :location-name "connectionStatus")
                        (gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-instance-gateway-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "gatewayArn")
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-gateway-instance-gateway-instance-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "gatewayInstanceArn")
                        (instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-instance-instance-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "instanceId")
                        (instance-messages :initarg :instance-messages
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-instance-instance-messages :shape
                         "__listOfMessageDetail" :location common-lisp:nil
                         :location-name "instanceMessages")
                        (instance-state :initarg :instance-state :initform
                         (common-lisp:error ":instance-state is required")
                         :type (common-lisp:or instance-state common-lisp:null)
                         :accessor struct-shape-gateway-instance-instance-state
                         :shape "InstanceState" :location common-lisp:nil
                         :location-name "instanceState")
                        (running-bridge-count :initarg :running-bridge-count
                         :initform
                         (common-lisp:error
                          ":running-bridge-count is required")
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-gateway-instance-running-bridge-count
                         :shape "__integer" :location common-lisp:nil
                         :location-name "runningBridgeCount"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-instance 'make-gateway-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-placement))
      (common-lisp:list
       (common-lisp:cons "BridgePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-messages))
      (common-lisp:list
       (common-lisp:cons "InstanceMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'running-bridge-count))
      (common-lisp:list
       (common-lisp:cons "RunningBridgeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-network common-lisp:nil
                       ((cidr-block :initarg :cidr-block :initform
                         (common-lisp:error ":cidr-block is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-network-cidr-block :shape
                         "__string" :location common-lisp:nil :location-name
                         "cidrBlock")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-gateway-network-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-network
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-network
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gateway-network 'make-gateway-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-network))
   common-lisp:nil))
(common-lisp:deftype gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass grant-entitlement-request common-lisp:nil
                       ((data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-grant-entitlement-request-data-transfer-subscriber-fee-percent
                         :shape "__integer" :location common-lisp:nil
                         :location-name "dataTransferSubscriberFeePercent")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-grant-entitlement-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-grant-entitlement-request-encryption
                         :shape "Encryption" :location common-lisp:nil
                         :location-name "encryption")
                        (entitlement-status :initarg :entitlement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or entitlement-status common-lisp:null)
                         :accessor
                         struct-shape-grant-entitlement-request-entitlement-status
                         :shape "EntitlementStatus" :location common-lisp:nil
                         :location-name "entitlementStatus")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-grant-entitlement-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (subscribers :initarg :subscribers :initform
                         (common-lisp:error ":subscribers is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-grant-entitlement-request-subscribers
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subscribers"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-entitlement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-entitlement-request
                    'make-grant-entitlement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-status))
      (common-lisp:list
       (common-lisp:cons "EntitlementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition grant-flow-entitlements420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       grant-flow-entitlements420exception-message)))
 (common-lisp:export
  (common-lisp:list 'grant-flow-entitlements420exception
                    'grant-flow-entitlements420exception-message)))
(common-lisp:progn
 (common-lisp:defclass grant-flow-entitlements-request common-lisp:nil
                       ((entitlements :initarg :entitlements :initform
                         (common-lisp:error ":entitlements is required") :type
                         (common-lisp:or |__listOfGrantEntitlementRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-grant-flow-entitlements-request-entitlements
                         :shape "__listOfGrantEntitlementRequest" :location
                         common-lisp:nil :location-name "entitlements")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-grant-flow-entitlements-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-flow-entitlements-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'grant-flow-entitlements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-flow-entitlements-request
                    'make-grant-flow-entitlements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-flow-entitlements-response common-lisp:nil
                       ((entitlements :initarg :entitlements :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfEntitlement|
                                         common-lisp:null)
                         :accessor
                         struct-shape-grant-flow-entitlements-response-entitlements
                         :shape "__listOfEntitlement" :location common-lisp:nil
                         :location-name "entitlements")
                        (flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-grant-flow-entitlements-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-flow-entitlements-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'grant-flow-entitlements-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-flow-entitlements-response
                    'make-grant-flow-entitlements-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingress-gateway-bridge common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-ingress-gateway-bridge-instance-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "instanceId")
                        (max-bitrate :initarg :max-bitrate :initform
                         (common-lisp:error ":max-bitrate is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-ingress-gateway-bridge-max-bitrate :shape
                         "__integer" :location common-lisp:nil :location-name
                         "maxBitrate")
                        (max-outputs :initarg :max-outputs :initform
                         (common-lisp:error ":max-outputs is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-ingress-gateway-bridge-max-outputs :shape
                         "__integer" :location common-lisp:nil :location-name
                         "maxOutputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ingress-gateway-bridge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ingress-gateway-bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ingress-gateway-bridge 'make-ingress-gateway-bridge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingress-gateway-bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingress-gateway-bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-outputs))
      (common-lisp:list
       (common-lisp:cons "MaxOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingress-gateway-bridge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-configuration common-lisp:nil
                       ((input-ip :initarg :input-ip :initform
                         (common-lisp:error ":input-ip is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-input-configuration-input-ip :shape
                         "__string" :location common-lisp:nil :location-name
                         "inputIp")
                        (input-port :initarg :input-port :initform
                         (common-lisp:error ":input-port is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-input-configuration-input-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "inputPort")
                        (interface :initarg :interface :initform
                         (common-lisp:error ":interface is required") :type
                         (common-lisp:or interface common-lisp:null) :accessor
                         struct-shape-input-configuration-interface :shape
                         "Interface" :location common-lisp:nil :location-name
                         "interface"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-configuration 'make-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ip))
      (common-lisp:list
       (common-lisp:cons "InputIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-port))
      (common-lisp:list
       (common-lisp:cons "InputPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-configuration-request common-lisp:nil
                       ((input-port :initarg :input-port :initform
                         (common-lisp:error ":input-port is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-input-configuration-request-input-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "inputPort")
                        (interface :initarg :interface :initform
                         (common-lisp:error ":interface is required") :type
                         (common-lisp:or interface-request common-lisp:null)
                         :accessor
                         struct-shape-input-configuration-request-interface
                         :shape "InterfaceRequest" :location common-lisp:nil
                         :location-name "interface"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-configuration-request
                    'make-input-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-port))
      (common-lisp:list
       (common-lisp:cons "InputPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-configuration-request))
   common-lisp:nil))
(common-lisp:deftype instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass interface common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-interface-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'interface 'make-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass interface-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-interface-request-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'interface-request 'make-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:deftype key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-bridges-request common-lisp:nil
                       ((filter-arn :initarg :filter-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-bridges-request-filter-arn :shape
                         "__string" :location "querystring" :location-name
                         "filterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bridges-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-bridges-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bridges-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bridges-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bridges-request 'make-list-bridges-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bridges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bridges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bridges-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bridges-response common-lisp:nil
                       ((bridges :initarg :bridges :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfListedBridge|
                                         common-lisp:null)
                         :accessor struct-shape-list-bridges-response-bridges
                         :shape "__listOfListedBridge" :location
                         common-lisp:nil :location-name "bridges")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-bridges-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bridges-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bridges-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bridges-response 'make-list-bridges-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bridges-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bridges-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridges))
      (common-lisp:list
       (common-lisp:cons "Bridges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bridges-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entitlements-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-entitlements-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-entitlements-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entitlements-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entitlements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entitlements-request
                    'make-list-entitlements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entitlements-response common-lisp:nil
                       ((entitlements :initarg :entitlements :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfListedEntitlement|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-entitlements-response-entitlements
                         :shape "__listOfListedEntitlement" :location
                         common-lisp:nil :location-name "entitlements")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-entitlements-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entitlements-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-entitlements-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entitlements-response
                    'make-list-entitlements-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-flows-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-flows-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-flows-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-flows-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-flows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-flows-request 'make-list-flows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-flows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-flows-response common-lisp:nil
                       ((flows :initarg :flows :initform common-lisp:nil :type
                         (common-lisp:or |__listOfListedFlow| common-lisp:null)
                         :accessor struct-shape-list-flows-response-flows
                         :shape "__listOfListedFlow" :location common-lisp:nil
                         :location-name "flows")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-flows-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-flows-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-flows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-flows-response 'make-list-flows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-flows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-flows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flows))
      (common-lisp:list
       (common-lisp:cons "Flows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-flows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateway-instances-request common-lisp:nil
                       ((filter-arn :initarg :filter-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-gateway-instances-request-filter-arn
                         :shape "__string" :location "querystring"
                         :location-name "filterArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-instances-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-gateway-instances-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateway-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-gateway-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateway-instances-request
                    'make-list-gateway-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateway-instances-response common-lisp:nil
                       ((instances :initarg :instances :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfListedGatewayInstance|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-instances-response-instances
                         :shape "__listOfListedGatewayInstance" :location
                         common-lisp:nil :location-name "instances")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-gateway-instances-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateway-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-gateway-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateway-instances-response
                    'make-list-gateway-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-gateways-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-gateways-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateways-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateways-request 'make-list-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-response common-lisp:nil
                       ((gateways :initarg :gateways :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfListedGateway|
                                         common-lisp:null)
                         :accessor struct-shape-list-gateways-response-gateways
                         :shape "__listOfListedGateway" :location
                         common-lisp:nil :location-name "gateways")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-gateways-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateways-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateways-response 'make-list-gateways-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateways))
      (common-lisp:list
       (common-lisp:cons "Gateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-request-next-token :shape
                         "__string" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-request 'make-list-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-offerings-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken")
                        (offerings :initarg :offerings :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfOffering| common-lisp:null)
                         :accessor
                         struct-shape-list-offerings-response-offerings :shape
                         "__listOfOffering" :location common-lisp:nil
                         :location-name "offerings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-offerings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-offerings-response 'make-list-offerings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-reservations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reservations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reservations-request
                    'make-list-reservations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-reservations-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (reservations :initarg :reservations :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfReservation|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-reservations-response-reservations
                         :shape "__listOfReservation" :location common-lisp:nil
                         :location-name "reservations"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-reservations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-reservations-response
                    'make-list-reservations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "__string" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-bridge common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-bridge-bridge-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "bridgeArn")
                        (bridge-state :initarg :bridge-state :initform
                         (common-lisp:error ":bridge-state is required") :type
                         (common-lisp:or bridge-state common-lisp:null)
                         :accessor struct-shape-listed-bridge-bridge-state
                         :shape "BridgeState" :location common-lisp:nil
                         :location-name "bridgeState")
                        (bridge-type :initarg :bridge-type :initform
                         (common-lisp:error ":bridge-type is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-bridge-bridge-type :shape
                         "__string" :location common-lisp:nil :location-name
                         "bridgeType")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-bridge-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (placement-arn :initarg :placement-arn :initform
                         (common-lisp:error ":placement-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-bridge-placement-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "placementArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listed-bridge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listed-bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listed-bridge 'make-listed-bridge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-state))
      (common-lisp:list
       (common-lisp:cons "BridgeState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-type))
      (common-lisp:list
       (common-lisp:cons "BridgeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-arn))
      (common-lisp:list
       (common-lisp:cons "PlacementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-bridge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-entitlement common-lisp:nil
                       ((data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-listed-entitlement-data-transfer-subscriber-fee-percent
                         :shape "__integer" :location common-lisp:nil
                         :location-name "dataTransferSubscriberFeePercent")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         (common-lisp:error ":entitlement-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-listed-entitlement-entitlement-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "entitlementArn")
                        (entitlement-name :initarg :entitlement-name :initform
                         (common-lisp:error ":entitlement-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-listed-entitlement-entitlement-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "entitlementName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listed-entitlement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listed-entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listed-entitlement 'make-listed-entitlement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-name))
      (common-lisp:list
       (common-lisp:cons "EntitlementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-entitlement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-flow common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform
                         (common-lisp:error ":availability-zone is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-listed-flow-availability-zone
                         :shape "__string" :location common-lisp:nil
                         :location-name "availabilityZone")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-flow-description :shape "__string"
                         :location common-lisp:nil :location-name
                         "description")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-flow-flow-arn :shape "__string"
                         :location common-lisp:nil :location-name "flowArn")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-flow-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (source-type :initarg :source-type :initform
                         (common-lisp:error ":source-type is required") :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-listed-flow-source-type :shape
                         "SourceType" :location common-lisp:nil :location-name
                         "sourceType")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-listed-flow-status :shape "Status"
                         :location common-lisp:nil :location-name "status")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance common-lisp:null)
                         :accessor struct-shape-listed-flow-maintenance :shape
                         "Maintenance" :location common-lisp:nil :location-name
                         "maintenance"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listed-flow
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listed-flow
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listed-flow 'make-listed-flow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-gateway common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-gateway-gateway-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "gatewayArn")
                        (gateway-state :initarg :gateway-state :initform
                         (common-lisp:error ":gateway-state is required") :type
                         (common-lisp:or gateway-state common-lisp:null)
                         :accessor struct-shape-listed-gateway-gateway-state
                         :shape "GatewayState" :location common-lisp:nil
                         :location-name "gatewayState")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-gateway-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listed-gateway
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listed-gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listed-gateway 'make-listed-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-state))
      (common-lisp:list
       (common-lisp:cons "GatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-gateway-instance common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-gateway-instance-gateway-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "gatewayArn")
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-listed-gateway-instance-gateway-instance-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "gatewayInstanceArn")
                        (instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-listed-gateway-instance-instance-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "instanceId")
                        (instance-state :initarg :instance-state :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor
                         struct-shape-listed-gateway-instance-instance-state
                         :shape "InstanceState" :location common-lisp:nil
                         :location-name "instanceState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listed-gateway-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listed-gateway-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listed-gateway-instance 'make-listed-gateway-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listed-gateway-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listed-gateway-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listed-gateway-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maintenance common-lisp:nil
                       ((maintenance-day :initarg :maintenance-day :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor struct-shape-maintenance-maintenance-day
                         :shape "MaintenanceDay" :location common-lisp:nil
                         :location-name "maintenanceDay")
                        (maintenance-deadline :initarg :maintenance-deadline
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-maintenance-maintenance-deadline :shape
                         "__string" :location common-lisp:nil :location-name
                         "maintenanceDeadline")
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-maintenance-maintenance-scheduled-date
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceScheduledDate")
                        (maintenance-start-hour :initarg
                         :maintenance-start-hour :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-maintenance-maintenance-start-hour :shape
                         "__string" :location common-lisp:nil :location-name
                         "maintenanceStartHour"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maintenance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'maintenance 'make-maintenance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-deadline))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDeadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-hour))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance))
   common-lisp:nil))
(common-lisp:deftype maintenance-day () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass media-stream common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or media-stream-attributes
                                         common-lisp:null)
                         :accessor struct-shape-media-stream-attributes :shape
                         "MediaStreamAttributes" :location common-lisp:nil
                         :location-name "attributes")
                        (clock-rate :initarg :clock-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-media-stream-clock-rate :shape
                         "__integer" :location common-lisp:nil :location-name
                         "clockRate")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-media-stream-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (fmt :initarg :fmt :initform
                         (common-lisp:error ":fmt is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-media-stream-fmt :shape
                         "__integer" :location common-lisp:nil :location-name
                         "fmt")
                        (media-stream-id :initarg :media-stream-id :initform
                         (common-lisp:error ":media-stream-id is required")
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-media-stream-media-stream-id
                         :shape "__integer" :location common-lisp:nil
                         :location-name "mediaStreamId")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-media-stream-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName")
                        (media-stream-type :initarg :media-stream-type
                         :initform
                         (common-lisp:error ":media-stream-type is required")
                         :type
                         (common-lisp:or media-stream-type common-lisp:null)
                         :accessor struct-shape-media-stream-media-stream-type
                         :shape "MediaStreamType" :location common-lisp:nil
                         :location-name "mediaStreamType")
                        (video-format :initarg :video-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-media-stream-video-format :shape
                         "__string" :location common-lisp:nil :location-name
                         "videoFormat"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'media-stream 'make-media-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-rate))
      (common-lisp:list
       (common-lisp:cons "ClockRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmt))
      (common-lisp:list
       (common-lisp:cons "Fmt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-id))
      (common-lisp:list
       (common-lisp:cons "MediaStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-format))
      (common-lisp:list
       (common-lisp:cons "VideoFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-attributes common-lisp:nil
                       ((fmtp :initarg :fmtp :initform
                         (common-lisp:error ":fmtp is required") :type
                         (common-lisp:or fmtp common-lisp:null) :accessor
                         struct-shape-media-stream-attributes-fmtp :shape
                         "Fmtp" :location common-lisp:nil :location-name
                         "fmtp")
                        (lang :initarg :lang :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-media-stream-attributes-lang :shape
                         "__string" :location common-lisp:nil :location-name
                         "lang"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'media-stream-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-stream-attributes 'make-media-stream-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmtp))
      (common-lisp:list
       (common-lisp:cons "Fmtp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lang))
      (common-lisp:list
       (common-lisp:cons "Lang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-attributes-request common-lisp:nil
                       ((fmtp :initarg :fmtp :initform common-lisp:nil :type
                         (common-lisp:or fmtp-request common-lisp:null)
                         :accessor
                         struct-shape-media-stream-attributes-request-fmtp
                         :shape "FmtpRequest" :location common-lisp:nil
                         :location-name "fmtp")
                        (lang :initarg :lang :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-media-stream-attributes-request-lang
                         :shape "__string" :location common-lisp:nil
                         :location-name "lang"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-stream-attributes-request
                    'make-media-stream-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmtp))
      (common-lisp:list
       (common-lisp:cons "Fmtp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lang))
      (common-lisp:list
       (common-lisp:cons "Lang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-output-configuration common-lisp:nil
                       ((destination-configurations :initarg
                         :destination-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfDestinationConfiguration|
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-destination-configurations
                         :shape "__listOfDestinationConfiguration" :location
                         common-lisp:nil :location-name
                         "destinationConfigurations")
                        (encoding-name :initarg :encoding-name :initform
                         (common-lisp:error ":encoding-name is required") :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-encoding-name
                         :shape "EncodingName" :location common-lisp:nil
                         :location-name "encodingName")
                        (encoding-parameters :initarg :encoding-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or encoding-parameters common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-encoding-parameters
                         :shape "EncodingParameters" :location common-lisp:nil
                         :location-name "encodingParameters")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream-output-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-stream-output-configuration
                    'make-media-stream-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configurations))
      (common-lisp:list
       (common-lisp:cons "DestinationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-parameters))
      (common-lisp:list
       (common-lisp:cons "EncodingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-output-configuration-request
                       common-lisp:nil
                       ((destination-configurations :initarg
                         :destination-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          |__listOfDestinationConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-request-destination-configurations
                         :shape "__listOfDestinationConfigurationRequest"
                         :location common-lisp:nil :location-name
                         "destinationConfigurations")
                        (encoding-name :initarg :encoding-name :initform
                         (common-lisp:error ":encoding-name is required") :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-request-encoding-name
                         :shape "EncodingName" :location common-lisp:nil
                         :location-name "encodingName")
                        (encoding-parameters :initarg :encoding-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or encoding-parameters-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-request-encoding-parameters
                         :shape "EncodingParametersRequest" :location
                         common-lisp:nil :location-name "encodingParameters")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-media-stream-output-configuration-request-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream-output-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-output-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-stream-output-configuration-request
                    'make-media-stream-output-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configurations))
      (common-lisp:list
       (common-lisp:cons "DestinationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-parameters))
      (common-lisp:list
       (common-lisp:cons "EncodingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-source-configuration common-lisp:nil
                       ((encoding-name :initarg :encoding-name :initform
                         (common-lisp:error ":encoding-name is required") :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         struct-shape-media-stream-source-configuration-encoding-name
                         :shape "EncodingName" :location common-lisp:nil
                         :location-name "encodingName")
                        (input-configurations :initarg :input-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputConfiguration|
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-stream-source-configuration-input-configurations
                         :shape "__listOfInputConfiguration" :location
                         common-lisp:nil :location-name "inputConfigurations")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-media-stream-source-configuration-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-stream-source-configuration
                    'make-media-stream-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-configurations))
      (common-lisp:list
       (common-lisp:cons "InputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-source-configuration-request
                       common-lisp:nil
                       ((encoding-name :initarg :encoding-name :initform
                         (common-lisp:error ":encoding-name is required") :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         struct-shape-media-stream-source-configuration-request-encoding-name
                         :shape "EncodingName" :location common-lisp:nil
                         :location-name "encodingName")
                        (input-configurations :initarg :input-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfInputConfigurationRequest|
                                         common-lisp:null)
                         :accessor
                         struct-shape-media-stream-source-configuration-request-input-configurations
                         :shape "__listOfInputConfigurationRequest" :location
                         common-lisp:nil :location-name "inputConfigurations")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-media-stream-source-configuration-request-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-media-stream-source-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-source-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'media-stream-source-configuration-request
                    'make-media-stream-source-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-configurations))
      (common-lisp:list
       (common-lisp:cons "InputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration-request))
   common-lisp:nil))
(common-lisp:deftype media-stream-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-detail common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-message-detail-code :shape "__string"
                         :location common-lisp:nil :location-name "code")
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-message-detail-message :shape "__string"
                         :location common-lisp:nil :location-name "message")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-message-detail-resource-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message-detail 'make-message-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass messages common-lisp:nil
                       ((errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-messages-errors :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "errors"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-messages
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'messages
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'messages 'make-messages))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input messages))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input messages))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input messages))
   common-lisp:nil))
(common-lisp:deftype network-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass offering common-lisp:nil
                       ((currency-code :initarg :currency-code :initform
                         (common-lisp:error ":currency-code is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-offering-currency-code :shape "__string"
                         :location common-lisp:nil :location-name
                         "currencyCode")
                        (duration :initarg :duration :initform
                         (common-lisp:error ":duration is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-offering-duration :shape
                         "__integer" :location common-lisp:nil :location-name
                         "duration")
                        (duration-units :initarg :duration-units :initform
                         (common-lisp:error ":duration-units is required")
                         :type (common-lisp:or duration-units common-lisp:null)
                         :accessor struct-shape-offering-duration-units :shape
                         "DurationUnits" :location common-lisp:nil
                         :location-name "durationUnits")
                        (offering-arn :initarg :offering-arn :initform
                         (common-lisp:error ":offering-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-offering-offering-arn :shape "__string"
                         :location common-lisp:nil :location-name
                         "offeringArn")
                        (offering-description :initarg :offering-description
                         :initform
                         (common-lisp:error
                          ":offering-description is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-offering-offering-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "offeringDescription")
                        (price-per-unit :initarg :price-per-unit :initform
                         (common-lisp:error ":price-per-unit is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-offering-price-per-unit :shape
                         "__string" :location common-lisp:nil :location-name
                         "pricePerUnit")
                        (price-units :initarg :price-units :initform
                         (common-lisp:error ":price-units is required") :type
                         (common-lisp:or price-units common-lisp:null)
                         :accessor struct-shape-offering-price-units :shape
                         "PriceUnits" :location common-lisp:nil :location-name
                         "priceUnits")
                        (resource-specification :initarg
                         :resource-specification :initform
                         (common-lisp:error
                          ":resource-specification is required")
                         :type
                         (common-lisp:or resource-specification
                                         common-lisp:null)
                         :accessor struct-shape-offering-resource-specification
                         :shape "ResourceSpecification" :location
                         common-lisp:nil :location-name
                         "resourceSpecification"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'offering 'make-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-arn))
      (common-lisp:list
       (common-lisp:cons "OfferingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-per-unit))
      (common-lisp:list
       (common-lisp:cons "PricePerUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-units))
      (common-lisp:list
       (common-lisp:cons "PriceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-output-data-transfer-subscriber-fee-percent
                         :shape "__integer" :location common-lisp:nil
                         :location-name "dataTransferSubscriberFeePercent")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-description :shape "__string"
                         :location common-lisp:nil :location-name
                         "description")
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-destination :shape "__string"
                         :location common-lisp:nil :location-name
                         "destination")
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-output-encryption :shape "Encryption"
                         :location common-lisp:nil :location-name "encryption")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-entitlement-arn :shape "__string"
                         :location common-lisp:nil :location-name
                         "entitlementArn")
                        (listener-address :initarg :listener-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-listener-address :shape "__string"
                         :location common-lisp:nil :location-name
                         "listenerAddress")
                        (media-live-input-arn :initarg :media-live-input-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-media-live-input-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "mediaLiveInputArn")
                        (media-stream-output-configurations :initarg
                         :media-stream-output-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMediaStreamOutputConfiguration|
                          common-lisp:null)
                         :accessor
                         struct-shape-output-media-stream-output-configurations
                         :shape "__listOfMediaStreamOutputConfiguration"
                         :location common-lisp:nil :location-name
                         "mediaStreamOutputConfigurations")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (output-arn :initarg :output-arn :initform
                         (common-lisp:error ":output-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-output-arn :shape "__string"
                         :location common-lisp:nil :location-name "outputArn")
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-output-port :shape "__integer"
                         :location common-lisp:nil :location-name "port")
                        (transport :initarg :transport :initform
                         common-lisp:nil :type
                         (common-lisp:or transport common-lisp:null) :accessor
                         struct-shape-output-transport :shape "Transport"
                         :location common-lisp:nil :location-name "transport")
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor struct-shape-output-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "vpcInterfaceAttachment")
                        (bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-output-bridge-arn :shape "__string"
                         :location common-lisp:nil :location-name "bridgeArn")
                        (bridge-ports :initarg :bridge-ports :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor struct-shape-output-bridge-ports :shape
                         "__listOf__integer" :location common-lisp:nil
                         :location-name "bridgePorts"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-address))
      (common-lisp:list
       (common-lisp:cons "ListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-live-input-arn))
      (common-lisp:list
       (common-lisp:cons "MediaLiveInputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-output-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamOutputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-arn))
      (common-lisp:list
       (common-lisp:cons "OutputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport))
      (common-lisp:list
       (common-lisp:cons "Transport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-ports))
      (common-lisp:list
       (common-lisp:cons "BridgePorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:deftype price-units () 'common-lisp:string)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass purchase-offering-request common-lisp:nil
                       ((offering-arn :initarg :offering-arn :initform
                         (common-lisp:error ":offering-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-offering-arn
                         :shape "__string" :location "uri" :location-name
                         "offeringArn")
                        (reservation-name :initarg :reservation-name :initform
                         (common-lisp:error ":reservation-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-request-reservation-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "reservationName")
                        (start :initarg :start :initform
                         (common-lisp:error ":start is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-purchase-offering-request-start :shape
                         "__string" :location common-lisp:nil :location-name
                         "start"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-request
                    'make-purchase-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-response common-lisp:nil
                       ((reservation :initarg :reservation :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor
                         struct-shape-purchase-offering-response-reservation
                         :shape "Reservation" :location common-lisp:nil
                         :location-name "reservation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-offering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-response
                    'make-purchase-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   common-lisp:nil))
(common-lisp:deftype range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-bridge-output-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-output-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (output-name :initarg :output-name :initform
                         (common-lisp:error ":output-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-output-request-output-name
                         :shape "__string" :location "uri" :location-name
                         "outputName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-bridge-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-bridge-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-output-request
                    'make-remove-bridge-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-bridge-output-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-output-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (output-name :initarg :output-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-output-response-output-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "outputName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-bridge-output-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-bridge-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-output-response
                    'make-remove-bridge-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-name))
      (common-lisp:list
       (common-lisp:cons "OutputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-bridge-source-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-source-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (source-name :initarg :source-name :initform
                         (common-lisp:error ":source-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-source-request-source-name
                         :shape "__string" :location "uri" :location-name
                         "sourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-bridge-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-source-request
                    'make-remove-bridge-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-bridge-source-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-source-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-bridge-source-response-source-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-bridge-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-bridge-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-source-response
                    'make-remove-bridge-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-media-stream-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-media-stream-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-media-stream-request-media-stream-name
                         :shape "__string" :location "uri" :location-name
                         "mediaStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-media-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-media-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-media-stream-request
                    'make-remove-flow-media-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-media-stream-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-media-stream-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (media-stream-name :initarg :media-stream-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-media-stream-response-media-stream-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "mediaStreamName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-media-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-media-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-media-stream-response
                    'make-remove-flow-media-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-output-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-output-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (output-arn :initarg :output-arn :initform
                         (common-lisp:error ":output-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-output-request-output-arn
                         :shape "__string" :location "uri" :location-name
                         "outputArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-output-request
                    'make-remove-flow-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-output-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-output-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (output-arn :initarg :output-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-output-response-output-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "outputArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-output-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-output-response
                    'make-remove-flow-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-arn))
      (common-lisp:list
       (common-lisp:cons "OutputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-source-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-source-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (source-arn :initarg :source-arn :initform
                         (common-lisp:error ":source-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-source-request-source-arn
                         :shape "__string" :location "uri" :location-name
                         "sourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-source-request
                    'make-remove-flow-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-source-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-source-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-source-response-source-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-source-response
                    'make-remove-flow-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-vpc-interface-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-vpc-interface-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (vpc-interface-name :initarg :vpc-interface-name
                         :initform
                         (common-lisp:error ":vpc-interface-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-vpc-interface-request-vpc-interface-name
                         :shape "__string" :location "uri" :location-name
                         "vpcInterfaceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-vpc-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-vpc-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-vpc-interface-request
                    'make-remove-flow-vpc-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-vpc-interface-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-vpc-interface-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (non-deleted-network-interface-ids :initarg
                         :non-deleted-network-interface-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-flow-vpc-interface-response-non-deleted-network-interface-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "nonDeletedNetworkInterfaceIds")
                        (vpc-interface-name :initarg :vpc-interface-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-flow-vpc-interface-response-vpc-interface-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcInterfaceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-flow-vpc-interface-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-vpc-interface-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-flow-vpc-interface-response
                    'make-remove-flow-vpc-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-deleted-network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NonDeletedNetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation common-lisp:nil
                       ((currency-code :initarg :currency-code :initform
                         (common-lisp:error ":currency-code is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-currency-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "currencyCode")
                        (duration :initarg :duration :initform
                         (common-lisp:error ":duration is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-reservation-duration :shape
                         "__integer" :location common-lisp:nil :location-name
                         "duration")
                        (duration-units :initarg :duration-units :initform
                         (common-lisp:error ":duration-units is required")
                         :type (common-lisp:or duration-units common-lisp:null)
                         :accessor struct-shape-reservation-duration-units
                         :shape "DurationUnits" :location common-lisp:nil
                         :location-name "durationUnits")
                        (end :initarg :end :initform
                         (common-lisp:error ":end is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-end :shape "__string"
                         :location common-lisp:nil :location-name "end")
                        (offering-arn :initarg :offering-arn :initform
                         (common-lisp:error ":offering-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-offering-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "offeringArn")
                        (offering-description :initarg :offering-description
                         :initform
                         (common-lisp:error
                          ":offering-description is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-reservation-offering-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "offeringDescription")
                        (price-per-unit :initarg :price-per-unit :initform
                         (common-lisp:error ":price-per-unit is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-reservation-price-per-unit
                         :shape "__string" :location common-lisp:nil
                         :location-name "pricePerUnit")
                        (price-units :initarg :price-units :initform
                         (common-lisp:error ":price-units is required") :type
                         (common-lisp:or price-units common-lisp:null)
                         :accessor struct-shape-reservation-price-units :shape
                         "PriceUnits" :location common-lisp:nil :location-name
                         "priceUnits")
                        (reservation-arn :initarg :reservation-arn :initform
                         (common-lisp:error ":reservation-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-reservation-reservation-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "reservationArn")
                        (reservation-name :initarg :reservation-name :initform
                         (common-lisp:error ":reservation-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-reservation-reservation-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "reservationName")
                        (reservation-state :initarg :reservation-state
                         :initform
                         (common-lisp:error ":reservation-state is required")
                         :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor struct-shape-reservation-reservation-state
                         :shape "ReservationState" :location common-lisp:nil
                         :location-name "reservationState")
                        (resource-specification :initarg
                         :resource-specification :initform
                         (common-lisp:error
                          ":resource-specification is required")
                         :type
                         (common-lisp:or resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-resource-specification :shape
                         "ResourceSpecification" :location common-lisp:nil
                         :location-name "resourceSpecification")
                        (start :initarg :start :initform
                         (common-lisp:error ":start is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-reservation-start :shape "__string"
                         :location common-lisp:nil :location-name "start"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reservation 'make-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-arn))
      (common-lisp:list
       (common-lisp:cons "OfferingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-per-unit))
      (common-lisp:list
       (common-lisp:cons "PricePerUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-units))
      (common-lisp:list
       (common-lisp:cons "PriceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-arn))
      (common-lisp:list
       (common-lisp:cons "ReservationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-state))
      (common-lisp:list
       (common-lisp:cons "ReservationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation))
   common-lisp:nil))
(common-lisp:deftype reservation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-specification common-lisp:nil
                       ((reserved-bitrate :initarg :reserved-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-resource-specification-reserved-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "reservedBitrate")
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-resource-specification-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name "resourceType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-specification 'make-resource-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-bitrate))
      (common-lisp:list
       (common-lisp:cons "ReservedBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-specification))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-error common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-response-error-message :shape "__string"
                         :location common-lisp:nil :location-name "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'response-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'response-error 'make-response-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-flow-entitlement-request common-lisp:nil
                       ((entitlement-arn :initarg :entitlement-arn :initform
                         (common-lisp:error ":entitlement-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-revoke-flow-entitlement-request-entitlement-arn
                         :shape "__string" :location "uri" :location-name
                         "entitlementArn")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-revoke-flow-entitlement-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-flow-entitlement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-flow-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-flow-entitlement-request
                    'make-revoke-flow-entitlement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-flow-entitlement-response common-lisp:nil
                       ((entitlement-arn :initarg :entitlement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-revoke-flow-entitlement-response-entitlement-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "entitlementArn")
                        (flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-revoke-flow-entitlement-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-flow-entitlement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-flow-entitlement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-flow-entitlement-response
                    'make-revoke-flow-entitlement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-response))
   common-lisp:nil))
(common-lisp:deftype scan-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass set-gateway-bridge-source-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-gateway-bridge-source-request-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-gateway-bridge-source-request-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "vpcInterfaceAttachment"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-gateway-bridge-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-gateway-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-gateway-bridge-source-request
                    'make-set-gateway-bridge-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-gateway-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-gateway-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-gateway-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-source-request common-lisp:nil
                       ((decryption :initarg :decryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-set-source-request-decryption :shape
                         "Encryption" :location common-lisp:nil :location-name
                         "decryption")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-entitlement-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "entitlementArn")
                        (ingest-port :initarg :ingest-port :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-set-source-request-ingest-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "ingestPort")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-set-source-request-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (max-latency :initarg :max-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-set-source-request-max-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxLatency")
                        (max-sync-buffer :initarg :max-sync-buffer :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-set-source-request-max-sync-buffer :shape
                         "__integer" :location common-lisp:nil :location-name
                         "maxSyncBuffer")
                        (media-stream-source-configurations :initarg
                         :media-stream-source-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMediaStreamSourceConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         struct-shape-set-source-request-media-stream-source-configurations
                         :shape "__listOfMediaStreamSourceConfigurationRequest"
                         :location common-lisp:nil :location-name
                         "mediaStreamSourceConfigurations")
                        (min-latency :initarg :min-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-set-source-request-min-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "minLatency")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor struct-shape-set-source-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol")
                        (sender-control-port :initarg :sender-control-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-set-source-request-sender-control-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "senderControlPort")
                        (sender-ip-address :initarg :sender-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-sender-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "senderIpAddress")
                        (source-listener-address :initarg
                         :source-listener-address :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-set-source-request-source-listener-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceListenerAddress")
                        (source-listener-port :initarg :source-listener-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-set-source-request-source-listener-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "sourceListenerPort")
                        (stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-stream-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "streamId")
                        (vpc-interface-name :initarg :vpc-interface-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-vpc-interface-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcInterfaceName")
                        (whitelist-cidr :initarg :whitelist-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-set-source-request-whitelist-cidr :shape
                         "__string" :location common-lisp:nil :location-name
                         "whitelistCidr")
                        (gateway-bridge-source :initarg :gateway-bridge-source
                         :initform common-lisp:nil :type
                         (common-lisp:or set-gateway-bridge-source-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-source-request-gateway-bridge-source
                         :shape "SetGatewayBridgeSourceRequest" :location
                         common-lisp:nil :location-name "gatewayBridgeSource"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-source-request 'make-set-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption))
      (common-lisp:list
       (common-lisp:cons "Decryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-port))
      (common-lisp:list
       (common-lisp:cons "IngestPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sync-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxSyncBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-address))
      (common-lisp:list
       (common-lisp:cons "SourceListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-port))
      (common-lisp:list
       (common-lisp:cons "SourceListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-cidr))
      (common-lisp:list
       (common-lisp:cons "WhitelistCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-bridge-source))
      (common-lisp:list
       (common-lisp:cons "GatewayBridgeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-source-data-transfer-subscriber-fee-percent
                         :shape "__integer" :location common-lisp:nil
                         :location-name "dataTransferSubscriberFeePercent")
                        (decryption :initarg :decryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-source-decryption :shape "Encryption"
                         :location common-lisp:nil :location-name "decryption")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-description :shape "__string"
                         :location common-lisp:nil :location-name
                         "description")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-entitlement-arn :shape "__string"
                         :location common-lisp:nil :location-name
                         "entitlementArn")
                        (ingest-ip :initarg :ingest-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-ingest-ip :shape "__string"
                         :location common-lisp:nil :location-name "ingestIp")
                        (ingest-port :initarg :ingest-port :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-source-ingest-port :shape
                         "__integer" :location common-lisp:nil :location-name
                         "ingestPort")
                        (media-stream-source-configurations :initarg
                         :media-stream-source-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMediaStreamSourceConfiguration|
                          common-lisp:null)
                         :accessor
                         struct-shape-source-media-stream-source-configurations
                         :shape "__listOfMediaStreamSourceConfiguration"
                         :location common-lisp:nil :location-name
                         "mediaStreamSourceConfigurations")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-name :shape "__string" :location
                         common-lisp:nil :location-name "name")
                        (sender-control-port :initarg :sender-control-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-source-sender-control-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "senderControlPort")
                        (sender-ip-address :initarg :sender-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-sender-ip-address :shape
                         "__string" :location common-lisp:nil :location-name
                         "senderIpAddress")
                        (source-arn :initarg :source-arn :initform
                         (common-lisp:error ":source-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-source-arn :shape "__string"
                         :location common-lisp:nil :location-name "sourceArn")
                        (transport :initarg :transport :initform
                         common-lisp:nil :type
                         (common-lisp:or transport common-lisp:null) :accessor
                         struct-shape-source-transport :shape "Transport"
                         :location common-lisp:nil :location-name "transport")
                        (vpc-interface-name :initarg :vpc-interface-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-vpc-interface-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "vpcInterfaceName")
                        (whitelist-cidr :initarg :whitelist-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-whitelist-cidr :shape "__string"
                         :location common-lisp:nil :location-name
                         "whitelistCidr")
                        (gateway-bridge-source :initarg :gateway-bridge-source
                         :initform common-lisp:nil :type
                         (common-lisp:or gateway-bridge-source
                                         common-lisp:null)
                         :accessor struct-shape-source-gateway-bridge-source
                         :shape "GatewayBridgeSource" :location common-lisp:nil
                         :location-name "gatewayBridgeSource"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption))
      (common-lisp:list
       (common-lisp:cons "Decryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-ip))
      (common-lisp:list
       (common-lisp:cons "IngestIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-port))
      (common-lisp:list
       (common-lisp:cons "IngestPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport))
      (common-lisp:list
       (common-lisp:cons "Transport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-cidr))
      (common-lisp:list
       (common-lisp:cons "WhitelistCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-bridge-source))
      (common-lisp:list
       (common-lisp:cons "GatewayBridgeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-priority common-lisp:nil
                       ((primary-source :initarg :primary-source :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-source-priority-primary-source :shape
                         "__string" :location common-lisp:nil :location-name
                         "primarySource"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-priority
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-priority
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source-priority 'make-source-priority))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-priority))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-priority))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-source))
      (common-lisp:list
       (common-lisp:cons "PrimarySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-priority))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-start-flow-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-flow-request 'make-start-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-flow-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-start-flow-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-start-flow-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-flow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-flow-response 'make-start-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-flow-response))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-stop-flow-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-flow-request 'make-stop-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-flow-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-stop-flow-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-stop-flow-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-flow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-flow-response 'make-stop-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "__string" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor struct-shape-tag-resource-request-tags
                         :shape "__mapOf__string" :location common-lisp:nil
                         :location-name "tags"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tcs () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transport common-lisp:nil
                       ((cidr-allow-list :initarg :cidr-allow-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-transport-cidr-allow-list
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "cidrAllowList")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-max-bitrate :shape
                         "__integer" :location common-lisp:nil :location-name
                         "maxBitrate")
                        (max-latency :initarg :max-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-max-latency :shape
                         "__integer" :location common-lisp:nil :location-name
                         "maxLatency")
                        (max-sync-buffer :initarg :max-sync-buffer :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-max-sync-buffer
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxSyncBuffer")
                        (min-latency :initarg :min-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-min-latency :shape
                         "__integer" :location common-lisp:nil :location-name
                         "minLatency")
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         struct-shape-transport-protocol :shape "Protocol"
                         :location common-lisp:nil :location-name "protocol")
                        (remote-id :initarg :remote-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-remote-id :shape "__string"
                         :location common-lisp:nil :location-name "remoteId")
                        (sender-control-port :initarg :sender-control-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-sender-control-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "senderControlPort")
                        (sender-ip-address :initarg :sender-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-sender-ip-address :shape
                         "__string" :location common-lisp:nil :location-name
                         "senderIpAddress")
                        (smoothing-latency :initarg :smoothing-latency
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-smoothing-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "smoothingLatency")
                        (source-listener-address :initarg
                         :source-listener-address :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-transport-source-listener-address :shape
                         "__string" :location common-lisp:nil :location-name
                         "sourceListenerAddress")
                        (source-listener-port :initarg :source-listener-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-source-listener-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "sourceListenerPort")
                        (stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-stream-id :shape "__string"
                         :location common-lisp:nil :location-name "streamId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transport
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transport
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'transport 'make-transport))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transport))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transport))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-allow-list))
      (common-lisp:list
       (common-lisp:cons "CidrAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sync-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxSyncBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-id))
      (common-lisp:list
       (common-lisp:cons "RemoteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smoothing-latency))
      (common-lisp:list
       (common-lisp:cons "SmoothingLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-address))
      (common-lisp:list
       (common-lisp:cons "SourceListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-port))
      (common-lisp:list
       (common-lisp:cons "SourceListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transport))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transport-media-info common-lisp:nil
                       ((programs :initarg :programs :initform
                         (common-lisp:error ":programs is required") :type
                         (common-lisp:or |__listOfTransportStreamProgram|
                                         common-lisp:null)
                         :accessor struct-shape-transport-media-info-programs
                         :shape "__listOfTransportStreamProgram" :location
                         common-lisp:nil :location-name "programs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transport-media-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transport-media-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transport-media-info 'make-transport-media-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transport-media-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transport-media-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'programs))
      (common-lisp:list
       (common-lisp:cons "Programs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transport-media-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transport-stream common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-stream-channels
                         :shape "__integer" :location common-lisp:nil
                         :location-name "channels")
                        (codec :initarg :codec :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-stream-codec :shape "__string"
                         :location common-lisp:nil :location-name "codec")
                        (frame-rate :initarg :frame-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-stream-frame-rate :shape
                         "__string" :location common-lisp:nil :location-name
                         "frameRate")
                        (frame-resolution :initarg :frame-resolution :initform
                         common-lisp:nil :type
                         (common-lisp:or frame-resolution common-lisp:null)
                         :accessor
                         struct-shape-transport-stream-frame-resolution :shape
                         "FrameResolution" :location common-lisp:nil
                         :location-name "frameResolution")
                        (pid :initarg :pid :initform
                         (common-lisp:error ":pid is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-stream-pid :shape
                         "__integer" :location common-lisp:nil :location-name
                         "pid")
                        (sample-rate :initarg :sample-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-stream-sample-rate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "sampleRate")
                        (sample-size :initarg :sample-size :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-transport-stream-sample-size
                         :shape "__integer" :location common-lisp:nil
                         :location-name "sampleSize")
                        (stream-type :initarg :stream-type :initform
                         (common-lisp:error ":stream-type is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-stream-stream-type :shape
                         "__string" :location common-lisp:nil :location-name
                         "streamType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transport-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transport-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transport-stream 'make-transport-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transport-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transport-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-rate))
      (common-lisp:list
       (common-lisp:cons "FrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-resolution))
      (common-lisp:list
       (common-lisp:cons "FrameResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-size))
      (common-lisp:list
       (common-lisp:cons "SampleSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-type))
      (common-lisp:list
       (common-lisp:cons "StreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transport-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transport-stream-program common-lisp:nil
                       ((pcr-pid :initarg :pcr-pid :initform
                         (common-lisp:error ":pcr-pid is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-transport-stream-program-pcr-pid :shape
                         "__integer" :location common-lisp:nil :location-name
                         "pcrPid")
                        (program-name :initarg :program-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-transport-stream-program-program-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "programName")
                        (program-number :initarg :program-number :initform
                         (common-lisp:error ":program-number is required")
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-transport-stream-program-program-number
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programNumber")
                        (program-pid :initarg :program-pid :initform
                         (common-lisp:error ":program-pid is required") :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-transport-stream-program-program-pid
                         :shape "__integer" :location common-lisp:nil
                         :location-name "programPid")
                        (streams :initarg :streams :initform
                         (common-lisp:error ":streams is required") :type
                         (common-lisp:or |__listOfTransportStream|
                                         common-lisp:null)
                         :accessor
                         struct-shape-transport-stream-program-streams :shape
                         "__listOfTransportStream" :location common-lisp:nil
                         :location-name "streams"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transport-stream-program
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transport-stream-program
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transport-stream-program 'make-transport-stream-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transport-stream-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transport-stream-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-pid))
      (common-lisp:list
       (common-lisp:cons "ProgramPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "Streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transport-stream-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "__string" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "__listOf__string" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-flow-source-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-flow-source-request-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (flow-vpc-interface-attachment :initarg
                         :flow-vpc-interface-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-flow-source-request-flow-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "flowVpcInterfaceAttachment"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-flow-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-flow-source-request
                    'make-update-bridge-flow-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-flow-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "FlowVpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-network-output-request common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-network-output-request-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "ipAddress")
                        (network-name :initarg :network-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-network-output-request-network-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "networkName")
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-network-output-request-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-network-output-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol")
                        (ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-network-output-request-ttl
                         :shape "__integer" :location common-lisp:nil
                         :location-name "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-network-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-network-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-network-output-request
                    'make-update-bridge-network-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-network-source-request common-lisp:nil
                       ((multicast-ip :initarg :multicast-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-network-source-request-multicast-ip
                         :shape "__string" :location common-lisp:nil
                         :location-name "multicastIp")
                        (network-name :initarg :network-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-network-source-request-network-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "networkName")
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-network-source-request-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-network-source-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-network-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-network-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-network-source-request
                    'make-update-bridge-network-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-ip))
      (common-lisp:list
       (common-lisp:cons "MulticastIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-output-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-output-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (network-output :initarg :network-output :initform
                         common-lisp:nil :type
                         (common-lisp:or update-bridge-network-output-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-output-request-network-output
                         :shape "UpdateBridgeNetworkOutputRequest" :location
                         common-lisp:nil :location-name "networkOutput")
                        (output-name :initarg :output-name :initform
                         (common-lisp:error ":output-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-output-request-output-name
                         :shape "__string" :location "uri" :location-name
                         "outputName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-output-request
                    'make-update-bridge-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-output))
      (common-lisp:list
       (common-lisp:cons "NetworkOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-output-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-output-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or bridge-output common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-output-response-output
                         :shape "BridgeOutput" :location common-lisp:nil
                         :location-name "output"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-output-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-output-response
                    'make-update-bridge-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-request-bridge-arn :shape
                         "__string" :location "uri" :location-name "bridgeArn")
                        (egress-gateway-bridge :initarg :egress-gateway-bridge
                         :initform common-lisp:nil :type
                         (common-lisp:or update-egress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-request-egress-gateway-bridge
                         :shape "UpdateEgressGatewayBridgeRequest" :location
                         common-lisp:nil :location-name "egressGatewayBridge")
                        (ingress-gateway-bridge :initarg
                         :ingress-gateway-bridge :initform common-lisp:nil
                         :type
                         (common-lisp:or update-ingress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-request-ingress-gateway-bridge
                         :shape "UpdateIngressGatewayBridgeRequest" :location
                         common-lisp:nil :location-name "ingressGatewayBridge")
                        (source-failover-config :initarg
                         :source-failover-config :initform common-lisp:nil
                         :type
                         (common-lisp:or update-failover-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-request-source-failover-config
                         :shape "UpdateFailoverConfig" :location
                         common-lisp:nil :location-name
                         "sourceFailoverConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-request 'make-update-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "EgressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "IngressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-response common-lisp:nil
                       ((bridge :initarg :bridge :initform common-lisp:nil
                         :type (common-lisp:or bridge common-lisp:null)
                         :accessor struct-shape-update-bridge-response-bridge
                         :shape "Bridge" :location common-lisp:nil
                         :location-name "bridge"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-response 'make-update-bridge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge))
      (common-lisp:list
       (common-lisp:cons "Bridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-source-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-source-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (flow-source :initarg :flow-source :initform
                         common-lisp:nil :type
                         (common-lisp:or update-bridge-flow-source-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-source-request-flow-source
                         :shape "UpdateBridgeFlowSourceRequest" :location
                         common-lisp:nil :location-name "flowSource")
                        (network-source :initarg :network-source :initform
                         common-lisp:nil :type
                         (common-lisp:or update-bridge-network-source-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-source-request-network-source
                         :shape "UpdateBridgeNetworkSourceRequest" :location
                         common-lisp:nil :location-name "networkSource")
                        (source-name :initarg :source-name :initform
                         (common-lisp:error ":source-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-source-request-source-name
                         :shape "__string" :location "uri" :location-name
                         "sourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-source-request
                    'make-update-bridge-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source))
      (common-lisp:list
       (common-lisp:cons "FlowSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source))
      (common-lisp:list
       (common-lisp:cons "NetworkSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-source-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-source-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or bridge-source common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-source-response-source
                         :shape "BridgeSource" :location common-lisp:nil
                         :location-name "source"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-source-response
                    'make-update-bridge-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-state-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-state-request-bridge-arn
                         :shape "__string" :location "uri" :location-name
                         "bridgeArn")
                        (desired-state :initarg :desired-state :initform
                         (common-lisp:error ":desired-state is required") :type
                         (common-lisp:or desired-state common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-state-request-desired-state
                         :shape "DesiredState" :location common-lisp:nil
                         :location-name "desiredState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-state-request
                    'make-update-bridge-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-state-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-bridge-state-response-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (desired-state :initarg :desired-state :initform
                         common-lisp:nil :type
                         (common-lisp:or desired-state common-lisp:null)
                         :accessor
                         struct-shape-update-bridge-state-response-desired-state
                         :shape "DesiredState" :location common-lisp:nil
                         :location-name "desiredState"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bridge-state-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bridge-state-response
                    'make-update-bridge-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-egress-gateway-bridge-request common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-egress-gateway-bridge-request-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-egress-gateway-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-egress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-egress-gateway-bridge-request
                    'make-update-egress-gateway-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-egress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-egress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-egress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-encryption common-lisp:nil
                       ((algorithm :initarg :algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or algorithm common-lisp:null) :accessor
                         struct-shape-update-encryption-algorithm :shape
                         "Algorithm" :location common-lisp:nil :location-name
                         "algorithm")
                        (constant-initialization-vector :initarg
                         :constant-initialization-vector :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-encryption-constant-initialization-vector
                         :shape "__string" :location common-lisp:nil
                         :location-name "constantInitializationVector")
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-encryption-device-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "deviceId")
                        (key-type :initarg :key-type :initform common-lisp:nil
                         :type (common-lisp:or key-type common-lisp:null)
                         :accessor struct-shape-update-encryption-key-type
                         :shape "KeyType" :location common-lisp:nil
                         :location-name "keyType")
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-encryption-region :shape
                         "__string" :location common-lisp:nil :location-name
                         "region")
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-encryption-resource-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "resourceId")
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-encryption-role-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "roleArn")
                        (secret-arn :initarg :secret-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-encryption-secret-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "secretArn")
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-encryption-url :shape "__string"
                         :location common-lisp:nil :location-name "url"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-encryption 'make-update-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constant-initialization-vector))
      (common-lisp:list
       (common-lisp:cons "ConstantInitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-failover-config common-lisp:nil
                       ((failover-mode :initarg :failover-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or failover-mode common-lisp:null)
                         :accessor
                         struct-shape-update-failover-config-failover-mode
                         :shape "FailoverMode" :location common-lisp:nil
                         :location-name "failoverMode")
                        (recovery-window :initarg :recovery-window :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-failover-config-recovery-window
                         :shape "__integer" :location common-lisp:nil
                         :location-name "recoveryWindow")
                        (source-priority :initarg :source-priority :initform
                         common-lisp:nil :type
                         (common-lisp:or source-priority common-lisp:null)
                         :accessor
                         struct-shape-update-failover-config-source-priority
                         :shape "SourcePriority" :location common-lisp:nil
                         :location-name "sourcePriority")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-update-failover-config-state :shape
                         "State" :location common-lisp:nil :location-name
                         "state"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-failover-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-failover-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-failover-config 'make-update-failover-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-failover-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-failover-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-mode))
      (common-lisp:list
       (common-lisp:cons "FailoverMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-window))
      (common-lisp:list
       (common-lisp:cons "RecoveryWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-priority))
      (common-lisp:list
       (common-lisp:cons "SourcePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-failover-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-entitlement-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-entitlement-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or update-encryption common-lisp:null)
                         :accessor
                         struct-shape-update-flow-entitlement-request-encryption
                         :shape "UpdateEncryption" :location common-lisp:nil
                         :location-name "encryption")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         (common-lisp:error ":entitlement-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-entitlement-request-entitlement-arn
                         :shape "__string" :location "uri" :location-name
                         "entitlementArn")
                        (entitlement-status :initarg :entitlement-status
                         :initform common-lisp:nil :type
                         (common-lisp:or entitlement-status common-lisp:null)
                         :accessor
                         struct-shape-update-flow-entitlement-request-entitlement-status
                         :shape "EntitlementStatus" :location common-lisp:nil
                         :location-name "entitlementStatus")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-entitlement-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (subscribers :initarg :subscribers :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-entitlement-request-subscribers
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "subscribers"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-entitlement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-entitlement-request
                    'make-update-flow-entitlement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-status))
      (common-lisp:list
       (common-lisp:cons "EntitlementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-entitlement-response common-lisp:nil
                       ((entitlement :initarg :entitlement :initform
                         common-lisp:nil :type
                         (common-lisp:or entitlement common-lisp:null)
                         :accessor
                         struct-shape-update-flow-entitlement-response-entitlement
                         :shape "Entitlement" :location common-lisp:nil
                         :location-name "entitlement")
                        (flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-entitlement-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-entitlement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-entitlement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-entitlement-response
                    'make-update-flow-entitlement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement))
      (common-lisp:list
       (common-lisp:cons "Entitlement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-media-stream-request common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or media-stream-attributes-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-flow-media-stream-request-attributes
                         :shape "MediaStreamAttributesRequest" :location
                         common-lisp:nil :location-name "attributes")
                        (clock-rate :initarg :clock-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-media-stream-request-clock-rate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "clockRate")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-media-stream-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-media-stream-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (media-stream-name :initarg :media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-media-stream-request-media-stream-name
                         :shape "__string" :location "uri" :location-name
                         "mediaStreamName")
                        (media-stream-type :initarg :media-stream-type
                         :initform common-lisp:nil :type
                         (common-lisp:or media-stream-type common-lisp:null)
                         :accessor
                         struct-shape-update-flow-media-stream-request-media-stream-type
                         :shape "MediaStreamType" :location common-lisp:nil
                         :location-name "mediaStreamType")
                        (video-format :initarg :video-format :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-media-stream-request-video-format
                         :shape "__string" :location common-lisp:nil
                         :location-name "videoFormat"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-media-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-media-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-media-stream-request
                    'make-update-flow-media-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-rate))
      (common-lisp:list
       (common-lisp:cons "ClockRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-format))
      (common-lisp:list
       (common-lisp:cons "VideoFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-media-stream-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-media-stream-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (media-stream :initarg :media-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or media-stream common-lisp:null)
                         :accessor
                         struct-shape-update-flow-media-stream-response-media-stream
                         :shape "MediaStream" :location common-lisp:nil
                         :location-name "mediaStream"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-media-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-media-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-media-stream-response
                    'make-update-flow-media-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream))
      (common-lisp:list
       (common-lisp:cons "MediaStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-output-request common-lisp:nil
                       ((cidr-allow-list :initarg :cidr-allow-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-cidr-allow-list
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "cidrAllowList")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-destination
                         :shape "__string" :location common-lisp:nil
                         :location-name "destination")
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or update-encryption common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-encryption
                         :shape "UpdateEncryption" :location common-lisp:nil
                         :location-name "encryption")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (max-latency :initarg :max-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-max-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxLatency")
                        (media-stream-output-configurations :initarg
                         :media-stream-output-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMediaStreamOutputConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-media-stream-output-configurations
                         :shape "__listOfMediaStreamOutputConfigurationRequest"
                         :location common-lisp:nil :location-name
                         "mediaStreamOutputConfigurations")
                        (min-latency :initarg :min-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-min-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "minLatency")
                        (output-arn :initarg :output-arn :initform
                         (common-lisp:error ":output-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-output-arn
                         :shape "__string" :location "uri" :location-name
                         "outputArn")
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-update-flow-output-request-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "port")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol")
                        (remote-id :initarg :remote-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-remote-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "remoteId")
                        (sender-control-port :initarg :sender-control-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-sender-control-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "senderControlPort")
                        (sender-ip-address :initarg :sender-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-sender-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "senderIpAddress")
                        (smoothing-latency :initarg :smoothing-latency
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-smoothing-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "smoothingLatency")
                        (stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-output-request-stream-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "streamId")
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-request-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "vpcInterfaceAttachment"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-output-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-output-request
                    'make-update-flow-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-allow-list))
      (common-lisp:list
       (common-lisp:cons "CidrAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-output-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamOutputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-id))
      (common-lisp:list
       (common-lisp:cons "RemoteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smoothing-latency))
      (common-lisp:list
       (common-lisp:cons "SmoothingLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-output-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (output :initarg :output :initform common-lisp:nil
                         :type (common-lisp:or output common-lisp:null)
                         :accessor
                         struct-shape-update-flow-output-response-output :shape
                         "Output" :location common-lisp:nil :location-name
                         "output"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-output-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-output-response
                    'make-update-flow-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-request-flow-arn :shape
                         "__string" :location "uri" :location-name "flowArn")
                        (source-failover-config :initarg
                         :source-failover-config :initform common-lisp:nil
                         :type
                         (common-lisp:or update-failover-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-flow-request-source-failover-config
                         :shape "UpdateFailoverConfig" :location
                         common-lisp:nil :location-name "sourceFailoverConfig")
                        (maintenance :initarg :maintenance :initform
                         common-lisp:nil :type
                         (common-lisp:or update-maintenance common-lisp:null)
                         :accessor struct-shape-update-flow-request-maintenance
                         :shape "UpdateMaintenance" :location common-lisp:nil
                         :location-name "maintenance"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-request 'make-update-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-response common-lisp:nil
                       ((flow :initarg :flow :initform common-lisp:nil :type
                         (common-lisp:or flow common-lisp:null) :accessor
                         struct-shape-update-flow-response-flow :shape "Flow"
                         :location common-lisp:nil :location-name "flow"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-response 'make-update-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow))
      (common-lisp:list
       (common-lisp:cons "Flow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-source-request common-lisp:nil
                       ((decryption :initarg :decryption :initform
                         common-lisp:nil :type
                         (common-lisp:or update-encryption common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-decryption
                         :shape "UpdateEncryption" :location common-lisp:nil
                         :location-name "decryption")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (entitlement-arn :initarg :entitlement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-entitlement-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "entitlementArn")
                        (flow-arn :initarg :flow-arn :initform
                         (common-lisp:error ":flow-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-flow-arn
                         :shape "__string" :location "uri" :location-name
                         "flowArn")
                        (ingest-port :initarg :ingest-port :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-ingest-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "ingestPort")
                        (max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (max-latency :initarg :max-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-max-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxLatency")
                        (max-sync-buffer :initarg :max-sync-buffer :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-max-sync-buffer
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxSyncBuffer")
                        (media-stream-source-configurations :initarg
                         :media-stream-source-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          |__listOfMediaStreamSourceConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-media-stream-source-configurations
                         :shape "__listOfMediaStreamSourceConfigurationRequest"
                         :location common-lisp:nil :location-name
                         "mediaStreamSourceConfigurations")
                        (min-latency :initarg :min-latency :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-min-latency
                         :shape "__integer" :location common-lisp:nil
                         :location-name "minLatency")
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-protocol
                         :shape "Protocol" :location common-lisp:nil
                         :location-name "protocol")
                        (sender-control-port :initarg :sender-control-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-sender-control-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "senderControlPort")
                        (sender-ip-address :initarg :sender-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-sender-ip-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "senderIpAddress")
                        (source-arn :initarg :source-arn :initform
                         (common-lisp:error ":source-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-source-arn
                         :shape "__string" :location "uri" :location-name
                         "sourceArn")
                        (source-listener-address :initarg
                         :source-listener-address :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-source-listener-address
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceListenerAddress")
                        (source-listener-port :initarg :source-listener-port
                         :initform common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-source-listener-port
                         :shape "__integer" :location common-lisp:nil
                         :location-name "sourceListenerPort")
                        (stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-stream-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "streamId")
                        (vpc-interface-name :initarg :vpc-interface-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-vpc-interface-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcInterfaceName")
                        (whitelist-cidr :initarg :whitelist-cidr :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-flow-source-request-whitelist-cidr
                         :shape "__string" :location common-lisp:nil
                         :location-name "whitelistCidr")
                        (gateway-bridge-source :initarg :gateway-bridge-source
                         :initform common-lisp:nil :type
                         (common-lisp:or update-gateway-bridge-source-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-request-gateway-bridge-source
                         :shape "UpdateGatewayBridgeSourceRequest" :location
                         common-lisp:nil :location-name "gatewayBridgeSource"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-source-request
                    'make-update-flow-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption))
      (common-lisp:list
       (common-lisp:cons "Decryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-port))
      (common-lisp:list
       (common-lisp:cons "IngestPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sync-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxSyncBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-address))
      (common-lisp:list
       (common-lisp:cons "SourceListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-port))
      (common-lisp:list
       (common-lisp:cons "SourceListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-cidr))
      (common-lisp:list
       (common-lisp:cons "WhitelistCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-bridge-source))
      (common-lisp:list
       (common-lisp:cons "GatewayBridgeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-source-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-response-flow-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "flowArn")
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor
                         struct-shape-update-flow-source-response-source :shape
                         "Source" :location common-lisp:nil :location-name
                         "source"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-flow-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-flow-source-response
                    'make-update-flow-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-bridge-source-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-gateway-bridge-source-request-bridge-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "bridgeArn")
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-bridge-source-request-vpc-interface-attachment
                         :shape "VpcInterfaceAttachment" :location
                         common-lisp:nil :location-name
                         "vpcInterfaceAttachment"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-bridge-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-bridge-source-request
                    'make-update-gateway-bridge-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-instance-request common-lisp:nil
                       ((bridge-placement :initarg :bridge-placement :initform
                         common-lisp:nil :type
                         (common-lisp:or bridge-placement common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-instance-request-bridge-placement
                         :shape "BridgePlacement" :location common-lisp:nil
                         :location-name "bridgePlacement")
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-instance-request-gateway-instance-arn
                         :shape "__string" :location "uri" :location-name
                         "gatewayInstanceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-instance-request
                    'make-update-gateway-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-placement))
      (common-lisp:list
       (common-lisp:cons "BridgePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-instance-response common-lisp:nil
                       ((bridge-placement :initarg :bridge-placement :initform
                         common-lisp:nil :type
                         (common-lisp:or bridge-placement common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-instance-response-bridge-placement
                         :shape "BridgePlacement" :location common-lisp:nil
                         :location-name "bridgePlacement")
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-gateway-instance-response-gateway-instance-arn
                         :shape "__string" :location common-lisp:nil
                         :location-name "gatewayInstanceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-instance-response
                    'make-update-gateway-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-placement))
      (common-lisp:list
       (common-lisp:cons "BridgePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ingress-gateway-bridge-request common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-ingress-gateway-bridge-request-max-bitrate
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxBitrate")
                        (max-outputs :initarg :max-outputs :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-update-ingress-gateway-bridge-request-max-outputs
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxOutputs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ingress-gateway-bridge-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ingress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ingress-gateway-bridge-request
                    'make-update-ingress-gateway-bridge-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ingress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ingress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-outputs))
      (common-lisp:list
       (common-lisp:cons "MaxOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ingress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance common-lisp:nil
                       ((maintenance-day :initarg :maintenance-day :initform
                         common-lisp:nil :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor
                         struct-shape-update-maintenance-maintenance-day :shape
                         "MaintenanceDay" :location common-lisp:nil
                         :location-name "maintenanceDay")
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-maintenance-maintenance-scheduled-date
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceScheduledDate")
                        (maintenance-start-hour :initarg
                         :maintenance-start-hour :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-maintenance-maintenance-start-hour
                         :shape "__string" :location common-lisp:nil
                         :location-name "maintenanceStartHour"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-maintenance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-maintenance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-maintenance 'make-update-maintenance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-hour))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-maintenance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-interface common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (network-interface-ids :initarg :network-interface-ids
                         :initform
                         (common-lisp:error
                          ":network-interface-ids is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-interface-network-interface-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "networkInterfaceIds")
                        (network-interface-type :initarg
                         :network-interface-type :initform
                         (common-lisp:error
                          ":network-interface-type is required")
                         :type
                         (common-lisp:or network-interface-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpc-interface-network-interface-type
                         :shape "NetworkInterfaceType" :location
                         common-lisp:nil :location-name "networkInterfaceType")
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-role-arn :shape "__string"
                         :location common-lisp:nil :location-name "roleArn")
                        (security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-interface-security-group-ids :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds")
                        (subnet-id :initarg :subnet-id :initform
                         (common-lisp:error ":subnet-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-subnet-id :shape "__string"
                         :location common-lisp:nil :location-name "subnetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-interface 'make-vpc-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-type))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-interface-attachment common-lisp:nil
                       ((vpc-interface-name :initarg :vpc-interface-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-attachment-vpc-interface-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "vpcInterfaceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-interface-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-interface-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-interface-attachment 'make-vpc-interface-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-interface-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (network-interface-type :initarg
                         :network-interface-type :initform common-lisp:nil
                         :type
                         (common-lisp:or network-interface-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-vpc-interface-request-network-interface-type
                         :shape "NetworkInterfaceType" :location
                         common-lisp:nil :location-name "networkInterfaceType")
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-request-role-arn :shape
                         "__string" :location common-lisp:nil :location-name
                         "roleArn")
                        (security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-vpc-interface-request-security-group-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "securityGroupIds")
                        (subnet-id :initarg :subnet-id :initform
                         (common-lisp:error ":subnet-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-vpc-interface-request-subnet-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "subnetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-interface-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-interface-request 'make-vpc-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-type))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-request))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAddBridgeOutputRequest| ()
   '(trivial-types:proper-list add-bridge-output-request))
 (common-lisp:defun make-__listofaddbridgeoutputrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            add-bridge-output-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAddBridgeSourceRequest| ()
   '(trivial-types:proper-list add-bridge-source-request))
 (common-lisp:defun make-__listofaddbridgesourcerequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            add-bridge-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAddMediaStreamRequest| ()
   '(trivial-types:proper-list add-media-stream-request))
 (common-lisp:defun make-__listofaddmediastreamrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            add-media-stream-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAddOutputRequest| ()
   '(trivial-types:proper-list add-output-request))
 (common-lisp:defun make-__listofaddoutputrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list add-output-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBridgeOutput| ()
   '(trivial-types:proper-list bridge-output))
 (common-lisp:defun make-__listofbridgeoutput
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bridge-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBridgeSource| ()
   '(trivial-types:proper-list bridge-source))
 (common-lisp:defun make-__listofbridgesource
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bridge-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDestinationConfiguration| ()
   '(trivial-types:proper-list destination-configuration))
 (common-lisp:defun make-__listofdestinationconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            destination-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDestinationConfigurationRequest| ()
   '(trivial-types:proper-list destination-configuration-request))
 (common-lisp:defun make-__listofdestinationconfigurationrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            destination-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfEntitlement| ()
   '(trivial-types:proper-list entitlement))
 (common-lisp:defun make-__listofentitlement
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfGatewayNetwork| ()
   '(trivial-types:proper-list gateway-network))
 (common-lisp:defun make-__listofgatewaynetwork
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfGrantEntitlementRequest| ()
   '(trivial-types:proper-list grant-entitlement-request))
 (common-lisp:defun make-__listofgrantentitlementrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            grant-entitlement-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputConfiguration| ()
   '(trivial-types:proper-list input-configuration))
 (common-lisp:defun make-__listofinputconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputConfigurationRequest| ()
   '(trivial-types:proper-list input-configuration-request))
 (common-lisp:defun make-__listofinputconfigurationrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedBridge| ()
   '(trivial-types:proper-list listed-bridge))
 (common-lisp:defun make-__listoflistedbridge
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-bridge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedEntitlement| ()
   '(trivial-types:proper-list listed-entitlement))
 (common-lisp:defun make-__listoflistedentitlement
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedFlow| ()
   '(trivial-types:proper-list listed-flow))
 (common-lisp:defun make-__listoflistedflow
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-flow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedGateway| ()
   '(trivial-types:proper-list listed-gateway))
 (common-lisp:defun make-__listoflistedgateway
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedGatewayInstance| ()
   '(trivial-types:proper-list listed-gateway-instance))
 (common-lisp:defun make-__listoflistedgatewayinstance
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-gateway-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStream| ()
   '(trivial-types:proper-list media-stream))
 (common-lisp:defun make-__listofmediastream
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-stream))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamOutputConfiguration| ()
   '(trivial-types:proper-list media-stream-output-configuration))
 (common-lisp:defun make-__listofmediastreamoutputconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-output-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamOutputConfigurationRequest| ()
   '(trivial-types:proper-list media-stream-output-configuration-request))
 (common-lisp:defun make-__listofmediastreamoutputconfigurationrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-output-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamSourceConfiguration| ()
   '(trivial-types:proper-list media-stream-source-configuration))
 (common-lisp:defun make-__listofmediastreamsourceconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamSourceConfigurationRequest| ()
   '(trivial-types:proper-list media-stream-source-configuration-request))
 (common-lisp:defun make-__listofmediastreamsourceconfigurationrequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-source-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMessageDetail| ()
   '(trivial-types:proper-list message-detail))
 (common-lisp:defun make-__listofmessagedetail
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOffering| ()
   '(trivial-types:proper-list offering))
 (common-lisp:defun make-__listofoffering
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutput| () '(trivial-types:proper-list output))
 (common-lisp:defun make-__listofoutput
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReservation| ()
   '(trivial-types:proper-list reservation))
 (common-lisp:defun make-__listofreservation
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reservation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSetSourceRequest| ()
   '(trivial-types:proper-list set-source-request))
 (common-lisp:defun make-__listofsetsourcerequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list set-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSource| () '(trivial-types:proper-list source))
 (common-lisp:defun make-__listofsource
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTransportStream| ()
   '(trivial-types:proper-list transport-stream))
 (common-lisp:defun make-__listoftransportstream
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transport-stream))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTransportStreamProgram| ()
   '(trivial-types:proper-list transport-stream-program))
 (common-lisp:defun make-__listoftransportstreamprogram
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transport-stream-program))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcInterface| ()
   '(trivial-types:proper-list vpc-interface))
 (common-lisp:defun make-__listofvpcinterface
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcInterfaceRequest| ()
   '(trivial-types:proper-list vpc-interface-request))
 (common-lisp:defun make-__listofvpcinterfacerequest
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-interface-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integer| ()
   '(trivial-types:proper-list |__integer|))
 (common-lisp:defun make-__listof__integer
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__integer|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun make-__listof__string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__mapOf__string| () 'common-lisp:hash-table)
 (common-lisp:defun make-__mapof__string (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-bridge-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn outputs)
   (common-lisp:declare (common-lisp:ignorable bridge-arn outputs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-bridge-outputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/outputs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "AddBridgeOutputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-bridge-outputs))
(common-lisp:progn
 (common-lisp:defun add-bridge-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn sources)
   (common-lisp:declare (common-lisp:ignorable bridge-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-bridge-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "AddBridgeSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-bridge-sources))
(common-lisp:progn
 (common-lisp:defun add-flow-media-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn media-streams)
   (common-lisp:declare (common-lisp:ignorable flow-arn media-streams))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-media-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/mediaStreams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowMediaStreams"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-flow-media-streams))
(common-lisp:progn
 (common-lisp:defun add-flow-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn outputs)
   (common-lisp:declare (common-lisp:ignorable flow-arn outputs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-outputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/outputs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowOutputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-flow-outputs))
(common-lisp:progn
 (common-lisp:defun add-flow-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn sources)
   (common-lisp:declare (common-lisp:ignorable flow-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-flow-sources))
(common-lisp:progn
 (common-lisp:defun add-flow-vpc-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn vpc-interfaces)
   (common-lisp:declare (common-lisp:ignorable flow-arn vpc-interfaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-vpc-interfaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/vpcInterfaces"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowVpcInterfaces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-flow-vpc-interfaces))
(common-lisp:progn
 (common-lisp:defun create-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key egress-gateway-bridge
                     ingress-gateway-bridge name outputs placement-arn
                     source-failover-config sources)
   (common-lisp:declare
    (common-lisp:ignorable egress-gateway-bridge ingress-gateway-bridge name
     outputs placement-arn source-failover-config sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/bridges"
                                                        "CreateBridge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bridge))
(common-lisp:progn
 (common-lisp:defun create-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone entitlements
                     media-streams name outputs source source-failover-config
                     sources vpc-interfaces maintenance)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone entitlements media-streams name
     outputs source source-failover-config sources vpc-interfaces maintenance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/flows"
                                                        "CreateFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-flow))
(common-lisp:progn
 (common-lisp:defun create-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key egress-cidr-blocks name networks)
   (common-lisp:declare
    (common-lisp:ignorable egress-cidr-blocks name networks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/gateways"
                                                        "CreateGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-gateway))
(common-lisp:progn
 (common-lisp:defun delete-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn)
   (common-lisp:declare (common-lisp:ignorable bridge-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "DeleteBridge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bridge))
(common-lisp:progn
 (common-lisp:defun delete-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "DeleteFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-flow))
(common-lisp:progn
 (common-lisp:defun delete-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-arn))))
                                                        "DeleteGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-gateway))
(common-lisp:progn
 (common-lisp:defun deregister-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force gateway-instance-arn)
   (common-lisp:declare (common-lisp:ignorable force gateway-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-gateway-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateway-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-instance-arn))))
                                                        "DeregisterGatewayInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-gateway-instance))
(common-lisp:progn
 (common-lisp:defun describe-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn)
   (common-lisp:declare (common-lisp:ignorable bridge-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "DescribeBridge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bridge))
(common-lisp:progn
 (common-lisp:defun describe-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "DescribeFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-flow))
(common-lisp:progn
 (common-lisp:defun describe-flow-source-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-flow-source-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source-metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "DescribeFlowSourceMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-flow-source-metadata))
(common-lisp:progn
 (common-lisp:defun describe-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-arn))))
                                                        "DescribeGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-gateway))
(common-lisp:progn
 (common-lisp:defun describe-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-instance-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-gateway-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateway-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-instance-arn))))
                                                        "DescribeGatewayInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-gateway-instance))
(common-lisp:progn
 (common-lisp:defun describe-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-arn)
   (common-lisp:declare (common-lisp:ignorable offering-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-arn))))
                                                        "DescribeOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-offering))
(common-lisp:progn
 (common-lisp:defun describe-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-arn)
   (common-lisp:declare (common-lisp:ignorable reservation-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-arn))))
                                                        "DescribeReservation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-reservation))
(common-lisp:progn
 (common-lisp:defun grant-flow-entitlements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entitlements flow-arn)
   (common-lisp:declare (common-lisp:ignorable entitlements flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-grant-flow-entitlements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/entitlements"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "GrantFlowEntitlements"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'grant-flow-entitlements))
(common-lisp:progn
 (common-lisp:defun list-bridges
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bridges-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/bridges"
                                                        "ListBridges"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bridges))
(common-lisp:progn
 (common-lisp:defun list-entitlements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entitlements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/entitlements"
                                                        "ListEntitlements"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-entitlements))
(common-lisp:progn
 (common-lisp:defun list-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-flows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/flows"
                                                        "ListFlows"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-flows))
(common-lisp:progn
 (common-lisp:defun list-gateway-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateway-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/gateway-instances"
                                                        "ListGatewayInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gateway-instances))
(common-lisp:progn
 (common-lisp:defun list-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/gateways"
                                                        "ListGateways"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gateways))
(common-lisp:progn
 (common-lisp:defun list-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/offerings"
                                                        "ListOfferings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-offerings))
(common-lisp:progn
 (common-lisp:defun list-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reservations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/reservations"
                                                        "ListReservations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-reservations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-arn reservation-name start)
   (common-lisp:declare
    (common-lisp:ignorable offering-arn reservation-name start))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-purchase-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-arn))))
                                                        "PurchaseOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'purchase-offering))
(common-lisp:progn
 (common-lisp:defun remove-bridge-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn output-name)
   (common-lisp:declare (common-lisp:ignorable bridge-arn output-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-bridge-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-name))))
                                                        "RemoveBridgeOutput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-bridge-output))
(common-lisp:progn
 (common-lisp:defun remove-bridge-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn source-name)
   (common-lisp:declare (common-lisp:ignorable bridge-arn source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-bridge-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-name))))
                                                        "RemoveBridgeSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-bridge-source))
(common-lisp:progn
 (common-lisp:defun remove-flow-media-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn media-stream-name)
   (common-lisp:declare (common-lisp:ignorable flow-arn media-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-flow-media-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/mediaStreams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'media-stream-name))))
                                                        "RemoveFlowMediaStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-flow-media-stream))
(common-lisp:progn
 (common-lisp:defun remove-flow-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn output-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn output-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-flow-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-arn))))
                                                        "RemoveFlowOutput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-flow-output))
(common-lisp:progn
 (common-lisp:defun remove-flow-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn source-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn source-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-flow-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-arn))))
                                                        "RemoveFlowSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-flow-source))
(common-lisp:progn
 (common-lisp:defun remove-flow-vpc-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn vpc-interface-name)
   (common-lisp:declare (common-lisp:ignorable flow-arn vpc-interface-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-flow-vpc-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/vpcInterfaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vpc-interface-name))))
                                                        "RemoveFlowVpcInterface"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-flow-vpc-interface))
(common-lisp:progn
 (common-lisp:defun revoke-flow-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entitlement-arn flow-arn)
   (common-lisp:declare (common-lisp:ignorable entitlement-arn flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-flow-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/entitlements/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entitlement-arn))))
                                                        "RevokeFlowEntitlement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-flow-entitlement))
(common-lisp:progn
 (common-lisp:defun start-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/start/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "StartFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-flow))
(common-lisp:progn
 (common-lisp:defun stop-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/stop/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "StopFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-flow))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn egress-gateway-bridge
                     ingress-gateway-bridge source-failover-config)
   (common-lisp:declare
    (common-lisp:ignorable bridge-arn egress-gateway-bridge
     ingress-gateway-bridge source-failover-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "UpdateBridge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bridge))
(common-lisp:progn
 (common-lisp:defun update-bridge-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn network-output output-name)
   (common-lisp:declare
    (common-lisp:ignorable bridge-arn network-output output-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-name))))
                                                        "UpdateBridgeOutput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bridge-output))
(common-lisp:progn
 (common-lisp:defun update-bridge-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn flow-source network-source
                     source-name)
   (common-lisp:declare
    (common-lisp:ignorable bridge-arn flow-source network-source source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-name))))
                                                        "UpdateBridgeSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bridge-source))
(common-lisp:progn
 (common-lisp:defun update-bridge-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn desired-state)
   (common-lisp:declare (common-lisp:ignorable bridge-arn desired-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/state"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "UpdateBridgeState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bridge-state))
(common-lisp:progn
 (common-lisp:defun update-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn source-failover-config
                     maintenance)
   (common-lisp:declare
    (common-lisp:ignorable flow-arn source-failover-config maintenance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "UpdateFlow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-flow))
(common-lisp:progn
 (common-lisp:defun update-flow-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description encryption entitlement-arn
                     entitlement-status flow-arn subscribers)
   (common-lisp:declare
    (common-lisp:ignorable description encryption entitlement-arn
     entitlement-status flow-arn subscribers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/entitlements/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entitlement-arn))))
                                                        "UpdateFlowEntitlement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-flow-entitlement))
(common-lisp:progn
 (common-lisp:defun update-flow-media-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attributes clock-rate description
                     flow-arn media-stream-name media-stream-type video-format)
   (common-lisp:declare
    (common-lisp:ignorable attributes clock-rate description flow-arn
     media-stream-name media-stream-type video-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-media-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/mediaStreams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'media-stream-name))))
                                                        "UpdateFlowMediaStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-flow-media-stream))
(common-lisp:progn
 (common-lisp:defun update-flow-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-allow-list description destination
                     encryption flow-arn max-latency
                     media-stream-output-configurations min-latency output-arn
                     port protocol remote-id sender-control-port
                     sender-ip-address smoothing-latency stream-id
                     vpc-interface-attachment)
   (common-lisp:declare
    (common-lisp:ignorable cidr-allow-list description destination encryption
     flow-arn max-latency media-stream-output-configurations min-latency
     output-arn port protocol remote-id sender-control-port sender-ip-address
     smoothing-latency stream-id vpc-interface-attachment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-arn))))
                                                        "UpdateFlowOutput"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-flow-output))
(common-lisp:progn
 (common-lisp:defun update-flow-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key decryption description entitlement-arn
                     flow-arn ingest-port max-bitrate max-latency
                     max-sync-buffer media-stream-source-configurations
                     min-latency protocol sender-control-port sender-ip-address
                     source-arn source-listener-address source-listener-port
                     stream-id vpc-interface-name whitelist-cidr
                     gateway-bridge-source)
   (common-lisp:declare
    (common-lisp:ignorable decryption description entitlement-arn flow-arn
     ingest-port max-bitrate max-latency max-sync-buffer
     media-stream-source-configurations min-latency protocol
     sender-control-port sender-ip-address source-arn source-listener-address
     source-listener-port stream-id vpc-interface-name whitelist-cidr
     gateway-bridge-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-arn))))
                                                        "UpdateFlowSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-flow-source))
(common-lisp:progn
 (common-lisp:defun update-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-placement gateway-instance-arn)
   (common-lisp:declare
    (common-lisp:ignorable bridge-placement gateway-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateway-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-instance-arn))))
                                                        "UpdateGatewayInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-gateway-instance))
